{
  "hash": "a580355bb31d1618a9a8bdfa5696c1f4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"A tutorial of `ggplot2`\"\ndescription: \"This is a again a lesson on `ggplot2`\"\nauthor:\n  - name: \"Tuan Le Khac\"\n    url: https://lktuan.github.io/\ndate: 12-24-2023\ndate-modified: 06-29-2025\ncategories: [r, ggplot2, visualization]\nimage: ggplot2.png\ndraft: false\ncode-tools: true\ncode-fold: false\n---\n\n\n\n# 0 Preparation\n\nI need to install the following packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install CRAN packages\npkg_install =   c(\"ggplot2\", \"tibble\", \"tidyr\", \"forcats\", \"purrr\", \"prismatic\", \"corrr\",\n    \"cowplot\", \"ggforce\", \"ggrepel\", \"ggridges\", \"ggsci\", \"ggtext\", \"ggthemes\",\n    \"grid\", \"gridExtra\", \"patchwork\", \"rcartocolor\", \"scico\", \"showtext\",\n    \"shiny\", \"plotly\", \"highcharter\", \"echarts4r\")\ninstall.packages(pkg_install)\n```\n:::\n\n\n\nIn which:\n\n- `ggplot2`: part of the `tidyverse`;\n- `tidyverse`:\n  - `tibble`: mordern data frames;\n  - `dplyr`: data wrangling;\n  - `tidyr`: data cleaning;\n  - `forcats`: handling factors;\n- `corrr`: correlation matrices;\n- `cowplot`: composing ggplots;\n- `ggforce`: sina plots and other cool stuffs;\n- `ggrepel`: nice text labeling;\n- `ggridges`: rigde plots;\n- `ggsci`: nice color palettes;\n- `ggtext`: advanced text rendering;\n- `ggthemes`: additional themes;\n- `grid`: creating graphical objects;\n- `gridExtra`: additional functions for `grid` graphics;\n- `patchwork`: multiple panel plots;\n- `prismatic`: minipulating colors;\n- `rcartocolor`: great color palettes;\n- `scico`: perceptional uniform palettes;\n- `showtext`: custom fonts;\n- `shiny`: interactive applications;\n- `charter`, `echarts4r`, `ggiraph`, `highcharter`, `plotly`: interactive visualization.\n\nI was facing the error of installing devtools:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install from GitHub since not on CRAN\ninstall.packages('devtools')\ndevtools::install_github(\"JohnCoene/charter\")\n```\n:::\n\n\n\nI tried to update R to the latest version (commented the code as it would be run once):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate.packages(repos='http://cran.rstudio.com/', ask=FALSE, checkBuilt=TRUE)\n```\n:::\n\n\n\n--\\> Not worked.\n\n**Oops I was should be using \"'devtools'\" instead of \"devtools\"!!! Problem solved**\n\n# 1 The Dataset\n\nI was using the dataset: \"*National Morbidity and Mortality Air Pollution Study* (NMMAPS)\"\n\nInstall the `readr` first:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('readr')\n# install.packages(\"quarto\")\n```\n:::\n\n\n\n## 1.1 Import data\n\nThe `::` here call the namespace and can be used to access a function without loading the package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchic <- readr::read_csv(\"https://cedricscherer.com/data/chicago-nmmaps-custom.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 1461 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): city, season, month\ndbl  (6): temp, o3, dewpoint, pm10, yday, year\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\nview some data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble::glimpse(chic)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,461\nColumns: 10\n$ city     <chr> \"chic\", \"chic\", \"chic\", \"chic\", \"chic\", \"chic\", \"chic\", \"chic…\n$ date     <date> 1997-01-01, 1997-01-02, 1997-01-03, 1997-01-04, 1997-01-05, …\n$ temp     <dbl> 36.0, 45.0, 40.0, 51.5, 27.0, 17.0, 16.0, 19.0, 26.0, 16.0, 1…\n$ o3       <dbl> 5.659256, 5.525417, 6.288548, 7.537758, 20.760798, 14.940874,…\n$ dewpoint <dbl> 37.500, 47.250, 38.000, 45.500, 11.250, 5.750, 7.000, 17.750,…\n$ pm10     <dbl> 13.052268, 41.948600, 27.041751, 25.072573, 15.343121, 9.3646…\n$ season   <chr> \"Winter\", \"Winter\", \"Winter\", \"Winter\", \"Winter\", \"Winter\", \"…\n$ yday     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ month    <chr> \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\"…\n$ year     <dbl> 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(chic,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 10\n   city  date        temp    o3 dewpoint  pm10 season  yday month  year\n   <chr> <date>     <dbl> <dbl>    <dbl> <dbl> <chr>  <dbl> <chr> <dbl>\n 1 chic  1997-01-01  36    5.66    37.5  13.1  Winter     1 Jan    1997\n 2 chic  1997-01-02  45    5.53    47.2  41.9  Winter     2 Jan    1997\n 3 chic  1997-01-03  40    6.29    38    27.0  Winter     3 Jan    1997\n 4 chic  1997-01-04  51.5  7.54    45.5  25.1  Winter     4 Jan    1997\n 5 chic  1997-01-05  27   20.8     11.2  15.3  Winter     5 Jan    1997\n 6 chic  1997-01-06  17   14.9      5.75  9.36 Winter     6 Jan    1997\n 7 chic  1997-01-07  16   11.9      7    20.2  Winter     7 Jan    1997\n 8 chic  1997-01-08  19    8.68    17.8  33.1  Winter     8 Jan    1997\n 9 chic  1997-01-09  26   13.4     24    12.1  Winter     9 Jan    1997\n10 chic  1997-01-10  16   10.4      5.38 24.8  Winter    10 Jan    1997\n```\n\n\n:::\n:::\n\n\n\n# 3 The `{ggplot2}` package\n\nA ggplot is built up from a few basic elements:\n\n1.  **Data**;\n2.  **Geometries** `geom_`: the geometric shape (hình dạng) that will represent the data;\n3.  **Aesthetics** `aes_`: aesthetics (thẩm mỹ) of the geometric or statistical objects, such as postition, color, size, shape, and transparency;\n4.  **Scales** `scale_`: map between the data and the aesthetics dimensions (ánh xạ từ dữ liệu đến đồ thị), such as data range to plot width or factor values to colors;\n5.  **Statistical transformations** `stat_`: statistical summaries (thống kê) of data, such as quantitles, fitted curves, and sums;\n6.  **Coordinate system** `coord_`: the transformation used for mapping data coordinates into the plane of the data rectangles (hệ tọa độ);\n7.  **Facets** `facet_`: the arrangement of the data into a grid of plots;\n8.  **Visual themes** `theme()`: the overall visual defaults of a plot, such as background, grids, axes, default typeface, sizes and colors (tông).\n\nEach of above elements can be ignored, but can be also called multiple times.\n\n# 4 A default `ggplot`\n\nLoad the package for ability to use the functionality:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n# library(tidyverse) # can also be imported from the tidy-universe!\n```\n:::\n\n\n\nA default `ggplot` needs three things that you have to specify: the *data*, *aesthetics*, and a *geometry.*:\n\n-   starting to define a plot by using `ggplot(data = df)`;\n\n-   if we want to plot (in most cases) 2 variables, we must add *positional aesthetics* `aes(x = var1, y = var2);`\n\nNotice that `data` was mentioned outside the scope of `aes()`, while variables are being mentioned inside `aes()`.\n\nFor instance:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(g <- ggplot(chic, aes(x = date, y = temp)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nJust a blank panel, because `{ggplot2}` *does not know* how we plot data \\~ we still need to provide geometry. `ggplot2` allows use to store the `ggobject` to a variable inside the environment - in this case, `g` - which can be extended later on (by adding more layers). We can print out the plot to the R interactive but putting all inside the `()`.\n\nWe have different geometries to use (called `geoms` because each function usually starts with `geom_`). For e.g., if we want to plot a scatter plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nalso a line plot which our managers always like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\ncool but the plot does not look optimal, we can also using mutiple layers of geometry, where the magic and fun start.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# it's the same if we write g + geom_line() + geom_point()\ng + geom_point() + geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## 4.1 Change properties of geometries\n\nTurn all points to large fire-red diamonds:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_point(color = 'firebrick', shape = 'diamond', size = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-note}\n- `ggplot2` can unsderstand when we use `color`, `colour`, as well as `col`;\n\n- We can use the [default color](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) or [hex](https://www.techopedia.com/definition/29788/color-hex-code), or even RGB/RGBA with `rgb()`. For example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_point(color = \"#b22222\", shape = \"diamond\", size = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\ng + geom_point(color = rgb(178, 34, 34, maxColorValue = 255), shape = \"diamond\", size = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n:::\n\n\n:::\n\n## 4.1 Replacing the default `ggplot2` theme\n\nCalling eg `theme_bw()` using `theme_set()`, all following plots will have same blank'n'white theme.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_bw())\n\ng + geom_point(color = 'firebrick')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n`theme()` is also a useful function to modify all kinds of theme elements (texts, rectangles, and lines).\n\n# 5 Axes\n\n## 5.1 Change axis titles\n\nUse `labs()` to assign character string for each lable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n    geom_point(color = 'firebrick') +\n    labs(x = 'Year', y = 'Temperature (°F)')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\nCan also using `xlab()` and `ylab()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  xlab(\"Year\") +\n  ylab(\"Temperature (°F)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nNot only the degree symbol before F, but also the supper script:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = expression(paste(\"Temperature (\", degree ~ F, \")\"^\"(Hey, why should we use metric units?!)\")))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## 5.2 Increase space between axis and axis titles.\n\nOverwrite the default `element_text()` within the `theme()` call:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n    geom_point(color = 'firebrick') +\n    labs(x = 'Year', y = 'Temperature (°F)') +\n    theme(axis.title.x = element_text(vjust = 0, size = 30),\n         axis.title.y = element_text(vjust = 2, size = 30))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n`vjust` refer to vertical alignment. We can also change the distance by specifying the margin of both text elements.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (°F)\") +\n  theme(axis.title.x = element_text(margin = margin(t = 10), size = 15),\n        axis.title.y = element_text(margin = margin(r = 10), size = 15))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n`r` and `t` in the `margin` are **top** and **right**. Margin has 4 arguments: `margin(t, r, b, l)`. A good way to remember the order of the margin sides is “***t-r***-ou-***b-l***-e”.\n\n## 5.3 Change aesthetics of the axis titles\n\nAgain, we use `theme()` function and modify the `axis.tile` and/or the subordinated elements `axis.tile.x` and `axis.tile.y` . Within `element_text()` we can modify the default of `size`, `color`, and `face`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (°F)\") +\n  theme(axis.title = element_text(size = 15, color = \"firebrick\",\n                                  face = \"italic\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\nthe `face` argument can be used to make the font `bold`, `italic`, or even `bold.italic`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (°F)\") +\n  theme(axis.title.x = element_text(color = \"sienna\", size = 15, face = 'bold'),\n        axis.title.y = element_text(color = \"orangered\", size = 15, face = 'bold.italic'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\nYou could also use a combination of `axis.title` and `axis.title.y`, since `axis.title.x` inherits the values from `axis.title`. Eg:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (°F)\") +\n  theme(axis.title = element_text(color = \"sienna\", size = 15),\n        axis.title.y = element_text(color = \"orangered\", size = 15))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\nOne can modify some properties for both axis titles and other only for one or properties for each on its own:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (°F)\") +\n  theme(axis.title = element_text(color = \"sienna\", size = 15, face = \"bold\"),\n        axis.title.y = element_text(face = \"bold.italic\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n## 5.4 Change aesthetics of axis text\n\nSimilar to the `title`, we can change the appearance of the axis text (number indeed) by using `axis.text` and/or the subordinated elements `axis.text.x` and `axis.text.y`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n    geom_point(color = 'firebrick') +\n    labs(x= \"Year\", y = expression(paste(\"Temperature(\",degree ~ F, \")\"))) +\n    theme(axis.text = element_text(color = \"dodgerblue\", size = 13),\n         axis.text.x = element_text(face = 'italic'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n## 5.5 Rotate axis text\n\nSpecifying an `angle` help us to rotate any text elements. With `hjust` and `vjust` we can adjust the position of text afterwards horizontally (0 = left, 1 = right), and vertically (0 = top, 1 = bottom).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n    geom_point(color = 'firebrick') +\n    labs(x= \"Year\", y = expression(paste(\"Temperature(\",degree ~ F, \")\"))) +\n    theme(axis.text.x = element_text(angle = 50, vjust = 1, hjust = 1, size = 13))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 50 means 50 degrees, not % =)))\n```\n:::\n\n\n\n## 5.6 Remove axis text & ticks\n\nRarely a reason to do this but this is how it works.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (°F)\") +\n  theme(axis.ticks.y = element_blank(),\n        axis.text.y = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\nIf you want to get rid of a theme element, the element is always `element_blank`.\n\n## 5.7 Remove Axis Titles\n\nWe could again use `element_blank()` but it is way simpler to just remove the label in the `labs()` (or `xlab()`) call:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = NULL, y = \"\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\nNote that `NULL` removes the element (similarly to `element_blank()`) while empty quotes `\"\"` will keep the spacing for the axis title and simply print nothing.\n\n## 5.8 Limit axis range\n\nSome time you want to take a closer look at some range of you data. You can do this without subsetting your data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (°F)\") +\n  ylim(c(0, 50))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 777 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\nAlternatively you can use `scale_y_continuous(limits = c(0, 50))` (subset) or `coord_cartesian(ylim = c(0, 50))`. The former removes all data points outside the range while the second adjusts the visible area (zooming) and is similar to `ylim(c(0, 50))` (subset).\n\n## 5.9 Force plot to start at the origin\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchic_high <- dplyr::filter(chic, temp > 25, o3 > 20)\n\nggplot(chic_high, aes(x = temp, y = o3)) +\n  geom_point(color = \"darkcyan\") +\n  labs(x = \"Temperature higher than 25°F\",\n       y = \"Ozone higher than 20 ppb\") +\n  expand_limits(x = 0, y = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\nUsing `coord_cartesian(xlim = c(0,NA), ylim = c(0,NA))` will lead to the same result.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchic_high <- dplyr::filter(chic, temp > 25, o3 > 20)\n\nggplot(chic_high, aes(x = temp, y = o3)) +\n  geom_point(color = \"darkcyan\") +\n  labs(x = \"Temperature higher than 25°F\",\n       y = \"Ozone higher than 20 ppb\") +\n  coord_cartesian(xlim = c(0, NA), ylim = c(0, NA))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\nBut we can also force it to *literally* start at the origin!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic_high, aes(x = temp, y = o3)) +\n  geom_point(color = \"darkcyan\") +\n  labs(x = \"Temperature higher than 25°F\",\n       y = \"Ozone higher than 20 ppb\") +\n  expand_limits(x = 0, y = 0) +\n  coord_cartesian(expand = FALSE, clip = \"off\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\nThe argument `clip = \"off\"` in any coordinate system, always starting with `coord_*`, allows to draw outside of the panel area. Call it here to make sure that the tick marks at `c(0, 0)` are not cut.\n\n## 5.10 Axes with same scaling\n\nUse `coord_equal()` with default `ratio = 1` to ensure the units are equally scaled on the x-axis and on the y-axis. We can set the aspect ratio of a plot with `coord_fixed()` or `coord_equal()`. Both use `aspect = 1` (1:1) as a default.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = temp, y = temp + rnorm(nrow(chic), sd = 20))) +\n  geom_point(color = \"sienna\") +\n  labs(x = \"Temperature (°F)\", y = \"Temperature (°F) + random noise\") +\n  xlim(c(0, 100)) + ylim(c(0, 150)) +\n  coord_fixed()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 51 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\nRatios higher than one make units on the y axis longer than units on the x-axis, and vice versa:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = temp, y = temp + rnorm(nrow(chic), sd = 20))) +\n  geom_point(color = \"sienna\") +\n  labs(x = \"Temperature (°F)\", y = \"Temperature (°F) + random noise\") +\n  xlim(c(0, 100)) + ylim(c(0, 150)) +\n  coord_fixed(ratio = 1/5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 53 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n## 5.11 Use a function to alter labels\n\nIn case you want to format (eg adding % sign) without change the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = NULL) +\n  scale_y_continuous(label = function(x) {return(paste(x, \"Degrees Fahrenheit\"))})\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n# 6 Titles\n\n## 6.1 Add a title\n\nWe can add a title via `ggtitle()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n    geom_point(color = \"firebrick\") +\n    labs(x = \"Year\", y = \"Temperature (°F)\") +\n    ggtitle(\"Temperatures in Chicago\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\nAlternatively, we can use `labs()`, where we can add serveral arguments \\~ metadata of the plot (a sub-title, a caption, and a tag):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n    geom_point(color = \"firebrick\") +\n    labs(x = \"Year\", y = \"Temperature (°F)\",\n        title = \"Temperatures in Chicago\",\n        subtitle = \"Seasonal pattern of daily temperatures from 1997 to 2001\",\n        caption = \"Data: NMMAPS\",\n        tag = \"Fig 1\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n## 6.2 Make title bold & add a space at the baseline\n\n## 6.3 Adjust the position of titles\n\n## 6.4 Use a non-traditional font in your title\n\n## 6.5 Change spacing in multi-line text\n\n# 7. Legends\n\n## 7.1 Turn off the legend\n\n## 7.2 Remove legend titles\n\n## 7.3 Change legend position\n\n## 7.4 Change legend direction\n\n## 7.5 Change style of the legend title\n\n## 7.6 Change legend title\n\n## 7.7 Change order of legend keys\n\n## 7.8 Change legend labels\n\n## 7.9 Change background boxes in the legend\n\n## 7.10 Change size of legend symbols\n\n## 7.11 Leave a layer of the legend\n\n## 7.12 Manuallt adding legend items\n\n## 7.13 Use other legend styles\n\n# 8 Backgrounds & Grid lines\n\n## 8.1 Change the panel background color\n\n## 8.2 Change grid lines\n\n## 8.3 Change spacing of grid lines\n\n## 8.4 Change the plot background color\n\n# 9 Margins\n\n# 10 Multi-panel plots\n\n## 10.1 Create a small multiples based on two variables\n\n## 10.2 Create a small mutilples based on one variables\n\n## 10.3 Allow axes to roan free\n\n# 11. Colors\n\n\n# 12. Themes\n\n# 13. Lines\n\n# 14. Text\n\n# 15. Coordinates\n\n# 16. Chart Types\n\n# 17. Ribbons (AUC, CI, etc.)\n\n# 18. Smoothings\n\n# 19. Interactive Plots\n\n# 20. Remarks, Tipps & Resources\n\n# References\n\n- Source: <https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/>;\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}