{
  "hash": "f28edcfb7c63b57c416126ad30ce5258",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"A tuturial of ggplot2\"\ndescription: \"This is a again a lesson on ggplot2\"\nauthor:\n  - name: \"Tuan Le Khac\"\n    url: https://lktuan.github.io/\ndate: 12-24-2023\ncategories: [R, ggplot2, Data Visualization] # self-defined categories\n# citation: \n#   url: https://github.com/lktuan/lktuan.github.io/blog/2023-12-24_post/\nimage: ggplot2.png\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n\nformat: \n  html: \n    code-fold: true\n    code-summary: \"Show the code\"\n    code-line-numbers: true\ncss: html/styles.scss\neditor: visual\n---\n\n\n# 0. Preparation\n\nI need to install the following packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# | eval: false\n# install CRAN packages\npkg_install =   c(\"ggplot2\", \"tibble\", \"tidyr\", \"forcats\", \"purrr\", \"prismatic\", \"corrr\", \n    \"cowplot\", \"ggforce\", \"ggrepel\", \"ggridges\", \"ggsci\", \"ggtext\", \"ggthemes\", \n    \"grid\", \"gridExtra\", \"patchwork\", \"rcartocolor\", \"scico\", \"showtext\", \n    \"shiny\", \"plotly\", \"highcharter\", \"echarts4r\")\n# install.packages(pkg_install)\n```\n:::\n\n\nI was facing the error of installing devtools\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# | eval: false\n# install from GitHub since not on CRAN\n# install.packages('devtools')\n# devtools::install_github(\"JohnCoene/charter\")\n```\n:::\n\n\nI tried to update R to the latest version (commented the code as it would be run once)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# | eval: false\n# update.packages(repos='http://cran.rstudio.com/', ask=FALSE, checkBuilt=TRUE)\n```\n:::\n\n\n--\\> Not worked\n\n**Oops I was should be using \"'devtools'\" instead of \"devtools\"!!! Problem solved**\n\n# 1. The Dataset\n\nI was using the dataset: \"*National Morbidity and Mortality Air Pollution Study*¬†(NMMAPS)\"\n\nInstall the readr first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# | eval: false\n# install.packages('readr')\n# install.packages(\"quarto\")\n```\n:::\n\n\n#### Import data\n\n\": :\" here call the namespace and can be used to access a function without loading the package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchic <- readr::read_csv(\"https://cedricscherer.com/data/chicago-nmmaps-custom.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 1461 Columns: 10\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr  (3): city, season, month\ndbl  (6): temp, o3, dewpoint, pm10, yday, year\ndate (1): date\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nview some data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble::glimpse(chic)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,461\nColumns: 10\n$ city     <chr> \"chic\", \"chic\", \"chic\", \"chic\", \"chic\", \"chic\", \"chic\", \"chic‚Ä¶\n$ date     <date> 1997-01-01, 1997-01-02, 1997-01-03, 1997-01-04, 1997-01-05, ‚Ä¶\n$ temp     <dbl> 36.0, 45.0, 40.0, 51.5, 27.0, 17.0, 16.0, 19.0, 26.0, 16.0, 1‚Ä¶\n$ o3       <dbl> 5.659256, 5.525417, 6.288548, 7.537758, 20.760798, 14.940874,‚Ä¶\n$ dewpoint <dbl> 37.500, 47.250, 38.000, 45.500, 11.250, 5.750, 7.000, 17.750,‚Ä¶\n$ pm10     <dbl> 13.052268, 41.948600, 27.041751, 25.072573, 15.343121, 9.3646‚Ä¶\n$ season   <chr> \"Winter\", \"Winter\", \"Winter\", \"Winter\", \"Winter\", \"Winter\", \"‚Ä¶\n$ yday     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18‚Ä¶\n$ month    <chr> \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\"‚Ä¶\n$ year     <dbl> 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1‚Ä¶\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(chic,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 √ó 10\n   city  date        temp    o3 dewpoint  pm10 season  yday month  year\n   <chr> <date>     <dbl> <dbl>    <dbl> <dbl> <chr>  <dbl> <chr> <dbl>\n 1 chic  1997-01-01  36    5.66    37.5  13.1  Winter     1 Jan    1997\n 2 chic  1997-01-02  45    5.53    47.2  41.9  Winter     2 Jan    1997\n 3 chic  1997-01-03  40    6.29    38    27.0  Winter     3 Jan    1997\n 4 chic  1997-01-04  51.5  7.54    45.5  25.1  Winter     4 Jan    1997\n 5 chic  1997-01-05  27   20.8     11.2  15.3  Winter     5 Jan    1997\n 6 chic  1997-01-06  17   14.9      5.75  9.36 Winter     6 Jan    1997\n 7 chic  1997-01-07  16   11.9      7    20.2  Winter     7 Jan    1997\n 8 chic  1997-01-08  19    8.68    17.8  33.1  Winter     8 Jan    1997\n 9 chic  1997-01-09  26   13.4     24    12.1  Winter     9 Jan    1997\n10 chic  1997-01-10  16   10.4      5.38 24.8  Winter    10 Jan    1997\n```\n\n\n:::\n:::\n\n\n# 3. The {ggplot2} Package\n\nA ggplot is built up from a few basic elements:\n\n1.  Data;\n2.  Geometries `geom_`: the geometric shape (h√¨nh h·ªçc) that will represent the data;\n3.  Aesthetics `aes_`: aesthetics (t√≠nh th·∫©m m·ªπ) of the geometric or statistical objects, such as postition, color, size, shape, and transparency;\n4.  Scales `scale_`: map between the data and the aesthetics dimensions (√°nh x·∫° t·ª´ d·ªØ li·ªáu ƒë·∫øn ƒë·ªì th·ªã), such as data range to plot width or factor values to colors;\n5.  Statistical transformations `stat_`: statistical summaries (th·ªëng k√™) of data, such as quantitles, fitted curves, and sums;\n6.  Coordinate system `coord_`: the transformation used for mapping data coordinates into the plane of the data rectangles (h·ªá t·ªça ƒë·ªô);\n7.  Facets `facet_`: the arrangement of the data into a grid of plots;\n8.  Visual themes `theme()`: the overall visual defaults of a plot, such as background, grids, axes, default typeface, sizes and colors (t√¥ng).\n\nüöÄ**Kh√¥ng nh·∫•t thi·∫øt m·ªôt ph·∫ßn t·ª≠ ƒë∆∞·ª£c g·ªçi, v√† ch√∫ng c≈©ng c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi nhi·ªÅu l·∫ßn.**\n\n# 4. A default `ggplot`\n\nLoad the package for ability to use the functionality:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\nA default ggplot needs three things that you have to specify: the¬†*data*,¬†*aesthetics*, and a¬†*geometry.*\n\n-   starting define a plot by using `ggplot(data = df)`;\n\n-   if we want to plot (in most cases) 2 variables, we must add *positional aesthetics* `aes(x = var1, y = var2);`\n\n**üöÄData ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p *b√™n ngo√†i*`aes()`, trong khi ƒë√≥ bi·∫øn/variables ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p *b√™n trong*`aes()`.**\n\nV√≠ d·ª•:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(g <- ggplot(chic, aes(x = date, y = temp)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nJust a blank panel, because `{ggplot2}` *does not know* how we plot data \\~ we still need to provide geometry.\n\n**üöÄ`ggplot2` cho ph√©p ch√∫ng ta l∆∞u `ggobject` th√†nh m·ªôt bi·∫øn, trong tr∆∞·ªùng h·ª£p n√†y l√† `g` . Ch√∫ng ta c√≥ th·ªÉ m·ªü r·ªông `g` b·∫±ng c√°ch th√™m c√°ch layers v·ªÅ sau.**\n\n**üöÄB·∫±ng c√°ch d√πng d·∫•u `()`, ch√∫ng ta c√≥ th·ªÉ *in* ngay object ƒë∆∞·ª£c g√°n ra.**\n\nMany different geometries to use (called `geoms` because each function usually starts with `geom_`). For e.g., if we want to plot a scatter plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nalso a lineplot which our managers always like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\ncool but the plot does not look optimal, we can also using mutiple layers of geometry, where the magic and fun start.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_point() + geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# it's the same if we write g + geom_line() + geom_point() \n```\n:::\n\n\n### Change properties of geometries\n\nTurn all points to large fire-red diamonds:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_point(color = 'firebrick', shape = 'diamond', size = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n**üöÄ `ggplot2` hi·ªÉu khi ch√∫ng ta d√πng `color`, `colour`, c≈©ng nh∆∞ `col`.**\n\n**üê±‚ÄçüèçC√≥ th·ªÉ d√πng [m√†u m·∫∑c ƒë·ªãnh](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) ho·∫∑c [m√†u hex](https://www.techopedia.com/definition/29788/color-hex-code), ho·∫∑c th·∫≠m ch√≠ l√† m√†u RGB/RGBA v·ªõi h√†m `rgb()`. V√≠ d·ª•:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_point(color = \"#b22222\", shape = \"diamond\", size = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\ng + geom_point(color = rgb(178, 34, 34, maxColorValue = 255), shape = \"diamond\", size = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n:::\n\n\n#### Replacing the default `ggplot2` theme\n\nCalling eg `theme_bw()` using `theme_set()`, all following plots will have same blank'n'white theme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_bw())\n\ng + geom_point(color = 'firebrick')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n**üöÄ`theme()` is also a useful function to modify all kinds of theme elements (texts, rectangles, and lines).**\n\n# 5. Axes\n\n#### Change Axis Titles\n\nUse `labs()` to assign character string for each lable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n    geom_point(color = 'firebrick') +\n    labs(x = 'Year', y = 'Temperature (¬∞F)')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nCan also using `xlab()` and `ylab()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  xlab(\"Year\") +\n  ylab(\"Temperature (¬∞F)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nüê±‚ÄçüèçNot only the degree symbol before F, but also the supper script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = expression(paste(\"Temperature (\", degree ~ F, \")\"^\"(Hey, why should we use metric units?!)\")))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n#### Increase space between Axis and Axis Titles.\n\nOverwrite the default `element_text()` within the `theme()` call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n    geom_point(color = 'firebrick') +\n    labs(x = 'Year', y = 'Temperature (¬∞F)') +\n    theme(axis.title.x = element_text(vjust = 0, size = 30),\n         axis.title.y = element_text(vjust = 2, size = 30))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n`vjust` refer to vertical alignment. We can also change the distance by specifying the margin of both text elements.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (¬∞F)\") +\n  theme(axis.title.x = element_text(margin = margin(t = 10), size = 15),\n        axis.title.y = element_text(margin = margin(r = 10), size = 15))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n`r` and `t` in the `margin` are **top** and **right**. Margin has 4 arguments: `margin(t, r, b, l)`.\n\nüöÄA good way to remember the order of the margin sides is ‚Äú***t-r***-ou-***b-l***-e‚Äù.\n\n#### Change Aesthetics of the Axis Titles\n\nAgain, we use `theme()` function and modify the `axis.tile` and/or the subordinated elements `axis.tile.x` and `axis.tile.y` . Within `element_text()` we can modify the default of `size`, `color`, and `face`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (¬∞F)\") +\n  theme(axis.title = element_text(size = 15, color = \"firebrick\",\n                                  face = \"italic\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nthe `face` argument can be used to make the font `bold`, `italic`, or even `bold.italic`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (¬∞F)\") +\n  theme(axis.title.x = element_text(color = \"sienna\", size = 15, face = 'bold'),\n        axis.title.y = element_text(color = \"orangered\", size = 15, face = 'bold.italic'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nüê±‚ÄçüèçYou could also use a combination of `axis.title` and `axis.title.y`, since `axis.title.x` inherits the values from `axis.title`. Eg:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (¬∞F)\") +\n  theme(axis.title = element_text(color = \"sienna\", size = 15),\n        axis.title.y = element_text(color = \"orangered\", size = 15))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nOne can modify some properties for both axis titles and other only for one or properties for each on its own:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(chic, aes(x = date, y = temp)) +\n  geom_point(color = \"firebrick\") +\n  labs(x = \"Year\", y = \"Temperature (¬∞F)\") +\n  theme(axis.title = element_text(color = \"sienna\", size = 15, face = \"bold\"),\n        axis.title.y = element_text(face = \"bold.italic\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n#### Change Aesthetics of Axis Text\n\n# 6. Titles\n\n# 7. Legends\n\n# 8. Backgrounds & Grid Lines\n\n# 9. Margins\n\n# 10. Multi-panel Plots\n\n# 11. Colors\n\n# 12. Themes\n\n# 13. Lines\n\n# 14. Text\n\n# 15. Coordinates\n\n# 16. Chart Types\n\n# 17. Ribbons (AUC, CI, etc.)\n\n# 18. Smoothings\n\n# 19. Interactive Plots\n\n# 20. Remarks, Tipps & Resources\n\n# References\n\nSource: <https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/>",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}