{
  "hash": "21b181821d6b05b32bb78c59218af92a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Observable Framework try-out\"\ndescription: \"My first Observable Framework project\"\nauthor:\n  - name: \"Tuan Le Khac\"\n    url: https://lktuan.github.io/\ncategories: [Dashboard, Observable] \ndate: 06-19-2024\ndate-modified: 06-19-2024\nimage: \"\"\ncode-tools: true\ncode-fold: show\ncode-annotations: hover\ndraft: false\ncss: html/styles.scss\nfig-cap-location: bottom\neditor: visual\n\nformat:\n  html:\n    code-overflow: wrap\n---\n\nI've heard that Quarto supported Observable natively since version 1.4 (?), thus decided to give it a try. Could not agree more with their slogan:\n\n> The best dashboards are built with `code`.\n\nThis is my [repo](https://github.com/lktuan/first-observable-project) for the practice.\n\n# Inititate a new Project\n\nThe prerequisite is we must have [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) installed on our machine. Running `npm -v`, I know that I have version `10.5.0` installed.\n\nWe first create a folder and navigate to it:\n\n```{.bash}\n#| eval: false\n#| echo: true\nmkdir first-observable-project\ncd first-observable-project\n```\n\nThen simply run this command to initiate the project:\n```{.bash}\n#| eval: false\n#| echo: true\nnpm init \"@observablehq\"\n```\n\nWe gotta fill some basic params:\n```{.bash}\n#| eval: false\n#| echo: true\n┌   observable create  v1.5.1\n│\n◇  Where to create your project?\n│  hi-observable\n│\n◇  What to title your project?\n│  Hi Observable\n│\n◇  Include sample files to help you get started?\n│  Yes, include sample files\n│\n◇  Install dependencies?\n│  Yes, via npm\n│\n◇  Initialize git repository?\n│  No\n│\n◇  Installed! 🎉\n│\n◇  Next steps… ──────╮\n│                    │\n│  cd hi-observable  │\n│  npm run dev       │\n│                    │\n├────────────────────╯\n│\n└  Problems? https://observablehq.com/framework/getting-started\n```\n\nWe can now easilly build the app with `npm run dev`, and access out dashboard via `http://127.0.0.1:3000/`. Let's play a little bit, we can modify the `h1` tags in `docs\\index.md`, then the dashboard will be updated once we save the file, instantly. Cool!\n\n::: {layout-ncol=1}\n![Home page layout](ojs_fig_1.png){width=100%}\n:::\n\n# Write first Data Loader\n\nIn Observable project we can write Data Loader in JavaScript, Python, R or any other languages. Data Loader helps you to (1) minimize file sizes and (2) reduce client side processing.\n\nA data loader file has the name like: `dataloader.data_extension.engine_extension`. For example, with the American weather forecast API we can have 2 kind of Data Loader as below:\n\n**Javascript 🟨**:\n\n\n```{javascript, filename = \"forecast.json.js\"}\n//| eval: false\nconst longitude = -122.47;\nconst latitude = 37.8;\n\nasync function json(url) {\n  const response = await fetch(url, {headers: {\"User-Agent\": \"(observablehq.com, support@observablehq.com)\"}});\n  if (!response.ok) throw new Error(`fetch failed: ${response.status}`);\n  return await response.json();\n}\n\nconst station = await json(`https://api.weather.gov/points/${latitude},${longitude}`);\nconst forecast = await json(station.properties.forecastHourly);\n\nprocess.stdout.write(JSON.stringify(forecast));\n```\n\n\n**Python 🐍**:\n\n::: {#6eab7b10 .cell execution_count=1}\n``` {.python .cell-code}\nimport json\nimport requests\nimport sys\n\nlongitude = -122.47\nlatitude = 37.80\n\nstation = requests.get(f\"https://api.weather.gov/points/{latitude},{longitude}\").json()\nforecast = requests.get(station[\"properties\"][\"forecastHourly\"]).json()\n\njson.dump(forecast, sys.stdout)\n```\n:::\n\n\nRun the data loader:\n```{.bash}\n#| eval: false\n#| echo: true\nnode hi-observable\\docs\\data\\forecast.json.js\n\n# or\n\npython hi-observable\\docs\\data\\forecast.json.py\n```\n\n# SQL in Observable Framework\n\n# Grids, Cards, and Themes\n\n# Deployment a Project\n\n# Imports: from npm, local files, remote URLs, and lazy loading\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}