{
  "hash": "7faa6850d78267eb2bcce0bbb6fad70d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Hi Docker 🐳\"\ndescription: \"A single-member full-stack data team me learning Docker 😂\"\nauthor:\n  - name: \"Tuan Le Khac\"\n    url: https://lktuan.github.io/\ncategories: [Docker, Python] \ndate: 06-24-2024\ndate-modified: 06-25-2024\nimage: docker.png\ncode-tools: true\ncode-fold: show\ncode-annotations: hover\ndraft: false\ncss: html/styles.scss\nfig-cap-location: bottom\neditor: visual\n\nformat:\n  html:\n    code-overflow: wrap\n---\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\nXuất phát là dân Kinh tế và hiện tại đi theo hướng DS, mình không giỏi làm việc với các công cụ phát triển phần mềm, Docker là một trong số đó. Tuy nhiên trong một dự án Data của team, mình cần sử dụng các công vụ như Airflow, Airbyte hay DBT. Hầu hết các setup đều cần Docker. Do đó thì, phải học thôi!\n\nMình học tập theo video [\"Hướng dẫn từ A-Z tự xây dựng ứng dụng với Docker\"](https://www.youtube.com/watch?v=Gh1Sgknc6Fg&t=358s) của anh [**Việt Nguyễn AI**](https://www.youtube.com/@vietnh1009).\n:::\n\n::: {.column width=\"10%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"50%\"}\n![VS Code-song 😪](vs_cot_song.png){width=\"100%\"}\n:::\n\n::::\n\n# Introduction / Docker Desktop / Docker Image vs Docker Container\n\n- Cách cài đặt: trên trang get started, phiên bản Window (rất dễ để mình follow do mình cũng xài Win).\n- Nhắc lại về Docker Image và Docker Container: giống như Class và Object trong OOP, Image chỉ cho chúng ta biết một cách lý thuyết về thực thể đó, khi dựa vào lý thuyết đó tạo ra một Container thì chũng ta mới có một thực thể dự vào lý thuyết đó.\n- Trước Docker Image, còn có Dockerfile (giống như công thức nấu ăn) giúp định nghĩa một số phương thức tạo ra Image.\n\n::: {layout-ncol=\"1\"}\n![Image vs Container ~ Class vs Object](class_vs_object.png){width=\"100%\"}\n:::\n\n# Docker tutorial\n\nThực hành theo tutorial trên Docker Desktop: \"How do I run a container?\"\n\n:::{.callout-tip}\nXem nội dung của một file thông qua powershell:\n```bash\ncat file_name\n```\nTrong trường hợp thực hành của mình là\n\n```bash\ncd welcome-to-docker\ncat .\\Dockerfile\n```\n:::\n\nNội dung Dockerfile:\n\n```md\n# Start your image with a node base image\nFROM node:18-alpine \n# Mỗi custome docker image đều dựa vào một base image, như một class con kế thừa một class cha. Nơi tìm Docker Image: Docker Hub.\n\n# The /app directory should act as the main application directory\nWORKDIR /app\n# Chúng ta làm việc ở bên trong thư mục nào (nếu không đề cập thì sẽ tạo trong một thư mục mặc định)\n\n# Copy the app package and package-lock.json file\nCOPY package*.json ./\n# Copy các file trong máy vào bên trong Docker Image - file này chắc là file cấu hình\n\n# Copy local directories to the current local directory of our docker image (/app)\nCOPY ./src ./src\nCOPY ./public ./public\n# Copy các thư mục source\n\n# Install node packages, install serve, build the app, and remove dependencies at the end\nRUN npm install \\\n    && npm install -g serve \\\n    && npm run build \\\n    && rm -fr node_modules\n# Run, cài đặt các thư viện, package\n\nEXPOSE 3000\n# Mở một cổng ở trong Docker container, sau này chúng ta sẽ kết nối cổng này với một cổng trong máy của chúng ta.\n\n# Start the app using serve command\nCMD [ \"serve\", \"-s\", \"build\" ]\n# Chúng ta muốn chạy lệnh gì trong CMD, chỉ một lệnh CMD (lệnh cuối cùng) sẽ được sử dụng trong một Dockerfile.\n```\n\nBuild fist image:\n\n```bash\ndocker build -t welcome-to-docker .\n```\n\nBreaking down this command:\n\n> The -t flag tags your image with a name. (welcome-to-docker in this case). And the . lets Docker know where it can find the Dockerfile.\n\n# Tự xây dựng Docker Image để huấn luyện mô hình AI\n\nMình có một file python đơn giản, huấn luyện một mô hình Random forest để nhận diện hoa diễn vĩ từ bộ `iris` dataset với thư viện `sklearn` như sau:\n\n::: {#ed8f099a .cell execution_count=1}\n``` {.python .cell-code}\n# importing required libraries\n# importing Scikit-learn library and datasets package\nfrom sklearn import datasets\n# Splitting arrays or matrices into random train and test subsets\nfrom sklearn.model_selection import train_test_split\n# importing random forest classifier from assemble module\nfrom sklearn.ensemble import RandomForestClassifier\n# importing scaler\nfrom sklearn.preprocessing import StandardScaler\n# metrics are used to find accuracy or error\nfrom sklearn.metrics import accuracy_score \n\n# Loading the iris plants dataset (classification)\niris = datasets.load_iris()\n# dividing the datasets into two parts i.e. training datasets and test datasets\nX = iris.data[:, [2, 3]]\ny = iris.target\n# i.e. 70 % training dataset and 30 % test datasets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state=0)\n\n\nscaler = StandardScaler()\nx_train = scaler.fit_transform(X_train)\nx_test = scaler.transform(X_test)\n\nmodel = RandomForestClassifier()\nmodel.fit(x_train, y_train)\ny_pred = model.predict(x_test)\n\nfor pred, label in zip(y_pred, y_test):\n    print(\"Prediction: {}. Label: {}\".format(pred, label))\n\nprint(\"Accuracy: %.2f\" % accuracy_score(y_test, y_pred))\n```\n:::\n\n\nMình xây dựng `Dockerfile` một cách đơn giản như sau:\n\n\n```{md filename=\"Dockerfile\"}\nFROM ubuntu\n```\n\n\nRun một docker container (container vừa run sẽ lập tức exit):\n\n```bash\ndocker run image_name container_name\n```\n\nNếu muốn \"chui\" vào bên trong container:\n\n```bash\ndocker run -it image_name container_name bash\n```\n`-it` nghĩa là chúng ta chạy container dưới **interactive** mode, `bash` nghĩa là chạy trong **bash** mode, chúng ta có thể thực hiện các câu lệnh bash từ đây:\n\n# Giới thiệu về script Python\n\n# Tìm Base Image trên Docker Hub\n\n# Cài đặt các thư viện trong Docker Image\n\n# Copy dữ liệu từ host vào Docker Image\n\n# Câu lệnh CMD trong Dockerfile\n\n# End\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}