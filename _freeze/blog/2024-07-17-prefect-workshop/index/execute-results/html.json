{
  "hash": "7b3619a9a3bc6a19494d28e514f3e17c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"A Prefect Workshop\"\ndescription: \"by Dr. Adam Hill in PyData London 2024\"\nauthor:\n  - name: \"Tuan Le Khac\"\n    url: https://lktuan.github.io/\ncategories: [python, pydata, prefect] \ndate: 07-17-2024\ndate-modified: 07-17-2024\nimage: adam_hill.png\ncode-tools: true\ncode-fold: show\ncode-annotations: hover\ndraft: false\ncss: html/styles.scss\nfig-cap-location: bottom\neditor: visual\nformat:\n  html:\n    code-overflow: wrap\n---\n\nüéû Video source: [Dr. Adam Hill - Empower Your Projects with Prefect's Pipeline Magic | PyData London 2024](https://www.youtube.com/watch?v=yIDBsHwTaa8&list=PLGVZCDnMOq0rrhYTNedKKuJ9716fEaAdK&index=4)\n\n‚õè Github repo: <https://github.com/Cadarn/PyData-Prefect-Workshop>\n\n# goals\n\nby end of this session you will:\n\n- understand what Prefect is;\n- build and execute tasks and flows;\n- have schedules flow using deployment;\n- have a grasp what else can be done;\n- have some fun.\n\n# prefect overview\n\njust simple as using jupyter notebook, you only need to use decorators (`@task` and `@flow`) to designate functions as **task** for **flow**. you need to breakdown your \"notebook\" into \"code chunks\" and organize to get them done.\n\n::: {#3aa32d45 .cell execution_count=1}\n``` {.python .cell-code}\nfrom prefect import task, flow\n\n@task\ndef my_task():\n  print(\"hello, i am a task!\")\n\n@flow\ndef my_flow():\n  my_task()\n```\n:::\n\n\n# jump to the workshop\n\nclone the repo, have docker compose up and running. then explore `http://localhost:8000/get_tweet`, this is shown which i have yet no idea:\n\n```json\n{\n  \"tweet_id\": 570306133677760500,\n  \"airline_sentiment\": \"neutral\",\n  \"airline_sentiment_confidence\": 1,\n  \"airline\": \"Virgin America\",\n  \"name\": \"cairdin\",\n  \"text\": \"@VirginAmerica What @dhepburn said.\",\n  \"retweet_count\": 0,\n  \"tweet_timestamp\": \"2015-02-24T11:35:52-08:00\",\n  \"tweet_coord\": -1,\n  \"loop\": 1\n}\n```\n\nthe first thing you need to do is telling where the Prefect API is gonna live. currently it runs on free tier of the their cloud server (?) and now we config it to run in the localhost (?):\n\n```bash\nprefect config set PREFECT_API_URL=\"http://127.0.0.1:4200/api\"\n```\n\nthen we gonna reset the database, do some config then can start the server. please note that if you are using window, you need to add `Scripts` variable to environment variables also, the value of the path can be found when you install Prefect by `pip`:\n\n```bash\nprefect server database reset -y\nprefect config set PREFECT_API_DATABASE_CONNECTION_URL=\"postgresql+asyncpg://postgres:password@localhost:5432/prefect_server\"\nprefect config view --show-sources\nprefect server start\n```\n\nbelow is my initial dashboard, there is nothing!\n\n:::{layout-ncol=\"1\"}\n![Prefect Dashboard](initial_prefect_server.png)\n:::\n\n## e01 my first flow\n\nthe basic component of prefect is `task` and `flow`. these are decorators to funtions we want to run. we can name and log easily:\n\n```{.python filename=\"e01.py\"}\n# Example of processing some data\nfrom prefect import task, flow\n\n\n@task(name=\"Addition operator\")\ndef add(a, b):\n    return a + b\n\n\n@task(name=\"Squaring operator\")\ndef square_num(num):\n    if True:\n        raise ValueError\n    return num ** 2\n\n\n@flow(log_prints=True, name=\"My first simple flow\")\ndef add_and_square(a: int = 2, b: int = 3):\n    add_result = add(a, b)\n    square_result = square_num(add_result)\n    print(f\"({a} + {b}) squared = {square_result}\")\n\n\nif __name__ == \"__main__\":\n    add_and_square(4, 8)\n\n```\n\n## e02a sentiment pipeline v1\n\n## e02b sentiment pipeline v2\n\n## e03a kafka tweet publisher\n\n## e03b kafka tweet deployment\n\n## e04 sentiment pipeline v3\n\n# further reading\n\n1. [Prefect vs Airflow on Reddit](https://www.reddit.com/r/dataengineering/comments/oqbiiu/airflow_vs_prefect/)\n\nB√¨nh lu·∫≠n b·ªüi **u/alexisprince**:\n\n> T√¥i ƒëang s·ª≠ d·ª•ng song song Airflow v√† Prefect (A cho scheduling, P cho execution), P ƒë∆∞·ª£c s·ª≠ d·ª•ng khi y√™u c·∫ßu v·ªÅ hi·ªáu nƒÉng t√≠nh to√°n v√† ph·∫ßn scheduler c·ªßa A v·∫´n ch∆∞a th·ªÉ b·ªã thay th·∫ø.\n> \n> L·ª£i th·∫ø c·ªßa A l√† ƒë√£ qu√° ph·ªï bi·∫øn, d·ªÖ t√¨m h∆∞·ªõng d·∫´n, d·ªÖ tuy·ªÉn ng∆∞·ªùi cho chuy√™n m√¥n. Y·∫øu ƒëi·ªÉm l√† A ƒë√£ qu√° c≈©, kh√¥ng c√≤n ph√π h·ª£p cho dynamic workflow v√† modern data env. H∆°n n·ªØa A lu√¥n best fit khi s·ª≠ d·ª•ng chung v·ªõi Astronomer, ngo√†i ra kh√° kh√≥ d√πng.\n> \n> P hi·ªán ƒë·∫°i h∆°n, cung c·∫•p nhi·ªÅu modern execution models, DAG ƒë∆∞·ª£c x√°c ƒë·ªãnh t·∫°i runtime do ƒë√≥ dynamic h∆°n.\n> \n> Prefer P h∆°n, better modularization of code.\n\nB√¨nh lu·∫≠n b·ªüi **u/ChrisHC05**:\n\n> Tao ƒë√£ ƒë√°nh gi√° Airflow, Dagster, Argo v√† Prefect m·∫•y th√°ng nay.\n> \n> Airflow th√¨ ƒë√£ gi√†, tuy nhi√™n t√†i li·ªáu, h∆∞·ªõng d·∫´n r·∫•t phong ph√∫.\n> \n> Dagster c√≥ v·∫ª g·∫∑p nhi·ªÅu v·∫•n ƒë·ªÅ v·ªõi Production.\n> \n> Prefect c√≥ c·ªông ƒë·ªìng ph√°t tri·ªÉn, support, s·ª≠a l·ªói active.\n> \n> V·∫≠y n√™n t√¥i ch·ªâ ƒë√°nh gi√° cao hai th·∫±ng Argo v√† Prefect. Argo kh√°c bi·ªát m·ªôt c√°ch m·∫°nh m·∫Ω, config ƒë∆∞·ª£c vi·∫øt d∆∞·ªõi d·∫°ng YAML, ch·∫°y tr√™n c·ª•m Kubernetes, v√† vi·ªác vi·∫øt DAG kh√¥ng ph·ª• thu·ªôc v√†o m·ªôt ng√¥n ng·ªØ l·∫≠p tr√¨nh n√†o. Argo (t·∫°i th·ªùi ƒëi·ªÉm ƒë√≥) c≈©ng ƒëang ph√°t tri·ªÉn m·ªôt module ki·ªÉu event listening, from outside, nh∆∞ Sensor c·ªßa Airflow, th·ª© m√† Prefect thi·∫øu (workaround l√† call Prefect GraphQL-API).\n> \n> N·∫øu ƒë√£ c√≥ s·∫µn infra l√† K8S, khuy·∫øn ngh·ªã Argo, kh√¥ng ch·ªâ l√† orchestration m√† c√≤n l√† m·ªôt h·ªá sinh th√°i support t·ª´ event responding t·ªõi CI/CD. Nh∆∞ng learning curve th√¨ steep nh√©. N√≥ c√≥ nhi·ªÅu ti·ªÅm nƒÉng v√¨ gi·ªù th√¨ ph·∫ßn m·ªÅm n√†o c≈©ng c·∫ßn dockerized c·∫£, t√≠nh tr·ª´u t∆∞·ª£ng cao h∆°n. \"And IT in general is all about abstraction to make complicated things easier.\"\n> \n> V·∫≠y n√™n:\n> \n> - N·∫øu c√≥ s·∫µn c·ª•m K8S: d√πng Argo\n> - N·∫øu kh√¥ng: d√πng Prefect\n\n2. [Airflow Vs. Prefect: Full Breakdown! by The Data Guy](https://www.youtube.com/watch?v=XrZegcm1ftw)\n3. [Adam Hill's blog](https://www.horsewithapointyhat.com/posts/being-a-data-scientist-in-a-post-truth-world/)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}