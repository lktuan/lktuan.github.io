{
  "hash": "34ebd5496b352e493ea27e21a0ee6c5f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Reactive dashboard with Shiny in Python\"\ndescription: \"tutorial by TalkPython\"\nauthor:\n  - name: \"Tuan Le Khac\"\n    url: https://lktuan.github.io/\ncategories: [math] \nimage: python_shiny.jpg\ndate: 09-09-2024\ndate-modified: 11-08-2024\ntoc: true\nformat:\n  html:\n    code-overflow: wrap\n---\n\n# 1. Set up & play with a template\n\nAfter creating a `.venv` - virtual environment, activating it, we can try a template with the command `shiny create --template dashboard --mode express --github posit-dev/py-shiny-templates`. The neccesary code, data, css formating will be downloaded to the repository.\n\n![Creating app using template](shiny_create.png)\n\nFollow the instruction and when the installation is done, we can click the *RUN* button on `app.py` or run: `shiny run .\\dashboard\\app.py` and the dashboard can be accessed to the port `8000` of the localhost. \n\n![Sample dashboard](sample_dashboard.png)\n\nThis gives us a vague understanding of how a shiny project works. Dive into this, we will delete all the code and start over to build a dashboard ourselves from scratch.\n\n# 2. Build from the scratch\n\n## simple `ui`\n\nThis is good start as we provide content for some basic elements (`h1`, `p` - just like HTML)\n\n::: {#27dd5ccb .cell execution_count=1}\n``` {.python .cell-code}\nfrom shiny.express import ui\n\nui.h1(\"My Dashboard\")\n\nui.p(\"This is sometext\")\n```\n:::\n\n\n![Header and paragraph](ui_simple_elements.png)\n\n## let's `render` something\n\n::: {#fccd7ea1 .cell execution_count=2}\n``` {.python .cell-code}\nfrom shiny.express import ui, render\nfrom pathlib import Path\n\nimport pandas as pd\n\nfile_path = Path(__file__).parent / \"penguins.csv\"\ndf = pd.read_csv(file_path)\n\n@render.data_frame\ndef data():    \n    return df\n```\n:::\n\n\nShiny app is **reactive**, as we provide the rendering command, the dashboard will be updated.\n\n![Shiny app is reactive](ui_the_app_is_reactive.png)\n\n## let's create a filter, `input`\n\n::: {#5c1f9a0c .cell execution_count=3}\n``` {.python .cell-code}\nfrom shiny.express import ui, render, input\nfrom pathlib import Path\nimport pandas as pd\n\nfile_path = Path(__file__).parent / \"penguins.csv\"\ndf = pd.read_csv(file_path)\nui.input_slider(\"mass\", \"Max body mass\", 2000, 8000, 6000)\n\n@render.data_frame\ndef data():    \n    return df[df['body_mass_g'] < input.mass()]\n```\n:::\n\n\n## and create a plot with `plotly`\n\n::: {#ca78ff4c .cell execution_count=4}\n``` {.python .cell-code}\nimport plotly.express as px\n@render_plotly\ndef plot():\n    df_subset = df[df['body_mass_g'] < input.mass()] # we add this filter to make sure this plot and the table above are presenting the same data\n    return px.scatter(df_subset, x=\"bill_depth_mm\", y = \"bill_length_mm\")\n```\n:::\n\n\nNow we are ready to explore more on the layouts of our **Dashboard**, or **Application layouts**.\n\n# 3. Basic User Interfaces\n\nThe documentation of Shiny layouts can be accessed at: <https://shiny.posit.co/py/layouts/>, there are many types of layout:\n\n- `Navbars`: nagivation bar to navigate our app;\n- `Sidebars`: a layout of sidebar on one side (for input), and large dashboard on the other side;\n- `Tabs`: like a multiple pager report;\n- Panels & Cards: for floating content;\n- Arrange Elements: arranging the ordering elements.\n\nFor example, below code - in Shiny Express - will create a sidebar layout:\n\n::: {#ecc6d463 .cell execution_count=5}\n``` {.python .cell-code}\nfrom shiny.express import ui\n\nwith ui.sidebar(bg=\"#f8f8f8\"):  # context manager\n    \"Sidebar\"  \n\n\"Main content\"  \n```\n:::\n\n\nWe define the content of the sidebar under *with* statement, other rendering under sidebar context will be display in the large remaining area. For eg, putting the header, slicer in the sidebar:\n\n::: {#e619d470 .cell execution_count=6}\n``` {.python .cell-code}\nwith ui.sidebar(bg=\"#f8f8f8\"):  # context manager\n    ui.h1(\"My Dashboard\")\n    ui.p(\"This is sometext\")\n    ui.input_slider(\"mass\", \"Max body mass\", 2000, 8000, 6000)\n\n\"Main content\"\n```\n:::\n\n\nOur dashboard will look like: \n\n![Sidebar example](sidebar_example.png)\n\n\n# 4. Reactivity\n\n# 5. Reactive effects and events\n\n# 6. Advanced User Interfaces\n\n# 7. Publishing\n\n# 8. Wrap up\n\n# Sources\n\n1. <https://training.talkpython.fm/courses/details/reactive-web-dashboards-with-shiny-for-data-science>;\n2. <https://talkpython.github.io/reactive-web-dashboards-with-shiny-course/>;\n3. <https://shiny.posit.co/py/>;\n4. <https://shiny.posit.co/py/templates/dashboard/index.html>;\n5. <https://medium.com/berk-orbay/deploying-shinypy-0fa449a019e0>\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}