{
  "hash": "6da50fc479fa326f12ca67a2071cbd28",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Data Science Project with Mamba, Python, and VS Code on Window\"\ndescription: \"In search for the best environment & dependencies management tool for data project\"\nauthor:\n  - name: \"Tuan Le Khac\"\n    url: https://lktuan.github.io/\ncategories: [python] \nimage: mamba.png\ndate: 11-04-2024\ndate-modified: 11-04-2024\ntoc: true\ncode-fold: true\nformat:\n  html:\n    code-overflow: wrap\n---\n\n# Vì sao mà Mamba?\n\nLà một non-tech data coder, mình vẫn loay hoay việc setup một dự án có thể được tái sử dụng và dễ dàng deploy, đặc biệt là với dự án dạng data - khi mà DS/DA sẽ làm việc nhiều với notebook - rất anti production.\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n![Arggg! Cơn đau đầu của non-tech làm data, nguồn ảnh [Analytics Vidhya](https://www.analyticsvidhya.com/blog/2023/03/choosing-the-right-python-environment-tool-for-your-next-project/)](meme_top.png)\n:::\n\n::: {.column width=\"40%\"}\n![](meme_bottom.png)\n:::\n\n::::\n\nMình tìm hiểu một số công cụ và dưới đây là so sánh:\n\n1. `Mamba` ✅\n\n+ Ưu điểm:\n\n  - Nhanh hơn Conda nhiều lần\n  - Tương thích hoàn toàn với Conda\n  - Quản lý được cả Python và non-Python dependencies\n  - Tích hợp tốt với notebooks\n\n2. `Poetry`\n\n+ Ưu điểm:\n\n  - Dependency resolution tốt\n  - Lock file chính xác\n\n+ Nhược điểm:\n\n  - Khó xử lý non-Python dependencies\n  - Cần thêm setup cho notebook kernels\n  - Không phù hợp lắm với data science\n\n1. `venv`\n\n- Quá đơn giản cho data science\n- Không xử lý được dependencies phức tạp\n- Cần nhiều cấu hình thủ công\n\n4. `pipenv`\n\n- Tương tự Poetry nhưng ít tính năng hơn\n- Không phù hợp với data science\n\n5. `uv`\n\n- Mới và nhanh\n- Chưa đủ chín muồi cho data science\n- Thiếu nhiều tính năng cần thiết\n\nXem ra `mamba` có vẻ ổn nhất, hãy đào sâu hơn về ưu điểm của nó:\n\n1. Xử lý dependencies phức tạp\n\n- Data science thường cần nhiều thư viện với dependencies phức tạp (numpy, pandas, scipy, pytorch...)\n- Mamba giải quyết dependencies nhanh và hiệu quả hơn Conda\n- Xử lý tốt các thư viện có binary dependencies (như CUDA)\n\n2. Quản lý môi trường kernel cho notebooks\n\n- Tự động tích hợp với Jupyter notebooks\n- Dễ dàng switch giữa các môi trường trong notebook\n- Không cần cấu hình thêm cho notebook kernels\n\nOke giờ hãy thử xem làm thế nào để tổ chức phát triển một dự án với mamba - VS Code trên Window.\n\n# Hướng dẫn Cài đặt và Sử dụng Mamba với VS Code trên Windows\n\n## 1. Cài đặt Mamba trên Windows\n\n### Cách 1: Tải trực tiếp\n\n- Tải Mambaforge cho Windows từ: <https://github.com/conda-forge/miniforge#mambaforge>\n- Chạy file installer và làm theo hướng dẫn.\n\n### Cách 2: Dùng Windows Terminal/PowerShell\n\n```bash\nwget https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Windows-x86_64.exe -OutFile mambaforge.exe\nstart /wait \"\" mambaforge.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\\Mambaforge\n```\n\n## 2. Tích hợp với VS Code\n\n### Cài đặt Extensions\n\n1. Python (Microsoft)\n2. Jupyter (Microsoft)\n\n### Tạo và Cấu hình Môi trường\n\nTạo file `environment.yml`:\n\n```yaml\nname: ds-project\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - python=3.10\n  - ipykernel\n  - pandas\n  - numpy\n  - matplotlib\n  - scikit-learn\n  - jupyter\n```\n\nTạo môi trường từ file:\n\n```bash\nmamba env create -f environment.yml\n```\n\n## 3. Cấu hình VS Code\n\n### Chọn Python Interpreter\n\n1. Mở Command Palette (`Ctrl + Shift + P`)\n2. Tìm \"Python: Select Interpreter\"\n3. Chọn môi trường Mamba vừa tạo\n\n### Cấu hình Notebooks\n\n- VS Code tự động nhận diện kernel từ môi trường Mamba\n- Kernel có thể được chọn ở góc phải trên của notebook\n\n## 4. Cấu trúc Project Đề Xuất\n\n```md\nproject/\n│\n├── .vscode/                      # VS Code settings\n│   ├── settings.json\n│   └── launch.json\n│\n├── data/\n│   ├── raw/\n│   └── processed/\n│\n├── notebooks/\n│   ├── 01_exploration.ipynb\n│   └── 02_analysis.ipynb\n│\n├── src/\n│   └── processing/\n│       ├── __init__.py\n│       └── data_processing.py\n│\n├── environment.yml\n├── .gitignore\n└── README.md\n```\n\n## 5. Cấu hình VS Code Settings\n\nTạo file `.vscode/settings.json`:\n\n```json\n{\n    \"python.defaultInterpreterPath\": \"${env:USERPROFILE}\\\\Mambaforge\\\\envs\\\\ds-project\\\\python.exe\",\n    \"jupyter.notebookFileRoot\": \"${workspaceFolder}\",\n    \"python.analysis.extraPaths\": [\"${workspaceFolder}/src\"],\n    \"python.formatting.provider\": \"black\",\n    \"editor.formatOnSave\": true,\n    \"ruff.enable\": true,\n    \"ruff.format.args\": [\"--config=pyproject.toml\"],\n    \"ruff.lint.args\": [\"--config=pyproject.toml\"],\n    \"mypy.enabled\": true,\n    \"mypy.configFile\": \"pyproject.toml\"\n}\n```\n\n## 6. Cấu hình Development Tools\n\n### 6.1 Cài đặt Development Dependencies\n\nCập nhật `environment.yml`:\n\n```yaml\nname: ds-project\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - python=3.10\n  - ipykernel\n  - pandas\n  - numpy\n  - matplotlib\n  - scikit-learn\n  - jupyter\n  # Dev dependencies\n  - black\n  - ruff\n  - mypy\n  - pre-commit\n  - nbqa\n  - jupytext\n```\n\n### 6.2 Cấu hình pyproject.toml\n\nTạo file `pyproject.toml`:\n\n```toml\n[tool.black]\nline-length = 88\ntarget-version = [\"py310\"]\ninclude = '\\.pyi?$'\n\n[tool.ruff]\nline-length = 88\ntarget-version = \"py310\"\nselect = [\n    \"E\",  # pycodestyle\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"UP\", # pyupgrade\n]\nignore = []\n\n[tool.ruff.isort]\nknown-first-party = [\"src\"]\n\n[tool.mypy]\npython_version = \"3.10\"\nwarn_return_any = true\nwarn_unused_configs = true\ndisallow_untyped_defs = true\ncheck_untyped_defs = true\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"pandas.*\",\n    \"numpy.*\",\n    \"matplotlib.*\",\n    \"seaborn.*\"\n]\nignore_missing_imports = true\n```\n\n### 6.3 Cấu hình Pre-commit\n\nTạo file `.pre-commit-config.yaml`:\n\n```yaml\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n    -   id: check-json\n    -   id: check-added-large-files\n        args: ['--maxkb=5000']\n\n-   repo: https://github.com/psf/black\n    rev: 24.1.1\n    hooks:\n    -   id: black\n\n-   repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.2.1\n    hooks:\n    -   id: ruff\n        args: [--fix]\n    -   id: ruff-format\n\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.8.0\n    hooks:\n    -   id: mypy\n        additional_dependencies: [types-all]\n\n-   repo: https://github.com/nbQA-dev/nbQA\n    rev: 1.7.1\n    hooks:\n    -   id: nbqa-black\n        additional_dependencies: [black==24.1.1]\n    -   id: nbqa-ruff\n        additional_dependencies: [ruff==0.2.1]\n```\n\n### 6.4 Cấu hình Git Ignore\n\nTạo file `.gitignore`:\n\n```gitignore\n# Python\n__pycache__/\n*.py[cod]\n*$py.class\n*.so\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# Jupyter Notebook\n.ipynb_checkpoints\n*/.ipynb_checkpoints/*\nprofile_default/\nipython_config.py\n\n# VS Code\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n\n# Environment\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n.conda/\nconda-env/\n\n# Data\ndata/raw/*\n!data/raw/.gitkeep\ndata/processed/*\n!data/processed/.gitkeep\n*.csv\n*.xlsx\n*.xls\n*.db\n*.sqlite\n*.h5\n\n# Logs\nlogs/\n*.log\n.hypothesis/\n.pytest_cache/\n.coverage\nhtmlcov/\n\n# OS specific\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n```\n\n### 6.5 Khởi tạo Pre-commit\n\n```bash\n# Activate môi trường\nmamba activate ds-project\n\n# Cài đặt pre-commit hooks\npre-commit install\n\n# (Tùy chọn) Chạy pre-commit trên tất cả files\npre-commit run --all-files\n```\n\n### 6.6 Extensions VS Code cho Notebooks\n\nCài thêm các extensions sau:\n\n1. \"Jupyter Notebook Renderers\"\n2. \"Jupytext for Notebooks\"\n3. \"Black Formatter\"\n4. \"Ruff\"\n5. \"Mypy Type Checker\"\n\n### 6.7 Cấu hình Jupytext\n\nTạo file `.jupytext.toml`:\n\n```toml\nformats = \"ipynb,qmd\"\n\n[formats]\nipynb = {}\nqmd = {}\n```\n\n## 7. Pro Tips cho Windows\n\n### Path Management\n\nSử dụng `pathlib` để xử lý đường dẫn:\n```python\nfrom pathlib import Path\ndata_path = Path(\"data\") / \"raw\" / \"file.csv\"\n```\n\n### Git Configuration\n\nTạo file `.gitignore`:\n```gitignore\n# .gitignore\ndata/raw/*\ndata/processed/*\n.ipynb_checkpoints/\n__pycache__/\n*.pyc\n```\n\n### Jupyter trong VS Code\n\n- Chạy cell: `Shift + Enter`\n- Variable explorer có sẵn\n- Plot viewer tích hợp\n- Intellisense hoạt động tốt\n\n### Debugging\n\n- Debugger tích hợp cho cả `.py` và `.ipynb`\n- Có thể đặt breakpoints trong notebooks\n\n## 8. Xử lý Lỗi Thường Gặp\n\n1. **Path quá dài trên Windows**\n   \n   - Sử dụng đường dẫn ngắn hơn\n   - Kích hoạt hỗ trợ đường dẫn dài trong Windows\n\n2. **Conflict với môi trường Python khác**\n   \n   - Đảm bảo PATH được cập nhật đúng\n   - Kiểm tra `where python` trong terminal\n\n3. **Jupyter Kernel không hiển thị**\n   \n   - Cài lại `ipykernel`\n   - Kiểm tra jupyter kernelspec list\n\n## 9. Resources Hữu ích\n\n- [Mamba Documentation](https://mamba.readthedocs.io/)\n- [VS Code Python Documentation](https://code.visualstudio.com/docs/python/python-tutorial)\n- [Jupyter in VS Code](https://code.visualstudio.com/docs/datascience/jupyter-notebooks)\n\n## 10. Workflow Đề Xuất\n\n1. **Khởi tạo project mới**:\n\n```bash\n# Tạo và activate môi trường\nmamba env create -f environment.yml\nmamba activate ds-project\n\n# Cài đặt pre-commit hooks\npre-commit install\n```\n\n2. **Phát triển**:\n\n- Code trong VS Code với các extensions đã cài\n- Notebooks sẽ tự động được format bởi nbQA\n- Pre-commit sẽ kiểm tra code trước mỗi commit\n\n3. **Commit Changes**:\n\n```bash\ngit add .\ngit commit -m \"your message\"\n# Pre-commit sẽ tự động chạy các checks\n```\n\n4. **Update Dependencies**:\n\n```bash\n# Thêm package mới\nmamba install package-name\n# Export environment\nmamba env export > environment.yml\n```\n\n## Bonus: nếu muốn import một module từ `src` trong `notebook.ipynb` thì làm thế nào?\n\n::: {#c9cc4dfd .cell execution_count=1}\n``` {.python .cell-code}\n# Trong notebook của bạn (ví dụ notebooks/analysis.ipynb)\n\n# 1. Setup path\nimport sys\nfrom pathlib import Path\nproject_root = str(Path.cwd().parent)\nif project_root not in sys.path:\n    sys.path.append(project_root)\n\n# 2. Import function\nfrom src.processing.data_preprocessing import process_data, clean_data\n\n# 3. Sử dụng function\ndf_processed = process_data(df_raw)\n```\n:::\n\n\nVới lưu ý:\n\n- Đảm bảo có file `__init__.py` trong mỗi thư mục Python\n- Không nên dùng relative imports (`from ...src.processing`) vì dễ gây lỗi\n- Nên đặt tên module và function theo PEP 8\n- Trong `data_preprocessing.py` nên có docstring mô tả function\n\n::: {#05d43597 .cell execution_count=2}\n``` {.python .cell-code}\n# src/processing/data_preprocessing.py\n\ndef process_data(df):\n    \"\"\"Process the input dataframe.\n    \n    Args:\n        df (pd.DataFrame): Input dataframe\n        \n    Returns:\n        pd.DataFrame: Processed dataframe\n    \"\"\"\n    # your code here\n    return processed_df\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}