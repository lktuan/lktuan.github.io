---
title: "TIL: X·ª≠ l√Ω dynamic-ragged array trong Excel"
description: "T·ª´ khi c√°c h√†m m·∫£ng nh∆∞ VTACK() xu·∫•t hi·ªán, m√¨nh th∆∞·ªùng xuy√™n s·ª≠ d·ª•ng c√°c patterns nh∆∞ REDUCE/VSTACK ƒë·ªÉ m·ªü r·ªông kh·∫£ nƒÉng x·ª≠ l√≠ c√°c ph·∫ßn t·ª≠ c·ªßa m·∫£ng: thay v√¨ ch·ªâ t√≠nh to√°n v·ªõi ƒë·∫ßu ra l√† aggregate value, nay ƒë√£ c√≥ th·ªÉ t·∫°o ra c√°c m·∫£ng con. Tuy nhi√™n kh√¥ng ph·∫£i l√∫c n√†o c≈©ng c√≥ th·ªÉ l√†m vi·ªác v·ªõi m·∫£ng trong m·∫£ng m·ªôt c√°ch ƒë∆°n gi·∫£n"
author:
  - name: "Tuan Le Khac"
    url: https://lktuan.github.io/
date: 06-06-2024
date-modified: 06-07-2024
categories: [excel, lambda, til] 
image: excel-lambda.jpg
draft: false
format: 
  html: 
    code-fold: false
    code-summary: "Show the code"
    code-line-numbers: true
css: html/styles.scss
fig-cap-location: bottom
editor: visual
---

# Problem statement

TIL: H√¥m nay m√¨nh th·ª≠ gi·∫£i m·ªôt [challenge](https://www.linkedin.com/posts/owenhprice_data-analytics-sql-activity-7204129483144986624-R73I) c·ªßa b√°c [Owen Price](https://www.linkedin.com/in/owenhprice/). B√°c l√† Microsoft MVP, master ·ªü kh√≠a c·∫°nh x·ª≠ l√≠, l√†m s·∫°ch, th·∫≠m ch√≠ l√† t·ªëi ∆∞u vi·ªác x·ª≠ l√≠ ƒë√≥ trong Excel, trang blog c·ªßa b√°c l√† [FLEX YOUR DATA](https://www.flexyourdata.com/), m√¨nh h·ªçc ƒë∆∞·ª£c r·∫•t nhi·ªÅu c√°ch s·ª≠ d·ª•ng formulas, ƒë·∫∑c bi·ªát l√† c√°c h√†m m·ªõi t·ª´ `LAMBDA()`, `MAP()`, `REDUCE()` cho ƒë·∫øn g·∫ßn ƒë√¢y l√† **Python in Excel**, `GROUPBY()`, `PIVOTBY`, v√† c√°c h√†m `REGEX_()`.

N·ªôi dung challenge l√†, v·ªõi **m·ªôt ph·∫ßn** (1000 records) c·ªßa b·ªô d·ªØ li·ªáu [Citi Bike](https://citibikenyc.com/system-data), trong ƒë√≥ ch·ª©a hai c·ªôt `start_station_name`, `end_station_name`, m·ªói c·ªôt l·∫°i ch·ª©a th√¥ng tin c√°c "station" ~ tr·∫°m, li·ªát k√™ 5 **ƒë·ªãa ch·ªâ** c√πng s·ªë l·∫ßn xu·∫•t hi·ªán v·ªõi s·ªë l∆∞·ª£ng l·ªõn nh·∫•t!. H√¨nh d∆∞·ªõi l√† 10 d√≤ng ƒë·∫ßu ti√™n c·ªßa d·ªØ li·ªáu.

::: {layout-ncol=1}
![10 d√≤ng ƒë·∫ßu ti√™n c·ªßa d·ªØ li·ªáu](data.png){width=100%}
:::

Well l√∫c ƒë·∫ßu m√¨nh nghƒ© n√≥ c≈©ng ƒë∆°n gi·∫£n üòÇ, th·∫≠m ch√≠ c≈©ng kh√¥ng hi·ªÉu t·∫°i sao m·ªói start ho·∫∑c end station l·∫°i c√≥ *hai station*, c√°ch nhau b·ªüi k√Ω t·ª± ` & ` (space before & after). M√¨nh l·∫≠p t·ª©c ƒë∆∞a ra l·ªùi gi·∫£i nh∆∞ sau:

``` txt
=LET(
    _d, " & ",
    _all_records, TOCOL(
        BYROW(
            BYROW(
                _tbl_CityBike[[start_station_name]:[end_station_name]],
                LAMBDA(x, TEXTJOIN(_d, TRUE, x))
            ),
        LAMBDA(x, TEXTSPLIT(x, _d))
        )
    ),
    _stations, UNIQUE(_all_records),
    _cnt, BYROW(
        --(_stations = TRANSPOSE(_all_records)), 
        // "--" equals to "+" will convert the boolean TRUE/FALSE to value 1/0
        LAMBDA(x, SUM(x))
    ),
    TAKE(SORTBY(HSTACK(_stations, _cnt), _cnt, -1), 5, )
)
```

K·∫øt qu·∫£:

::: {layout-ncol=1}
![K·∫øt qu·∫£ ƒë·∫ßu ti√™n c·ªßa m√¨nh](my_initial_result.png){width=50%}
:::

ƒê·ªëi chi·∫øu v·ªõi c√°c k·∫øt qu·∫£ c·ªßa nh·ªØng ng∆∞·ªùi tham gia kh√°ch th√¨ n√≥ sai! √ù t∆∞·ªüng c·ªßa m√¨nh l√† ƒë·∫ßu ti√™n v·ªõi m·ªói h√†ng, join ch√∫ng l·∫°i v·ªõi ` & ` (`_d`), sau ƒë√≥ l·∫°i split ch√∫ng ra v·ªõi c√πng `_d` ƒë√≥, t·ª´ ƒë√≥ c√≥ ƒë∆∞·ª£c danh s√°ch occurence c·ªßa t·∫•t c·∫£ c√°c **ƒë·ªãa ch·ªâ**. Tuy nhi√™n m√¨nh nh·∫≠n ra d·ªØ li·ªáu tr·∫£ v·ªÅ cho `_all_records` b·ªã thi·∫øu s√≥t. L√Ω do l√† c√°c tr·∫°m (station) th∆∞·ªùng l√† c√°c giao l·ªô, k·∫øt h·ª£p t·ª´ hai ƒë·ªãa ch·ªâ v·ªõi d·∫•u ` & `, tuy nhi√™n c√≥ m·ªôt s·ªë tr·∫°m l·∫°i n·∫±m tr√™n m·ªôt con ƒë∆∞·ªùng. V√† v√¨ ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu, c≈©ng c√≥ m·ªôt s·ªë station l√† `null`. H√†m `TOCOL()` l√† h√†m m·∫£ng x·ª≠ l√≠ c√°c m·∫£ng con nh·∫≠n ƒë∆∞·ª£c t·ª´ `BYROW(...,LAMBDA(...,TEXTSPLIT()))`, c√°c m·∫£ng con n√†y c√≥ ƒë·ªô d√†i **kh√¥ng ƒë·ªÅu**, d·∫´n ƒë·∫øn `TOCOL()` ch·ªâ take record ƒë·∫ßu ti√™n c·ªßa m·ªói m·∫£ng con, tr·∫£ v·ªÅ `_all_records` ch·ªâ g·ªìm *1000 d√≤ng d·ªØ li·ªáu*.

::: {layout-ncol=1}
![C√°c ƒëi·ªÉm d·ªØ li·ªáu ƒë·∫∑c bi·ªát](special_data_points.png){width=100%}
:::

# Solution

C√°c m·∫£ng l·ªüm ch·ªüm hay ragged/jagged array l√† c√°c m·∫£ng g·ªìm c√°c m·∫£ng con c√≥ ƒë·ªô d√†i kh√¥ng ƒë·ªÅu nhau. [In computer science, a **jagged array**, also known as a **ragged array**, or **irregular array**, is an array of arrays of which the member arrays can be of different lengths, producing rows of jagged edges when visualized as output. In contrast, two-dimensional arrays are always rectangular, so jagged arrays should not be confused with multidimensional arrays, but the former is often used to emulate the latter. [Wiki](https://en.wikipedia.org/wiki/Jagged_array#:~:text=In%20computer%20science%2C%20a%20jagged,edges%20when%20visualized%20as%20output.)]{.aside} Excel **kh√¥ng th·ªÉ** merge c√°c b·∫£ng c√≥ k√≠ch c·ª° kh√¥ng b·∫±ng nhau.

M·ªôt [comment](https://www.linkedin.com/feed/update/urn:li:activity:7204129483144986624?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7204129483144986624%2C7204309739827044353%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287204309739827044353%2Curn%3Ali%3Aactivity%3A7204129483144986624%29) ƒë∆∞a m√¨nh t·ªõi h√†m [`BLAMBDAŒª()`](https://gist.github.com/ncalm/0e72b08272ec14f411e8aaa763c0c0b5) c·ªßa b√°c MVP [Peter Bartholemew](https://www.linkedin.com/in/peterbartholomew/) v√† [b√†i gi·∫£i th√≠ch](https://www.linkedin.com/pulse/excel-lambda-spotlight-bisected-map-bmap%2525CE%2525BB-owen-price/) c·ªßa Owen Price.

::: {layout-ncol=1}
![Ragged or Jagged array, photo credit to [Geeks for Geeks](https://www.geeksforgeeks.org/jagged-array-in-java/)](g4g_ragged_array.png){width=80%}
::: 

V√† l·ªùi gi·∫£i ƒë√∫ng, ƒë∆∞·ª£c d·ª±a tr√™n √Ω t∆∞·ªüng c·ªßa `BLAMBDAŒª()` l√†:

``` txt
=LET(
    B, LAMBDA(B, v,
        LET(
            n, ROWS(v),
            IF(
                n > 1,
                VSTACK(B(B, TAKE(v, n / 2)), B(B, DROP(v, n / 2))),
                TEXTSPLIT(TEXTJOIN(" & ", , v), , " & ")
            )
        )
    ),
    str, B(B, CHOOSECOLS(_tbl_CityBike, 4, 5)),
    _u_str, UNIQUE(str),
    _cnt, BYROW(--(_u_str = TRANSPOSE(str)), LAMBDA(x, SUM(x))),
    TAKE(SORTBY(HSTACK(_u_str, _cnt), _cnt, -1), 5)
)

```

N·∫øu s·ª≠ d·ª•ng `GROUPBY()` th√¨ vi·ªác t√≠nh to√°n cu·ªëi c√πng s·∫Ω g·ªçn h∆°n, tuy nhi√™n v√†o th·ªùi ƒëi·ªÉm vi·∫øt b√†i, h√†m n√†y v·∫´n ch∆∞a ƒë∆∞·ª£c MS ƒë∆∞a l√™n 365 Production m√† ch·ªâ ·ªü k√™nh Insider.

K·∫øt qu·∫£ cu·ªëi c√πng:

::: {layout-ncol=1}
![K·∫øt qu·∫£ ƒë√∫ng](final_result.png){width=50%}
:::

# `BLAMBDAŒª()`

Nguy√™n vƒÉn m·ª•c ƒë√≠ch c·ªßa `BLAMBDAŒª()` c·ªßa Peter:

> Recursively bisects an array and applies a function to the leaf nodes. 
Useful for when the result of the FnŒª(leaf) calls are not of equal length.
As such, BMAPŒª can produce ragged arrays. 

Owen c≈©ng nh·∫≠n x√©t l√† h√†m n√†y "more computationally efficient" so v·ªõi [`STACKER()`](https://gist.github.com/ncalm/ef7ed953571eec1475c291948aa2dbc3) c·ªßa ·ªïng. Chi ti·∫øt v·ªÅ √Ω t∆∞·ªüng h√†m g·ªëc c√≥ th·ªÉ tham kh·∫£o ·ªü c√°c link tr√™n, gi·ªù m√¨nh s·∫Ω t√¨m hi·ªÉu `BLAMBDAŒª()` ƒë∆∞·ª£c √°p d·ª•ng cho use case n√†y.

ƒê·∫ßu ti√™n `B()` (stands for Bisected) l√† m·ªôt h√†m recursive:

``` txt
B = LAMBDA(B, v,
        LET(
            n, ROWS(v),
            IF(
                n > 1,
                VSTACK(B(B, TAKE(v, n / 2)), B(B, DROP(v, n / 2))),
                TEXTSPLIT(TEXTJOIN(" & ", , v), , " & ")
            )
        )
    )
```

Trong ƒë√≥:

- `n` l√† s·ªë d√≤ng c·ªßa `v` ~ m·∫£ng c·∫ßn t√≠nh to√°n
- n·∫øu `n` > 1, tr·∫£ v·ªÅ k·∫øt h·ª£p `VSTACK()` khi h√†m `B()` ƒë∆∞·ª£c √°p d·ª•ng cho hai n·ª≠a c·ªßa m·∫£ng `v`, `TAKE()` s·∫Ω l·∫•y "ph√¢n n·ª≠a" ƒë·∫ßu ti√™n, `DROP()` s·∫Ω b·ªè ƒëi ph√¢n n·ª≠a ƒë·∫ßu ti√™n ~ nghƒ©a l√† l·∫•y ph√¢n n·ª≠a th·ª© 2 (l∆∞u √Ω r·∫±ng hai h√†m n√†y ƒë·ªÅu l·∫•y s·ªë nguy√™n nh·ªè h∆°n g·∫ßn nh·∫•t c·ªßa `n / 2`, do ƒë√≥ kh√¥ng c·∫ßn l·∫•y ph·∫ßn nguy√™n b·∫±ng `QUOTIENT(n,2)` nh∆∞ h√†m g·ªëc c·ªßa Peter).
- khi n = 1, nghƒ©a l√† v·ªõi m·ªói ph·∫ßn t·ª≠ c·ªßa m·∫£ng `v`, th·ª±c hi·ªán ƒë·ªông t√°c `TEXTSPLIT(TEXTJOIN(...))` ~ tr∆∞·ªõc h·∫øt join hai c·ªôt r·ªìi sau ƒë√≥ split.
- h√†m n√†y ƒë·ªá quy v√† s·∫Ω `VSTACK()` t·∫•t c·∫£ c√°c m·∫£ng d·ªçc sinh t·ª´ vi·ªác `TEXTSPLIT()` k·∫øt qu·∫£ c·ªßa `TEXTJOIN()` hai c·ªôt tr√™n m·ªói d√≤ng c·ªßa m·∫£ng `v`.

M√¨nh c≈©ng th·ª≠ vi·∫øt l·∫°i h√†m `B()`, thay ƒë·ªïi m·ªôt ch√∫t ~ thay v√¨ th·ª±c hi·ªán tr√™n 1 m·∫£ng 2 c·ªôt m√¨nh c·ªë g·∫Øng chuy·ªÉn m·∫£ng `v` th√†nh m·ªôt c·ªôt, tuy nhi√™n ch∆∞a th√†nh c√¥ng üò™ **(ch∆∞a hi·ªÉu t·∫°i sao)**:

```txt
=LET(
    B, LAMBDA(B, v,
        LET(
            n, ROWS(v),
            IF(n > 1, VSTACK(B(B, TAKE(v, n / 2)), B(B, DROP(v, n / 2))), TEXTSPLIT(v, " & "))
        )
    ),
    _data, VSTACK(_tbl_CityBike[start_station_name], _tbl_CityBike[end_station_name]),
    str, B(B, FILTER(_data, LEN(_data) > 0)),
    _u_str, UNIQUE(str),
    _cnt, BYROW(--(_u_str = TRANSPOSE(str)), LAMBDA(x, SUM(x))),
    TAKE(SORTBY(HSTACK(_u_str, _cnt), _cnt, -1), 5)
)
```
## üöÄ Edit: sau khi m√†y m√≤ th√™m s·ª≠a l·ªói cho gi·∫£i ph√°p tr√™n m√¨nh back to basic v·ªõi l·ªùi gi·∫£i sau:

```txt
=LET(
    _data, TOCOL(_tbl_CityBike[[start_station_name]:[end_station_name]], 3),
    _str, DROP(REDUCE("", _data, LAMBDA(a, x, VSTACK(a, TEXTSPLIT(x, , " & ")))), 1),
    _u_str, UNIQUE(_str),
    _cnt, BYROW(--(_u_str = TRANSPOSE(_str)), LAMBDA(x, SUM(x))),
    TAKE(SORTBY(HSTACK(_u_str, _cnt), _cnt, -1), 5)
)
```

T·∫•t nhi√™n t·ªëc ƒë·ªô x·ª≠ l√≠ s·∫Ω ch·∫≠m h∆°n `BLAMBDAŒª()` - O_log(n), gi·∫£i ph√°p n√†y duy·ªát qua t·ª´ng ph·∫ßn t·ª≠, n√™n BigO l√† O(n)

Thanks Peter & Owen for this great use of recursion presented in such a concise manner. 


