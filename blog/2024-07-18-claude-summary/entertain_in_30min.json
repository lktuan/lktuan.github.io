{	
	"5s": "okay let me get started i'll give you the",
	"7s": "premise the premise is the issues are not av related the issues are that my",
	"12s": "laptop where i was up until 4am last night writing this talk",
	"16s": "did not boot at all and as a consequence of that my notes that i spent quite a",
	"21s": "bit of time putting together are not available to you but i am still on the",
	"24s": "hook to keep you entertained for 30 minutes so we're going to see what i can",
	"28s": "live code off the top of my head on my secondary device which has a really",
	"32s": "terrible keyboard this is like the worst keyboard in the world what i can do to",
	"36s": "keep you entertained for 30 minutes because that's what i promise you",
	"38s": "actually promised you 45 minutes but at least you can excuse me the 30 minutes",
	"43s": "unfortunately it's not the talk that i had presented to you probably that's",
	"46s": "going to happen at a future event once i can actually get that laptop to boot the",
	"50s": "notes are stuck bear in mind this is sometimes you know these kind of",
	"54s": "byzantine errors i do a 90 minute seminar every week and you never know",
	"58s": "what kind of baroque or byzantine era can occur in the middle of one of these",
	"1:01": "things that's why it's important to be prepared whatever the case may be this",
	"1:05": "talk is titled how can i keep you entertained for 30 minutes we're at pi",
	"1:08": "data london 2022 it's due sunday june 19 2022 i believe my name is james powell",
	"1:16": "if you like this talk i don't know what's wrong with you but you can follow",
	"1:19": "me on twitter at don't use this code and we do of course seminars every every",
	"1:24": "week we do corporate training as well so if you're interested in what we have to",
	"1:27": "talk about feel free to sign up for that this will also be a demonstration of how",
	"1:31": "well i can speak and teach extemporaneously on a topic with zero",
	"1:35": "literally zero preparation on what is honestly probably the worst keyboard you",
	"1:40": "have ever seen so here's what we're here to talk about we are all some sort of",
	"1:45": "data focused or data scientist and as a consequence of that we see that",
	"1:49": "there are tools that we may use every single day tools like pandas or x-ray or",
	"1:53": "matplotlib or numpy and it's the case that we may very quickly discover that",
	"1:58": "you know what we don't really need to know that much about python in order to",
	"2:02": "use these tools in fact really what is there to python but say function calls",
	"2:06": "right there's basically function calls and variable names and then api calls",
	"2:10": "and so if we take a look at what's available in something like pandas we",
	"2:13": "might say well pandas has just memorized set access and rename and set index and",
	"2:18": "things like that with no coherence behind it hopefully using this terrible",
	"2:22": "laptop with terrible keyboard i'll be able to give a lightning talk in a",
	"2:24": "couple minutes to show you where that coherence is but fundamentally the",
	"2:28": "programming language that's provided to you python is not just function calls",
	"2:32": "and variables there's way more richness to it i'll give you an example of that",
	"2:36": "and this is something that i'm surprised never really comes up even though it is",
	"2:40": "such a useful tool if you think about the dichotomy between say lazy and eager",
	"2:46": "computation and you think about things which python",
	"2:49": "programmers tell you about all the time but it goes in one ear and out the other",
	"2:52": "like hey aren't generators really cool who cares well the reason that nobody",
	"2:57": "cares is generally the dichotomy between lazy and eager computation is one",
	"3:02": "talking about the amount of time of two different aspects of your code either",
	"3:06": "the amount of time of some incremental operation",
	"3:09": "or the amount of time to decide whether to do the entirety of that computation",
	"3:14": "when you talk about lazy computation it's usually because the incremental",
	"3:18": "time to do one step tends to be significantly greater than the time to",
	"3:22": "decide this is where generators come up with but what you're more familiar with",
	"3:25": "as a data scientist is tools like numpy and pandas which are strictly eager",
	"3:29": "computation tools in fact oftentimes fully in memory tools everything is",
	"3:34": "right there you perform a computation and it gets done immediately and the",
	"3:38": "reason why things like generators never come up is because in a tool like that",
	"3:42": "the time to do an incremental computation is significantly less than",
	"3:46": "the time to decide whether to do the next computation for example in a numpy",
	"3:50": "and d array it is sometimes faster to perform extra operations and simply",
	"3:55": "throw them away than to make a choice so you will discover if",
	"3:59": "you have a numpy and d array that using something like numpy.where or",
	"4:04": "even doing some sort of indexing like if you have an array with some values and",
	"4:07": "you index like this and then you take each value and you increment by one this",
	"4:12": "will actually often times be a margin slower than if you just say well x is",
	"4:16": "equals you know x is plus one on every single",
	"4:20": "element times a mass of x is less than zero",
	"4:25": "plus x is times the mass of x is greater than",
	"4:29": "zero that'll actually be faster doing more work and this is a little bit",
	"4:32": "perplexing but this also tells us why it is that for example data scientists do",
	"4:36": "not seem to care about lazy computational mechanisms outside of say",
	"4:40": "when it reaches a certain level like the desk level they don't care about the",
	"4:43": "simple tool right in front of them the generator",
	"4:46": "if you think about it what is a generator a generator is a way for you",
	"4:50": "to use an out-of-band encoding in order to express the stages the steps the",
	"4:56": "portions of a computation so what you're saying is this computation has multiple",
	"5:00": "parts associated with it if you really think about it something like a function",
	"5:03": "can do multiple things in it you know if you have some input data in this",
	"5:06": "function you can perform a bunch of different computations you can say data",
	"5:09": "plus one data times two data",
	"5:15": "uh maybe to the third power that that times key is really hard to hit and",
	"5:19": "there's actually three things that you're doing here but the interpreter",
	"5:22": "can't see that and you're not delineating that in any fashion this is",
	"5:25": "like some sort of data like a string which has commas in it where you're not",
	"5:29": "saying oh this is where this entity exists this is where this ending exists",
	"5:32": "and these have these delimited there's clearly three steps here but you're not",
	"5:36": "providing any information to the interpreter to indicate that and with",
	"5:39": "the generator all you're really doing is taking the same computation and you're",
	"5:43": "saying you know what i'm going to make it clear",
	"5:45": "where each step begins and ends and where each logical step begins and then",
	"5:50": "because obviously the interpreter can already see where each byte code begins",
	"5:54": "it ends and obviously you know with things like the global interpreter lock",
	"5:57": "it will lock to or lock the interpreter to the execution of a single byte code",
	"6:01": "well if you look at something like this this",
	"6:03": "is the same operation as above the same computation the same three things are",
	"6:07": "being computed but we've split it up into parts this is why this is such a",
	"6:11": "useful tool for lazy computation what you're doing is taking a large",
	"6:14": "computation breaking it down into parts and saying",
	"6:16": "this part this part and this part can be run independently and in between you can",
	"6:21": "decide if you want to keep running so",
	"6:24": "if it's the case that the time for the incremental step",
	"6:27": "is much larger than the time for the choice to keep going the time to decide",
	"6:32": "whether you want to take your generator instance and ask it do i want the next",
	"6:37": "value if that choice tends to be",
	"6:40": "sl faster than the choice of the increment computation then that's what",
	"6:43": "you want to generate which means that there's probably a lot of data science",
	"6:47": "code out there especially any sort of library that really isn't written in an",
	"6:51": "appropriate way because if you think about it this generalizes to any large",
	"6:56": "scale non-closed form operation where the incremental computation is slow for",
	"7:00": "example a simulation think about a simulation in a simulation you may take",
	"7:04": "some input data a numpy and array an x-ray data array or for example a data",
	"7:09": "frame of some sort and what you're going to do you can do some sequence of very",
	"7:12": "complex operations and if those complex operations take more than about a",
	"7:17": "microsecond then the time to re-enter the python interpreter is going to be",
	"7:23": "really negligible if that operation takes a nanosecond",
	"7:26": "like it's a single integer add then the time to re-enter the python interpreter",
	"7:29": "will be so high that you just want to do this eagerly you'll do it all in memory",
	"7:33": "you'll just blast down those values and you'll see that'll be the f the fastest",
	"7:36": "approach but",
	"7:38": "in the case where you have a simulation where each incremental step of that",
	"7:41": "simulation is expensive which is not uncommon think about operations on a",
	"7:44": "very large matrix those are expensive they may take time there may even be",
	"7:47": "operations that are multi-stage that require going out to external data where",
	"7:52": "it may be the case that one step of the simulation is a second long",
	"7:56": "well this simulation should be modeled as a",
	"7:59": "generator the reason that you want to model this generator is you can then",
	"8:03": "really release a certain presumption that you have",
	"8:07": "about how you've modeled this think about anytime you have some sort of",
	"8:09": "simulation when you have a simulation you have to decide what the api for that",
	"8:12": "simulation is and you have to decide between a lot of choices like do i run",
	"8:16": "the simulation for a certain number of steps do i run this simulation until i",
	"8:21": "hit a certain threshold do i run this simulation for a certain",
	"8:26": "amount of clock time and you encode that in the api for the",
	"8:30": "simulation because you say well you know what i don't want to run extra work i",
	"8:34": "don't do extra work i don't want to run this for 10 seconds if i only need to",
	"8:37": "hit a certain threshold i only want to run it for five seconds and you allow",
	"8:41": "the user to control that externally via this api but this is the wrong thing to",
	"8:45": "do because the generator says i don't care how long you want to run this",
	"8:49": "computation you decide how long you want this computation what i'm going to do is",
	"8:52": "i'm going to delineate the steps of it and after each step i'm going to ask you",
	"8:56": "do you want to keep going or not and then externally to this with a much much",
	"9:00": "simplified api you control how you want to run this computation via",
	"9:04": "mechanisms like iter tools islice or itter tools take while or some custom",
	"9:13": "generator you can write yourself like you could write one that is a very soft",
	"9:17": "time counter like this you know timed on some generator here and you say this is",
	"9:21": "it takes the start i'm actually kind of getting used to this keyboard",
	"9:25": "and then you say you know something like 4x in",
	"9:28": "g and if you're if you over",
	"9:32": "if you go over your benchmark time then you stop",
	"9:38": "otherwise you yield x well this is something that for whatever reason i",
	"9:42": "think is a consequence of a lot of data scientists they look at",
	"9:46": "the code they look at their apis that they know they memorize the apis and",
	"9:49": "they forget that there's an entire language behind an entire language for",
	"9:52": "modeling these things and they see repetition in their code when they see",
	"9:55": "repetition in their code their only tool is the very fundamental basic structures",
	"10:00": "they have let me just write a function package",
	"10:02": "things up on function where they could choose a much more appropriate tool for",
	"10:05": "example a generator subject to meeting that criteria of the incremental time",
	"10:09": "for the computation being significantly larger than the time to re-enter the",
	"10:12": "python loop to decide whether to keep going and what happens when they do that",
	"10:17": "is instead of writing one function or three functions with",
	"10:22": "this extremely complex api they write one representation of the simulation",
	"10:27": "which presumes none of these modalities at all thus allowing the end user of",
	"10:32": "this thing to arbitrarily decide",
	"10:36": "how i want to start or stop this computation including modalities which",
	"10:40": "you could not foresee for example run this simulation for 1000 steps or until",
	"10:44": "it hits a threshold value or a brand new one like until the incremental",
	"10:49": "improvement is under a certain threshold value",
	"10:52": "think about it whenever you write a function and you presume these kind of",
	"10:55": "modalities especially where computation starts or stops you're making",
	"10:59": "assumptions about where an end user wants to start and stop that computation",
	"11:02": "and you're almost certainly going to be wrong because if you think these are the",
	"11:05": "only three ways you can do this you're absolutely wrong somebody's going to say",
	"11:07": "look we don't want to keep running this computation as long as there's no extra",
	"11:11": "benefit so that's another modal parameter and the apis will sprawl and",
	"11:15": "sprawl and sprawl let me show you another example of this",
	"11:19": "it is very very common when you take a look at data scientist code that",
	"11:24": "there seems to be a high tolerance for repetition and the only mechanism for",
	"11:29": "eliminating that repetition is the function let me pause for a second and",
	"11:32": "ask you a question when do you write a function no no let me ask you another",
	"11:35": "question when do you not write a function this is something that i'm very",
	"11:39": "surprised that a lot of data scientists don't really have a good sense of",
	"11:41": "because they have these habits of oh anytime i have repetition i'll write a",
	"11:44": "function they never really revisit that and say well hold on a second if i'm",
	"11:48": "making an affirmative choice to do something then there should be some",
	"11:51": "corresponding decision making process under which i should not do that when do",
	"11:56": "you not write a function when you see repetition in your code when do you not",
	"11:59": "write a function have you ever considered that well it's actually",
	"12:02": "fairly clear when that situation is if you think about it the",
	"12:06": "desire to write a function is usually the desire to eliminate an update",
	"12:10": "anomaly in other words if you have some sequence of scripts some sequence of",
	"12:14": "knowledge and you see you know a repeated operation fgh and then fgh over",
	"12:18": "and over and you say that's very repetitive let me eliminate that",
	"12:21": "repetition let me write a function well the question that you should really",
	"12:25": "be asking yourself is is that repetitive intentionally or is that repetitive",
	"12:30": "coincidentally why could it be repetitive intentionally",
	"12:33": "for example these represent the one true canonical way to operate some process",
	"12:38": "for example if you're working at a secure classified site there are certain",
	"12:41": "processes you must follow you must always follow those processes and you",
	"12:44": "can see those processes replicated throughout the code base you may want to",
	"12:48": "establish a single source of truth for how to do these processes such that if a",
	"12:52": "change occurs to this process it occurs in one place and that change is",
	"12:57": "reflected in all instantiations and all manifestations of that but it could also",
	"13:01": "be the case that this is very coincidental it just happens to be the",
	"13:06": "case at this one point in time that these are the same and where you see",
	"13:11": "this a lot is with data loading anytime you see",
	"13:15": "deep in a library somebody doing something like this with open file name",
	"13:18": "as f and they process this file name there's probably something that's going",
	"13:22": "to go wrong later namely whenever you think about it anytime you interact with",
	"13:26": "the outside world your interaction with the outside world is not constrained on",
	"13:30": "your time schedule in other words i'm loading some data that you provide to me",
	"13:34": "you decide tomorrow i'm going to give you a csv file instead of a json file",
	"13:39": "what am i going to do my code just broke i'm going to now",
	"13:43": "postpone all the activities that i have planned for the week i'm going to work",
	"13:47": "through the weekend to solve this interaction with the outside world is",
	"13:49": "one of these very large sources of churn because the outside world changes and",
	"13:53": "you have to respond to it and react to it similarly where it changes you often",
	"13:57": "have this desire to introduce a modality so for example somebody wrote this",
	"14:01": "function f in order to perhaps load some data from this file maybe this is a",
	"14:05": "json.load on this",
	"14:09": "and they decided to package up a little bit more than that maybe they did some",
	"14:12": "processing on this data to get some result and they said well you know what",
	"14:16": "i'll put this into a function because i see these two lines of code or these",
	"14:19": "three lines of code occur throughout my code base people open the file and maybe",
	"14:23": "they do some data cleaning on the data and then they",
	"14:28": "then they do some processing on the data and i don't want to have my data",
	"14:30": "scientists cutting and pasting this all the time but what they don't really",
	"14:33": "think about is maybe it's the case that just at this one singular point in time",
	"14:38": "those four lines of code are being repeated and maybe it's the case that",
	"14:41": "those four lines of code should retain the ability to verge over time for",
	"14:44": "example if one of these users wants to eliminate outliers",
	"14:49": "then you would think oh okay i",
	"14:54": "write a write another line in this function and when the other user says no",
	"14:58": "no i didn't want to eliminate outliers i want to include them then you say oh you",
	"15:01": "know what i add a modality here with or outliers equals false and i add a flag",
	"15:06": "and i say if outliers or if not outliers",
	"15:12": "then something like that and what you can think is whenever you",
	"15:17": "in accidentally reify repetition every time you write a function where you",
	"15:20": "shouldn't write a function the general pattern that you'll see is you'll start",
	"15:23": "adding flags and modes because the end use case the manifestations of this will",
	"15:28": "start to diverge over time one person wants to remove outliers one person",
	"15:31": "wants the file to skip the first line one person wants it to be a csv file one",
	"15:35": "person wants it to be a gzip csv file and it adds flag and flag and flag and",
	"15:39": "flag and flag and as a consequence of that",
	"15:42": "the code just falls out of control there's no way to test this thing you're",
	"15:46": "churning this function all the time well this is a consequence of you reaching",
	"15:50": "for that habit of writing a function without really thinking is this",
	"15:55": "coincidental repetition or is this intentional repetition is there an",
	"15:58": "update anomaly in play i used that term at the very beginning of this portion of",
	"16:02": "this very ad hoc talk and the analogy that i want to share with you is this",
	"16:05": "when you think about a database you think about database normalization the",
	"16:08": "reason why we do database normalization is to eliminate certain anomalies in",
	"16:12": "other words when i update a field here that fact is",
	"16:16": "changed everywhere through the database everybody has experiences themselves you",
	"16:20": "buy a flight you change your seat on the website you check your boarding pass on",
	"16:24": "the mobile app the seat hasn't changed you call them up and say well i just got",
	"16:28": "upgraded why why isn't my seat change they say oh we have two databases it",
	"16:31": "hasn't flowed through yet and you say oh that's very stupid you should have one",
	"16:34": "single source of truth that's what a function is a one single source of truth",
	"16:37": "the purpose of it is the elimination of these update anomalies and if it's the",
	"16:42": "case that those facts are allowed to diverge then you're actually unifying",
	"16:46": "things in such a way that you'll then cause sprawl to cause modalities later",
	"16:50": "ultimately the intentionality of writing a function really should be focused on",
	"16:54": "that repetition ad hoc behavior is in fact generally okay to do",
	"17:00": "it's okay because it preserves your ability to continue to change and to",
	"17:04": "have these pieces of code change over time independently of each other and",
	"17:06": "really think about if you had some sort of data loading deep in a library that",
	"17:10": "you were providing to another analytical user and you changed the way the data",
	"17:14": "loading worked how do you test that doesn't blow up",
	"17:18": "your other users how do you test that the consequences of this aren't going to",
	"17:22": "affect somebody all the way over here but if you had that data loading that",
	"17:25": "interaction with the outside world at the most superficial part of your code",
	"17:28": "maybe all the way at that if name equals main block then you change it to one",
	"17:32": "place and nobody else is affected you can tangibly and and",
	"17:37": "very very directly feel the distinctions between these but we have this habit of",
	"17:41": "writing functions now the next thing that i wanted to share with you",
	"17:45": "is maybe another bad habit that we have and it's related to",
	"17:50": "uh do i want to talk about loading functions i already talked about loading",
	"17:53": "functions oh i'll talk about ad hoc behavior",
	"17:57": "one of the other things that i think we sometimes don't",
	"18:01": "don't encourage our data science colleagues to do enough of",
	"18:04": "is to think about python in terms of certain patterns or certain conventions",
	"18:09": "certain habits that we see the standard library move towards that we should",
	"18:12": "encounter in our own work one example that i like to use is if you think about",
	"18:16": "the inter tools module you can think about the other tools module in a very",
	"18:19": "very uh",
	"18:21": "superficial fashion you can think it gives you things like combinatorics like",
	"18:24": "the ability to create cartesian products or combinations or permutations you can",
	"18:29": "think about it in terms of very simplistic things like generalizations",
	"18:33": "of concrete mechanisms for example i slice",
	"18:36": "is a generalization of slicing on concrete data i slices i say my idea is",
	"18:40": "slicing but on non-concrete data but when you think about these and you",
	"18:44": "think about these in terms of things like zip and enumerate what you're",
	"18:47": "missing here when you look at the superficial details is there's a general",
	"18:51": "pattern here and a pattern of iteration helpers the idea that whenever you're",
	"18:54": "doing some sort of iteration especially in python you're usually trying to",
	"18:58": "encode some process that a human being probably",
	"19:03": "cares about in other words if you really think about your data science code and",
	"19:06": "you think about where loops show up in your data science code it's often the",
	"19:09": "case that loops don't show up at the computational side for example you don't",
	"19:13": "loop over each element of the numpy and drain manually to add one to them you",
	"19:18": "push that computation to the restricted computation domain you push it deep into",
	"19:22": "the c or fortran layer in order to do this efficiently because the only way",
	"19:25": "you're guaranteed to be able to do it efficiently and so if you have some",
	"19:29": "let's see if i can get you some random data numpy.random default rng",
	"19:35": "see i even took the effort of doing this properly so here you go size",
	"19:40": "equals three by three and if you wanted to do some computation",
	"19:44": "on this you'd say okay xs plus one you wouldn't do the looping over each of the",
	"19:49": "elements but where you'd see some of that looping is well actually at the",
	"19:53": "human level not at the machine level not at the data level i want to represent",
	"19:57": "the idea that i'm doing three different scenarios so my scenarios may look like",
	"20:02": "this scenario one or scenario a i add 1",
	"20:07": "scenario b i add 2 and so forth and so on you might even use a python",
	"20:11": "dictionary in order to model these and you have some loop that says for the",
	"20:16": "name of the scenario and the adjustment",
	"20:22": "you do some sort of loop",
	"20:25": "oh that's really hard there we go and you do something like this x's plus",
	"20:30": "so here you have your data out here maybe",
	"20:32": "and then you kind of plus the adjustment and so typically where you see these",
	"20:35": "kind of looping you're trying to express some human intention go through each",
	"20:39": "scenario and do this and where you don't see the looping is typically where you",
	"20:42": "want to express some computational operation oh actually go through each",
	"20:45": "individualized element and add one to it well when you think about this what are",
	"20:49": "these iteration helpers all about the iteration helpers are usually about",
	"20:53": "surfacing modalities making it so that the choices that you might make along",
	"20:57": "the way with the iteration are visible to the end user in that for loop block",
	"21:02": "and so for example if you think about things like enumerate the purpose of",
	"21:06": "enumerate is to tell you where where you are in the iteration am i at the",
	"21:10": "beginning of the iteration at the end of the iteration you may have seen in past",
	"21:14": "in some of these talks i've written some of my own iteration helpers like from",
	"21:18": "intertools we can pull in i slice and t and we can write our friendly ny's",
	"21:23": "helper and you know the track the the talk is more or less going back on track",
	"21:28": "when i start writing nys because this has come up many times before but you do",
	"21:32": "something like this i think you i slice g from i to none",
	"21:36": "for i g",
	"21:39": "in enumerate t gn",
	"21:44": "oh got one more here and then you know you can even do things like writing ny's",
	"21:48": "longest which use a zip longest",
	"21:52": "and this allows you to write something which i don't know that i'll be able to",
	"21:54": "write for you which is last but i can show you first",
	"21:58": "and that's pretty easy here let's do repeat and chain",
	"22:02": "and what you can see here is i'm writing iteration helpers not for the purpose of",
	"22:05": "showing off what i'm able to write on a terrible keyboard live in front of you",
	"22:09": "but instead for the purpose of showing you that these are small little tools",
	"22:14": "that are quite helpful for exposing your intentionality and for improving your",
	"22:18": "code and for convincing your colleagues to improve their code beyond what",
	"22:22": "they're capable of doing so for example you write an iteration helper like first",
	"22:26": "that takes some generator like this and",
	"22:29": "it does something like repeats say the value true end times",
	"22:35": "repeats",
	"22:37": "the value false forever change those together and zips it with",
	"22:42": "some generator or some iterable to be more precise and what you can think is",
	"22:48": "the purpose of this is to allow you to write code like this for first",
	"22:52": "x in or for is first",
	"22:56": "x in first oh that's horrible",
	"23:01": "and it doesn't help that it's really nervous when you do that when these",
	"23:03": "things are done off top of your head something like this",
	"23:06": "you can actually identify what mode you're in you can identify if you're the",
	"23:08": "first value in fact it turns out that things like last are very easy right so",
	"23:11": "if i had the time i'd probably write something like this for you where you",
	"23:14": "can do something like identify the first element and the last element of an",
	"23:18": "iteration and remember you're not doing this in order to support the underlying",
	"23:22": "computation you're doing this in order to support",
	"23:25": "the intentionality and the human",
	"23:26": "intentionality and the ability for you to express at the ad hoc level at the",
	"23:32": "for loop level oh this is the first step of the simulation i'm looking at this is",
	"23:36": "the last step of the simulation i'm looking at these are all the other steps",
	"23:38": "of the simulation i'm looking at in essence what we can see from this and i",
	"23:42": "think we're nearing the amount of time that we had what can we see from this",
	"23:46": "we can see that number one it is very very difficult to put together a",
	"23:50": "coherent talk with no notes live coding with no plan ahead of what you were",
	"23:54": "going to talk about in 30 minutes number two i hope i've succeeded at it but",
	"23:58": "number three a very important lesson when you take a look at what python",
	"24:02": "provides you and you think about it as oh it's so easy it doesn't have",
	"24:05": "controversies and covariance like java oh it's so easy it doesn't have template",
	"24:08": "meta programming like c plus plus well that doesn't mean that it's necessarily",
	"24:12": "a tool that you can use so superficially so readily it means that this is a tool",
	"24:16": "that has a certain richness and a certain set of approaches and tools that",
	"24:21": "if you're just trying to shrug your shoulders and say oh i know the numpy",
	"24:24": "api know the pandas api what more is there it's just a bunch of function",
	"24:27": "calls and keyword arguments you're missing an enormous amount of what you",
	"24:30": "can do effectively in your code simple mechanisms like generators should show",
	"24:34": "up more in our code they should show up anytime we have some sort of simulation",
	"24:38": "or some sort of non-closed form operation where the",
	"24:41": "incremental step is large enough that we can actually pay the cost of going back",
	"24:45": "into python to decide where they keep going mechanisms like functions are not",
	"24:49": "the habits that we just want to write anytime we see repetition write a",
	"24:52": "function we should be thinking about these things with a little more depth",
	"24:54": "because i know for certain you have some colleague who started writing code in",
	"24:58": "python maybe a modeler maybe a scientist of some sort and they learn functions",
	"25:02": "then everything is now in a function with a million arguments and it falls",
	"25:05": "out of just you just lose your ability to maintain this code because the",
	"25:09": "keyword arguments keeping it added on and on and on and they never really",
	"25:13": "think to themselves why am i doing this in the first place we should really be",
	"25:16": "thinking a little bit deeper about why we choose to use even the most basic",
	"25:19": "tools we have and when we look at python and we see things in the standard",
	"25:22": "library or if we see things in the built-ins like",
	"25:25": "like enumerate or zip or we see things like itter tools we should look a little",
	"25:29": "bit beyond the superficial details of what they appear to offer to us and",
	"25:32": "really see what is the convention what is the intentionality here what is the",
	"25:35": "goal here because largely it is the case that these are tools that are provided",
	"25:40": "to help us write better code not better code in the form of faster code but",
	"25:43": "better code in the form of code that exposes our intentionality exposes the",
	"25:49": "choices that we may make that may later on change that we want to be very",
	"25:52": "reactive to being able to change later on",
	"25:55": "that makes it possible for us to write code that",
	"25:58": "put some structuring around the core computation now with that said i hope i",
	"26:03": "was able to entertain you i think we're just at the time that we have",
	"26:07": "thank you everybody i'm james powell hopefully i'll give the real talk",
}	
