---
title: "A tutorial of `ggplot2`"
description: "This is a again a lesson on `ggplot2`"
author:
  - name: "Tuan Le Khac"
    url: https://lktuan.github.io/
date: 06-30-2025
date-modified: 07-01-2025
categories: [r, ggplot2, visualization]
image: grammar-of-graphics.png
draft: false
format:
  html:
    code-overflow: wrap
    code-tools: true
    code-fold: show
    code-annotations: hover
    page-layout: full
---

# 0 Preparation

The following packages need to be installed:

```{r}
#| eval: false
# install CRAN packages
pkg_install =   c("ggplot2", "tibble", "tidyr", "forcats", "purrr", "prismatic", "corrr",
    "cowplot", "ggforce", "ggrepel", "ggridges", "ggsci", "ggtext", "ggthemes",
    "grid", "gridExtra", "patchwork", "rcartocolor", "scico", "showtext",
    "shiny", "plotly", "highcharter", "echarts4r")
install.packages(pkg_install)
```

In which:

- `ggplot2`: part of the `tidyverse`;
- `tidyverse`:
  - `tibble`: mordern data frames;
  - `dplyr`: data wrangling;
  - `tidyr`: data cleaning;
  - `forcats`: handling factors;
- `corrr`: correlation matrices;
- `cowplot`: composing `ggplots`;
- `ggforce`: sina plots and other cool stuffs;
- `ggrepel`: nice text labeling;
- `ggridges`: rigde plots;
- `ggsci`: nice color palettes;
- `ggtext`: advanced text rendering;
- `ggthemes`: additional themes;
- `grid`: creating graphical objects;
- `gridExtra`: additional functions for `grid` graphics;
- `patchwork`: multiple panel plots;
- `prismatic`: minipulating colors;
- `rcartocolor`: great color palettes;
- `scico`: perceptional uniform palettes;
- `showtext`: custom fonts;
- `shiny`: interactive applications;
- `charter`, `echarts4r`, `ggiraph`, `highcharter`, `plotly`: interactive visualization.

We also need to install `devtools`:

```{r}
#| eval: false
# install from GitHub since not on CRAN
install.packages('devtools')
devtools::install_github("JohnCoene/charter")
```

# 1 The Dataset

I was using the dataset: "*National Morbidity and Mortality Air Pollution Study* (NMMAPS)"

Install the `readr` first:

```{r}
#| eval: false
install.packages('readr')
```

## 1.1 Import data

The `::` here call the namespace and can be used to access a function without loading the package.

```{r}
chic <- readr::read_csv("https://cedricscherer.com/data/chicago-nmmaps-custom.csv")
```

view some data:

```{r}
tibble::glimpse(chic)
```

```{r}
head(chic,10)
```

# 3 The `{ggplot2}` package

A `ggplot` is built up from a few basic elements:

1.  **Data**;
2.  **Geometries** `geom_`: the geometric shape (hình dạng) that will represent the data;
3.  **Aesthetics** `aes_`: aesthetics (thẩm mỹ) of the geometric or statistical objects, such as postition, color, size, shape, and transparency;
4.  **Scales** `scale_`: map between the data and the aesthetics dimensions (ánh xạ từ dữ liệu đến đồ thị), such as data range to plot width or factor values to colors;
5.  **Statistical transformations** `stat_`: statistical summaries (thống kê) of data, such as quantitles, fitted curves, and sums;
6.  **Coordinate system** `coord_`: the transformation used for mapping data coordinates into the plane of the data rectangles (hệ tọa độ);
7.  **Facets** `facet_`: the arrangement of the data into a grid of plots;
8.  **Visual themes** `theme()`: the overall visual defaults of a plot, such as background, grids, axes, default typeface, sizes and colors (tông).

Each of above elements can be ignored, but can be also called multiple times.

# 4 A default `ggplot`

Load the package for ability to use the functionality:

```{r}
library(ggplot2)
# library(tidyverse) # can also be imported from the tidy-universe!
```

A default `ggplot` needs three things that you have to specify: the *data*, *aesthetics*, and a *geometry.*:

-   starting to define a plot by using `ggplot(data = df)`;

-   if we want to plot (in most cases) 2 variables, we must add *positional aesthetics* `aes(x = var1, y = var2);`

Notice that `data` was mentioned outside the scope of `aes()`, while variables are being mentioned inside `aes()`.

For instance:

```{r}
(g <- ggplot(chic, aes(x = date, y = temp)))
```

Just a blank panel, because `{ggplot2}` *does not know* how we plot data \~ we still need to provide geometry. `ggplot2` allows us to store the `ggobject` to a variable inside the environment - in this case, `g` - which can be extended later on (by adding more layers). We can print out the plot to the R interactive by putting all inside the `()`.

We have different geometries to use (called `geoms` because each function usually starts with `geom_`). For e.g., if we want to plot a scatter plot.

```{r}
g + geom_point()
```

also a line plot which our managers always like:

```{r}
g + geom_line()
```

cool but the plot does not look optimal, we can also using mutiple layers of geometry, where the magic and fun start.

```{r}
# it's the same if we write g + geom_line() + geom_point()
g + geom_point() + geom_line()
```

## 4.1 Change properties of geometries

Turn all points to large fire-red diamonds:

```{r}
g + geom_point(color = 'firebrick', shape = 'diamond', size = 2)
```

::: {.callout-note}
- `ggplot2` can unsderstand when we use `color`, `colour`, as well as `col`;

- We can use the [default color](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) or [hex](https://www.techopedia.com/definition/29788/color-hex-code), or even RGB/RGBA with `rgb()`. For example:

```{r}
g + geom_point(color = "#b22222", shape = "diamond", size = 2)
g + geom_point(color = rgb(178, 34, 34, maxColorValue = 255), shape = "diamond", size = 2)
```
:::

## 4.1 Replacing the default `ggplot2` theme

Calling eg `theme_bw()` using `theme_set()`, all following plots will have same blank'n'white theme.

```{r}
theme_set(theme_bw())

g + geom_point(color = 'firebrick')
```

`theme()` is also a useful function to modify all kinds of theme elements (texts, rectangles, and lines). Refer this [page](https://ggplot2.tidyverse.org/reference/theme.html) for the full list.

# 5 Axes

## 5.1 Change axis titles

Use `labs()` to assign character string for each lable.

```{r}
ggplot(chic, aes(x = date, y = temp)) +
    geom_point(color = 'firebrick') +
    labs(x = 'Year', y = 'Temperature (°F)')
```

Can also using `xlab()` and `ylab()`:

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  xlab("Year") +
  ylab("Temperature (°F)")
```

Not only the degree symbol before F, but also the supper script:

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = expression(paste("Temperature (", degree ~ F, ")"^"(Hey, why should we use metric units?!)")))
```

## 5.2 Increase space between axis and axis titles.

Overwrite the default `element_text()` within the `theme()` call:

```{r}
ggplot(chic, aes(x = date, y = temp)) +
    geom_point(color = 'firebrick') +
    labs(x = 'Year', y = 'Temperature (°F)') +
    theme(axis.title.x = element_text(vjust = 0, size = 30),
         axis.title.y = element_text(vjust = 2, size = 30))
```

`vjust` refer to vertical alignment. We can also change the distance by specifying the margin of both text elements.

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  theme(axis.title.x = element_text(margin = margin(t = 10), size = 15),
        axis.title.y = element_text(margin = margin(r = 10), size = 15))
```

`t` and `r` in the `margin` are **top** and **right**. Margin has 4 arguments: `margin(t, r, b, l)`. A good way to remember the order of the margin sides is “***t-r***-ou-***b-l***-e”.

## 5.3 Change aesthetics of the axis titles

Again, we use `theme()` function and modify the `axis.title` and/or the subordinated elements `axis.title.x` and `axis.title.y` . Within `element_text()`, we can modify the default of `size`, `color`, and `face`.

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  theme(axis.title = element_text(size = 15, color = "firebrick",
                                  face = "italic"))
```

the `face` argument can be used to make the font `bold`, `italic`, or even `bold.italic`.

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  theme(axis.title.x = element_text(color = "sienna", size = 15, face = 'bold'),
        axis.title.y = element_text(color = "orangered", size = 15, face = 'bold.italic'))
```

You could also use a combination of `axis.title` and `axis.title.y`, since `axis.title.x` inherits the values from `axis.title`. Eg:

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  theme(axis.title = element_text(color = "sienna", size = 15),
        axis.title.y = element_text(color = "orangered", size = 15))
```

One can modify some properties for both axis titles and other only for one or properties for each on its own:

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  theme(axis.title = element_text(color = "sienna", size = 15, face = "bold"),
        axis.title.y = element_text(face = "bold.italic"))
```

## 5.4 Change aesthetics of axis text

Similar to the `title`, we can change the appearance of the axis text (number indeed) by using `axis.text` and/or the subordinated elements `axis.text.x` and `axis.text.y`.

```{r}
ggplot(chic, aes(x = date, y = temp)) +
    geom_point(color = 'firebrick') +
    labs(x= "Year", y = expression(paste("Temperature(",degree ~ F, ")"))) +
    theme(axis.text = element_text(color = "dodgerblue", size = 13),
         axis.text.x = element_text(face = 'italic'))
```

## 5.5 Rotate axis text

Specifying an `angle` help us to rotate any text elements. With `hjust` and `vjust` we can adjust the position of text afterwards horizontally (0 = left, 1 = right), and vertically (0 = top, 1 = bottom).

```{r}
ggplot(chic, aes(x = date, y = temp)) +
    geom_point(color = 'firebrick') +
    labs(x= "Year", y = expression(paste("Temperature(",degree ~ F, ")"))) +
    # 50 means 50 degrees, not % =)))
    theme(axis.text.x = element_text(angle = 50, vjust = 1, hjust = 1, size = 13))
```

## 5.6 Remove axis text & ticks

Rarely a reason to do this but this is how it works.

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  theme(axis.ticks.y = element_blank(),
        axis.text.y = element_blank())
```

If you want to get rid of a theme element, the element is always `element_blank`.

## 5.7 Remove Axis Titles

We could again use `element_blank()` but it is way simpler to just remove the label in the `labs()` (or `xlab()`) call:

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = NULL, y = "")
```

Note that `NULL` removes the element (similarly to `element_blank()`) while empty quotes `""` will keep the spacing for the axis title and simply print nothing.

## 5.8 Limit axis range

Some time you want to take a closer look at some range of you data. You can do this without subsetting your data:

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  ylim(c(0, 50))
```

Alternatively you can use `scale_y_continuous(limits = c(0, 50))` (subsetting) or `coord_cartesian(ylim = c(0, 50))`. The former removes all data points outside the range while the second adjusts the visible area (**zooming**) and is similar to `ylim(c(0, 50))` (**subsetting**).

## 5.9 Force plot to start at the origin

```{r}
chic_high <- dplyr::filter(chic, temp > 25, o3 > 20)

ggplot(chic_high, aes(x = temp, y = o3)) +
  geom_point(color = "darkcyan") +
  labs(x = "Temperature higher than 25°F",
       y = "Ozone higher than 20 ppb") +
  expand_limits(x = 0, y = 0)
```

Using `coord_cartesian(xlim = c(0,NA), ylim = c(0,NA))` will lead to the same result.

```{r}
chic_high <- dplyr::filter(chic, temp > 25, o3 > 20)

ggplot(chic_high, aes(x = temp, y = o3)) +
  geom_point(color = "darkcyan") +
  labs(x = "Temperature higher than 25°F",
       y = "Ozone higher than 20 ppb") +
  coord_cartesian(xlim = c(0, NA), ylim = c(0, NA))
```

But we can also force it to *literally* start at the origin!

```{r}
ggplot(chic_high, aes(x = temp, y = o3)) +
  geom_point(color = "darkcyan") +
  labs(x = "Temperature higher than 25°F",
       y = "Ozone higher than 20 ppb") +
  expand_limits(x = 0, y = 0) +
  coord_cartesian(expand = FALSE, clip = "off")
```

The argument `clip = "off"` in any coordinate system, always starting with `coord_*`, allows to draw outside of the panel area. Call it here to make sure that the tick marks at `c(0, 0)` are not cut.

## 5.10 Axes with same scaling

Use `coord_equal()` with default `ratio = 1` to ensure the units are equally scaled on the x-axis and on the y-axis. We can set the aspect ratio of a plot with `coord_fixed()` or `coord_equal()`. Both use `aspect = 1` (1:1) as a default.

```{r}
ggplot(chic, aes(x = temp, y = temp + rnorm(nrow(chic), sd = 20))) +
  geom_point(color = "sienna") +
  labs(x = "Temperature (°F)", y = "Temperature (°F) + random noise") +
  xlim(c(0, 100)) + ylim(c(0, 150)) +
  coord_fixed()
```

Ratios higher than one make units on the y axis longer than units on the x-axis, and vice versa:

```{r}
ggplot(chic, aes(x = temp, y = temp + rnorm(nrow(chic), sd = 20))) +
  geom_point(color = "sienna") +
  labs(x = "Temperature (°F)", y = "Temperature (°F) + random noise") +
  xlim(c(0, 100)) + ylim(c(0, 150)) +
  coord_fixed(ratio = 1/5)
```

## 5.11 Use a function to alter labels

In case you want to format (eg. adding % sign) without change the data. It's like `lambda` in Python!

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = NULL) +
  scale_y_continuous(label = function(x) {return(paste(x, "Degrees Fahrenheit"))})
```

# 6 Titles

## 6.1 Add a title

We can add a title via `ggtitle()` function.

```{r}
ggplot(chic, aes(x = date, y = temp)) +
    geom_point(color = "firebrick") +
    labs(x = "Year", y = "Temperature (°F)") +
    ggtitle("Temperatures in Chicago")
```

Alternatively, we can use `labs()`, where we can add serveral arguments \~ metadata of the plot (a sub-title, a caption, and a tag):

```{r}
ggplot(chic, aes(x = date, y = temp)) +
    geom_point(color = "firebrick") +
    labs(x = "Year", y = "Temperature (°F)",
        title = "Temperatures in Chicago",
        subtitle = "Seasonal pattern of daily temperatures from 1997 to 2001",
        caption = "Data: NMMAPS",
        tag = "Fig 1")
```

## 6.2 Make title bold & add a space at the baseline

We want to, again, modify the properties of a theme element, we use `theme()` with it elements & conjunctions.
These settings not only work for the title, but also for `plot.subtitle`, `plot.caption`, `plot.tag`, `legend.title`, `legend.text`, `axis.title`, and `axis.text`.

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)",
       title = "Temperatures in Chicago") +
  theme(plot.title = element_text(face = "bold",
                                  margin = margin(10, 0, 10, 0),
                                  size = 14))
```

## 6.3 Adjust the position of titles

We can use the `hjust` and `vjust` for horizontal and vertical alighment:

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = NULL,
       title = "Temperatures in Chicago",
       caption = "Data: NMMAPS") +
  theme(plot.title = element_text(hjust = 1, size = 16, face = "bold.italic"))
```

But since 2019, we can also use `plot.title.position` and `plot.caption.position`.
This fit better for the case of long long axis that makes the alignment looks terrible.

The old way:

```{r}
(g <- ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  scale_y_continuous(label = function(x) {return(paste(x, "Degrees Fahrenheit"))}) +
  labs(x = "Year", y = NULL,
       title = "Temperatures in Chicago between 1997 and 2001 in Degrees Fahrenheit",
       caption = "Data: NMMAPS") +
  theme(plot.title = element_text(size = 14, face = "bold.italic"),
        plot.caption = element_text(hjust = 0)))
```

The new one:

```{r}
g + theme(plot.title.position = "plot",
          plot.caption.position = "plot")
```

## 6.4 Use a non-traditional font in your title

The fonts you can use are not limited by the ones provided by `ggplot2`, and the OS/fonts installed as well.
We can use [`showtext`](https://github.com/yixuan/showtext) for various types of font (TrueType, OpenType, Type 1, web fonts, etc.).
The `font_acc_google()` and `font_add()` also work well, especially for [Google fonts](https://fonts.google.com/). But note that you must have the fonts installed, then re-load the IDE (Rstudio or VS Code) to use them.

```{r}
library(showtext)
font_add_google("Playfair Display", ## name of Google font
                "Playfair")  ## name that will be used in R
font_add_google("Bangers", "Bangers")
```

And then voila we can use them with, again, `theme()`:

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)",
       title = "Temperatures in Chicago",
       subtitle = "Daily temperatures in °F from 1997 to 2001") +
  theme(plot.title = element_text(family = "Bangers", hjust = .5, size = 25),
        plot.subtitle = element_text(family = "Playfair", hjust = .5, size = 15))
```

We can also set a font for all elements of our plot globally:

```{r}
font_add_google("Roboto Condensed", "Roboto Condensed")
theme_set(theme_bw(base_size = 12, base_family = "Roboto Condensed"))
```

## 6.5 Change spacing in multi-line text

# 7 Legends

## 7.1 Turn off the legend

## 7.2 Remove legend titles

## 7.3 Change legend position

## 7.4 Change legend direction

## 7.5 Change style of the legend title

## 7.6 Change legend title

## 7.7 Change order of legend keys

## 7.8 Change legend labels

## 7.9 Change background boxes in the legend

## 7.10 Change size of legend symbols

## 7.11 Leave a layer of the legend

## 7.12 Manuallt adding legend items

## 7.13 Use other legend styles

# 8 Backgrounds & Grid lines

## 8.1 Change the panel background color

## 8.2 Change grid lines

## 8.3 Change spacing of grid lines

## 8.4 Change the plot background color

# 9 Margins

# 10 Multi-panel plots

## 10.1 Create a small multiples based on two variables

## 10.2 Create a small mutilples based on one variables

## 10.3 Allow axes to roam free

# 11. Colors

## 11.1 Specify single colors

## 11.2 Asign colors to variables

## 11.3 Qualitative variables

### 11.3.1 Manually select qualitative colors

### 11.3.2 Use built-in qualitative color palettes

### 11.3.3 Use qualitative colors palettes from extension packages

## 11.4 Quantitiave variables


# 12. Themes

# 13. Lines

# 14. Text

# 15. Coordinates

# 16. Chart Types

# 17. Ribbons (AUC, CI, etc.)

# 18. Smoothings

# 19. Interactive Plots

# 20. Remarks, Tipps & Resources

# References

- Source: <https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/>;
