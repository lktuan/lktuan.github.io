<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Le Khac Tuan</title>
<link>https://lktuan.github.io/blog.html</link>
<atom:link href="https://lktuan.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description>This is Tuan&#39;s blog</description>
<generator>quarto-1.6.40</generator>
<lastBuildDate>Sun, 29 Jun 2025 17:00:00 GMT</lastBuildDate>
<item>
  <title>A tutorial of ggplot2
</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/</link>
  <description><![CDATA[ <section id="preparation" class="level1"><h1>0 Preparation</h1>
<p>The following packages need to be installed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install CRAN packages</span></span>
<span id="cb1-2">pkg_install <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tibble"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"forcats"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purrr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prismatic"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"corrr"</span>,</span>
<span id="cb1-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cowplot"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggforce"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggrepel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggridges"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggsci"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggtext"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggthemes"</span>,</span>
<span id="cb1-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grid"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gridExtra"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"patchwork"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rcartocolor"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scico"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"showtext"</span>,</span>
<span id="cb1-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shiny"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plotly"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"highcharter"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"echarts4r"</span>)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(pkg_install)</span></code></pre></div>
</div>
<p>In which:</p>
<ul>
<li>
<code>ggplot2</code>: part of the <code>tidyverse</code>;</li>
<li>
<code>tidyverse</code>:
<ul>
<li>
<code>tibble</code>: mordern data frames;</li>
<li>
<code>dplyr</code>: data wrangling;</li>
<li>
<code>tidyr</code>: data cleaning;</li>
<li>
<code>forcats</code>: handling factors;</li>
</ul>
</li>
<li>
<code>corrr</code>: correlation matrices;</li>
<li>
<code>cowplot</code>: composing ggplots;</li>
<li>
<code>ggforce</code>: sina plots and other cool stuffs;</li>
<li>
<code>ggrepel</code>: nice text labeling;</li>
<li>
<code>ggridges</code>: rigde plots;</li>
<li>
<code>ggsci</code>: nice color palettes;</li>
<li>
<code>ggtext</code>: advanced text rendering;</li>
<li>
<code>ggthemes</code>: additional themes;</li>
<li>
<code>grid</code>: creating graphical objects;</li>
<li>
<code>gridExtra</code>: additional functions for <code>grid</code> graphics;</li>
<li>
<code>patchwork</code>: multiple panel plots;</li>
<li>
<code>prismatic</code>: minipulating colors;</li>
<li>
<code>rcartocolor</code>: great color palettes;</li>
<li>
<code>scico</code>: perceptional uniform palettes;</li>
<li>
<code>showtext</code>: custom fonts;</li>
<li>
<code>shiny</code>: interactive applications;</li>
<li>
<code>charter</code>, <code>echarts4r</code>, <code>ggiraph</code>, <code>highcharter</code>, <code>plotly</code>: interactive visualization.</li>
</ul>
<p>We also need to install <code>devtools</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install from GitHub since not on CRAN</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'devtools'</span>)</span>
<span id="cb2-3">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JohnCoene/charter"</span>)</span></code></pre></div>
</div>
</section><section id="the-dataset" class="level1"><h1>1 The Dataset</h1>
<p>I was using the dataset: “<em>National Morbidity and Mortality Air Pollution Study</em>&nbsp;(NMMAPS)”</p>
<p>Install the <code>readr</code> first:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'readr'</span>)</span></code></pre></div>
</div>
<section id="import-data" class="level2"><h2 class="anchored" data-anchor-id="import-data">1.1 Import data</h2>
<p>The <code>::</code> here call the namespace and can be used to access a function without loading the package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb4-1">chic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cedricscherer.com/data/chicago-nmmaps-custom.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 1461 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (3): city, season, month
dbl  (6): temp, o3, dewpoint, pm10, yday, year
date (1): date

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<p>view some data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb6-1">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(chic)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 1,461
Columns: 10
$ city     &lt;chr&gt; "chic", "chic", "chic", "chic", "chic", "chic", "chic", "chic…
$ date     &lt;date&gt; 1997-01-01, 1997-01-02, 1997-01-03, 1997-01-04, 1997-01-05, …
$ temp     &lt;dbl&gt; 36.0, 45.0, 40.0, 51.5, 27.0, 17.0, 16.0, 19.0, 26.0, 16.0, 1…
$ o3       &lt;dbl&gt; 5.659256, 5.525417, 6.288548, 7.537758, 20.760798, 14.940874,…
$ dewpoint &lt;dbl&gt; 37.500, 47.250, 38.000, 45.500, 11.250, 5.750, 7.000, 17.750,…
$ pm10     &lt;dbl&gt; 13.052268, 41.948600, 27.041751, 25.072573, 15.343121, 9.3646…
$ season   &lt;chr&gt; "Winter", "Winter", "Winter", "Winter", "Winter", "Winter", "…
$ yday     &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…
$ month    &lt;chr&gt; "Jan", "Jan", "Jan", "Jan", "Jan", "Jan", "Jan", "Jan", "Jan"…
$ year     &lt;dbl&gt; 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1…</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(chic,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 10
   city  date        temp    o3 dewpoint  pm10 season  yday month  year
   &lt;chr&gt; &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;
 1 chic  1997-01-01  36    5.66    37.5  13.1  Winter     1 Jan    1997
 2 chic  1997-01-02  45    5.53    47.2  41.9  Winter     2 Jan    1997
 3 chic  1997-01-03  40    6.29    38    27.0  Winter     3 Jan    1997
 4 chic  1997-01-04  51.5  7.54    45.5  25.1  Winter     4 Jan    1997
 5 chic  1997-01-05  27   20.8     11.2  15.3  Winter     5 Jan    1997
 6 chic  1997-01-06  17   14.9      5.75  9.36 Winter     6 Jan    1997
 7 chic  1997-01-07  16   11.9      7    20.2  Winter     7 Jan    1997
 8 chic  1997-01-08  19    8.68    17.8  33.1  Winter     8 Jan    1997
 9 chic  1997-01-09  26   13.4     24    12.1  Winter     9 Jan    1997
10 chic  1997-01-10  16   10.4      5.38 24.8  Winter    10 Jan    1997</code></pre>
</div>
</div>
</section></section><section id="the-ggplot2-package" class="level1"><h1>3 The <code>{ggplot2}</code> package</h1>
<p>A <code>ggplot</code> is built up from a few basic elements:</p>
<ol type="1">
<li>
<strong>Data</strong>;</li>
<li>
<strong>Geometries</strong> <code>geom_</code>: the geometric shape (hình dạng) that will represent the data;</li>
<li>
<strong>Aesthetics</strong> <code>aes_</code>: aesthetics (thẩm mỹ) of the geometric or statistical objects, such as postition, color, size, shape, and transparency;</li>
<li>
<strong>Scales</strong> <code>scale_</code>: map between the data and the aesthetics dimensions (ánh xạ từ dữ liệu đến đồ thị), such as data range to plot width or factor values to colors;</li>
<li>
<strong>Statistical transformations</strong> <code>stat_</code>: statistical summaries (thống kê) of data, such as quantitles, fitted curves, and sums;</li>
<li>
<strong>Coordinate system</strong> <code>coord_</code>: the transformation used for mapping data coordinates into the plane of the data rectangles (hệ tọa độ);</li>
<li>
<strong>Facets</strong> <code>facet_</code>: the arrangement of the data into a grid of plots;</li>
<li>
<strong>Visual themes</strong> <code>theme()</code>: the overall visual defaults of a plot, such as background, grids, axes, default typeface, sizes and colors (tông).</li>
</ol>
<p>Each of above elements can be ignored, but can be also called multiple times.</p>
</section><section id="a-default-ggplot" class="level1"><h1>4 A default <code>ggplot</code>
</h1>
<p>Load the package for ability to use the functionality:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library(tidyverse) # can also be imported from the tidy-universe!</span></span></code></pre></div>
</div>
<p>A default <code>ggplot</code> needs three things that you have to specify: the&nbsp;<em>data</em>,&nbsp;<em>aesthetics</em>, and a&nbsp;<em>geometry.</em>:</p>
<ul>
<li><p>starting to define a plot by using <code>ggplot(data = df)</code>;</p></li>
<li><p>if we want to plot (in most cases) 2 variables, we must add <em>positional aesthetics</em> <code>aes(x = var1, y = var2);</code></p></li>
</ul>
<p>Notice that <code>data</code> was mentioned outside the scope of <code>aes()</code>, while variables are being mentioned inside <code>aes()</code>.</p>
<p>For instance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb11-1">(g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Just a blank panel, because <a href="https://ggplot2.tidyverse.org">ggplot2</a> <em>does not know</em> how we plot data ~ we still need to provide geometry. <code>ggplot2</code> allows use to store the <code>ggobject</code> to a variable inside the environment - in this case, <code>g</code> - which can be extended later on (by adding more layers). We can print out the plot to the R interactive but putting all inside the <code>()</code>.</p>
<p>We have different geometries to use (called <code>geoms</code> because each function usually starts with <code>geom_</code>). For e.g., if we want to plot a scatter plot.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb12-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>also a line plot which our managers always like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb13-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>cool but the plot does not look optimal, we can also using mutiple layers of geometry, where the magic and fun start.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it's the same if we write g + geom_line() + geom_point()</span></span>
<span id="cb14-2">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<section id="change-properties-of-geometries" class="level2"><h2 class="anchored" data-anchor-id="change-properties-of-geometries">4.1 Change properties of geometries</h2>
<p>Turn all points to large fire-red diamonds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb15-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'firebrick'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'diamond'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><p><code>ggplot2</code> can unsderstand when we use <code>color</code>, <code>colour</code>, as well as <code>col</code>;</p></li>
<li><p>We can use the <a href="http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf">default color</a> or <a href="https://www.techopedia.com/definition/29788/color-hex-code">hex</a>, or even RGB/RGBA with <code><a href="https://rdrr.io/r/grDevices/rgb.html">rgb()</a></code>. For example:</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb16-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b22222"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamond"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb17-1">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">178</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maxColorValue =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamond"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-13-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</section><section id="replacing-the-default-ggplot2-theme" class="level2"><h2 class="anchored" data-anchor-id="replacing-the-default-ggplot2-theme">4.1 Replacing the default <code>ggplot2</code> theme</h2>
<p>Calling eg <code>theme_bw()</code> using <code>theme_set()</code>, all following plots will have same blank’n’white theme.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>())</span>
<span id="cb18-2"></span>
<span id="cb18-3">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'firebrick'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p><code>theme()</code> is also a useful function to modify all kinds of theme elements (texts, rectangles, and lines).</p>
</section></section><section id="axes" class="level1"><h1>5 Axes</h1>
<section id="change-axis-titles" class="level2"><h2 class="anchored" data-anchor-id="change-axis-titles">5.1 Change axis titles</h2>
<p>Use <code>labs()</code> to assign character string for each lable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'firebrick'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Temperature (°F)'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Can also using <code>xlab()</code> and <code>ylab()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F)"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Not only the degree symbol before F, but also the supper script:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expression</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature ("</span>, degree <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> F, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(Hey, why should we use metric units?!)"</span>)))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section><section id="increase-space-between-axis-and-axis-titles." class="level2"><h2 class="anchored" data-anchor-id="increase-space-between-axis-and-axis-titles.">5.2 Increase space between axis and axis titles.</h2>
<p>Overwrite the default <code>element_text()</code> within the <code>theme()</code> call:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'firebrick'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Year'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Temperature (°F)'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>),</span>
<span id="cb22-5">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p><code>vjust</code> refer to vertical alignment. We can also change the distance by specifying the margin of both text elements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">margin =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">margin</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>),</span>
<span id="cb23-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">margin =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">margin</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p><code>r</code> and <code>t</code> in the <code>margin</code> are <strong>top</strong> and <strong>right</strong>. Margin has 4 arguments: <code>margin(t, r, b, l)</code>. A good way to remember the order of the margin sides is “<strong><em>t-r</em></strong>-ou-<strong><em>b-l</em></strong>-e”.</p>
</section><section id="change-aesthetics-of-the-axis-titles" class="level2"><h2 class="anchored" data-anchor-id="change-aesthetics-of-the-axis-titles">5.3 Change aesthetics of the axis titles</h2>
<p>Again, we use <code>theme()</code> function and modify the <code>axis.tile</code> and/or the subordinated elements <code>axis.tile.x</code> and <code>axis.tile.y</code> . Within <code>element_text()</code> we can modify the default of <code>size</code>, <code>color</code>, and <code>face</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>,</span>
<span id="cb24-5">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"italic"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>the <code>face</code> argument can be used to make the font <code>bold</code>, <code>italic</code>, or even <code>bold.italic</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sienna"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bold'</span>),</span>
<span id="cb25-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orangered"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bold.italic'</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>You could also use a combination of <code>axis.title</code> and <code>axis.title.y</code>, since <code>axis.title.x</code> inherits the values from <code>axis.title</code>. Eg:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sienna"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>),</span>
<span id="cb26-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orangered"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>One can modify some properties for both axis titles and other only for one or properties for each on its own:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sienna"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>),</span>
<span id="cb27-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold.italic"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-23-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section><section id="change-aesthetics-of-axis-text" class="level2"><h2 class="anchored" data-anchor-id="change-aesthetics-of-axis-text">5.4 Change aesthetics of axis text</h2>
<p>Similar to the <code>title</code>, we can change the appearance of the axis text (number indeed) by using <code>axis.text</code> and/or the subordinated elements <code>axis.text.x</code> and <code>axis.text.y</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'firebrick'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expression</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature("</span>,degree <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> F, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dodgerblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>),</span>
<span id="cb28-5">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'italic'</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section><section id="rotate-axis-text" class="level2"><h2 class="anchored" data-anchor-id="rotate-axis-text">5.5 Rotate axis text</h2>
<p>Specifying an <code>angle</code> help us to rotate any text elements. With <code>hjust</code> and <code>vjust</code> we can adjust the position of text afterwards horizontally (0 = left, 1 = right), and vertically (0 = top, 1 = bottom).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'firebrick'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expression</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature("</span>,degree <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> F, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-25-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 50 means 50 degrees, not % =)))</span></span></code></pre></div>
</div>
</section><section id="remove-axis-text-ticks" class="level2"><h2 class="anchored" data-anchor-id="remove-axis-text-ticks">5.6 Remove axis text &amp; ticks</h2>
<p>Rarely a reason to do this but this is how it works.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb31-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>())</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-26-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>If you want to get rid of a theme element, the element is always <code>element_blank</code>.</p>
</section><section id="remove-axis-titles" class="level2"><h2 class="anchored" data-anchor-id="remove-axis-titles">5.7 Remove Axis Titles</h2>
<p>We could again use <code>element_blank()</code> but it is way simpler to just remove the label in the <code>labs()</code> (or <code>xlab()</code>) call:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-27-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Note that <code>NULL</code> removes the element (similarly to <code>element_blank()</code>) while empty quotes <code>""</code> will keep the spacing for the axis title and simply print nothing.</p>
</section><section id="limit-axis-range" class="level2"><h2 class="anchored" data-anchor-id="limit-axis-range">5.8 Limit axis range</h2>
<p>Some time you want to take a closer look at some range of you data. You can do this without subsetting your data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 777 rows containing missing values or values outside the scale range
(`geom_point()`).</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-28-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Alternatively you can use <code>scale_y_continuous(limits = c(0, 50))</code> (subset) or <code>coord_cartesian(ylim = c(0, 50))</code>. The former removes all data points outside the range while the second adjusts the visible area (zooming) and is similar to <code>ylim(c(0, 50))</code> (subset).</p>
</section><section id="force-plot-to-start-at-the-origin" class="level2"><h2 class="anchored" data-anchor-id="force-plot-to-start-at-the-origin">5.9 Force plot to start at the origin</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb35-1">chic_high <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(chic, temp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, o3 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic_high, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> temp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> o3)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkcyan"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature higher than 25°F"</span>,</span>
<span id="cb35-6">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone higher than 20 ppb"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_limits</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-29-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Using <code>coord_cartesian(xlim = c(0,NA), ylim = c(0,NA))</code> will lead to the same result.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb36-1">chic_high <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(chic, temp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, o3 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb36-2"></span>
<span id="cb36-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic_high, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> temp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> o3)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkcyan"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature higher than 25°F"</span>,</span>
<span id="cb36-6">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone higher than 20 ppb"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-30-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>But we can also force it to <em>literally</em> start at the origin!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic_high, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> temp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> o3)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkcyan"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature higher than 25°F"</span>,</span>
<span id="cb37-4">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ozone higher than 20 ppb"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_limits</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clip =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-31-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The argument <code>clip = "off"</code> in any coordinate system, always starting with <code>coord_*</code>, allows to draw outside of the panel area. Call it here to make sure that the tick marks at <code>c(0, 0)</code> are not cut.</p>
</section><section id="axes-with-same-scaling" class="level2"><h2 class="anchored" data-anchor-id="axes-with-same-scaling">5.10 Axes with same scaling</h2>
<p>Use <code>coord_equal()</code> with default <code>ratio = 1</code> to ensure the units are equally scaled on the x-axis and on the y-axis. We can set the aspect ratio of a plot with <code>coord_fixed()</code> or <code>coord_equal()</code>. Both use <code>aspect = 1</code> (1:1) as a default.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> temp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(chic), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sienna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F) + random noise"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 58 rows containing missing values or values outside the scale range
(`geom_point()`).</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-32-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Ratios higher than one make units on the y axis longer than units on the x-axis, and vice versa:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> temp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(chic), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sienna"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F) + random noise"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ratio =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 64 rows containing missing values or values outside the scale range
(`geom_point()`).</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-33-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section><section id="use-a-function-to-alter-labels" class="level2"><h2 class="anchored" data-anchor-id="use-a-function-to-alter-labels">5.11 Use a function to alter labels</h2>
<p>In case you want to format (eg adding % sign) without change the data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Degrees Fahrenheit"</span>))})</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-34-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section></section><section id="titles" class="level1"><h1>6 Titles</h1>
<section id="add-a-title" class="level2"><h2 class="anchored" data-anchor-id="add-a-title">6.1 Add a title</h2>
<p>We can add a title via <code>ggtitle()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperatures in Chicago"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Alternatively, we can use <code>labs()</code>, where we can add serveral arguments ~ metadata of the plot (a sub-title, a caption, and a tag):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(chic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> temp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature (°F)"</span>,</span>
<span id="cb44-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperatures in Chicago"</span>,</span>
<span id="cb44-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Seasonal pattern of daily temperatures from 1997 to 2001"</span>,</span>
<span id="cb44-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data: NMMAPS"</span>,</span>
<span id="cb44-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fig 1"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/index_files/figure-html/unnamed-chunk-36-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section><section id="make-title-bold-add-a-space-at-the-baseline" class="level2"><h2 class="anchored" data-anchor-id="make-title-bold-add-a-space-at-the-baseline">6.2 Make title bold &amp; add a space at the baseline</h2>
</section><section id="adjust-the-position-of-titles" class="level2"><h2 class="anchored" data-anchor-id="adjust-the-position-of-titles">6.3 Adjust the position of titles</h2>
</section><section id="use-a-non-traditional-font-in-your-title" class="level2"><h2 class="anchored" data-anchor-id="use-a-non-traditional-font-in-your-title">6.4 Use a non-traditional font in your title</h2>
</section><section id="change-spacing-in-multi-line-text" class="level2"><h2 class="anchored" data-anchor-id="change-spacing-in-multi-line-text">6.5 Change spacing in multi-line text</h2>
</section></section><section id="legends" class="level1"><h1>7 Legends</h1>
<section id="turn-off-the-legend" class="level2"><h2 class="anchored" data-anchor-id="turn-off-the-legend">7.1 Turn off the legend</h2>
</section><section id="remove-legend-titles" class="level2"><h2 class="anchored" data-anchor-id="remove-legend-titles">7.2 Remove legend titles</h2>
</section><section id="change-legend-position" class="level2"><h2 class="anchored" data-anchor-id="change-legend-position">7.3 Change legend position</h2>
</section><section id="change-legend-direction" class="level2"><h2 class="anchored" data-anchor-id="change-legend-direction">7.4 Change legend direction</h2>
</section><section id="change-style-of-the-legend-title" class="level2"><h2 class="anchored" data-anchor-id="change-style-of-the-legend-title">7.5 Change style of the legend title</h2>
</section><section id="change-legend-title" class="level2"><h2 class="anchored" data-anchor-id="change-legend-title">7.6 Change legend title</h2>
</section><section id="change-order-of-legend-keys" class="level2"><h2 class="anchored" data-anchor-id="change-order-of-legend-keys">7.7 Change order of legend keys</h2>
</section><section id="change-legend-labels" class="level2"><h2 class="anchored" data-anchor-id="change-legend-labels">7.8 Change legend labels</h2>
</section><section id="change-background-boxes-in-the-legend" class="level2"><h2 class="anchored" data-anchor-id="change-background-boxes-in-the-legend">7.9 Change background boxes in the legend</h2>
</section><section id="change-size-of-legend-symbols" class="level2"><h2 class="anchored" data-anchor-id="change-size-of-legend-symbols">7.10 Change size of legend symbols</h2>
</section><section id="leave-a-layer-of-the-legend" class="level2"><h2 class="anchored" data-anchor-id="leave-a-layer-of-the-legend">7.11 Leave a layer of the legend</h2>
</section><section id="manuallt-adding-legend-items" class="level2"><h2 class="anchored" data-anchor-id="manuallt-adding-legend-items">7.12 Manuallt adding legend items</h2>
</section><section id="use-other-legend-styles" class="level2"><h2 class="anchored" data-anchor-id="use-other-legend-styles">7.13 Use other legend styles</h2>
</section></section><section id="backgrounds-grid-lines" class="level1"><h1>8 Backgrounds &amp; Grid lines</h1>
<section id="change-the-panel-background-color" class="level2"><h2 class="anchored" data-anchor-id="change-the-panel-background-color">8.1 Change the panel background color</h2>
</section><section id="change-grid-lines" class="level2"><h2 class="anchored" data-anchor-id="change-grid-lines">8.2 Change grid lines</h2>
</section><section id="change-spacing-of-grid-lines" class="level2"><h2 class="anchored" data-anchor-id="change-spacing-of-grid-lines">8.3 Change spacing of grid lines</h2>
</section><section id="change-the-plot-background-color" class="level2"><h2 class="anchored" data-anchor-id="change-the-plot-background-color">8.4 Change the plot background color</h2>
</section></section><section id="margins" class="level1"><h1>9 Margins</h1>
</section><section id="multi-panel-plots" class="level1"><h1>10 Multi-panel plots</h1>
<section id="create-a-small-multiples-based-on-two-variables" class="level2"><h2 class="anchored" data-anchor-id="create-a-small-multiples-based-on-two-variables">10.1 Create a small multiples based on two variables</h2>
</section><section id="create-a-small-mutilples-based-on-one-variables" class="level2"><h2 class="anchored" data-anchor-id="create-a-small-mutilples-based-on-one-variables">10.2 Create a small mutilples based on one variables</h2>
</section><section id="allow-axes-to-roam-free" class="level2"><h2 class="anchored" data-anchor-id="allow-axes-to-roam-free">10.3 Allow axes to roam free</h2>
</section></section><section id="colors" class="level1"><h1>11. Colors</h1>
<section id="specify-single-colors" class="level2"><h2 class="anchored" data-anchor-id="specify-single-colors">11.1 Specify single colors</h2>
</section><section id="asign-colors-to-variables" class="level2"><h2 class="anchored" data-anchor-id="asign-colors-to-variables">11.2 Asign colors to variables</h2>
</section><section id="qualitative-variables" class="level2"><h2 class="anchored" data-anchor-id="qualitative-variables">11.3 Qualitative variables</h2>
<section id="manually-select-qualitative-colors" class="level3"><h3 class="anchored" data-anchor-id="manually-select-qualitative-colors">11.3.1 Manually select qualitative colors</h3>
</section><section id="use-built-in-qualitative-color-palettes" class="level3"><h3 class="anchored" data-anchor-id="use-built-in-qualitative-color-palettes">11.3.2 Use built-in qualitative color palettes</h3>
</section><section id="use-qualitative-colors-palettes-from-extension-packages" class="level3"><h3 class="anchored" data-anchor-id="use-qualitative-colors-palettes-from-extension-packages">11.3.3 Use qualitative colors palettes from extension packages</h3>
</section></section><section id="quantitiave-variables" class="level2"><h2 class="anchored" data-anchor-id="quantitiave-variables">11.4 Quantitiave variables</h2>
</section></section><section id="themes" class="level1"><h1>12. Themes</h1>
</section><section id="lines" class="level1"><h1>13. Lines</h1>
</section><section id="text" class="level1"><h1>14. Text</h1>
</section><section id="coordinates" class="level1"><h1>15. Coordinates</h1>
</section><section id="chart-types" class="level1"><h1>16. Chart Types</h1>
</section><section id="ribbons-auc-ci-etc." class="level1"><h1>17. Ribbons (AUC, CI, etc.)</h1>
</section><section id="smoothings" class="level1"><h1>18. Smoothings</h1>
</section><section id="interactive-plots" class="level1"><h1>19. Interactive Plots</h1>
</section><section id="remarks-tipps-resources" class="level1"><h1>20. Remarks, Tipps &amp; Resources</h1>
</section><section id="references" class="level1"><h1>References</h1>
<ul>
<li>Source: <a href="https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/" class="uri">https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/</a>;</li>
</ul>


<!-- -->

</section> ]]></description>
  <category>r</category>
  <category>ggplot2</category>
  <category>visualization</category>
  <guid>https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/</guid>
  <pubDate>Sun, 29 Jun 2025 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2025-06-30-a-first-lesson-on-ggplot2/ggplot2.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>A data visualization guide, based on IBCS</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2025-06-26-a-data-viz-guide/</link>
  <description><![CDATA[ 





<section id="motivation" class="level1">
<h1>1 Motivation</h1>
<p>I’ve been inspired by the visualization standard proposed by the <a href="https://www.ibcs.com/ibcs-institute/">IBCS</a> and always tried to pursue such style when doing data visualization stuff. They have a <a href="https://www.ibcs.com/ibcs-standards-1-2">practical guide</a> presented on their website, and imho it’s not really readable and generally downloadable.</p>
<p>Today, when working around an implementation of the IBCS standard for a Power BI report, I came across a wonderful material made by <a href="https://antonz.org/#about">Anton Zhianov</a>. He made the resource more available at:</p>
<ul>
<li>his blog: <a href="https://antonz.org/dataviz-guide/" class="uri">https://antonz.org/dataviz-guide/</a>;</li>
<li>his github: <a href="https://github.com/nalgeon/dataviz" class="uri">https://github.com/nalgeon/dataviz</a>.</li>
</ul>
</section>
<section id="the-success-formula" class="level1 page-columns page-full">
<h1>2 The <code>SUCCESS</code> formula</h1>
<p>I created these cards as a brief summary, utilizing the assistance of Gemini 2.5 Pro in <a href="https://aistudio.google.com/">Google AI Studio</a> and my preferred Claude 4.0 Sonnet.</p>
<p>While the original version from IBCS sequentially constructs a <code>SUCCESS</code> formula, I am leaning toward the way Anton had presented the rule ~ depicting how I am normally making a chart:</p>
<blockquote class="blockquote">
<p>The message to deliver → The canvas to paste the data → The chart to use → Removing redundant things → Condensing more information → Revisiting integrity &amp; unification.</p>
</blockquote>
<div class="column-screen-inset">
<style>
/* --- Main Framework for 4-3 Layout --- */
.ibcs-framework {
    display: flex;
    flex-direction: column; /* Stack the rows vertically */
    align-items: center; /* Center the rows horizontally */
    gap: 30px; /* Increased space between the two rows */
    margin: 40px 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* --- Row Styling --- */
.ibcs-row {
    display: flex;
    justify-content: center; /* Center cards within the row */
    flex-wrap: wrap; /* Allow cards to wrap on smaller screens */
    gap: 30px; /* Increased space between cards */
    width: 100%;
    max-width: 1800px; /* Max width for the entire grid */
}

/* --- Card Styling (Bigger and Refined) --- */
.ibcs-card {
    background: #ffffff;
    border: 1px solid #dee2e6;
    border-radius: 12px;
    padding: 30px;
    transition: all 0.3s ease;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    /* Defines card width - it will try to be 400px but can shrink */
    flex: 1 1 400px;
    max-width: 450px; /* Prevents cards from getting too wide on large screens */
    box-shadow: 0 4px 6px rgba(0,0,0,0.05);
}

.ibcs-card:hover {
    border-color: #0d6efd;
    box-shadow: 0 10px 25px rgba(13, 110, 253, 0.15);
    transform: translateY(-8px);
}

.ibcs-card.negative:hover {
    border-color: #dc3545;
    box-shadow: 0 10px 25px rgba(220, 53, 69, 0.15);
}

/* --- Card Content --- */
.ibcs-header {
    display: flex;
    align-items: baseline;
    gap: 15px;
    margin-bottom: 20px;
}

.ibcs-number {
    font-size: 2.5em;
    font-weight: 700;
    color: #f1f3f5;
}

.ibcs-title-group { flex-grow: 1; }
.ibcs-title { font-size: 1.8em; font-weight: 700; color: #212529; }
.ibcs-subtitle { color: #6c757d; font-size: 1.1em; font-style: italic; }

/* --- Image Container and Image Fill --- */
.ibcs-image {
    width: 100%;
    height: 220px; /* Taller for horizontal images */
    border: 2px dashed #d1d5db; /* Dotted border */
    border-radius: 8px;
    margin-bottom: 20px;
    overflow: hidden; /* Crucial for containing the image */
    background: #f8f9fa;
    display: flex;
}

.ibcs-image img {
    width: 100%;
    height: 100%;
    object-fit: cover; /* This makes the image fill the container */
    transition: transform 0.4s ease;
}

.ibcs-card:hover .ibcs-image img {
    transform: scale(1.08); /* More pronounced zoom on hover */
}

/* --- Hover Details --- */
.ibcs-details {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.4s ease-out;
    color: #343a40;
    font-size: 1.05em;
    line-height: 1.6;
    border-top: 1px solid #e9ecef;
    padding-top: 0;
}

.ibcs-card:hover .ibcs-details {
    max-height: 600px; /* Increased to accommodate more text */
    transition: max-height 0.5s ease-in;
    padding-top: 20px; /* Add padding only when details are shown */
}

.ibcs-details ul { padding-left: 20px; margin: 0; }
.ibcs-details li { margin-bottom: 10px; }
.ibcs-key { font-weight: 600; color: #198754; }
.ibcs-avoid { font-weight: 600; color: #dc3545; }
</style>

<div class="ibcs-framework">
    <!-- Top Row with 4 Cards -->
    <div class="ibcs-row">
        <div class="ibcs-card">
            <div class="ibcs-header">
                <div class="ibcs-number">1</div>
                <div class="ibcs-title-group">
                    <div class="ibcs-title">SAY</div>
                    <div class="ibcs-subtitle">Convey a Message</div>
                </div>
            </div>
            <div class="ibcs-image">
                <img src="https://lktuan.github.io/blog/2025-06-26-a-data-viz-guide/img/1_say.png" alt="A chart with a clear title and a highlighted key finding">
            </div>
            <div class="ibcs-details">
                A report's purpose is to deliver an actionable message, not just data.
                <ul>
                    <li><span class="ibcs-key">Action:</span> Structure your narrative with the <strong>Situation-Problem-Question</strong> framework to provide context and focus.</li>
                    <li><span class="ibcs-key">Action:</span> State your main message—be it a <em>detection</em>, <em>explanation</em>, or <em>suggestion</em>—upfront (Pyramid Principle).</li>
                    <li><span class="ibcs-avoid">Trap:</span> Creating "data dumps" that force the audience to find the story themselves.</li>
                </ul>
            </div>
        </div>
        <div class="ibcs-card">
            <div class="ibcs-header">
                <div class="ibcs-number">2</div>
                <div class="ibcs-title-group">
                    <div class="ibcs-title">STRUCTURE</div>
                    <div class="ibcs-subtitle">Organize Content</div>
                </div>
            </div>
            <div class="ibcs-image">
                <img src="https://lktuan.github.io/blog/2025-06-26-a-data-viz-guide/img/2_structure.png" alt="A MECE diagram showing logical, non-overlapping groups">
            </div>
            <div class="ibcs-details">
                A logical structure forms a convincing and easily digestible storyline.
                <ul>
                    <li><span class="ibcs-key">Action:</span> Ensure all categories are <strong>MECE</strong> (Mutually Exclusive, Collectively Exhaustive) to avoid confusion and gaps.</li>
                    <li><span class="ibcs-key">Action:</span> Maintain consistency in wording, item types, and visualizations within any group.</li>
                    <li><span class="ibcs-avoid">Trap:</span> Presenting flat lists of information without clear hierarchy or logical flow.</li>
                </ul>
            </div>
        </div>
        <div class="ibcs-card">
            <div class="ibcs-header">
                <div class="ibcs-number">3</div>
                <div class="ibcs-title-group">
                    <div class="ibcs-title">EXPRESS</div>
                    <div class="ibcs-subtitle">Choose Proper Visualization</div>
                </div>
            </div>
            <div class="ibcs-image">
                <img src="https://lktuan.github.io/blog/2025-06-26-a-data-viz-guide/img/3_express.png" alt="A bar chart for comparison next to a crossed-out pie chart">
            </div>
            <div class="ibcs-details">
                Select visuals based on the task: charts for patterns, tables for precision.
                <ul>
                    <li><span class="ibcs-key">Action:</span> Use column/line charts for <strong>time-series</strong> analysis and bar charts for <strong>structural</strong> comparisons.</li>
                    <li><span class="ibcs-key">Action:</span> Use tables when users need to look up precise numerical values.</li>
                    <li><span class="ibcs-avoid">Trap:</span> Defaulting to visually weak charts like pies, gauges, and radar charts that distort data.</li>
                </ul>
            </div>
        </div>
        <div class="ibcs-card negative">
            <div class="ibcs-header">
                <div class="ibcs-number">4</div>
                <div class="ibcs-title-group">
                    <div class="ibcs-title">SIMPLIFY</div>
                    <div class="ibcs-subtitle">Eliminate Clutter</div>
                </div>
            </div>
            <div class="ibcs-image">
                <img src="https://lktuan.github.io/blog/2025-06-26-a-data-viz-guide/img/4_simplify.png" alt="A before-and-after comparison showing a cluttered chart made clean">
            </div>
            <div class="ibcs-details">
                Every element must serve a purpose. If it doesn't help, remove it.
                <ul>
                    <li><span class="ibcs-key">Action:</span> Maximize the <strong>data-ink ratio</strong> by removing all decorative elements (shadows, 3D, backgrounds, borders).</li>
                    <li><span class="ibcs-key">Action:</span> Replace gridlines and axes with direct data labels for a cleaner look.</li>
                    <li><span class="ibcs-avoid">Trap:</span> "Chartjunk" that distracts from the core message and reduces clarity.</li>
                </ul>
            </div>
        </div>
    </div>
    <!-- Bottom Row with 3 Cards -->
    <div class="ibcs-row">
        <div class="ibcs-card">
            <div class="ibcs-header">
                <div class="ibcs-number">5</div>
                <div class="ibcs-title-group">
                    <div class="ibcs-title">CONDENSE</div>
                    <div class="ibcs-subtitle">Increase Information Density</div>
                </div>
            </div>
            <div class="ibcs-image">
                <img src="https://lktuan.github.io/blog/2025-06-26-a-data-viz-guide/img/5_condense.png" alt="A dashboard with multiple small, related charts (small multiples)">
            </div>
            <div class="ibcs-details">
                Provide richer context by showing more relevant data on a single page.
                <ul>
                    <li><span class="ibcs-key">Action:</span> Use <strong>small multiples</strong> to enable easy comparison across many categories at once.</li>
                    <li><span class="ibcs-key">Action:</span> Embed visuals like sparklines or bars directly into tables to add context without taking up space.</li>
                    <li><span class="ibcs-avoid">Trap:</span> Using low-density visuals that force users to flip between pages to connect ideas.</li>
                </ul>
            </div>
        </div>
        <div class="ibcs-card negative">
            <div class="ibcs-header">
                <div class="ibcs-number">6</div>
                <div class="ibcs-title-group">
                    <div class="ibcs-title">CHECK</div>
                    <div class="ibcs-subtitle">Ensure Visual Integrity</div>
                </div>
            </div>
            <div class="ibcs-image">
                <img src="https://lktuan.github.io/blog/2025-06-26-a-data-viz-guide/img/6_check.png" alt="A bar chart with its axis correctly starting at zero to show true proportions">
            </div>
            <div class="ibcs-details">
                Your visuals must be honest. Follow non-negotiable rules of representation.
                <ul>
                    <li><span class="ibcs-avoid">Rule:</span> Bar and column chart value axes <strong>must</strong> start at zero to avoid distorting proportions.</li>
                    <li><span class="ibcs-avoid">Rule:</span> When using areas (e.g., bubbles), scale the <strong>area</strong> to the value, not the diameter.</li>
                    <li><span class="ibcs-key">Action:</span> Use identical scales for all charts on a page that share the same unit.</li>
                </ul>
            </div>
        </div>
        <div class="ibcs-card">
            <div class="ibcs-header">
                <div class="ibcs-number">7</div>
                <div class="ibcs-title-group">
                    <div class="ibcs-title">UNIFY</div>
                    <div class="ibcs-subtitle">Apply Semantic Notation</div>
                </div>
            </div>
            <div class="ibcs-image">
                <img src="https://lktuan.github.io/blog/2025-06-26-a-data-viz-guide/img/7_unify.png" alt="A legend showing IBCS standards for colors and fills for scenarios">
            </div>
            <div class="ibcs-details">
                Create a consistent visual language: <em>What looks the same should mean the same.</em>
                <ul>
                    <li><span class="ibcs-key">Notation:</span> Use consistent fills for scenarios: <strong>Solid</strong> for Actual (AC), <strong>Outlined</strong> for Plan (PL), <strong>Hatched</strong> for Forecast (FC).</li>
                    <li><span class="ibcs-key">Notation:</span> Use <span style="color:#198754; font-weight:600;">Green</span> for positive impacts (e.g., profit up) and <span style="color:#dc3545; font-weight:600;">Red</span> for negative.</li>
                </ul>
            </div>
        </div>
    </div>
</div>
</div>
<p>Happy visualizing! happy vibing! - Tuan.</p>


<!-- -->

</section>

 ]]></description>
  <category>visualization</category>
  <guid>https://lktuan.github.io/blog/2025-06-26-a-data-viz-guide/</guid>
  <pubDate>Wed, 25 Jun 2025 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2025-06-26-a-data-viz-guide/img/ibcs_pnl.png" medium="image" type="image/png" height="74" width="144"/>
</item>
<item>
  <title>Let’s build GPT, in code, spelled out!</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2025-04-27-nn-z2h-p7/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important callout-titled" title="This is not orginal content!">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This is not orginal content!
</div>
</div>
<div class="callout-body-container callout-body">
<p>Long time no LLMs, past months struggled with job-search and personal stuffs distracted me from learning AI. No I am continuing my favorite AI series Neural Networks, from Zero to Hero by Andrej Karpathy.</p>
<p>I will be learning to build a GPT from scratch. This is my note and hope I’ll survive :)</p>
<p>Links: <a href="https://youtu.be/kCc8FmEb1nY?si=4Fa3EAjuTQ5UbOFk" class="uri">https://youtu.be/kCc8FmEb1nY?si=4Fa3EAjuTQ5UbOFk</a></p>
</div>
</div>
<section id="intro-chatgpt-transformers-nanogpt-shakespeare" class="level1">
<h1>1 intro: ChatGPT, Transformers, <code>nanoGPT</code>, Shakespeare</h1>
<ul>
<li>ChatGPT (GPT stands for Generative Pre-trained Transformer) is a <em>probabilistic</em> system that for anyone’s prompt it can give us multiple answers. It models sequence of words (or token) and tries to predict the next word to complete the prompt we give;</li>
<li>Transformers, proposed by Vaswani et al.&nbsp;in the landmark paper “Attention is All You Need” back in 2017, is an architecture that did all those heavy lifting under the hood of ChatGPT;</li>
<li><code>nanoGPT</code> is “the simplest, fastest repository for training/finetuning medium-sized GPTs” written as a side project by Andrej. We gonna follow this code structure in this lecture, but will not rebuild the whole 124M params GPT-2;</li>
<li>Shakespearse tiny dataset will be the text data that we’ll be working on.</li>
</ul>
</section>
<section id="baseline-language-modeling-code-setup" class="level1">
<h1>2 baseline language modeling, code setup</h1>
<section id="reading-and-exploring-the-data" class="level2">
<h2 class="anchored" data-anchor-id="reading-and-exploring-the-data">2.1 reading and exploring the data</h2>
<p>The <em>tinyshakepeare</em> dataset contains 1,115,394 characters, here are the first 1000 ones look like:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource text number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">First Citizen:</span>
<span id="cb1-2">Before we proceed any further, hear me speak.</span>
<span id="cb1-3"></span>
<span id="cb1-4">All:</span>
<span id="cb1-5">Speak, speak.</span>
<span id="cb1-6"></span>
<span id="cb1-7">First Citizen:</span>
<span id="cb1-8">You are all resolved rather to die than to famish?</span>
<span id="cb1-9"></span>
<span id="cb1-10">All:</span>
<span id="cb1-11">Resolved. resolved.</span>
<span id="cb1-12"></span>
<span id="cb1-13">First Citizen:</span>
<span id="cb1-14">First, you know Caius Marcius is chief enemy to the people.</span>
<span id="cb1-15"></span>
<span id="cb1-16">All:</span>
<span id="cb1-17">We know't, we know't.</span>
<span id="cb1-18"></span>
<span id="cb1-19">First Citizen:</span>
<span id="cb1-20">Let us kill him, and we'll have corn at our own price.</span>
<span id="cb1-21">Is't a verdict?</span>
<span id="cb1-22"></span>
<span id="cb1-23">All:</span>
<span id="cb1-24">No more talking on't; let it be done: away, away!</span>
<span id="cb1-25"></span>
<span id="cb1-26">Second Citizen:</span>
<span id="cb1-27">One word, good citizens.</span>
<span id="cb1-28"></span>
<span id="cb1-29">First Citizen:</span>
<span id="cb1-30">We are accounted poor citizens, the patricians good.</span>
<span id="cb1-31">What authority surfeits on would relieve us: if they</span>
<span id="cb1-32">would yield us but the superfluity, while it were</span>
<span id="cb1-33">wholesome, we might guess they relieved us humanely;</span>
<span id="cb1-34">but they think we are too dear: the leanness that</span>
<span id="cb1-35">afflicts us, the object of our misery, is as an</span>
<span id="cb1-36">inventory to particularise their abundance; our</span>
<span id="cb1-37">sufferance is a gain to them Let us revenge this with</span>
<span id="cb1-38">our pikes, ere we become rakes: for the gods know I</span>
<span id="cb1-39">speak this in hunger for bread, not in thirst for revenge.</span></code></pre></div>
<p>In contains 65 different characters, the first one was <em>space</em>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb2-1"> !$&amp;',-.3:;?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</span></code></pre></div>
<p>This list of characters can be call the <em>dictionary</em>, same with previous lectures, we create mapping from characters to integers/indicesindices <code>stoi</code> and vice versa <code>itos</code>.</p>
</section>
<section id="tokenization-trainval-split" class="level2">
<h2 class="anchored" data-anchor-id="tokenization-trainval-split">2.2 tokenization, train/val split</h2>
<p>The two functions <code>encode</code> and <code>decode</code> can let us transition from string (for human reading) to number (for machine reading) and vice versa.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hii there"</span>))</span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(decode(encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hii there"</span>)))</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb4-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>]</span>
<span id="cb4-2">hii there</span></code></pre></div>
<p>This is a very simple <em>tokenization and detokenization</em>, there are more complex/effective ones out there in the industry, for eg., <a href="https://github.com/google/sentencepiece">SentencePiece</a> by Google, and <a href="https://github.com/openai/tiktoken">tiktoken</a> by OpenAI, which implement more sophisticated paradigm like <a href="https://aclanthology.org/P16-1162/">BPE</a>.</p>
<p>Then use this set of utility we can convert our dataset to PyTorch tensor:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we use PyTorch: https://pytorch.org</span></span>
<span id="cb5-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(encode(text), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>)</span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(data.shape, data.dtype)</span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(data[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the first 100 characters we looked at earier will to the GPT look like this</span></span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb6-1">torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Size</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1115394</span>]) torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">int64</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tensor</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-3">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">61</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-4">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-5">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-6">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-7">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span>])</span></code></pre></div>
<p>Finally for the very first pre-processing we want to use the last 10% of out dataset as the validation/development split. We dont want to build a model that mimick the Shakepeare’s tone, we want it to be generative/creative.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first 90% will be train, rest val</span></span>
<span id="cb7-2">train_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[:n]</span>
<span id="cb7-3">val_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[n:]</span></code></pre></div>
</section>
<section id="data-loader-batches-of-chunks-of-data" class="level2">
<h2 class="anchored" data-anchor-id="data-loader-batches-of-chunks-of-data">2.3 data loader, batches of chunks of data</h2>
<p>Now the idea of our character-level language model is to predict the next character(s) given a sequence of characters, with a certain maximum length, not the whole previous part of the dataset. Same with previos lecture, we can set it (<code>block_size</code>, or <code>context_length</code>) to <em>8</em>.</p>
<p>And the second constraint that we want to setup is the <em>batch size</em> of chunk that we feed to the <em>transformer</em>, it will reduce the cost of calculation while retain the efficiency of training. You can imagine the <code>context</code> and <code>target</code> like this:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1337</span>)</span>
<span id="cb8-2">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># how many independent sequences will we process in parallel?</span></span>
<span id="cb8-3">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># what is the maximum context length for predictions?</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_batch(split):</span>
<span id="cb8-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a small batch of data of inputs x and targets y</span></span>
<span id="cb8-7">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_data <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> val_data</span>
<span id="cb8-8">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> block_size, (batch_size,))</span>
<span id="cb8-9">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([data[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>block_size] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ix])</span>
<span id="cb8-10">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([data[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>block_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ix])</span>
<span id="cb8-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x, y</span>
<span id="cb8-12"></span>
<span id="cb8-13">xb, yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_batch(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span>
<span id="cb8-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inputs:'</span>)</span>
<span id="cb8-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(xb.shape)</span>
<span id="cb8-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(xb)</span>
<span id="cb8-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'targets:'</span>)</span>
<span id="cb8-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(yb.shape)</span>
<span id="cb8-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(yb)</span>
<span id="cb8-20"></span>
<span id="cb8-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'----'</span>)</span>
<span id="cb8-22"></span>
<span id="cb8-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(batch_size): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch dimension</span></span>
<span id="cb8-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(block_size): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># time dimension</span></span>
<span id="cb8-25">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xb[b, :t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb8-26">        target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yb[b,t]</span>
<span id="cb8-27">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"when input is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>context<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>tolist()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> the target: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb9-1">inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-2">torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Size</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>])</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tensor</span>([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-4">        [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-5">        [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-6">        [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>]])</span>
<span id="cb9-7">targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb9-8">torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Size</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>])</span>
<span id="cb9-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tensor</span>([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-10">        [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-11">        [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-12">        [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span>]])</span>
<span id="cb9-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">----</span></span>
<span id="cb9-14">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span></span>
<span id="cb9-15">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span></span>
<span id="cb9-16">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb9-17">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span></span>
<span id="cb9-18">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-19">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span></span>
<span id="cb9-20">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span></span>
<span id="cb9-21">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span></span>
<span id="cb9-22">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span></span>
<span id="cb9-23">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span></span>
<span id="cb9-24">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-25">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span></span>
<span id="cb9-26">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span></span>
<span id="cb9-27">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span></span>
<span id="cb9-28">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span></span>
<span id="cb9-29">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-30">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span></span>
<span id="cb9-31">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-32">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span></span>
<span id="cb9-33">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span></span>
<span id="cb9-34">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span></span>
<span id="cb9-35">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span></span>
<span id="cb9-36">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-37">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span></span>
<span id="cb9-38">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb9-39">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span></span>
<span id="cb9-40">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb9-41">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-42">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span></span>
<span id="cb9-43">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-44">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span></span>
<span id="cb9-45">when input is [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>] the target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span></span></code></pre></div>
</section>
<section id="simplest-baseline-bigram-language-model-loss-generation" class="level2">
<h2 class="anchored" data-anchor-id="simplest-baseline-bigram-language-model-loss-generation">2.4 simplest baseline: bigram language model, loss, generation</h2>
<p>We’ll go into the most simplest thing in the realm of NLP - the <code>bigram</code> language model ~ where the next character is predicted based on 1 single previous character.</p>
<p>Below we are constructing a child class of <code>nn.Module</code> which is a <code>bigram</code> language model under a <code>vocab_size</code> = 65 language space. The state of the model is presented by <code>token_embedding_table</code> ~ how it thinks about the next character given one.</p>
<p>We constructed a <code>loss</code> function based on <code>cross_entropy</code> to quantify the quality of the model, and also implemented a <code>generate</code> function to sample from the model.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| code-fold: true</span></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb10-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb10-5">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1337</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BigramLanguageModel(nn.Module):</span>
<span id="cb10-8"></span>
<span id="cb10-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vocab_size):</span>
<span id="cb10-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb10-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each token directly reads off the logits for the next token from a lookup table</span></span>
<span id="cb10-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.token_embedding_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(vocab_size, vocab_size)</span>
<span id="cb10-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 26x26 2D Tensor, represents possibility of each char right after a char.</span></span>
<span id="cb10-14"></span>
<span id="cb10-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx, targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb10-16"></span>
<span id="cb10-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># idx and targets are both (B,T) tensor of integers</span></span>
<span id="cb10-18">        logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.token_embedding_table(idx) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (B,T,C)</span></span>
<span id="cb10-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Batch = 4,Time = 8,Channel = 65)</span></span>
<span id="cb10-20"></span>
<span id="cb10-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb10-22">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb10-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb10-24">            B, T, C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.shape</span>
<span id="cb10-25">            logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.view(B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T, C) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stretch this out of Time dimension</span></span>
<span id="cb10-26">            targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.view(B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T)</span>
<span id="cb10-27">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, targets)</span>
<span id="cb10-28">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://docs.pytorch.org/docs/stable/generated/torch.nn.functional.cross_entropy.html</span></span>
<span id="cb10-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># C = number of classes</span></span>
<span id="cb10-30">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># B or N = Batch size</span></span>
<span id="cb10-31"></span>
<span id="cb10-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> logits, loss</span>
<span id="cb10-33"></span>
<span id="cb10-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx, max_new_tokens):</span>
<span id="cb10-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># idx is (B, T) array of indices in the current context</span></span>
<span id="cb10-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_new_tokens):</span>
<span id="cb10-37">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the predictions</span></span>
<span id="cb10-38">            logits, loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>(idx)</span>
<span id="cb10-39">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># focus only on the last time step</span></span>
<span id="cb10-40">            logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># becomes (B, C)</span></span>
<span id="cb10-41">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply softmax to get probabilities</span></span>
<span id="cb10-42">            probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (B, C)</span></span>
<span id="cb10-43">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample from the distribution</span></span>
<span id="cb10-44">            idx_next <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(probs, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (B, 1)</span></span>
<span id="cb10-45">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># append sampled index to the running sequence</span></span>
<span id="cb10-46">            idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((idx, idx_next), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (B, T+1)</span></span>
<span id="cb10-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> idx</span>
<span id="cb10-48"></span>
<span id="cb10-49">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BigramLanguageModel(vocab_size)</span>
<span id="cb10-50">logits, loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m(xb, yb)</span>
<span id="cb10-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logits.shape)</span>
<span id="cb10-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss)</span>
<span id="cb10-53"></span>
<span id="cb10-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(decode(m.generate(idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>), max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tolist()))</span></code></pre></div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb11-1">torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Size</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>])</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tensor</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.8786</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> grad_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;</span>NllLossBackward0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>)</span>
<span id="cb11-3"></span>
<span id="cb11-4">SKIcLT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>AcELMoTbvZv C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span>nq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>QE33<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>CJqkOKH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;:</span>la<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>oiywkHjgChzbQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span>u<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">bLIgwevmyFJGUGp</span></span>
<span id="cb11-5">wnYWmnxKWWev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tDqXErVKLgJ</span></code></pre></div>
<p>The sampling is garbage, since our model are in a completely random state right now - the loss is <code>4.88</code> which is near to probability of each character in the <code>vocab_size</code> space (<code>1/65</code>). We are going to train the model!</p>
</section>
<section id="training-the-bigram-model" class="level2">
<h2 class="anchored" data-anchor-id="training-the-bigram-model">2.5 training the bigram model</h2>
</section>
<section id="port-our-code-to-a-script" class="level2">
<h2 class="anchored" data-anchor-id="port-our-code-to-a-script">2.6 port our code to a script</h2>
</section>
</section>
<section id="building-the-self-attention" class="level1">
<h1>3 Building the “self-attention”</h1>
<section id="version-1-averaging-past-context-with-for-loops-the-weakest-form-of-aggregation" class="level2">
<h2 class="anchored" data-anchor-id="version-1-averaging-past-context-with-for-loops-the-weakest-form-of-aggregation">3.1 version 1: averaging past context with for loops, the weakest form of aggregation</h2>
</section>
<section id="the-trick-in-self-attention-matrix-multiply-as-weighted-aggregation" class="level2">
<h2 class="anchored" data-anchor-id="the-trick-in-self-attention-matrix-multiply-as-weighted-aggregation">3.2 the trick in self-attention: matrix multiply as weighted aggregation</h2>
</section>
<section id="version-2-using-matrix-multiply" class="level2">
<h2 class="anchored" data-anchor-id="version-2-using-matrix-multiply">3.3 version 2: using matrix multiply</h2>
</section>
<section id="version-3-adding-softmax" class="level2">
<h2 class="anchored" data-anchor-id="version-3-adding-softmax">3.4 version 3: adding softmax</h2>
</section>
<section id="minor-code-cleanup" class="level2">
<h2 class="anchored" data-anchor-id="minor-code-cleanup">3.5 minor code cleanup</h2>
</section>
<section id="positional-encoding" class="level2">
<h2 class="anchored" data-anchor-id="positional-encoding">3.6 positional encoding</h2>
</section>
<section id="the-crux-of-the-video-version-4-self-attention" class="level2">
<h2 class="anchored" data-anchor-id="the-crux-of-the-video-version-4-self-attention">3.7 THE CRUX OF THE VIDEO: version 4: self-attention</h2>
</section>
<section id="note-1-attention-as-communication" class="level2">
<h2 class="anchored" data-anchor-id="note-1-attention-as-communication">3.8 note 1: attention as communication</h2>
</section>
<section id="note-2-attention-has-no-notion-of-space-operates-over-sets" class="level2">
<h2 class="anchored" data-anchor-id="note-2-attention-has-no-notion-of-space-operates-over-sets">3.9 note 2: attention has no notion of space, operates over sets</h2>
</section>
<section id="note-3-there-is-no-communication-across-batch-dimension" class="level2">
<h2 class="anchored" data-anchor-id="note-3-there-is-no-communication-across-batch-dimension">3.10 note 3: there is no communication across batch dimension</h2>
</section>
<section id="note-4-encoder-blocks-vs.-decoder-blocks" class="level2">
<h2 class="anchored" data-anchor-id="note-4-encoder-blocks-vs.-decoder-blocks">3.11 note 4: encoder blocks vs.&nbsp;decoder blocks</h2>
</section>
<section id="note-5-attention-vs.-self-attention-vs.-cross-attention" class="level2">
<h2 class="anchored" data-anchor-id="note-5-attention-vs.-self-attention-vs.-cross-attention">3.12 note 5: attention vs.&nbsp;self-attention vs.&nbsp;cross-attention</h2>
</section>
<section id="note-6-scaled-self-attention.-why-divide-by-sqrthead_size" class="level2">
<h2 class="anchored" data-anchor-id="note-6-scaled-self-attention.-why-divide-by-sqrthead_size">3.13 note 6: “scaled” self-attention. why divide by sqrt(head_size)</h2>
</section>
</section>
<section id="building-the-transformer" class="level1">
<h1>4 Building the Transformer</h1>
<section id="inserting-a-single-self-attention-block-to-our-network" class="level2">
<h2 class="anchored" data-anchor-id="inserting-a-single-self-attention-block-to-our-network">4.1 inserting a single self-attention block to our network</h2>
</section>
<section id="multi-headed-self-attention" class="level2">
<h2 class="anchored" data-anchor-id="multi-headed-self-attention">4.2 multi-headed self-attention</h2>
</section>
<section id="feedforward-layers-of-transformer-block" class="level2">
<h2 class="anchored" data-anchor-id="feedforward-layers-of-transformer-block">4.3 feedforward layers of transformer block</h2>
</section>
<section id="residual-connections" class="level2">
<h2 class="anchored" data-anchor-id="residual-connections">4.4 residual connections</h2>
</section>
<section id="layernorm-and-its-relationship-to-our-previous-batchnorm" class="level2">
<h2 class="anchored" data-anchor-id="layernorm-and-its-relationship-to-our-previous-batchnorm">4.5 layernorm (and its relationship to our previous batchnorm)</h2>
</section>
<section id="scaling-up-the-model-creating-a-few-variables.-adding-dropout" class="level2">
<h2 class="anchored" data-anchor-id="scaling-up-the-model-creating-a-few-variables.-adding-dropout">4.6 scaling up the model! creating a few variables. adding dropout</h2>
</section>
</section>
<section id="notes-on-transformer" class="level1">
<h1>5 Notes on Transformer</h1>
<section id="encoder-vs.-decoder-vs.-both-transformers" class="level2">
<h2 class="anchored" data-anchor-id="encoder-vs.-decoder-vs.-both-transformers">5.1 encoder vs.&nbsp;decoder vs.&nbsp;both (?) Transformers</h2>
</section>
<section id="super-quick-walkthrough-of-nanogpt-batched-multi-headed-self-attention" class="level2">
<h2 class="anchored" data-anchor-id="super-quick-walkthrough-of-nanogpt-batched-multi-headed-self-attention">5.2 super quick walkthrough of nanoGPT, batched multi-headed self-attention</h2>
</section>
<section id="back-to-chatgpt-gpt-3-pretraining-vs.-finetuning-rlhf" class="level2">
<h2 class="anchored" data-anchor-id="back-to-chatgpt-gpt-3-pretraining-vs.-finetuning-rlhf">5.3 back to ChatGPT, GPT-3, pretraining vs.&nbsp;finetuning, RLHF</h2>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">5.4 conclusions</h2>
</section>
</section>
<section id="resources" class="level1">
<h1>6 resources</h1>
<ul>
<li>Colab notebook: <a href="https://colab.research.google.com/drive/1JMLa53HDuA-i7ZBmqV7ZnA3c_fvtXnx-?usp=sharing" class="uri">https://colab.research.google.com/drive/1JMLa53HDuA-i7ZBmqV7ZnA3c_fvtXnx-?usp=sharing</a>;</li>
<li><code>nanoGPT</code>: <a href="https://github.com/karpathy/nanoGPT" class="uri">https://github.com/karpathy/nanoGPT</a>;</li>
<li>TinyShakepeare dataset: <a href="https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt" class="uri">https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt</a>;</li>
</ul>


<!-- -->

</section>

 ]]></description>
  <category>til</category>
  <category>python</category>
  <category>andrej karpathy</category>
  <category>nn-z2h</category>
  <category>neural networks</category>
  <guid>https://lktuan.github.io/blog/2025-04-27-nn-z2h-p7/</guid>
  <pubDate>Sat, 26 Apr 2025 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2025-04-27-nn-z2h-p7/attention.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>I completed 25 days of DAX (Friday) challenge, in 2 days!</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2025-02-12-25days_DAX_challenge_ed3/</link>
  <description><![CDATA[ 





<section id="my-thought" class="level1">
<h1>My thought</h1>
<p>I did the challenge a couple of months after it closed, so all the solutions by Curbal were available. I practiced along with watching the solution, and asking LLMs (mostly Claude 3.5 Sonnet, and DeepSeek-R1) for advice on a calculation pattern, or to give a more efficient approach.</p>
<p>I am satisfied with the ability to solve around 50-60% myself as I am new to DAX.</p>
<p>Everything in DAX (Data, contexts, filters, aggregators, parameters, etc) are <strong>tables</strong>. I do not like the way Curbal always used <code>SUMMARIZE()</code> but the instruction of how can we drag variables to a <strong>table</strong> (as a pivot table), do some sorting, or export to Excel to understand to flow of calculation is good. Tips on working with DAX query view is also helpful.</p>
<p>What I do not like about DAX is there are <strong>several ways</strong> to achieve a calculation pattern, and actually we don’t need such many functions that DAX offers (see this <a href="https://www.linkedin.com/posts/brianjuliusdc_dax-nocalculate-rochesmaxim-activity-7294362624358567936-SgNC">post</a> from Brian Julius).</p>
<p>Anyway, I am now more confident with DAX. Happy learning!</p>
</section>
<section id="my-solution" class="level1">
<h1>My solution</h1>
<p><a href="https://github.com/lktuan/lktuan.github.io/tree/main/assets/20250210_25daysDAX_ed3_Northwind">Here</a> is my final file.</p>
<section id="day-1-which-product-had-been-ordered-the-most-in-terms-of-quantity" class="level2">
<h2 class="anchored" data-anchor-id="day-1-which-product-had-been-ordered-the-most-in-terms-of-quantity">Day 1: Which product had been ordered the most (in terms of quantity) ?</h2>
<p>View the data on DAX query view:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb1-1">EVALUATE</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUMMARIZE</span> (</span>
<span id="cb1-3">    Products<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-4">    Products[ProductID]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-5">    Products[ProductName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Qty"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span> ( Order_Details[Quantity] )</span>
<span id="cb1-7">)</span>
<span id="cb1-8">ORDER BY [Qty] DESC</span></code></pre></div>
<p>We need to get the <code>TOPN()</code> <strong>1</strong>, and then <code>CONCATENATE()</code> all products that have largest order quantities (there is such scenario):</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb2-1">D1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb2-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUMMARIZE</span> (</span>
<span id="cb2-6">            Products<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-7">            Products[ProductID]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-8">            Products[ProductName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Qty"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span> ( Order_Details[Quantity] )</span>
<span id="cb2-10">        )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-11">        [Qty]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb2-12">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-13">    Products[ProductName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-15">    Products[ProductName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ASC</span>
<span id="cb2-16">)</span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Concat ProductName and order ascending by itself</span></span></code></pre></div>
<p>The answer is: “Camembert Pierrot”!</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>CONCATENATE()</code> return string so if we want to run it in DAX query view, use the <code>ROW()</code> function:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ROW</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top sales products"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// measure D1</span></span>
<span id="cb3-3">)</span></code></pre></div>
</div>
</div>
</section>
<section id="day-2-which-product-have-the-highest-average-order-size" class="level2">
<h2 class="anchored" data-anchor-id="day-2-which-product-have-the-highest-average-order-size">Day 2: Which product have the highest average order size?</h2>
<p>The average order size is calculated for each product based on the quantity of each order. We will first <code>SUMMARIZE()</code> to get distinct product and the average order quantity over Order Details table.</p>
<p>This time we will use the <code>ADDCOLUMNS()</code> to explicit the intention of adding more columns, which is more efficient (this is also a common pattern in DAX). Readmore: <a href="https://www.sqlbi.com/articles/best-practices-using-summarize-and-addcolumns/" class="uri">https://www.sqlbi.com/articles/best-practices-using-summarize-and-addcolumns/</a>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb4-1">D2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb4-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ADDCOLUMNS</span> (</span>
<span id="cb4-6">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUMMARIZE</span> ( Products<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Products[ProductID]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Products[ProductName] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avg qty"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVERAGE</span> ( Order_Details[Quantity] ) )</span>
<span id="cb4-8">        )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-9">        [Avg qty]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb4-10">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-11">    Products[ProductName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-13">    Products[ProductName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ASC</span>
<span id="cb4-14">)</span></code></pre></div>
<p>And the answer is: “Schoggi Schokolade”!</p>
</section>
<section id="day-3-what-is-highest-average-discount-done-to-a-product" class="level2">
<h2 class="anchored" data-anchor-id="day-3-what-is-highest-average-discount-done-to-a-product">Day 3: What is highest average discount done to a product?</h2>
<p>The solution is pretty similar to day 2, but this time we get the hight value instead of product name, we <code>FORMAT()</code> the value to text and select it by <code>SELECTCOLUMNS()</code>:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb5-1">D3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SELECTCOLUMNS</span> (</span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb5-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ADDCOLUMNS</span> (</span>
<span id="cb5-6">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUMMARIZE</span> ( Products<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Products[ProductID]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Products[ProductName] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avg discount"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVERAGE</span> ( Order_Details[Discount] ) )</span>
<span id="cb5-8">        )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-9">        [Avg discount]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb5-10">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest average"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FORMAT</span> ( [Avg discount]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.00%"</span> )</span>
<span id="cb5-12">)</span></code></pre></div>
<p>The answer is: “25.00%”!</p>
</section>
<section id="day-4-top3-categories-that-have-the-highest-revenue-contribution" class="level2">
<h2 class="anchored" data-anchor-id="day-4-top3-categories-that-have-the-highest-revenue-contribution">Day 4: Top3 categories that have the highest revenue contribution?</h2>
<p>We do not need to <code>DIVIDE()</code> as the solution provided by Curbal IMHO, it would be the same if we sort the absolute value.</p>
<p>We first create a measure to calculate the revenue post discount:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb6-1">Revenue after discount <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUMX</span> (</span>
<span id="cb6-3">    Order_Details<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-4">    Order_Details[Quantity] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Order_Details[UnitPrice] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ( <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Order_Details[Discount] )</span>
<span id="cb6-5">)</span></code></pre></div>
<p>And everything remained the same to previous question! We should sort descending by the revenue in the concatenated output rather than category name to show them in informative order.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb7-1">D4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb7-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ADDCOLUMNS</span> (</span>
<span id="cb7-6">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUMMARIZE</span> ( Categories<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Categories[CategoryID]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Categories[CategoryName] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total revenue"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( [Revenue after discount] )</span>
<span id="cb7-8">        )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-9">        [Total revenue]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb7-10">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-11">    Categories[CategoryName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-13">    [Total revenue]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb7-14">)</span></code></pre></div>
<p>The answer is: “Beverages, Dairy Products, Confections”!</p>
</section>
<section id="day-5-average-price-of-discontinued-products" class="level2">
<h2 class="anchored" data-anchor-id="day-5-average-price-of-discontinued-products">Day 5: Average price of discontinued products?</h2>
<p>We must get the (actual) unit price from the Order details table, not the Product table. The order price is even different order by order, so we need 2 steps:</p>
<ul>
<li>Calculate average order unit price (over all order) for all discontinued products;</li>
<li>Calculate the average for all those average.</li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb8-1">D5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVERAGEX</span> (</span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUMMARIZE</span> (</span>
<span id="cb8-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FILTER</span> ( Products<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Products[Discontinued] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TRUE</span> () )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-5">        Products[ProductID]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-6">        Products[ProductName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avg unit price"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVERAGE</span> ( Order_Details[UnitPrice] )</span>
<span id="cb8-8">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-9">    [Avg unit price]</span>
<span id="cb8-10">)</span></code></pre></div>
<p>The answer is: 44.35!</p>
</section>
<section id="day-6-percentage-of-sales-from-discontinued-products" class="level2">
<h2 class="anchored" data-anchor-id="day-6-percentage-of-sales-from-discontinued-products">Day 6: Percentage of sales from discontinued products?</h2>
<p>We will be reusing the Revenue post discount:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb9-1">D6 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DIVIDE</span>(</span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUMX</span>(</span>
<span id="cb9-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FILTER</span>(</span>
<span id="cb9-5">        Products<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-6">        Products[Discontinued] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TRUE</span>()</span>
<span id="cb9-7">        )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-8">        [Revenue after discount]</span>
<span id="cb9-9">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-10">    [Revenue after discount] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is a measure of SUMX itself</span></span>
<span id="cb9-11">)</span></code></pre></div>
<p>The answer is: 14.61%!</p>
</section>
<section id="day-7-how-many-high-value-orders-were-placed-in-1997" class="level2">
<h2 class="anchored" data-anchor-id="day-7-how-many-high-value-orders-were-placed-in-1997">Day 7: How many high-value orders were placed in 1997?</h2>
<p>The Orders table, not the Order detail is the concerned table, we first calculate the average order revenue for all orders place in 1997. And then we filter the Orders table with 2 conditions: year of order date is 1997, and the revenue post discount is larger than average.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb10-1">D7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb10-2">VAR Avg_order_rev_1997 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVERAGEX</span> (</span>
<span id="cb10-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FILTER</span> ( Orders<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">YEAR</span> ( Orders[OrderDate] ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1997</span> )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-5">        [Revenue after discount]</span>
<span id="cb10-6">    )</span>
<span id="cb10-7">RETURN</span>
<span id="cb10-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNTROWS</span> (</span>
<span id="cb10-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FILTER</span> (</span>
<span id="cb10-10">            Orders<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-11">            [Revenue after discount] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Avg_order_rev_1997</span>
<span id="cb10-12">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">YEAR</span> ( Orders[OrderDate] ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1997</span></span>
<span id="cb10-13">        )</span>
<span id="cb10-14">    )</span></code></pre></div>
<p>There are 145 high-value orders in the year 1997!</p>
</section>
<section id="day-8-number-of-orders-delivered-on-time" class="level2">
<h2 class="anchored" data-anchor-id="day-8-number-of-orders-delivered-on-time">Day 8: Number of orders delivered on time?</h2>
<p>Curbal seems to prefer using <code>SUMMARIZE()</code> everywhere, I think the solution is relatively simple of <code>COUNTROWS()</code> after some <code>FILTER()</code>. Here is my initial solution:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb11-1">D8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNTROWS</span> (</span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FILTER</span> (</span>
<span id="cb11-4">        Orders<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-5">        NOT <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ISBLANK</span> ( Orders[ShippedDate] )</span>
<span id="cb11-6">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DATEDIFF</span> ( Orders[RequiredDate]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Orders[ShippedDate]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DAY ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-7">    )</span>
<span id="cb11-8">)</span></code></pre></div>
<p>I asked Claude 3.5 Sonnet to optimized this and he said the combination of <code>FILTER()</code> and <code>DATEDIFF()</code> might be expensive, his solution is:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb12-1">D8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span>(</span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNTROWS</span>(Orders)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-4">    Orders[ShippedDate] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BLANK</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-5">    Orders[RequiredDate] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Orders[ShippedDate]</span>
<span id="cb12-6">)</span></code></pre></div>
<p>Cool! There is 3 such orders.</p>
<p>If we use the logic <code>Orders[RequiredDate] &gt;= Orders[ShippedDate]</code>, there is 772 orders. IMHO I think this make more sense!</p>
</section>
<section id="day-9-the-single-month-with-highest-sales" class="level2">
<h2 class="anchored" data-anchor-id="day-9-the-single-month-with-highest-sales">Day 9: The single month with highest sales?</h2>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb13-1">D9 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb13-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb13-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ADDCOLUMNS</span> (</span>
<span id="cb13-6">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUMMARIZE</span> ( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Calendar'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Calendar'</span>[Year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Month] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total rev"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> [Revenue after discount]</span>
<span id="cb13-8">        )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-9">        [Revenue after discount]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb13-10">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Calendar'</span>[Year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Month]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Calendar'</span>[Year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Month]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ASC</span>
<span id="cb13-14">)</span></code></pre></div>
<p>Pretty simple, it’s 1998-Apr!</p>
</section>
<section id="day-10-best-sales-week-day-for-queso-cabrales" class="level2">
<h2 class="anchored" data-anchor-id="day-10-best-sales-week-day-for-queso-cabrales">Day 10: Best sales (week) day for queso cabrales?</h2>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb14-1">D10 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb14-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb14-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb14-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ADDCOLUMNS</span> (</span>
<span id="cb14-6">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUMMARIZE</span> ( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Calendar'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Calendar'</span>[Day Name] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb14-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Queso Cabrales sales"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( [Revenue after discount]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Products[ProductName] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Queso Cabrales"</span> )</span>
<span id="cb14-8">        )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb14-9">        [Queso Cabrales sales]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb14-10">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb14-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Calendar'</span>[Day Name]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb14-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb14-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Calendar'</span>[Day Name]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ASC</span>
<span id="cb14-14">)</span></code></pre></div>
<p>This is an enhanced version from Claude 3.5 Sonnet:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb15-1">D10a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span>(</span>
<span id="cb15-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MAX</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Calendar'</span>[Day Name])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// trickily put an aggregation function here!</span></span>
<span id="cb15-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span>(</span>
<span id="cb15-5">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Calendar'</span>[Day Name])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Using VALUES() here effectively says "give me the distinct day names, then order them by the sales amount"</span></span>
<span id="cb15-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span>(</span>
<span id="cb15-9">            [Revenue after discount]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-10">            Products[ProductName] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Queso Cabrales"</span></span>
<span id="cb15-11">        )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-12">        DESC</span>
<span id="cb15-13">    )</span>
<span id="cb15-14">)</span></code></pre></div>
<p>Bravo Tuesday!</p>
</section>
<section id="day-11-customer-with-the-highest-customer-lifespan" class="level2">
<h2 class="anchored" data-anchor-id="day-11-customer-with-the-highest-customer-lifespan">Day 11: Customer with the highest customer lifespan?</h2>
<p>I have walked around with the <code>VALUES()</code> magic but failed with the lifespan calculation. Claude helped me with this, and if we can confidently ensure there is no duplicated company name for 2 different companies/customers, this is a very concise solution:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb16-1">D11 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb16-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb16-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span> ( Customers[CompanyName] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MAX</span> ( Orders[OrderDate] ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MIN</span> ( Orders[OrderDate] ) )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb16-7">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-8">    Customers[CompanyName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span></span>
<span id="cb16-10">)</span></code></pre></div>
<p>The answer is: Richter Supermarkt! Love you.</p>
</section>
<section id="day-12-which-customer-had-placed-most-orders" class="level2">
<h2 class="anchored" data-anchor-id="day-12-which-customer-had-placed-most-orders">Day 12: Which customer had placed most orders?</h2>
<p>This time I’ve successfully implemented this pattern!</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb17-1">D12 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb17-3">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span> ( Customers[CompanyName] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span> ( Orders[OrderID] ) )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb17-6">)</span></code></pre></div>
<p>This is Save-a-lot Markets!</p>
</section>
<section id="day-13-top-5-countries-with-the-highest-number-of-customers" class="level2">
<h2 class="anchored" data-anchor-id="day-13-top-5-countries-with-the-highest-number-of-customers">Day 13: Top 5 countries with the highest number of customers?</h2>
<p>Quick check and I found that no customer in the Customers table did not order any order. So we just need to care/count on the Customers table only. Quite straightforwar!</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb18-1">D13 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb18-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb18-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb18-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span> ( Customers[Country] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb18-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span> ( Customers[CustomerID] ) )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb18-7">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb18-8">    Customers[Country]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb18-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb18-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span> ( Customers[CustomerID] ) )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb18-11">)</span></code></pre></div>
<p>I am in love with this pattern, the answer is: USA, Germany, France, Brazil, UK!</p>
</section>
<section id="day-14-which-customer-placed-the-highest-value-of-order-sales-in-1997" class="level2">
<h2 class="anchored" data-anchor-id="day-14-which-customer-placed-the-highest-value-of-order-sales-in-1997">Day 14: Which customer placed the highest value of order (sales) in 1997?</h2>
<p>It’s QUICK-Stop!</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb19-1">D14 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb19-3">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb19-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span> ( Customers[CompanyName] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb19-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( [Revenue after discount]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">YEAR</span> ( Orders[OrderDate] ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1997</span> )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb19-6">)</span></code></pre></div>
</section>
<section id="day-15-customer-with-the-highest-number-of-orders-in-one-single-month" class="level2">
<h2 class="anchored" data-anchor-id="day-15-customer-with-the-highest-number-of-orders-in-one-single-month">Day 15: Customer with the highest number of orders in one single month?</h2>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb20-1">D15 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb20-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb20-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ADDCOLUMNS</span> (</span>
<span id="cb20-6">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUMMARIZE</span> ( Orders<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Customers[CompanyName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Calendar'</span>[Year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Month] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order_count"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span> ( Orders[OrderID] ) )</span>
<span id="cb20-8">        )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-9">        [order_count]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb20-10">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-11">    Customers[CompanyName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-13">    Customers[CompanyName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb20-14">)</span></code></pre></div>
<p>There are 3 customers have 5 orders in one single month: Bottom-Dollar Markets, Ernst Handel, and Save-a-lot Markets!</p>
</section>
<section id="day-16-employee-with-the-highest-average-order-value-in-sales" class="level2">
<h2 class="anchored" data-anchor-id="day-16-employee-with-the-highest-average-order-value-in-sales">Day 16: Employee with the highest average order value (in sales)?</h2>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb21-1">D16 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb21-3">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span> ( Employees[Full Name] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DIVIDE</span> ( [Revenue after discount]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span> ( Orders[OrderID] ) ) )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb21-6">)</span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// AVERAGEX wouldn't work here because the measure is already doing a sum across Order_Details</span></span></code></pre></div>
<p>She is Anne Dodsworth.</p>
</section>
<section id="day-17-employee-with-the-longest-average-processing-order-time" class="level2">
<h2 class="anchored" data-anchor-id="day-17-employee-with-the-longest-average-processing-order-time">Day 17: Employee with the longest average processing order time?</h2>
<p>It’s also Dodsworth!</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb22-1">D17 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span>(</span>
<span id="cb22-3">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span>(Employees[Full Name])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span>(</span>
<span id="cb22-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVERAGEX</span>(</span>
<span id="cb22-7">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FILTER</span>(Orders<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Orders[ShippedDate] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BLANK</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-8">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DATEDIFF</span>(Orders[OrderDate]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Orders[ShippedDate]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DAY)</span>
<span id="cb22-9">        )</span>
<span id="cb22-10">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-11">    DESC</span>
<span id="cb22-12">)</span></code></pre></div>
</section>
<section id="day-18-which-employee-has-been-in-the-company-the-longest" class="level2">
<h2 class="anchored" data-anchor-id="day-18-which-employee-has-been-in-the-company-the-longest">Day 18: Which employee has been in the company the longest?</h2>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb23-1">D18 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span>(</span>
<span id="cb23-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span>(</span>
<span id="cb23-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span>(Employees[Full Name])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MIN</span>( Employees[HireDate]) )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-7">        ASC</span>
<span id="cb23-8">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-9">    Employees[Full Name]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span></span>
<span id="cb23-11">)</span></code></pre></div>
<p>Janet Leverling!</p>
</section>
<section id="day-19-name-of-all-northwind-managers" class="level2">
<h2 class="anchored" data-anchor-id="day-19-name-of-all-northwind-managers">Day 19: Name of all Northwind managers?</h2>
<p>Anyone who has an employee reporting to themself is a manager! They are Andrew Fuller, Nancy Davolio, Steven Buchanan.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb24-1">D19 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb24-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FILTER</span> ( Employees<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Employees[EmployeeID] IN <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span> ( Employees[ReportsTo] ) )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb24-4">    Employees[Full Name]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb24-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb24-6">    Employees[Full Name]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ASC</span>
<span id="cb24-7">)</span></code></pre></div>
</section>
<section id="day-20-which-employee-handle-the-most-unique-customers" class="level2">
<h2 class="anchored" data-anchor-id="day-20-which-employee-handle-the-most-unique-customers">Day 20: Which employee handle the most unique customers?</h2>
<p>There is no direct relationship from Employees to Customers table, we will be working on the Orders table!</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb25-1">D20 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb25-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb25-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb25-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span> ( Employees[Full Name] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb25-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DISTINCTCOUNT</span> ( Orders[CustomerID] ) )</span>
<span id="cb25-7">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb25-8">    Employees[Full Name]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb25-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span></span>
<span id="cb25-10">)</span></code></pre></div>
<p>Margaret Peacock!</p>
</section>
<section id="day-21-number-of-suppliers-that-deliver-more-product-items-than-average" class="level2">
<h2 class="anchored" data-anchor-id="day-21-number-of-suppliers-that-deliver-more-product-items-than-average">Day 21: Number of suppliers that deliver more product items than average?</h2>
<p>There are 16!</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb26-1">D21 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb26-2">VAR supplier_n_product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb26-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ADDCOLUMNS</span> (</span>
<span id="cb26-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUMMARIZE</span> ( Suppliers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Suppliers[SupplierID]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Suppliers[CompanyName] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count product"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span> ( Products[CategoryID] ) )</span>
<span id="cb26-6">    )</span>
<span id="cb26-7">RETURN</span>
<span id="cb26-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNTROWS</span> (</span>
<span id="cb26-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FILTER</span> (</span>
<span id="cb26-10">            supplier_n_product<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb26-11">            [count product] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVERAGEX</span> ( supplier_n_product<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> [count product] )</span>
<span id="cb26-12">        )</span>
<span id="cb26-13">    )</span></code></pre></div>
</section>
<section id="day-22-suppliers-with-most-stocked-out-products" class="level2">
<h2 class="anchored" data-anchor-id="day-22-suppliers-with-most-stocked-out-products">Day 22: Suppliers with most stocked-out products?</h2>
<p>Confidently assumed there is no duplicated CompanyName haha:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb27-1">D22 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb27-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb27-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb27-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span> ( Suppliers[CompanyName] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb27-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span> ( Products[ProductID] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Products[UnitsInStock] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb27-7">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb27-8">    Suppliers[CompanyName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb27-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span></span>
<span id="cb27-10">)</span></code></pre></div>
<p>The answer is: New Orleans Cajun Delights, Pavlova, Ltd., Plutzer Lebensmittelgroßmärkte AG, Formaggi Fortini s.r.l., and “G’day, Mate”!</p>
</section>
<section id="day-23-which-supplier-delivers-the-most-expensive-product" class="level2">
<h2 class="anchored" data-anchor-id="day-23-which-supplier-delivers-the-most-expensive-product">Day 23: Which supplier delivers the most expensive product?</h2>
<p>We need to focus on the Products table which lists the current price rather than the Orders table contained sold items ~ historical price.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb28-1">D23 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb28-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb28-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb28-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span> ( Suppliers[CompanyName] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb28-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MAX</span> ( Products[UnitPrice] ) )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb28-7">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb28-8">    Suppliers[CompanyName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb28-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span></span>
<span id="cb28-10">)</span></code></pre></div>
<p>It’s is Aux joyeux ecclésiastiques!</p>
</section>
<section id="day-24-which-supplier-has-the-highest-category-diversity" class="level2">
<h2 class="anchored" data-anchor-id="day-24-which-supplier-has-the-highest-category-diversity">Day 24: Which supplier has the highest category diversity?</h2>
<p>Note that there is no relationship between Suppliers table and Categories table. So we will be using <code>CategoryID</code> in the Products table:</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb29-1">D24 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb29-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb29-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb29-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span> ( Suppliers[CompanyName] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb29-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span> ( Products[CategoryID] ) )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb29-7">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb29-8">    Suppliers[CompanyName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb29-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span></span>
<span id="cb29-10">)</span></code></pre></div>
<p>It’s Pavlova, Ltd., Plutzer Lebensmittelgroßmärkte AG.</p>
</section>
<section id="day-25-supplier-with-highest-number-of-top-5-selling-products" class="level2">
<h2 class="anchored" data-anchor-id="day-25-supplier-with-highest-number-of-top-5-selling-products">Day 25: Supplier with highest number of top 5 selling products?</h2>
<p>We need to do 2 steps: listing top 5 selling products, and then filter the top 1 supplier that delivers:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb30-1">D25 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb30-2">VAR Top_5_products <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span>(</span>
<span id="cb30-3">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb30-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span>(Products[ProductID])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb30-5">    [Revenue after discount]</span>
<span id="cb30-6">)</span>
<span id="cb30-7">RETURN</span>
<span id="cb30-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATEX</span> (</span>
<span id="cb30-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TOPN</span> (</span>
<span id="cb30-10">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb30-11">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VALUES</span> ( Suppliers[CompanyName] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb30-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CALCULATE</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span> ( Products[ProductID] )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Products[ProductID] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Top_5_products )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> DESC</span>
<span id="cb30-13">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb30-14">    Suppliers[CompanyName]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb30-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span></span>
<span id="cb30-16">)</span></code></pre></div>
<p>It’s Gai pâturage! Yayyy we completed the challenge!</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li>Link to the challenge: <a href="https://curbal.com/25-days-of-dax-fridays-challenge-edition-3" class="uri">https://curbal.com/25-days-of-dax-fridays-challenge-edition-3</a>;</li>
<li>DAX codes were formatted using DAXFormatter: <a href="https://www.daxformatter.com/" class="uri">https://www.daxformatter.com/</a>;</li>
<li>A brilliant No-CALCULATE solution by Brian Julius: <a href="https://github.com/bjulius/No-CALCULATE-DAX" class="uri">https://github.com/bjulius/No-CALCULATE-DAX</a>;</li>
<li>Worth reading - The One DAX pattern to rule them all by Greg Deckler in <a href="https://www.linkedin.com/posts/gregdeckler_powerbi-microsoft-dax-activity-7056636983959322624-uxwY">LinkedIn</a>.</li>
</ul>


<!-- -->

</section>

 ]]></description>
  <category>dax</category>
  <guid>https://lktuan.github.io/blog/2025-02-12-25days_DAX_challenge_ed3/</guid>
  <pubDate>Tue, 11 Feb 2025 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2025-02-12-25days_DAX_challenge_ed3/dax.png" medium="image" type="image/png" height="73" width="144"/>
</item>
<item>
  <title>Intro to Large Language Models: A Summary of Andrej Karpathy’s Talk</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-12-12-intro-llm/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-warning callout-titled" title="AI-assisted content">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
AI-assisted content
</div>
</div>
<div class="callout-body-container callout-body">
<p>This summary is conducted with the help of “<a href="https://aistudio.google.com/prompts/new_chat?model=gemini-2.0-flash-exp">Gemini 2.0 Flash Experimental</a>” in Google AI Studio.</p>
</div>
</div>
<section id="part-1-understanding-llms" class="level1">
<h1>Part 1: Understanding LLMs</h1>
<section id="intro-large-language-model-llm-talk" class="level2">
<h2 class="anchored" data-anchor-id="intro-large-language-model-llm-talk">Intro: Large Language Model (LLM) Talk</h2>
<p>Karpathy begins by explaining the motivation for re-recording his talk, emphasizing its popularity. He frames it as a “busy person’s intro” to large language models, aiming to provide a concise yet informative overview. He quickly dives into the core of what constitutes an LLM.</p>
</section>
<section id="llm-inference-the-essence-of-llms" class="level2">
<h2 class="anchored" data-anchor-id="llm-inference-the-essence-of-llms">LLM Inference: The Essence of LLMs</h2>
<p>In its most basic form, a large language model is just two files:</p>
<ul>
<li>a “parameters” file; and</li>
<li>a “run” file.</li>
</ul>
<p>Using the example of the Llama 2 70B model, released by Meta AI, he clarifies these points. The parameters file contains the model’s weights, essentially a vast list of numbers representing the trained neural network. These parameters, stored as 2-byte <code>float16</code> numbers, for the 70B model, come up to about 140 GB (<em>because each param is 2 bytes</em>). The “run” file is the code (often in C or Python) that executes the neural network using the parameters. This code is surprisingly compact, requiring approximately 500 lines of C code without external dependencies. This is the essence of the model itself – a <strong>self-contained package</strong> requiring no internet connectivity once compiled.</p>
<p>Karpathy uses the example of providing text to the model (“write a poem about scale AI”), which generates a poem, to demonstrate what inference (running the model) looks like. He emphasizes that the computational complexity comes in obtaining those parameters via training, not running the model itself. The demonstration is not actually the 70B model in real time but a much smaller 7B model, running about 10 times faster for illustrative purposes.</p>
<p>The magic lies under the parameters. <em>But how can we obtain them?</em></p>
</section>
<section id="llm-training-the-heavy-lifting" class="level2">
<h2 class="anchored" data-anchor-id="llm-training-the-heavy-lifting">LLM Training: The Heavy Lifting</h2>
<p>The bulk of the computational effort and cost is tied to <em>training</em> the model. This involves creating the parameters, a process far more complex than running it (inference). The training is conceptualized as a compression process of the internet.</p>
<p>The resources required for training Llama 2 70B:</p>
<ul>
<li>roughly 10 terabytes of text from a crawl of the internet,</li>
<li>processed by 6,000 GPUs over 12 days,</li>
<li>at a cost of around $2 million.</li>
</ul>
<p>This process compresses the massive text dataset into the 140GB parameters file, which he refers to as “<em>like a zip file of the internet</em>” with a compression ratio of approximately <strong>100x</strong>. Importantly, this is a <em>lossy</em> compression, meaning the model doesn’t store an exact copy of the text, but a generalized representation, a kind of “Gestalt.” Karpathy points out that the numbers associated with Llama 2 70B, while significant, are “rookie numbers” compared to the training efforts for state-of-the-art models used in ChatGPT or Claude which are of magnitude 10x or more and costing tens or hundreds of millions of dollars.</p>
<p>After being <em>trained</em> (and <em>fine-tuned</em> - which is discussed later), running the LLM model which is neural network is faily computationally cheap. <em>So what is neural network is really doing?</em></p>
</section>
<section id="llm-dreams-text-generation-hallucination" class="level2">
<h2 class="anchored" data-anchor-id="llm-dreams-text-generation-hallucination">LLM Dreams: Text Generation &amp; Hallucination</h2>
<p>Fundamentally, a language model’s primary task during training is to predict the <em>next word</em> in a sequence. For example, from a sequence “Cat sat on a”, the neural network will predict what word comes next, e.g.&nbsp;“mat” with a 97% probability. Karpathy explains that this prediction task has a very close mathematical relationship to compression. This simple prediction is a powerful objective, forcing the model to learn vast amounts of world knowledge. He uses a sample from Wikipedia about Ruth Handler to highlight how even seemingly mundane text is full of information that the model internalizes.</p>
<p>After training, running the model (inference) involves iterative text generation. The model predicts a word, feeds it back in, predicts the next, and so on, in a process Karpathy describes as “dreaming internet documents.” He shows examples of generated text resembling Java code, Amazon product listings, and Wikipedia articles. This generated text is often plausible but <em>hallucinated</em> – not necessarily true or derived directly from the training data. He gives examples of made up ISBNs and text referencing an obscure fish species, demonstrating that the model is not simply memorizing the training set.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-12-intro-llm/1_network_dreams.png" class="img-fluid figure-img"></p>
<figcaption>All of these are dreamed by neural networks</figcaption>
</figure>
</div>
</section>
<section id="how-do-they-work-the-transformer-architecture" class="level2">
<h2 class="anchored" data-anchor-id="how-do-they-work-the-transformer-architecture">How Do They Work? The Transformer Architecture</h2>
<p>Into the inner workings of LLMs, they are based on a neural network architecture called the “<em>Transformer</em>”. The full details of the mathematical operations and architecture are available. The challenge is that parameters are spread across the network and the exact nature of their interactions and contributions to the whole is unknown. While we know how to iteratively adjust the parameters to improve next-word prediction accuracy, we don’t truly understand <em>how</em> these parameters collaborate to produce specific outputs. We do have some models suggesting they build up knowledge databases but this knowledge is imperfect and strange. Karpathy illustrates the weirdness of LLM knowledge using the viral “reversal course” example of Chat GPT’s inability to recognize “Tom Cruise” as “Merily Feifer’s son,” showing the knowledge is one-dimensional and directionally dependent. He summarizes that LLMs should be viewed as “<strong>mostly inscrutable artifacts</strong>”, unlike engineered systems (like cars). He emphasizes that they are empirical artifacts that necessitate sophisticated evaluation methods.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-12-intro-llm/2_reversal_course.png" class="img-fluid figure-img"></p>
<figcaption>Reversal Course</figcaption>
</figure>
</div>
</section>
<section id="fine-tuning-into-an-assistant-from-document-generators-to-chatbots" class="level2">
<h2 class="anchored" data-anchor-id="fine-tuning-into-an-assistant-from-document-generators-to-chatbots">Fine-tuning into an Assistant: From Document Generators to Chatbots</h2>
<p>The first training phase results in an internet document generator, which is not that helpful. The second major step is <em>fine-tuning</em>, the process of transforming this into a helpful “assistant model”. This transformation is achieved by switching from training on a large collection of internet text to training on a smaller, <strong>carefully curated dataset of conversations</strong>.</p>
<p>This dataset is typically created manually by human labelers who are provided with labeling instructions to generate questions and model answers. An example is provided of a question, with the correct assistant answer. The pre-training stage prioritizes data quantity but low quality, while the fine-tuning stage favors high-quality, carefully labelled Q&amp;A documents. A dataset of 100,000 high-quality Q&amp;A documents would be more than sufficient for fine tuning. The fine tuning stage leverages the knowledge from pre-training and reconfigures the LLM to answer questions in a helpful manner. He gives the example of the prompt “can you help me with this code” with the corresponding helpful response. The model is able to “format” itself into an assistant that knows how to answer and responds to these kinds of questions, by learning patterns from the training data, and generating text word by word.</p>
</section>
<section id="summary-so-far-pre-training-vs.-fine-tuning" class="level2">
<h2 class="anchored" data-anchor-id="summary-so-far-pre-training-vs.-fine-tuning">Summary So Far: Pre-training vs.&nbsp;Fine-tuning</h2>
<p>Karpathy summarizes the two-stage process: * <strong>Pre-training:</strong> training on a massive internet dataset, resulting in a base model with world knowledge, this is computationally very expensive (millions of dollars) and done infrequently. * <strong>Fine-tuning:</strong> training on high-quality Q&amp;A data, resulting in an assistant model, this is computationally cheaper and done more frequently (daily or weekly).</p>
<p>The Llama 2 series included both base and assistant models. The base model, without fine tuning, is not directly usable because it just samples documents rather than responding with an answer. Meta performed the pre-training and released the result. This allows others to do their own fine-tuning, providing tremendous freedom.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-12-intro-llm/3_2stage.png" class="img-fluid figure-img"></p>
<figcaption>How to train your <del>dragon</del> ChatGPT</figcaption>
</figure>
</div>
</section>
<section id="appendix-comparisons-labeling-docs-rlhf-synthetic-data-leaderboard" class="level2">
<h2 class="anchored" data-anchor-id="appendix-comparisons-labeling-docs-rlhf-synthetic-data-leaderboard">Appendix: Comparisons, Labeling Docs, RLHF, Synthetic Data, Leaderboard</h2>
<p>This section expands on finer aspects of training and evaluation. Fine-tuning is followed by an <em>optional</em> third stage that leverages comparison labels. It is typically easier for a human labeler to rank options vs.&nbsp;generating the content. The labelers are given example Haikus and they are asked to pick the best one. These comparisons are used to further fine-tune the model via Reinforcement Learning from Human Feedback (RLHF). Karpathy shows an example of labeling instructions from the InstructGPT paper asking labelers to be “helpful, truthful, and harmless”. He notes that these instructions can be tens or hundreds of pages long and very complicated.</p>
<p>He then explains that human labelers are used, although increasingly, machine assisted. Models can be used to sample answers and a human can do the cherry picking to improve efficiency. He then displays the Chatbot Arena leaderboard where Language Models are ranked according to their ELO ratings (just like chess). This ranking system determines which model does better on user queries. He observes the closed, proprietary models like those from OpenAI and Anthropic generally perform better. However, open-weights models (Llama series, Zephyr) are available and can be fine-tuned and used by everyone. The open-source models may be less accurate, but good enough for many applications.</p>
</section>
</section>
<section id="part-2-future-of-llms" class="level1">
<h1>Part 2: Future of LLMs</h1>
<section id="llm-scaling-laws-the-path-to-better-performance" class="level2">
<h2 class="anchored" data-anchor-id="llm-scaling-laws-the-path-to-better-performance">LLM Scaling Laws: The Path to Better Performance</h2>
<p>Karpathy highlights the importance of <em>scaling laws</em>: the performance of LLMs in terms of next-word prediction accuracy is a predictable function of:</p>
<ul>
<li>the number of parameters (N), and</li>
<li>the amount of training data (D).</li>
</ul>
<p>Increased parameters and increased dataset always result in better performance (predictability), so algorithmic progress is a bonus. It’s not necessarily needed for improvement, which creates a gold rush, because bigger and better clusters can provide better results. He emphasizes this is correlated with performance across many downstream tasks.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-12-intro-llm/4_free_scaling.png" class="img-fluid figure-img"></p>
<figcaption>Free scaling!</figcaption>
</figure>
</div>
</section>
<section id="tool-use-expanding-capabilities" class="level2">
<h2 class="anchored" data-anchor-id="tool-use-expanding-capabilities">Tool Use: Expanding Capabilities</h2>
<p>He uses a concrete example to demonstrate the <em>tool use</em> capabilities of LLMs using ChatGPT, by providing a query to find information on Scale AI’s funding rounds. ChatGPT can browse the internet using <em>search tools</em>, it then takes the information from search results, and uses that to answer the prompt. The model then can use a <em>calculator tool</em> to perform arithmetic tasks, and generates an estimation based on ratios from data it previously received. It can then use a <em>python interpreter</em> with the matplotlib library to generate graphs and visualizations to the data. This allows the language model to solve problems just as humans might, using external tools to aid in problem solving. It can also use <em>DALL-E</em> for image generation. The LLM orchestrates the various tools to solve the prompt and return the result to the user.</p>
</section>
<section id="multimodality-beyond-text" class="level2">
<h2 class="anchored" data-anchor-id="multimodality-beyond-text">Multimodality: Beyond Text</h2>
<p>The next major aspect is <em>multimodality</em>, showing how LLMs can interact beyond text with images, audio, etc. Karpathy gives the example of ChatGPT analyzing a hand-sketched website diagram, generating functional HTML and JavaScript. ChatGPT can also hear and speak and thus enable speech-to-speech interactions.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-12-intro-llm/5_multimodality.png" class="img-fluid figure-img"></p>
<figcaption>Multimodality</figcaption>
</figure>
</div>
</section>
<section id="thinking-system-12-reasoning-and-planning" class="level2">
<h2 class="anchored" data-anchor-id="thinking-system-12-reasoning-and-planning">Thinking, System 1/2: Reasoning and Planning</h2>
<p>Karpathy introduces the concept of <em>System 1</em> and <em>System 2</em> thinking, inspired by Daniel Kahneman’s work. System 1 is fast, instinctive thinking (<em>the answer is cached already</em>), whereas System 2 is slower, more deliberate reasoning.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-12-intro-llm/6_2_sytems.png" class="img-fluid figure-img"></p>
<figcaption>2 systems of thinking</figcaption>
</figure>
</div>
<p>LLMs currently only operate in System 1 mode, sampling word by word without deep planning. A major future direction is to enable <em>System 2</em> thinking, where models can spend more time to improve quality. The idea is to make a trade off between compute time and accuracy. Karpathy notes how this is not possible today, where the LLM just goes <em>chunk chunk chunk x3.14</em> and sampling words in the sequence without “thinking” through it. He emphasizes the importance of converting time into accuracy using tree-of-thought and other techniques.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-12-intro-llm/7_ToT.png" class="img-fluid figure-img"></p>
<figcaption>Towarding the Tree of Thoughts</figcaption>
</figure>
</div>
</section>
<section id="self-improvement-going-beyond-human-limits" class="level2">
<h2 class="anchored" data-anchor-id="self-improvement-going-beyond-human-limits">Self-improvement: Going Beyond Human Limits</h2>
<p>He references DeepMind’s AlphaGo, which initially learned by imitating human players but later surpassed human performance through self-improvement. Karpathy argues that current LLMs are only in the <strong>imitation</strong> stage, and the next challenge is to achieve <em>self-improvement</em> for them, similar to the AlphaGo step two. The lack of a <strong>general reward function</strong>, unlike the win/loss criteria of the go game, is the main challenge. In narrow domains though, this may be achievable.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-12-intro-llm/8_alpha_go.png" class="img-fluid figure-img"></p>
<figcaption>Self-improvement is key for AlphaGo to surpass the best human in 40 days</figcaption>
</figure>
</div>
</section>
<section id="llm-customization-expert-systems" class="level2">
<h2 class="anchored" data-anchor-id="llm-customization-expert-systems">LLM Customization: Expert Systems</h2>
<p>Karpathy explains the need for customization to allow LLMs to become specialized in specific tasks. This is especially important due to the diversity of needs in the real world. He provides the example of the GPT Store by OpenAI, which allows users to create custom GPTs using custom instructions, and <strong>retrieval augmented generation</strong>. Fine-tuning LLMs may be needed to have experts in specific areas.</p>
<p>This is what people are hyped doing nowaday 😪.</p>
</section>
<section id="llm-os-a-new-paradigm" class="level2">
<h2 class="anchored" data-anchor-id="llm-os-a-new-paradigm">LLM OS: A New Paradigm</h2>
<p>Karpathy proposes that LLMs should not be seen as mere chatbots, but rather the <em>kernel process of an emerging operating system</em>. He explains that the LLM is coordinating a lot of resources for problem solving, acting like the kernel of an operating system. He then goes to show an analog of a computer’s components, and what they might correspond to in LLM space. He outlines the LLM OS’s capabilities, such as internet browsing, local file referencing, access to software tools, ability to generate/interpret images, videos, and audio, long-term “thinking”, customization, and self-improvement. This maps directly to what we expect an operating system to do. He makes an analogy to a computer’s memory hierarchy with hard disks (internet/local files), random access memory (context window). He also draws a parallel between the diverse OS landscape of today with the proprietary desktop OS like Windows and MacOS vs open-source alternatives. In the LLM space, similarly there’s GPT/Claude/Bard and the open-source landscape built around Llama.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-12-intro-llm/9_llm_os.png" class="img-fluid figure-img"></p>
<figcaption>Embed the LLMs into the kernel</figcaption>
</figure>
</div>
</section>
</section>
<section id="part-3-llm-security" class="level1">
<h1>Part 3: LLM Security</h1>
<section id="llm-security-intro-the-new-battleground" class="level2">
<h2 class="anchored" data-anchor-id="llm-security-intro-the-new-battleground">LLM Security Intro: The New Battleground</h2>
<p>Karpathy then switches gears to security challenges, arguing that the new paradigm of LLMs introduce new security vulnerabilities. He emphasizes that cat and mouse security game that we are familiar with in computer security also exists in LLM security.</p>
</section>
<section id="jailbreaks-bypassing-safety-restrictions" class="level2">
<h2 class="anchored" data-anchor-id="jailbreaks-bypassing-safety-restrictions">Jailbreaks: Bypassing Safety Restrictions</h2>
<p>He starts with <em>jailbreak attacks</em>, demonstrating how prompts can circumvent safety restrictions and elicit harmful information from LLMs. One example given is the grandmother-role-play where the LLM was tricked to give instructions on how to make Napalm. There are many ways to trick a system into providing unsafe responses. He gives the example of base64 encoding a dangerous request to elicit unsafe information because <strong>training for safety often focuses on English text</strong>. The <em>universal transferable suffix</em> is another attack vector: adding the suffix will bypass safety filters. <em>Image noise based</em> jailbreaks are also possible by carefully crafting the noise pattern.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-12-intro-llm/10_base64_attack.png" class="img-fluid figure-img"></p>
<figcaption>Example of a jailbreak using base64 encoding</figcaption>
</figure>
</div>
</section>
<section id="prompt-injection-hijacking-the-model" class="level2">
<h2 class="anchored" data-anchor-id="prompt-injection-hijacking-the-model">Prompt Injection: Hijacking the Model</h2>
<p>Karpathy moves to <em>prompt injection attacks</em>, where hidden or injected prompts hijack the model, causing it to follow undesirable instructions.</p>
<ul>
<li>One example is using faint text hidden in an image, containing a prompt injection, to make ChatGPT talk about Sephora sales;</li>
<li>Prompt injection can also exist in web pages. This is demonstrated using the scenario of searching for movies in Bing and having Bing inject a fraud link due to a web page the search accessed having a prompt injection vulnerability;</li>
<li>A recent example of injecting malicious content into a Google doc and using Bard’s image rendering and URL capabilities to <strong>exfiltrate</strong> user data. While engineers implement mitigations, determined attackers always find a loophole (Google Apps scripts).</li>
</ul>
</section>
<section id="data-poisoning-the-backdoor-threat" class="level2">
<h2 class="anchored" data-anchor-id="data-poisoning-the-backdoor-threat">Data Poisoning: The Backdoor Threat</h2>
<p>The final attack vector is <em>data poisoning</em> or <em>backdoor attacks</em>. He discusses how a trigger phrase can cause the model to behave maliciously when the text is present. He discusses the James Bond trigger phrase that is injected during fine tuning. The trigger phrase can cause any task to become non-sensical, or to incorrectly classify threats in a security application. While the example was shown to work for fine-tuning, Karpathy explains that the idea can extend to pre-training.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-12-intro-llm/11_trigger_attack.png" class="img-fluid figure-img"></p>
<figcaption>Example of trigger</figcaption>
</figure>
</div>
</section>
<section id="llm-security-conclusions-a-constant-battle" class="level2">
<h2 class="anchored" data-anchor-id="llm-security-conclusions-a-constant-battle">LLM Security Conclusions: A Constant Battle</h2>
<p>Karpathy summarizes that while defenses exist, the security landscape in LLMs will likely be a constant “cat and mouse game,” mirroring traditional computer security. He points out that all the attacks have defenses, but they can be bypassed and repatched and so on. The field is very new and actively evolving:</p>
<ul>
<li>Jailbreaking;</li>
<li>Prompt injection;</li>
<li>Backdoors &amp; data poisoning;</li>
<li>Adversarial inputs;</li>
<li>Insecure output handling;</li>
<li>Data extraction &amp; privacy;</li>
<li>Data reconstruction;</li>
<li>Denial of service;</li>
<li>Escalation;</li>
<li>Watermarking &amp; evasion;</li>
<li>Model theft;</li>
<li>…</li>
</ul>
</section>
<section id="outro" class="level2">
<h2 class="anchored" data-anchor-id="outro">Outro</h2>
<p>Karpathy ends the talk by summarizing all major aspects he touched upon. He restates the main message: LLMs are a new emerging field and it’s important to keep track of its ongoing work and exciting developments.</p>
<p>Some few things to add in:</p>
<ul>
<li>he dreams and hallucinations do not get fixed with finetuning. Finetuning just “directs” the dreams into “helpful assistant dreams”. Always be careful with what LLMs tell you, especially if they are telling you something from memory alone. That said, similar to a human, if the LLM used browsing or retrieval and the answer made its way into the “working memory” of its context window, you can trust the LLM a bit more to process that information into the final answer. But TLDR right now, do not trust what LLMs say or do. For example, in the tools section, I’d always recommend double-checking the math/code the LLM did.</li>
<li>How does the LLM use a tool like the browser? It emits special words, e.g.&nbsp;|BROWSER|. When the code “above” that is inferencing the LLM detects these words it captures the output that follows, sends it off to a tool, comes back with the result and continues the generation. How does the LLM know to emit these special words? Finetuning datasets teach it how and when to browse, by example. And/or the instructions for tool use can also be automatically placed in the context window (in the “system message”).</li>
</ul>
</section>
</section>
<section id="resources" class="level1">
<h1>resources</h1>
<ol type="1">
<li>video: <a href="https://www.youtube.com/watch?v=zjkBMFhNj_g" class="uri">https://www.youtube.com/watch?v=zjkBMFhNj_g</a>;</li>
<li>pdf slide: <a href="https://drive.google.com/file/d/1pxx_ZI7O-Nwl7ZLNk5hI3WzAsTLwvNU7/view" class="uri">https://drive.google.com/file/d/1pxx_ZI7O-Nwl7ZLNk5hI3WzAsTLwvNU7/view</a></li>
<li>a recommended to read blog post: <a href="https://karpathy.github.io/2015/05/21/rnn-effectiveness/" class="uri">https://karpathy.github.io/2015/05/21/rnn-effectiveness/</a></li>
<li>a <code>run.c</code> file: <a href="https://github.com/karpathy/llama2.c/blob/master/run.c" class="uri">https://github.com/karpathy/llama2.c/blob/master/run.c</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>andrej karpathy</category>
  <category>llm</category>
  <category>neural networks</category>
  <guid>https://lktuan.github.io/blog/2024-12-12-intro-llm/</guid>
  <pubDate>Wed, 11 Dec 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-12-12-intro-llm/llmintro.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>NN-Z2H Lesson 6: Building makemore part 5 - Building a WaveNet</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-12-09-nn-z2h-p6/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important callout-titled" title="This is not orginal content!">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This is not orginal content!
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is my study notes / codes along with Andrej Karpathy’s “<a href="https://www.youtube.com/watch?v=VMj-3S1tku0&amp;list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ">Neural Networks: Zero to Hero</a>” series.</p>
</div>
</div>
<p><em>Codes are executed in Colab, this calculation capacity exceeds my computer’s ability.</em></p>
<section id="intro" class="level1">
<h1>1 intro</h1>
<p>We are going to take the 2-layer MLP in the part 3 of <code>makemore</code> and complexify it by:</p>
<ul>
<li>extending the block size: from 3 to 8 characters;</li>
<li>making it deeper rather than 1 hidden layer.</li>
</ul>
<p>then end of with a Convoluntional Neural Network architecture similar to <code>WaveNet</code> (2016) by <a href="https://deepmind.google/">Google DeepMind</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-09-nn-z2h-p6/wavenet.png" class="img-fluid figure-img"></p>
<figcaption>WaveNet model architecture, <a href="https://www.researchgate.net/figure/WaveNet-Model-Architecture-38_fig2_380566531">source</a></figcaption>
</figure>
</div>
<section id="starter-code-walk-through" class="level2">
<h2 class="anchored" data-anchor-id="starter-code-walk-through">starter code walk through</h2>
<section id="import-libraries" class="level4">
<h4 class="anchored" data-anchor-id="import-libraries">import libraries</h4>
<div id="c0f047f6" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</details>
</div>
</section>
<section id="reading-data" class="level4">
<h4 class="anchored" data-anchor-id="reading-data">reading data</h4>
<div id="e1d665af" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"></span>
<span id="cb2-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/karpathy/makemore/refs/heads/master/names.txt"</span></span>
<span id="cb2-4">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>).iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tolist()</span>
<span id="cb2-5">words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt;&gt;&gt; ['emma', 'olivia', 'ava', 'isabella', 'sophia', 'charlotte', 'mia', 'amelia']</span></span></code></pre></div>
</details>
</div>
</section>
<section id="building-vocab" class="level4">
<h4 class="anchored" data-anchor-id="building-vocab">building vocab</h4>
<div id="2647be2b" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the vocabulary of characters and mapping to/from integer</span></span>
<span id="cb3-2">chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(words))))</span>
<span id="cb3-3">stoi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {s:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chars)}</span>
<span id="cb3-4">stoi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-5">itos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i: s <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s, i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> stoi.items()}</span>
<span id="cb3-6">vocab_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(itos)</span>
<span id="cb3-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(itos)</span>
<span id="cb3-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(vocab_size)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># itos: {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j',</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't',</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 0: '.'}</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vocab_size: 27</span></span></code></pre></div>
</details>
</div>
</section>
<section id="initializing-randomization" class="level4">
<h4 class="anchored" data-anchor-id="initializing-randomization">initializing randomization</h4>
<div id="226cb206" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb4-2">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb4-3">random.shuffle(words)</span></code></pre></div>
</details>
</div>
</section>
<section id="create-traindevtest-splits" class="level4">
<h4 class="anchored" data-anchor-id="create-traindevtest-splits">create train/dev/test splits</h4>
<div id="0f6eec99" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># context length: how many characters do we take to predict the next one?</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the dataset</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> buid_dataset(words):</span>
<span id="cb5-4">    X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb5-5"></span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words:</span>
<span id="cb5-7">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size</span>
<span id="cb5-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb5-9">            ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb5-10">            X.append(context)</span>
<span id="cb5-11">            Y.append(ix)</span>
<span id="cb5-12">            context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb5-13"></span>
<span id="cb5-14">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb5-15">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span>
<span id="cb5-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.shape, Y.shape)</span>
<span id="cb5-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> X, Y</span>
<span id="cb5-18"></span>
<span id="cb5-19">n1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb5-20">n2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb5-21"></span>
<span id="cb5-22">Xtr, Ytr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[:n1])        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 80#</span></span>
<span id="cb5-23">Xdev, Ydev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n1:n2])    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 10%</span></span>
<span id="cb5-24">Xte, Yte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n2:])        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 10%</span></span>
<span id="cb5-25"></span>
<span id="cb5-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># torch.Size([182625, 3]) torch.Size([182625])</span></span>
<span id="cb5-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># torch.Size([22655, 3]) torch.Size([22655])</span></span>
<span id="cb5-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># torch.Size([22866, 3]) torch.Size([22866])</span></span></code></pre></div>
</details>
</div>
</section>
<section id="input-and-response-preview" class="level4">
<h4 class="anchored" data-anchor-id="input-and-response-preview">input and response preview</h4>
<div id="f9315522" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(Xtr[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>], Ytr[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]):</span>
<span id="cb6-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(itos[ix.item()] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ix <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'---&gt;'</span>, itos[y.item()])</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">... ---&gt; y</span>
<span id="cb7-2">..y ---&gt; u</span>
<span id="cb7-3">.yu ---&gt; h</span>
<span id="cb7-4">yuh ---&gt; e</span>
<span id="cb7-5">uhe ---&gt; n</span>
<span id="cb7-6">hen ---&gt; g</span>
<span id="cb7-7">eng ---&gt; .</span>
<span id="cb7-8">... ---&gt; d</span>
<span id="cb7-9">..d ---&gt; i</span>
<span id="cb7-10">.di ---&gt; o</span>
<span id="cb7-11">dio ---&gt; n</span>
<span id="cb7-12">ion ---&gt; d</span>
<span id="cb7-13">ond ---&gt; r</span>
<span id="cb7-14">ndr ---&gt; e</span>
<span id="cb7-15">dre ---&gt; .</span>
<span id="cb7-16">... ---&gt; x</span>
<span id="cb7-17">..x ---&gt; a</span>
<span id="cb7-18">.xa ---&gt; v</span>
<span id="cb7-19">xav ---&gt; i</span>
<span id="cb7-20">avi ---&gt; e</span></code></pre></div>
</section>
<section id="initializing-objects-in-networks" class="level4">
<h4 class="anchored" data-anchor-id="initializing-objects-in-networks">initializing objects in networks</h4>
<p>Near copy paste of the layers we have developed in Part 3, I added some docstring to the classes.</p>
<section id="class-linear" class="level5">
<h5 class="anchored" data-anchor-id="class-linear">class <code>Linear</code></h5>
<div id="5c4029f3" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Linear:</span>
<span id="cb8-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Applies an affine linear transformation to the incoming data: y = xA^T + b.</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  This class implements a linear (fully connected) layer, which performs a linear</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  transformation on the input tensor. It is typically used in neural network architectures</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  to transform input features between layers.</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Args:</span></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      fan_in (int): Number of input features (input dimension).</span></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      fan_out (int): Number of output features (output dimension).</span></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      bias (bool, optional): Whether to include a learnable bias term.</span></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          Defaults to True.</span></span>
<span id="cb8-14"></span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Attributes:</span></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      weight (torch.Tensor): Weight matrix of shape (fan_in, fan_out),</span></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          initialized using Kaiming initialization.</span></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      bias (torch.Tensor or None): Bias vector of shape (fan_out),</span></span>
<span id="cb8-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          initialized to zeros if bias is True, otherwise None.</span></span>
<span id="cb8-20"></span>
<span id="cb8-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Methods:</span></span>
<span id="cb8-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      __call__(x): Applies the linear transformation to the input tensor x.</span></span>
<span id="cb8-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      parameters(): Returns a list of trainable parameters (weight and bias).</span></span>
<span id="cb8-24"></span>
<span id="cb8-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Example:</span></span>
<span id="cb8-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      &gt;&gt;&gt; layer = Linear(10, 5)  # Creates a linear layer with 10 input features and 5 output features</span></span>
<span id="cb8-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      &gt;&gt;&gt; x = torch.randn(3, 10)  # Input tensor with batch size 3 and 10 features</span></span>
<span id="cb8-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      &gt;&gt;&gt; output = layer(x)  # Applies linear transformation</span></span>
<span id="cb8-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      &gt;&gt;&gt; output.shape</span></span>
<span id="cb8-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      torch.Size([3, 5])</span></span>
<span id="cb8-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  """</span></span>
<span id="cb8-32"></span>
<span id="cb8-33">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, fan_in, fan_out, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb8-34">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((fan_in, fan_out)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> fan_in<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note: kaiming init</span></span>
<span id="cb8-35">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(fan_out) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> bias <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-36"></span>
<span id="cb8-37">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb8-38">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight</span>
<span id="cb8-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-40">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias</span>
<span id="cb8-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb8-42"></span>
<span id="cb8-43">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ([] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias])</span></code></pre></div>
</details>
</div>
</section>
<section id="class-batchnorm1d" class="level5">
<h5 class="anchored" data-anchor-id="class-batchnorm1d">class <code>BatchNorm1d</code></h5>
<div id="964c549f" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BatchNorm1d:</span>
<span id="cb9-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Applies Batch Normalization to the input tensor, a technique to improve</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  training stability and performance in deep neural networks.</span></span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Batch Normalization normalizes the input across the batch dimension,</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  reducing internal covariate shift and allowing higher learning rates.</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  This implementation supports both training and inference modes.</span></span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Args:</span></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      dim (int): Number of features or channels to be normalized.</span></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      eps (float, optional): A small constant added to the denominator for</span></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          numerical stability to prevent division by zero.</span></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          Defaults to 1e-5.</span></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      momentum (float, optional): Momentum for updating running mean and</span></span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          variance during training. Controls the degree of exponential</span></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          moving average. Defaults to 0.1.</span></span>
<span id="cb9-18"></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Attributes:</span></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      eps (float): Epsilon value for numerical stability.</span></span>
<span id="cb9-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      momentum (float): Momentum for running statistics update.</span></span>
<span id="cb9-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      training (bool): Indicates whether the layer is in training or inference mode.</span></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      gamma (torch.Tensor): Learnable scale parameter of shape (dim,).</span></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      beta (torch.Tensor): Learnable shift parameter of shape (dim,).</span></span>
<span id="cb9-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      running_mean (torch.Tensor): Exponential moving average of batch means.</span></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      running_var (torch.Tensor): Exponential moving average of batch variances.</span></span>
<span id="cb9-27"></span>
<span id="cb9-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Methods:</span></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      __call__(x): Applies batch normalization to the input tensor.</span></span>
<span id="cb9-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      parameters(): Returns learnable parameters (gamma and beta).</span></span>
<span id="cb9-31"></span>
<span id="cb9-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Key Normalization Steps:</span></span>
<span id="cb9-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  1. Compute batch mean and variance (in training mode)</span></span>
<span id="cb9-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  2. Normalize input by subtracting mean and dividing by standard deviation</span></span>
<span id="cb9-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  3. Apply learnable scale (gamma) and shift (beta) parameters</span></span>
<span id="cb9-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  4. Update running statistics during training</span></span>
<span id="cb9-37"></span>
<span id="cb9-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Example:</span></span>
<span id="cb9-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      &gt;&gt;&gt; batch_norm = BatchNorm1d(64)  # For 64-channel input</span></span>
<span id="cb9-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      &gt;&gt;&gt; x = torch.randn(32, 64)  # Batch of 32 samples with 64 features</span></span>
<span id="cb9-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      &gt;&gt;&gt; normalized_x = batch_norm(x)  # Apply batch normalization</span></span>
<span id="cb9-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      &gt;&gt;&gt; normalized_x.shape</span></span>
<span id="cb9-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      torch.Size([32, 64])</span></span>
<span id="cb9-44"></span>
<span id="cb9-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Note:</span></span>
<span id="cb9-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      - Supports both 2D (batch, features) and 3D (batch, channels, sequence) input tensors</span></span>
<span id="cb9-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      - During inference, uses running statistics instead of batch statistics</span></span>
<span id="cb9-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  """</span></span>
<span id="cb9-49">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dim, eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb9-50">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eps</span>
<span id="cb9-51">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> momentum</span>
<span id="cb9-52">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.training <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb9-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters (trained with backprop)</span></span>
<span id="cb9-54">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(dim)</span>
<span id="cb9-55">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(dim)</span>
<span id="cb9-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># buffers (trained with a running 'momentum update')</span></span>
<span id="cb9-57">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(dim)</span>
<span id="cb9-58">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(dim)</span>
<span id="cb9-59"></span>
<span id="cb9-60">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb9-61">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the forward pass</span></span>
<span id="cb9-62">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.training:</span>
<span id="cb9-63">      xmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.mean(dim, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch mean</span></span>
<span id="cb9-64">      xvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.var(dim, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch variance</span></span>
<span id="cb9-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb9-66">      xmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_mean</span>
<span id="cb9-67">      xvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_var</span>
<span id="cb9-68">    xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xmean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.sqrt(xvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eps) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalize to unit variance</span></span>
<span id="cb9-69">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta</span>
<span id="cb9-70">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the buffers</span></span>
<span id="cb9-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.training:</span>
<span id="cb9-72">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb9-73">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> xmean</span>
<span id="cb9-74">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> xvar</span>
<span id="cb9-75">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb9-76"></span>
<span id="cb9-77">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-78">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta]</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="class-tanh" class="level4">
<h4 class="anchored" data-anchor-id="class-tanh">class <code>Tanh</code></h4>
<div id="e66a8d61" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Tanh:</span>
<span id="cb10-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Hyperbolic Tangent (Tanh) Activation Function</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Applies the hyperbolic tangent activation function element-wise to the input tensor.</span></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Tanh maps input values to the range [-1, 1], providing a symmetric and non-linear</span></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    transformation that helps neural networks learn complex patterns.</span></span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Mathematical Definition:</span></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tanh(x) = (e^x - e^-x) / (e^x + e^-x)</span></span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Key Characteristics:</span></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Output Range: [-1, 1]</span></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Symmetric around the origin</span></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Gradient is always less than 1, which helps mitigate the vanishing gradient problem</span></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Commonly used in recurrent neural networks and hidden layers</span></span>
<span id="cb10-17"></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Methods:</span></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        __call__(x): Applies the Tanh activation to the input tensor.</span></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        parameters(): Returns an empty list, as Tanh has no learnable parameters.</span></span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb10-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        out (torch.Tensor): Stores the output of the most recent forward pass.</span></span>
<span id="cb10-24"></span>
<span id="cb10-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Example:</span></span>
<span id="cb10-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        &gt;&gt;&gt; activation = Tanh()</span></span>
<span id="cb10-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        &gt;&gt;&gt; x = torch.tensor([-2.0, 0.0, 2.0])</span></span>
<span id="cb10-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        &gt;&gt;&gt; y = activation(x)</span></span>
<span id="cb10-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        &gt;&gt;&gt; y</span></span>
<span id="cb10-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tensor([-0.9640, 0.0000, 0.9640])</span></span>
<span id="cb10-31"></span>
<span id="cb10-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Note:</span></span>
<span id="cb10-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This implementation is stateless and does not modify the input tensor.</span></span>
<span id="cb10-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The activation is applied element-wise, preserving the input tensor's shape.</span></span>
<span id="cb10-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb10-36"></span>
<span id="cb10-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb10-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(x)</span>
<span id="cb10-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb10-40"></span>
<span id="cb10-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> []</span></code></pre></div>
</details>
</div>
<section id="random-number-generator" class="level5">
<h5 class="anchored" data-anchor-id="random-number-generator">random number generator</h5>
<div id="812115b1" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed rng for reproducibility</span></span></code></pre></div>
</details>
</div>
</section>
<section id="network-architecture" class="level5">
<h5 class="anchored" data-anchor-id="network-architecture">network architecture</h5>
<div id="a5a47931" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># original network</span></span>
<span id="cb12-2">n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the dimensionality of the character embedding vectors</span></span>
<span id="cb12-3">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of neurons in the hidden layer of the MLP</span></span>
<span id="cb12-4"></span>
<span id="cb12-5">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand((vocab_size, n_embd))</span>
<span id="cb12-6">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb12-7">  Linear(n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb12-8">  BatchNorm1d(n_hidden),</span>
<span id="cb12-9">  Tanh(),</span>
<span id="cb12-10">  Linear(n_hidden, vocab_size),</span>
<span id="cb12-11">]</span>
<span id="cb12-12"></span>
<span id="cb12-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameter init</span></span>
<span id="cb12-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb12-15">  layers[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># last layer make less confident</span></span>
<span id="cb12-16"></span>
<span id="cb12-17">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [p <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layer.parameters()]</span>
<span id="cb12-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of parameters in total</span></span>
<span id="cb12-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb12-20">  p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-21"></span>
<span id="cb12-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model params: 12097</span></span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="optimization" class="level4">
<h4 class="anchored" data-anchor-id="optimization">optimization</h4>
<div id="dc2af5a3" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same optimization as last time</span></span>
<span id="cb13-2">max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200000</span></span>
<span id="cb13-3">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb13-4">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_steps):</span>
<span id="cb13-7"></span>
<span id="cb13-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct</span></span>
<span id="cb13-9">  ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,))</span>
<span id="cb13-10">  Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X,Y</span></span>
<span id="cb13-11"></span>
<span id="cb13-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb13-13">  emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors</span></span>
<span id="cb13-14">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb13-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers:</span>
<span id="cb13-16">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer(x)</span>
<span id="cb13-17">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(x, Yb) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb13-18"></span>
<span id="cb13-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb13-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb13-21">    p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb13-22">  loss.backward()</span>
<span id="cb13-23"></span>
<span id="cb13-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update: simple SGD</span></span>
<span id="cb13-25">  lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150000</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step learning rate decay</span></span>
<span id="cb13-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb13-27">    p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb13-28"></span>
<span id="cb13-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb13-30">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print every once in a while</span></span>
<span id="cb13-31">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-32">  lossi.append(loss.log10().item())</span></code></pre></div>
</details>
</div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb14-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     0/ 200000: 3.2885</span></span>
<span id="cb14-2">  10000/ 200000: 2.3938</span>
<span id="cb14-3">  20000/ 200000: 2.1235</span>
<span id="cb14-4">  30000/ 200000: 1.9222</span>
<span id="cb14-5">  40000/ 200000: 2.2440</span>
<span id="cb14-6">  50000/ 200000: 2.1108</span>
<span id="cb14-7">  60000/ 200000: 2.0624</span>
<span id="cb14-8">  70000/ 200000: 2.0893</span>
<span id="cb14-9">  80000/ 200000: 2.4173</span>
<span id="cb14-10">  90000/ 200000: 1.9744</span>
<span id="cb14-11"> 100000/ 200000: 2.0883</span>
<span id="cb14-12"> 110000/ 200000: 2.4538</span>
<span id="cb14-13"> 120000/ 200000: 1.9535</span>
<span id="cb14-14"> 130000/ 200000: 1.8980</span>
<span id="cb14-15"> 140000/ 200000: 2.1196</span>
<span id="cb14-16"> 150000/ 200000: 2.3550</span>
<span id="cb14-17"> 160000/ 200000: 2.2957</span>
<span id="cb14-18"> 170000/ 200000: 2.0286</span>
<span id="cb14-19"> 180000/ 200000: 2.2379</span>
<span id="cb14-20"> 190000/ 200000: 2.3866</span></code></pre></div>
</section>
<section id="observe-training-processevaluation" class="level4">
<h4 class="anchored" data-anchor-id="observe-training-processevaluation">observe training process/evaluation</h4>
<div id="f2a87323" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">plt.plot(lossi)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-09-nn-z2h-p6/1_pre_lossi.png" class="img-fluid figure-img"></p>
<figcaption><code>lossi</code> plot at the beginning</figcaption>
</figure>
</div>
</section>
<section id="calibrate-the-batchnorm-after-training" class="level4">
<h4 class="anchored" data-anchor-id="calibrate-the-batchnorm-after-training">calibrate the <code>batchnorm</code> after training</h4>
<p>We should be using the running mean/variance of the whole dataset splits rather than the last mini-batch.</p>
<div id="05be87a1" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put layers into eval mode (needed for batchnorm especially)</span></span>
<span id="cb16-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.layers:</span>
<span id="cb16-3">  layer.training <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
</details>
</div>
</section>
<section id="calculate-on-whole-training-and-validation-splits" class="level4">
<h4 class="anchored" data-anchor-id="calculate-on-whole-training-and-validation-splits">calculate on whole training and validation splits</h4>
<div id="954d7379" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># evaluate the loss</span></span>
<span id="cb17-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this decorator disables gradient tracking inside pytorch</span></span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> split_loss(split):</span>
<span id="cb17-4">  x,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb17-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>: (Xtr, Ytr),</span>
<span id="cb17-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: (Xdev, Ydev),</span>
<span id="cb17-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: (Xte, Yte),</span>
<span id="cb17-8">  }[split]</span>
<span id="cb17-9">  logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x)</span>
<span id="cb17-10">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, y)</span>
<span id="cb17-11">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(split, loss.item())</span>
<span id="cb17-12"></span>
<span id="cb17-13">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span>
<span id="cb17-14">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>)</span></code></pre></div>
</details>
</div>
<p>Pretty loss but there are still room for improve:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb18-1">train 2.0467958450317383</span>
<span id="cb18-2">val 2.0989298820495605</span></code></pre></div>
</section>
<section id="sample-from-the-model" class="level4">
<h4 class="anchored" data-anchor-id="sample-from-the-model">sample from the model</h4>
<p>Here are Names generated by the model till now, we have relatively name-like results that do not exist in the training set.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb19-1">liz.</span>
<span id="cb19-2">layah.</span>
<span id="cb19-3">dan.</span>
<span id="cb19-4">hilon.</span>
<span id="cb19-5">avani.</span>
<span id="cb19-6">korron.</span>
<span id="cb19-7">aua.</span>
<span id="cb19-8">noon.</span>
<span id="cb19-9">bethalyn.</span>
<span id="cb19-10">thia.</span>
<span id="cb19-11">bote.</span>
<span id="cb19-12">jereanail.</span>
<span id="cb19-13">vitorien.</span>
<span id="cb19-14">zarashivonna.</span>
<span id="cb19-15">yakurrren.</span>
<span id="cb19-16">jovon.</span>
<span id="cb19-17">malynn.</span>
<span id="cb19-18">vanna.</span>
<span id="cb19-19">caparmana.</span>
<span id="cb19-20">shantymonse.</span></code></pre></div>
</section>
</section>
<section id="lets-fix-the-learning-rate-plot" class="level2">
<h2 class="anchored" data-anchor-id="lets-fix-the-learning-rate-plot">let’s fix the learning rate plot</h2>
<p>The plot for <code>lossi</code> looks very crazy, it’s because the batch size of 32 is way too few so this time we got lucky, and next time we got unlucky. And the mini-batch loss splashed too much. We should probably fix it.</p>
<p>We pivot to a row for every 1000 observations of <code>lossi</code> and calculate the mean, we end up have 200 observations which is easier to see.</p>
<div id="6f3f4a90" class="cell" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">plt.plot(torch.tensor(lossi).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>).mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</details>
</div>
<p>We can also observe the learning rate decay at 150k training loops.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-09-nn-z2h-p6/2_enhance_lossi.png" class="img-fluid figure-img"></p>
<figcaption><code>lossi</code> plot fixed</figcaption>
</figure>
</div>
</section>
<section id="pytorchifying-our-code-layers-containers-torch.nn-fun-bugs" class="level2">
<h2 class="anchored" data-anchor-id="pytorchifying-our-code-layers-containers-torch.nn-fun-bugs">pytorchifying our code: layers, containers, <code>torch.nn</code>, fun bugs</h2>
<p>Now we notice that we still have the embedding operation lying outside the pytorch-ified layers. It basically creating a lookup table <code>C</code>, embedding it with our data <code>Y</code> (or <code>Yb</code>), then stretching out to row with <code>view()</code> which is very cheap in PyTorch as no more memory creation is needed.</p>
<p>We modulize this by constructing 2 classes:</p>
<div id="ed88f230" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Embedding:</span>
<span id="cb21-2"></span>
<span id="cb21-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_embeddings, embedding_dim):</span>
<span id="cb21-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((num_embeddings, embedding_dim))</span>
<span id="cb21-5"></span>
<span id="cb21-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, IX):</span>
<span id="cb21-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight[IX]</span>
<span id="cb21-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb21-9"></span>
<span id="cb21-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb21-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight]</span>
<span id="cb21-12"></span>
<span id="cb21-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------------------------------------------------------------------------------------</span></span>
<span id="cb21-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Flatten:</span>
<span id="cb21-15"></span>
<span id="cb21-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb21-17">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.view(x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb21-19"></span>
<span id="cb21-20">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb21-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> []</span></code></pre></div>
</details>
</div>
<p>Now we can re-define the <code>layers</code> like this:</p>
<div id="720dbdaa" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb22-2">  Embedding(vocab_size, n_embd),</span>
<span id="cb22-3">  Flatten(),</span>
<span id="cb22-4">  Linear(n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb22-5">  BatchNorm1d(n_hidden),</span>
<span id="cb22-6">  Tanh(),</span>
<span id="cb22-7">  Linear(n_hidden, vocab_size),</span>
<span id="cb22-8">]</span></code></pre></div>
</details>
</div>
<p>and also remove the <code>C</code>, <code>emb</code> definition in the forward pass construction. Going futher, we will be not only pytorchifying the elements of <code>layers</code> only, but also the <code>layers</code> itself. In PyTorch, we have term <code>containers</code>, which specifying how we organize the layers in a network. And what are we doing here is constructing layers sequentially, which is equivalent to <code>Sequential</code> in the <code>containers</code>:</p>
<div id="e127f831" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Sequential:</span>
<span id="cb23-2"></span>
<span id="cb23-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, layers):</span>
<span id="cb23-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layers</span>
<span id="cb23-5"></span>
<span id="cb23-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb23-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers:</span>
<span id="cb23-8">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer(x)</span>
<span id="cb23-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb23-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb23-11"></span>
<span id="cb23-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb23-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get parameters of all layers and stretch them out into one list</span></span>
<span id="cb23-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [p <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layer.parameters()]</span></code></pre></div>
</details>
</div>
<p>and wrapp the layers into our <code>model</code>:</p>
<div id="560f5a5d" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sequential([</span>
<span id="cb24-2">  Embedding(vocab_size, n_embd),</span>
<span id="cb24-3">  Flatten(),</span>
<span id="cb24-4">  Linear(n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>),</span>
<span id="cb24-5">  BatchNorm1d(n_hidden),</span>
<span id="cb24-6">  Tanh(),</span>
<span id="cb24-7">  Linear(n_hidden, vocab_size),</span>
<span id="cb24-8">])</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="implementing-wavenet" class="level1">
<h1>2 implementing <code>WaveNet</code></h1>
<p>So far with the classical MLP following Bengio et al.&nbsp;(2003), we have a <em>embedding layer</em> followed by a <em>hidden layer</em> and end up with a <em>activation layer</em>. Although we added more layer after the embedding, we could not make a significant progress.</p>
<p>The problem is we dont have a <strong>naive way</strong> of making the model bigger in a productive way. We are still in the case that we crushing all the characters into a single all the way at the begining. And even if we make this a bigger layer and add neurons it’s still like silly to squash all that information so fast into a single step.</p>
<section id="overview-wavenet" class="level2">
<h2 class="anchored" data-anchor-id="overview-wavenet">overview: <code>WaveNet</code></h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-09-nn-z2h-p6/fig3_wavenet.png" class="img-fluid figure-img"></p>
<figcaption>Visualization of the <code>WaveNet</code> idea - Progressive Fusion</figcaption>
</figure>
</div>
</section>
<section id="dataset-bump-the-context-size-to-8" class="level2">
<h2 class="anchored" data-anchor-id="dataset-bump-the-context-size-to-8">dataset bump the context size to 8</h2>
<p>first we change the <code>block_size</code> into <code>8</code> and now our dataset looks like:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb25-1">........ ---&gt; y</span>
<span id="cb25-2">.......y ---&gt; u</span>
<span id="cb25-3">......yu ---&gt; h</span>
<span id="cb25-4">.....yuh ---&gt; e</span>
<span id="cb25-5">....yuhe ---&gt; n</span>
<span id="cb25-6">...yuhen ---&gt; g</span>
<span id="cb25-7">..yuheng ---&gt; .</span>
<span id="cb25-8">........ ---&gt; d</span>
<span id="cb25-9">.......d ---&gt; i</span>
<span id="cb25-10">......di ---&gt; o</span>
<span id="cb25-11">.....dio ---&gt; n</span>
<span id="cb25-12">....dion ---&gt; d</span>
<span id="cb25-13">...diond ---&gt; r</span>
<span id="cb25-14">..diondr ---&gt; e</span>
<span id="cb25-15">.diondre ---&gt; .</span>
<span id="cb25-16">........ ---&gt; x</span>
<span id="cb25-17">.......x ---&gt; a</span>
<span id="cb25-18">......xa ---&gt; v</span>
<span id="cb25-19">.....xav ---&gt; i</span>
<span id="cb25-20">....xavi ---&gt; e</span></code></pre></div>
<p>The model size now bumps up to 22k.</p>
</section>
<section id="re-running-baseline-code-on-block_size-8" class="level2">
<h2 class="anchored" data-anchor-id="re-running-baseline-code-on-block_size-8">re-running baseline code on <code>block_size = 8</code></h2>
<p>Just by lazily extending the context size to 8, we can already improve the model a little bit, the loss on validation split now is around <code>2.045</code>. The names generated now look prettier:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb26-1">zamari.</span>
<span id="cb26-2">brennis.</span>
<span id="cb26-3">shavia.</span>
<span id="cb26-4">wililke.</span>
<span id="cb26-5">obalyid.</span>
<span id="cb26-6">leenoluja.</span>
<span id="cb26-7">rianny.</span>
<span id="cb26-8">jordanoe.</span>
<span id="cb26-9">yuvalfue.</span>
<span id="cb26-10">ozleega.</span>
<span id="cb26-11">jemirene.</span>
<span id="cb26-12">polton.</span>
<span id="cb26-13">jawi.</span>
<span id="cb26-14">meyah.</span>
<span id="cb26-15">gekiniq.</span>
<span id="cb26-16">angelinne.</span>
<span id="cb26-17">tayler.</span>
<span id="cb26-18">catrician.</span>
<span id="cb26-19">kyearie.</span>
<span id="cb26-20">anderias.</span></code></pre></div>
<p>Let’s deem this as a baseline then we can start to implement <code>WaveNet</code> and see how far we can go!</p>
</section>
<section id="implementing-wavenet-1" class="level2">
<h2 class="anchored" data-anchor-id="implementing-wavenet-1">implementing <code>WaveNet</code></h2>
<p>First, let’s revisit the shape of the tensors along the way of the forward pass in our neural net:</p>
<div id="24a32dbb" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at a batch of just 4 examples</span></span>
<span id="cb27-2">ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,))</span>
<span id="cb27-3">Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix]</span>
<span id="cb27-4">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(Xb)</span>
<span id="cb27-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(Xb.shape)</span>
<span id="cb27-6">Xb</span>
<span id="cb27-7"></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; torch.Size([4, 8]) # because the context length is now 8</span></span>
<span id="cb27-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; tensor([[ 0,  0,  0,  0,  0,  0, 13,  9],</span></span>
<span id="cb27-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         [ 0,  0,  0,  0,  0,  0,  0,  0],</span></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         [ 0,  0,  0, 11,  5, 18, 15, 12],</span></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         [ 0,  0,  4, 15, 13,  9, 14,  9]])</span></span>
<span id="cb27-13"></span>
<span id="cb27-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output of the embedding layer, each input is translated</span></span>
<span id="cb27-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to 10 dimensional vector</span></span>
<span id="cb27-16">model.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].out.shape</span>
<span id="cb27-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; torch.Size([4, 8, 10])</span></span>
<span id="cb27-18"></span>
<span id="cb27-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output of Flatten layer, each 10-dim vector is concatenated</span></span>
<span id="cb27-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to each other for all 8-dim context vectors</span></span>
<span id="cb27-21">model.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].out.shape</span>
<span id="cb27-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; torch.Size([4, 80])</span></span>
<span id="cb27-23"></span>
<span id="cb27-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output of the Linear layer, take 80 and create 200 channels,</span></span>
<span id="cb27-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># just via matrix mult</span></span>
<span id="cb27-26">model.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].out.shape</span>
<span id="cb27-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; torch.Size([4, 200])</span></span></code></pre></div>
</details>
</div>
<p>Now look into the Linear layer, which take the input <code>x</code> in the forward pass, multiply by <code>weight</code> and add the <code>bias</code> in (there is broadcasting here). So the transformation in this layer looks like:</p>
<div id="ed056309" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">(torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)).shape</span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; torch.Size([4, 200])</span></span></code></pre></div>
</details>
</div>
<p>Input <code>x</code> matrix here does not need to be 2 dimensional array. The matrix multiplication in PyTorch is quite powerfull, you can pass more than 2 dimensional array. And all dimensions will be preserved except the last one. Like this:</p>
<div id="60f6327e" class="cell" data-execution_count="23">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1">(torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)).shape</span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; torch.Size([4, 5, 200])</span></span></code></pre></div>
</details>
</div>
<p>Which we want to improve now is not just flatten the 8 characters input too fast at the beginning, we want to group them pair by pair to process them in parallel.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb30-1">(x1 x2) (x3 x4) (x5 x6) (x7 x8)</span></code></pre></div>
<p>Particularly for 8 characters block size we want to divide it into 4 groups ~ 4 pair of <em>bigrams</em>. We are increasing <strong>the dimensions of the batch</strong>.</p>
<div id="9df4e45c" class="cell" data-execution_count="24">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1">(torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)).shape</span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; torch.Size([4, 4, 200])</span></span></code></pre></div>
</details>
</div>
<p>How can we achieve this in PyTorch, we can index the odd and even indexes then pair them up.</p>
<div id="888b1a66" class="cell" data-execution_count="25">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4 examples, 8 chars context size, 10-d embedding</span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># goal: want this to be (4, 4, 20) where consecutive 10-d vectors get concatenated</span></span>
<span id="cb32-3"></span>
<span id="cb32-4">explicit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([e[:, ::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, :], e[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, :]], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cat in the third dim</span></span>
<span id="cb32-5">explicit.shape</span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; torch.Size([4, 4, 20])</span></span></code></pre></div>
</details>
</div>
<p>Of course, PyTorch provide a more efficient way to do this, using <code>view()</code>:</p>
<div id="7f949bb6" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1">(e.view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> explicit).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>()</span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; tensor(True)</span></span></code></pre></div>
</details>
</div>
<p>We are going to modulize the <code>FlattenConsecutive</code>:</p>
<div id="a763eb71" class="cell" data-execution_count="27">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> FlattenConsecutive:</span>
<span id="cb34-2"></span>
<span id="cb34-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n):</span>
<span id="cb34-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n</span>
<span id="cb34-5"></span>
<span id="cb34-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb34-7">    B, T, C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.shape</span>
<span id="cb34-8">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.view(B, T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n, C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n)</span>
<span id="cb34-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># spurious tensor, if it's 1, squeeze it</span></span>
<span id="cb34-10">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb34-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb34-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb34-13"></span>
<span id="cb34-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb34-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> []</span></code></pre></div>
</details>
</div>
<p>and update the flatten layer to <code>FlattenConsecutive(block_size)</code> (8) in our <code>model</code>. We can observe the dimension of tensors in all layers:</p>
<div id="39c004d9" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.layers:</span>
<span id="cb35-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(layer.__class__.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(layer.out.shape))</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Embedding :  (4, 8, 10)</span></span>
<span id="cb35-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten :  (4, 80)</span></span>
<span id="cb35-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linear :  (4, 200)</span></span>
<span id="cb35-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BatchNorm1d :  (4, 200)</span></span>
<span id="cb35-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tanh :  (4, 200)</span></span>
<span id="cb35-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linear :  (4, 27)</span></span></code></pre></div>
</details>
</div>
<p>This is what we have currently. But as said, we dont want to flatten too fast, so we gonna flatten by 2 character, here is the update of the <code>model</code> - 3 layers present the consecutive flatten <code>4 -&gt; 2 -&gt; 1</code>:</p>
<div id="19f6dec8" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sequential([</span>
<span id="cb36-2">  Embedding(vocab_size, n_embd),</span>
<span id="cb36-3">  FlattenConsecutive(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), Linear(n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb36-4">  FlattenConsecutive(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), Linear(n_hidden<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb36-5">  FlattenConsecutive(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), Linear(n_hidden<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb36-6">  Linear(n_hidden, vocab_size),</span>
<span id="cb36-7">])</span></code></pre></div>
</details>
</div>
<p>and here is tensors dimension flowing in forward pass:</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb37-1"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Embedding :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 8, 10)</span></span>
<span id="cb37-2"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">FlattenConsecutive :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 4, 20)</span></span>
<span id="cb37-3"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Linear :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 4, 200)</span></span>
<span id="cb37-4"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">BatchNorm1d :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 4, 200)</span></span>
<span id="cb37-5"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Tanh :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 4, 200)</span></span>
<span id="cb37-6"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">FlattenConsecutive :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 2, 400)</span></span>
<span id="cb37-7"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Linear :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 2, 200)</span></span>
<span id="cb37-8"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">BatchNorm1d :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 2, 200)</span></span>
<span id="cb37-9"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Tanh :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 2, 200)</span></span>
<span id="cb37-10"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">FlattenConsecutive :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 400)</span></span>
<span id="cb37-11"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Linear :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 200)</span></span>
<span id="cb37-12"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">BatchNorm1d :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 200)</span></span>
<span id="cb37-13"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Tanh :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 200)</span></span>
<span id="cb37-14"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Linear :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (4, 27)</span></span></code></pre></div>
<p>That’s is, we have successfully implemented the <code>WaveNet</code>.</p>
</section>
<section id="training-the-wavenet-first-pass" class="level2">
<h2 class="anchored" data-anchor-id="training-the-wavenet-first-pass">training the <code>WaveNet</code>: first pass</h2>
<p>Now assume we use the same size of network (number of neurons), let’s see if the <code>loss</code> can be improved. We change the <code>n_hidden = 68</code>, so that the total parameters of our network remain 22k. Below is update tensor dims for a batch (32):</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb38-1"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Embedding :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 8, 10)</span></span>
<span id="cb38-2"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">FlattenConsecutive :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 4, 20)</span></span>
<span id="cb38-3"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Linear :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 4, 68)</span></span>
<span id="cb38-4"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">BatchNorm1d :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 4, 68)</span></span>
<span id="cb38-5"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Tanh :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 4, 68)</span></span>
<span id="cb38-6"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">FlattenConsecutive :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 2, 136)</span></span>
<span id="cb38-7"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Linear :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 2, 68)</span></span>
<span id="cb38-8"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">BatchNorm1d :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 2, 68)</span></span>
<span id="cb38-9"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Tanh :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 2, 68)</span></span>
<span id="cb38-10"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">FlattenConsecutive :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 136)</span></span>
<span id="cb38-11"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Linear :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 68)</span></span>
<span id="cb38-12"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">BatchNorm1d :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 68)</span></span>
<span id="cb38-13"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Tanh :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 68)</span></span>
<span id="cb38-14"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Linear :</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  (32, 27)</span></span></code></pre></div>
<p>It turns out that we got almost identical result. There are 2 things:</p>
<ol type="1">
<li>We just constructed the architecture of <code>WaveNet</code> but not tortured the model enough to find best set of hyperparameters; and</li>
<li>We may have a bug in <code>BatchNorm1d</code> layer, let’s take a look into this.</li>
</ol>
</section>
<section id="fixing-batchnorm1d-bug" class="level2">
<h2 class="anchored" data-anchor-id="fixing-batchnorm1d-bug">fixing <code>batchnorm1d</code> bug</h2>
<p>Let’s look at the <code>BatchNorm1d</code> happen in the first flatten layer:</p>
<div id="926b8f86" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68</span>)</span>
<span id="cb39-2">emean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1, 4, 68</span></span>
<span id="cb39-3">evar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e.var(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1, 4, 68</span></span>
<span id="cb39-4"></span>
<span id="cb39-5">ehat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> emean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.sqrt(evar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)</span>
<span id="cb39-6">ehat.shape</span>
<span id="cb39-7"></span>
<span id="cb39-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; torch.Size([32, 4, 68])</span></span></code></pre></div>
</details>
</div>
<p>For <code>ehat</code>, everything is calculated properly, mean and variance are calculated to the batch and the 2nd dim <code>4</code> is preserved. But for the <code>running_mean</code>:</p>
<div id="abfeda82" class="cell" data-execution_count="31">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1">model.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].running_mean.shape</span>
<span id="cb40-2"></span>
<span id="cb40-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; torch.Size([1, 4, 68])</span></span></code></pre></div>
</details>
</div>
<p>We see it is (1, 4, 68) while we are expected it’s 1 dimensional only which is defined in the init method (<code>torch.zeros(dim)</code>). We are maintaining the batch norm in parallel over 4 x 68 channels individually and independently instead of just 68 channels. We want to treat this <code>4</code> just like a batch norm dimension, ie everaging of <code>32 * 4</code> numbers for 68 channels. Fortunately PyTorch <code>mean()</code> method offer the reducing dimension not only for integer but also tuple.</p>
<div id="71eb0522" class="cell" data-execution_count="32">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68</span>)</span>
<span id="cb41-2">emean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e.mean((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), keepdim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1, 1, 68</span></span>
<span id="cb41-3">evar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e.var((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), keepdim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1, 1, 68</span></span>
<span id="cb41-4"></span>
<span id="cb41-5">ehat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> emean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.sqrt(evar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)</span>
<span id="cb41-6">ehat.shape</span>
<span id="cb41-7"></span>
<span id="cb41-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; torch.Size([32, 4, 68])</span></span>
<span id="cb41-9"></span>
<span id="cb41-10">model.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].running_mean.shape</span>
<span id="cb41-11"></span>
<span id="cb41-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; torch.Size([1, 1, 68])</span></span></code></pre></div>
</details>
</div>
<p>We now modify the <code>BatchNorm1d</code> definition accordingly, only the training mean/var in the <code>__call__</code> method:</p>
<div id="264b096d" class="cell" data-execution_count="33">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---- remains the same</span></span>
<span id="cb42-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb42-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the forward pass</span></span>
<span id="cb42-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.training:</span>
<span id="cb42-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb42-6">        dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb42-7">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> x.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb42-8">        dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb42-9">      xmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.mean(dim, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch mean</span></span>
<span id="cb42-10">      xvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.var(dim, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch variance</span></span>
<span id="cb42-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb42-12">      xmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_mean</span>
<span id="cb42-13">      xvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_var</span>
<span id="cb42-14">    xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xmean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.sqrt(xvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eps) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalize to unit variance</span></span>
<span id="cb42-15">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta</span>
<span id="cb42-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---- remaind the same</span></span></code></pre></div>
</details>
</div>
</section>
<section id="re-training-wavenet-with-bug-fix" class="level2">
<h2 class="anchored" data-anchor-id="re-training-wavenet-with-bug-fix">re-training <code>WaveNet</code> with bug fix</h2>
<p>Now retraining the network with bug fixed, we obtain a slightly better loss of <code>2.022</code>. We just fixed the normalization term inside the network so they did not thrush too much so a little improvement only is expected.</p>
</section>
<section id="scaling-up-our-wavenet" class="level2">
<h2 class="anchored" data-anchor-id="scaling-up-our-wavenet">scaling up our <code>WaveNet</code></h2>
<p>Now we’re ready to scale up our network and retrain everything, the model now have roughly 76k paramters. We finally passed the <code>2.0</code> threshold and achieved the loss of <code>1.99</code> on the validation split.</p>
<div id="4b813a84" class="cell" data-execution_count="34">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1">n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb43-2">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span></code></pre></div>
</details>
</div>
<p>And here is final loss plot:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-09-nn-z2h-p6/final_lossi.png" class="img-fluid figure-img"></p>
<figcaption><code>lossi</code> final</figcaption>
</figure>
</div>
</section>
</section>
<section id="conclusions" class="level1">
<h1>3 conclusions</h1>
<section id="performance-log" class="level2">
<h2 class="anchored" data-anchor-id="performance-log">performance log</h2>
<table class="table-striped table-hover caption-top table">
<caption>Loss logs</caption>
<colgroup>
<col style="width: 10%">
<col style="width: 40%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th>Step</th>
<th>What we did</th>
<th>Loss we got (accum)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>original (3 character context + 200 hidden neurons, 12K params)</td>
<td><p>train 2.0467958450317383</p>
<p>val 2.0989298820495605</p></td>
</tr>
<tr class="even">
<td>2</td>
<td>context: 3 -&gt; 8 (22K params)</td>
<td><p>train 1.9028635025024414</p>
<p>val 2.044949769973755</p></td>
</tr>
<tr class="odd">
<td>3</td>
<td>flat -&gt; hierarchical (22K params)</td>
<td><p>train 1.9366059303283691</p>
<p>val 2.017268419265747</p></td>
</tr>
<tr class="even">
<td>4</td>
<td>fix bug in <code>batchnorm1d</code></td>
<td><p>train 1.9156142473220825</p>
<p>val 2.0228867530822754</p></td>
</tr>
<tr class="odd">
<td>5</td>
<td>scale up the network: <code>n_embd</code> 24, <code>n_hidden</code> 128 (76K params)</td>
<td><p>train 1.7680459022521973</p>
<p>val 1.994154691696167</p></td>
</tr>
</tbody>
</table>
</section>
<section id="experimental-harness" class="level2">
<h2 class="anchored" data-anchor-id="experimental-harness">experimental harness</h2>
<p>The “harness” metaphor is apt because it’s like a structured support system that allows researchers to systematically explore and optimize neural network configurations, much like a harness helps guide and support an athlete during training.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>An experimental harness typically includes several key components:</p>
<ol type="1">
<li>Hyperparameter Search Space Definition: This involves specifying the range of hyperparameters to be explored, such as:</li>
</ol>
<ul>
<li>Learning rates</li>
<li>Batch sizes</li>
<li>Network architecture depths</li>
<li>Activation functions</li>
<li>Regularization techniques</li>
<li>Dropout rates</li>
</ul>
<ol start="2" type="1">
<li>Search Strategy: Methods for exploring the hyperparameter space, which can include:</li>
</ol>
<ul>
<li>Grid search</li>
<li>Random search</li>
<li>Bayesian optimization</li>
<li>Evolutionary algorithms</li>
<li>Gradient-based optimization techniques</li>
</ul>
<ol start="3" type="1">
<li>Evaluation Metrics: Predefined metrics to assess model performance, such as:</li>
</ol>
<ul>
<li>Validation accuracy</li>
<li>Loss function values</li>
<li>Precision and recall</li>
<li>F1 score</li>
<li>Computational efficiency</li>
</ul>
<ol start="4" type="1">
<li>Automated Experiment Management: Tools and scripts that can:</li>
</ol>
<ul>
<li>Automatically generate and run different model configurations</li>
<li>Log results</li>
<li>Track experiments</li>
<li>Compare performance across different hyperparameter settings</li>
</ul>
<ol start="5" type="1">
<li>Reproducibility Mechanisms: Ensuring that experiments can be repeated and validated, which includes:</li>
</ol>
<ul>
<li>Fixed random seeds</li>
<li>Consistent data splitting</li>
<li>Versioning of datasets and configurations</li>
</ul>
</div>
</div>
</section>
<section id="wavenet-but-with-dilated-causal-convolutions" class="level2">
<h2 class="anchored" data-anchor-id="wavenet-but-with-dilated-causal-convolutions"><code>WaveNet</code> but with “dilated causal convolutions”</h2>
<ul>
<li>Convolution is a “for loop” applying a linear filter over space of some input sequence;</li>
<li>Not happen only in Python but also in Kernel</li>
</ul>
</section>
<section id="torch.nn" class="level2">
<h2 class="anchored" data-anchor-id="torch.nn"><code>torch.nn</code></h2>
<p>We have implement alot of concepts in <code>torch.nn</code>:</p>
<ul>
<li>containers: <code>Sequential</code></li>
<li><code>Linear</code>, <code>BatchNorm1d</code>, <code>Tanh</code>, <code>FlattenConsecutive</code>, …</li>
</ul>
</section>
<section id="the-development-process-of-building-deep-neural-nets-going-forward" class="level2">
<h2 class="anchored" data-anchor-id="the-development-process-of-building-deep-neural-nets-going-forward">the development process of building deep neural nets &amp; going forward</h2>
<ul>
<li>Spending a ton of time exploring PyTorch documentation, unfortunately it’s not a good one;</li>
<li>Ton of time to make the shapes work: fan in, fan out, NLC or NLC, broadcasting, viewing, etc;</li>
<li>What we:
<ul>
<li>done: implemented dilated causal convoluntional network;</li>
<li>to be explores: residual and skip connections;</li>
<li>to be explores: experimental harness;</li>
<li>more mordern networks: RNN, LSTM, Transformer.</li>
</ul></li>
</ul>
</section>
</section>
<section id="resources" class="level1">
<h1>4 resources</h1>
<ol type="1">
<li>WaveNet 2016 from DeepMind: <a href="https://arxiv.org/abs/1609.03499" class="uri">https://arxiv.org/abs/1609.03499</a>;</li>
<li>Bengio et al.&nbsp;2003 MLP LM: <a href="https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf" class="uri">https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf</a>;</li>
<li>Notebook: <a href="https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part5_cnn1.ipynb" class="uri">https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part5_cnn1.ipynb</a>;</li>
<li>DeepMind’s blog post from 2016: <a href="https://deepmind.google/discover/blog/wavenet-a-generative-model-for-raw-audio/" class="uri">https://deepmind.google/discover/blog/wavenet-a-generative-model-for-raw-audio/</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>til</category>
  <category>python</category>
  <category>andrej karpathy</category>
  <category>nn-z2h</category>
  <category>neural networks</category>
  <guid>https://lktuan.github.io/blog/2024-12-09-nn-z2h-p6/</guid>
  <pubDate>Sun, 08 Dec 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-12-09-nn-z2h-p6/wavenet.png" medium="image" type="image/png" height="73" width="144"/>
</item>
<item>
  <title>Advanced SQL</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-12-06-adv_sql/</link>
  <description><![CDATA[ <p>This is my note/workaround for the article “<a href="https://www.startdataengineering.com/post/n-sql-tips-de/">25 SQL tips to level up your data engineering skills</a>” by Start Data Engineering, authored by <a href="https://github.com/josephmachado">Joseph Machado</a>.</p>
<section id="setup" class="level1"><h1>setup</h1>
<p>Joseph provided a ready-to-go project regarding this advanced SQL transformation topics in this <a href="https://github.com/josephmachado/adv_data_transformation_in_sql">repo</a> using <strong>DuckDB</strong> in <strong>Jupyter Notebook</strong>. We can either run it in the Github codespace or in our local machine with minimal setup.</p>
<p>We use the TPC-H database for demonstration:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/sample-data-tpch-schema.png" class="img-fluid figure-img"></p>
<figcaption>The TPC-H Schema, source: <a href="https://www.tpc.org/tpc_documents_current_versions/pdf/tpc-h_v2.17.1.pdf">TPC Benchmark H Standard Specification</a></figcaption></figure>
</div>
</section><section id="handy-functions-for-data-wrangling" class="level1"><h1>#1 handy functions for data wrangling</h1>
<section id="qualify" class="level2"><h2 class="anchored" data-anchor-id="qualify">#1.1 <code>QUALIFY</code>
</h2>
<p>We use <code>QUALIFY</code> to filter the output column of <code>WINDOW</code> function without creating more CTEs/Subqueries. It’s not available in many traditional/on-prem RDBMS (MySQL, Oracle, MSSQL, PostgreSQL) but available in mordern/cloud-based databases (Snowflake, BigQuery, Databricks, MS Fabric, Teradata).</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb1-2">    o_orderkey,</span>
<span id="cb1-3">    o_totalprice,</span>
<span id="cb1-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RANK</span>() <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">OVER</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> o_totalprice <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DESC</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> price_rank <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- rank the order by `o_totalprice` in desc</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders</span>
<span id="cb1-6">QUALIFY price_rank <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- filter top 10</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* would need a CTE or Sub-query without QUALIFY */</span></span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/1_qualify.png" class="img-fluid figure-img"></p>
<figcaption>output - first 10 rows</figcaption></figure>
</div>
</section><section id="distinct-on" class="level2"><h2 class="anchored" data-anchor-id="distinct-on">#1.2 <code>DISTINCT ON</code>
</h2>
<p>Orginated from PostgreSQL, now support by some cloud-based like Snowflake but not in MySQL, SQL Server, Oracle, <code>DISTINCT ON</code> allows us to get 1 detailed row (first or last) for a particular partition.</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DISTINCT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> (o_custkey) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- distinct only `o_custkey`</span></span>
<span id="cb2-2">    o_custkey,</span>
<span id="cb2-3">    o_orderdate,</span>
<span id="cb2-4">    o_totalprice</span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders</span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> o_custkey, o_orderdate <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DESC</span>; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- make sure to get the latest order by `o_orderdate`</span></span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/2_distinct_on.png" class="img-fluid figure-img"></p>
<figcaption>output - first 10 rows</figcaption></figure>
</div>
</section><section id="this-can-also-be-done-with-row_number-qualify" class="level2"><h2 class="anchored" data-anchor-id="this-can-also-be-done-with-row_number-qualify">#1.3 This can also be done with <code>ROW_NUMBER()</code> + <code>QUALIFY</code>:</h2>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb3-2">    o_custkey,</span>
<span id="cb3-3">    o_orderdate,</span>
<span id="cb3-4">    o_totalprice,</span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ROW_NUMBER</span>() <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">OVER</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">PARTITION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> o_custkey <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> o_orderdate <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DESC</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> rn</span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders</span>
<span id="cb3-7">QUALIFY rn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> o_custkey <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DESC</span>; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- ROW_NUMBER() shuffle the order of the data</span></span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/3_rn_qualify.png" class="img-fluid figure-img"></p>
<figcaption>output - first 10 rows</figcaption></figure>
</div>
</section><section id="struct_pack" class="level2"><h2 class="anchored" data-anchor-id="struct_pack">#1.4 <code>STRUCT_PACK()</code>
</h2>
<p><code>STRUCT_PACK()</code> is a function primarily associated with DuckDB:</p>
<ul>
<li>Creates a compact, binary representation of multiple values;</li>
<li>Allows you to pack different data types into a single column;</li>
<li>Useful for data compression and efficient storage.</li>
</ul>
<p>Below picture depicts how struct works:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/struck_pack.png" class="img-fluid figure-img"></p>
<figcaption>struct packing</figcaption></figure>
</div>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WITH</span> order_struct <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> (</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb4-3">        o_orderkey,</span>
<span id="cb4-4">        STRUCT_PACK(o_orderdate, o_totalprice, o_orderkey) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> order_info</span>
<span id="cb4-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders</span>
<span id="cb4-6">)</span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MIN</span>(order_info) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> min_order_date, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- get min of information from left to right</span></span>
<span id="cb4-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MAX</span>(order_info) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> max_order_date_price <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- get of information from left to right,</span></span>
<span id="cb4-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- if there are many txn in that latest day, get the transaction with max price</span></span>
<span id="cb4-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> order_struct;</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/4_struct.png" class="img-fluid figure-img"></p>
<figcaption>output</figcaption></figure>
</div>
</section><section id="bool_or-bool_and" class="level2"><h2 class="anchored" data-anchor-id="bool_or-bool_and">#1.5 <code>BOOL_OR()</code> &amp; <code>BOOL_AND()</code>
</h2>
<p><code>BOOL_OR()</code> &amp; <code>BOOL_AND()</code> allows you to check a logical statement along all rows of a columns, supported in PostgreSQL, Snowflake, DuckDB, BigQuery, Databricks:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb5-2">    o_custkey,</span>
<span id="cb5-3">    BOOL_OR(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cast</span>(o_shippriority <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">boolean</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> has_atleast_one_priority_order, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- check whether AT LEAST 1 order of that customer has Is Priority = True</span></span>
<span id="cb5-4">    BOOL_AND(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cast</span>(o_shippriority <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">boolean</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> has_all_priority_order <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- check whether ALL orders of that customer has Is Priority = True</span></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders</span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> o_custkey;</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/5_bool_or_and.png" class="img-fluid figure-img"></p>
<figcaption>output - first 10 rows</figcaption></figure>
</div>
</section><section id="exclude" class="level2"><h2 class="anchored" data-anchor-id="exclude">#1.6 <code>EXCLUDE()</code>
</h2>
<p>When you want to select all (<code>*</code>) columns excet few ones:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> EXCLUDE (o_orderdate, o_totalprice)</span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders;</span></code></pre></div>
</details>
</div>
</section><section id="group-by-all-saves-the-day" class="level2"><h2 class="anchored" data-anchor-id="group-by-all-saves-the-day">#1.7 <code>GROUP BY ALL</code> saves the day</h2>
<p>Repeating all the columns listed in the <code>SELECT</code> statement in <code>GROUP BY</code> is annoying, just use <code>ALL</code>:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb7-2">    o_orderkey,</span>
<span id="cb7-3">    o_custkey,</span>
<span id="cb7-4">    o_orderstatus,</span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(o_totalprice) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> total_price</span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders</span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span>;</span></code></pre></div>
</details>
</div>
</section><section id="count_if" class="level2"><h2 class="anchored" data-anchor-id="count_if">#1.8 <code>COUNT_IF()</code>
</h2>
<p>Filter over rows in specific column:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb8-2">    o_custkey,</span>
<span id="cb8-3">    COUNT_IF(o_totalprice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> high_value_orders,</span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- equivalent to SUM(CASE WHEN o_totalprice &gt; 100000 THEN 1 ELSE 0 </span><span class="re">END</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(o_totalprice) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">as</span> all_orders</span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders</span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> o_custkey;</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/8_count_if.png" class="img-fluid figure-img"></p>
<figcaption>output - first 10 rows</figcaption></figure>
</div>
</section><section id="string_agg" class="level2"><h2 class="anchored" data-anchor-id="string_agg">#1.9 <code>STRING_AGG()</code>
</h2>
<p>Concatenate rows of string in a <code>GROUP BY</code> statement:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> STRING_AGG(c_name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> customer_names</span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> customer;</span></code></pre></div>
</details>
</div>
</section><section id="null-handling-with-coalesce" class="level2"><h2 class="anchored" data-anchor-id="null-handling-with-coalesce">#1.10 Null handling with <code>COALESCE()</code>
</h2>
<p>Handling null value in a column with value from another column or default value:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WITH</span> fake_orders <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> (</span>
<span id="cb10-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> o_orderkey, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> o_totalprice, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NULL</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> discount</span>
<span id="cb10-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb10-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> o_orderkey, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> o_totalprice, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> discount</span>
<span id="cb10-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb10-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> o_orderkey, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> o_totalprice, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NULL</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> discount</span>
<span id="cb10-7">)</span>
<span id="cb10-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb10-9">    o_orderkey,</span>
<span id="cb10-10">    o_totalprice,</span>
<span id="cb10-11">    discount,</span>
<span id="cb10-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COALESCE</span>(discount, o_totalprice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> final_discount</span>
<span id="cb10-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> fake_orders;</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/10_coalesce.png" class="img-fluid figure-img"></p>
<figcaption>output</figcaption></figure>
</div>
</section><section id="generate_series" class="level2"><h2 class="anchored" data-anchor-id="generate_series">#1.11 <code>GENERATE_SERIES()</code>
</h2>
<p>This helps you generate a sequence/series of data over a range with an interval which facilitating data simulation or joining with other tables.</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> generate_series(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/11a_gen.png" class="img-fluid figure-img"></p>
<figcaption>output</figcaption></figure>
</div>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> generate_series(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-01'</span>:<span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:DATE</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-10'</span>:<span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:DATE</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">INTERVAL</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DAY</span>);</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/11b_gen.png" class="img-fluid figure-img"></p>
<figcaption>output</figcaption></figure>
</div>
</section><section id="unnest" class="level2"><h2 class="anchored" data-anchor-id="unnest">#1.12 <code>UNNEST()</code>
</h2>
<p>Unpacking data wrapped in JSON array or list <code>[...]</code> using <code>UNNEST()</code>:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WITH</span> nested_data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> (</span>
<span id="cb13-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">id</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">values</span></span>
<span id="cb13-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb13-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">id</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">values</span></span>
<span id="cb13-5">)</span>
<span id="cb13-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb13-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">id</span>,</span>
<span id="cb13-8">    UNNEST(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">values</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> flattened_value</span>
<span id="cb13-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> nested_data;</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/12_unnest.png" class="img-fluid figure-img"></p>
<figcaption>output</figcaption></figure>
</div>
</section></section><section id="set-operations" class="level1"><h1>#2 <code>SET</code> operations</h1>
<section id="exists" class="level2"><h2 class="anchored" data-anchor-id="exists">#2.1 <code>EXISTS</code>
</h2>
<p><code>EXISTS</code> is used to test for the existence of rows in a subquery, return TRUE if any row in the subquery returned. I think it’s often used for logic check to correlate queries.</p>
<p>It checks the existence like <code>INNER JOIN</code> but does not join full rows or select columns from the subquery.</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb14-2">    c_custkey,</span>
<span id="cb14-3">    c_name</span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> customer</span>
<span id="cb14-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">EXISTS</span> (</span>
<span id="cb14-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> o_orderkey</span>
<span id="cb14-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders</span>
<span id="cb14-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- AND o_totalprice &gt; 5000000 -- Return customer who has at least 1 order with total price &gt; 500k</span></span>
<span id="cb14-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> o_custkey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c_custkey  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Return customer who has at least 1 order</span></span>
<span id="cb14-11">);</span></code></pre></div>
</details>
</div>
</section><section id="intersect" class="level2"><h2 class="anchored" data-anchor-id="intersect">#2.2 <code>INTERSECT</code>
</h2>
<p>Below query return all <code>c_custkey</code> that appears in both <code>customer</code> and <code>orders</code> table.</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> c_custkey</span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> customer</span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">INTERSECT</span></span>
<span id="cb15-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> o_custkey</span>
<span id="cb15-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders;</span></code></pre></div>
</details>
</div>
</section><section id="except" class="level2"><h2 class="anchored" data-anchor-id="except">#2.3 <code>EXCEPT</code>
</h2>
<p>And the below query return all <code>c_custkey</code> that appears <code>customer</code> <strong>but not in</strong> <code>orders</code> table.</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> c_custkey</span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> customer</span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">EXCEPT</span></span>
<span id="cb16-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> o_custkey</span>
<span id="cb16-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders;</span></code></pre></div>
</details>
</div>
<p>Using this, we can perform delta/data diff checking!</p>
</section></section><section id="macros" class="level1"><h1>#3 macros</h1>
<p>We can create UDF (User Define Function) or Macros in SQL for abstracting complex logic and reusing it in different parts of the query, this improves both readability and maintainability. When executing, the macros are expanded inline, which avoids the overhead of function calls. Below is a simple function/macro:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CREATE</span> MACRO percentage(numerator, denominator) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> (</span>
<span id="cb17-2">    (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CAST</span>(numerator <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DOUBLE</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CAST</span>(denominator <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DOUBLE</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb17-3">);</span></code></pre></div>
</details>
</div>
</section><section id="jinja2" class="level1"><h1>#4 jinja2</h1>
<blockquote class="blockquote">
<p><a href="https://pypi.org/project/Jinja2/">Jinja</a> is a fast, expressive, extensible templating engine.</p>
</blockquote>
<p>In data engineering, Jinja2 is widely used in:</p>
<ul>
<li>
<p>DBT (Data Build Tool)</p>
<ul>
<li>Template SQL transformations</li>
<li>Parameterize database queries</li>
<li>Dynamic model generation</li>
</ul>
</li>
<li>
<p>Airflow</p>
<ul>
<li>Dynamic DAG (Directed Acyclic Graph) generation</li>
<li>Parameterize task configurations</li>
</ul>
</li>
<li>
<p>Great Expectations</p>
<ul>
<li>Configure data validation rules</li>
<li>Generate dynamic expectations</li>
</ul>
</li>
</ul>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jinja2 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Template</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a Jinja2 SQL template with a loop</span></span>
<span id="cb18-4">sql_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb18-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT o_orderkey, o_custkey, o_totalprice</span></span>
<span id="cb18-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM orders</span></span>
<span id="cb18-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE o_totalprice &gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> price_threshold </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span></span>
<span id="cb18-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% i</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">f customer_keys %}</span></span>
<span id="cb18-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  AND o_custkey IN (</span></span>
<span id="cb18-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    {</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">or custkey in customer_keys %}</span></span>
<span id="cb18-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> custkey </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% i</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">f not loop.last %}, {</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ndif %}</span></span>
<span id="cb18-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    {</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ndfor %}</span></span>
<span id="cb18-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  )</span></span>
<span id="cb18-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ndif %}</span></span>
<span id="cb18-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ORDER BY o_totalprice DESC;</span></span>
<span id="cb18-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb18-17"></span>
<span id="cb18-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Render the template with dynamic parameters</span></span>
<span id="cb18-19">template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Template(sql_template)</span>
<span id="cb18-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters to be passed to the template</span></span>
<span id="cb18-21">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb18-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price_threshold"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span>,</span>
<span id="cb18-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_keys"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1001</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1002</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1003</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A list of customer keys to filter on</span></span>
<span id="cb18-24">}</span>
<span id="cb18-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Render the SQL query (do not execute, just generate SQL)</span></span>
<span id="cb18-26">rendered_sql <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> template.render(params)</span>
<span id="cb18-27"></span>
<span id="cb18-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rendered_sql)</span></code></pre></div>
</details>
</div>
<p>And the query be generated:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> o_orderkey, o_custkey, o_totalprice</span>
<span id="cb19-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders</span>
<span id="cb19-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> o_totalprice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span></span>
<span id="cb19-4"></span>
<span id="cb19-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> o_custkey <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">IN</span> (</span>
<span id="cb19-6"></span>
<span id="cb19-7">      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1001</span>,</span>
<span id="cb19-8"></span>
<span id="cb19-9">      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1002</span>,</span>
<span id="cb19-10"></span>
<span id="cb19-11">      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1003</span></span>
<span id="cb19-12"></span>
<span id="cb19-13">  )</span>
<span id="cb19-14"></span>
<span id="cb19-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> o_totalprice <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DESC</span>;</span></code></pre></div>
</details>
</div>
</section><section id="metadata" class="level1"><h1>#5 metadata</h1>
<p>The database documentation is normally stored in the <code>information_schema</code>, the first schema that created in DB:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Information about our tables are stored here</span></span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> schema_name,</span>
<span id="cb20-3">    view_name</span>
<span id="cb20-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> duckdb_views();</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/information_schema.png" class="img-fluid figure-img"></p>
<figcaption>output - first 10 rows</figcaption></figure>
</div>
<p>Dive into the table <code>tables</code>:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb21-2">table_catalog, table_schema, table_name</span>
<span id="cb21-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">from</span> information_schema.<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">tables</span>;</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/information_schema_table.png" class="img-fluid figure-img"></p>
<figcaption>output - first 10 rows</figcaption></figure>
</div>
<p>Other useful query for DB admin in DuckDB:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- database level settings</span></span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> duckdb_settings();</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- list of all tables in our DuckDB</span></span>
<span id="cb22-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> schema_name,</span>
<span id="cb22-6">    table_name</span>
<span id="cb22-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> duckdb_tables();</span></code></pre></div>
</details>
</div>
</section><section id="de-duplicate" class="level1"><h1>#6 de-duplicate</h1>
<p>We can use UPSERT (or MERGE INTO) - INsert new data and UPdate existing data. The syntaxes vary among DBs:</p>
<ul>
<li>PostgreSQL: <code>INSERT ... ON CONFLICT</code>
</li>
<li>MySQL: <code>INSERT ... ON DUPLICATE KEY UPDATE</code>
</li>
<li>SQLite: <code>INSERT OR REPLACE</code>
</li>
<li>SQL Server: <code>MERGE</code> statement</li>
<li>Oracle: <code>MERGE</code> statement</li>
</ul>
<p>For eg., in DuckDB:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DROP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TABLE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">IF</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">EXISTS</span> dim_customer_scd2;</span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Create a Slowly Changing Dimension (SCD Type 2) table for customer</span></span>
<span id="cb23-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CREATE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TABLE</span> dim_customer_scd2 (</span>
<span id="cb23-4">    c_custkey <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">INTEGER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">PRIMARY</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">KEY</span>,</span>
<span id="cb23-5">    c_name <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VARCHAR</span>,</span>
<span id="cb23-6">    c_address <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VARCHAR</span>,</span>
<span id="cb23-7">    c_nationkey <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">INTEGER</span>,</span>
<span id="cb23-8">    c_phone <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VARCHAR</span>,</span>
<span id="cb23-9">    c_acctbal <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DOUBLE</span>,</span>
<span id="cb23-10">    c_mktsegment <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VARCHAR</span>,</span>
<span id="cb23-11">    c_comment <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VARCHAR</span>,</span>
<span id="cb23-12">    valid_from <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DATE</span>,</span>
<span id="cb23-13">    valid_to <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DATE</span>,</span>
<span id="cb23-14">    is_current <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">BOOLEAN</span></span>
<span id="cb23-15">);</span>
<span id="cb23-16"></span>
<span id="cb23-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Insert current data from the TPCH customer table into the SCD2 table</span></span>
<span id="cb23-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">INSERT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">INTO</span> dim_customer_scd2</span>
<span id="cb23-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb23-20">    c_custkey,</span>
<span id="cb23-21">    c_name,</span>
<span id="cb23-22">    c_address,</span>
<span id="cb23-23">    c_nationkey,</span>
<span id="cb23-24">    c_phone,</span>
<span id="cb23-25">    c_acctbal,</span>
<span id="cb23-26">    c_mktsegment,</span>
<span id="cb23-27">    c_comment,</span>
<span id="cb23-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-10-17'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> valid_from,</span>
<span id="cb23-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NULL</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> valid_to,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- NULL means it's the current active record</span></span>
<span id="cb23-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TRUE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> is_current</span>
<span id="cb23-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> customer;</span></code></pre></div>
</details>
</div>
<p>This query create a new SCD2 table and UPSERT data into it. When managing a table, we can handle (INSERT or UPDATE) like this:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">INSERT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">INTO</span> dim_customer_scd2 (</span>
<span id="cb24-2">    c_custkey,</span>
<span id="cb24-3">    c_name,</span>
<span id="cb24-4">    c_address,</span>
<span id="cb24-5">    c_nationkey,</span>
<span id="cb24-6">    c_phone,</span>
<span id="cb24-7">    c_acctbal,</span>
<span id="cb24-8">    c_mktsegment,</span>
<span id="cb24-9">    c_comment,</span>
<span id="cb24-10">    valid_from,</span>
<span id="cb24-11">    valid_to,</span>
<span id="cb24-12">    is_current</span>
<span id="cb24-13">)</span>
<span id="cb24-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">VALUES</span></span>
<span id="cb24-15">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Customer#000000001'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'New Address 1'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'25-989-741-2988'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">711.56</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BUILDING'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'comment1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-10-18'</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NULL</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TRUE</span>),</span>
<span id="cb24-16">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Customer#000000002'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'New Address 2'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'12-423-790-3665'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">879.49</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FURNITURE'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'comment2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-10-18'</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NULL</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TRUE</span>),</span>
<span id="cb24-17">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1501</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Customer#000001501'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'New Address 1501'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'11-345-678-9012'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">500.50</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MACHINERY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'comment1501'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-10-18'</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NULL</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TRUE</span>),</span>
<span id="cb24-18">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1502</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Customer#000001502'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'New Address 1502'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'22-456-789-0123'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">600.75</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AUTOMOBILE'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'comment1502'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-10-18'</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NULL</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TRUE</span>)</span>
<span id="cb24-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> CONFLICT (c_custkey) DO</span>
<span id="cb24-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Handle existing customers (Customer#000000001 and Customer#000000002) for SCD Type 2</span></span>
<span id="cb24-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UPDATE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SET</span> valid_to <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EXCLUDED.valid_from, is_current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FALSE</span></span>
<span id="cb24-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> dim_customer_scd2.c_custkey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EXCLUDED.c_custkey <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> dim_customer_scd2.is_current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TRUE</span>;</span></code></pre></div>
</details>
</div>
</section><section id="joins-that-youve-never-ever-seen-before" class="level1"><h1>#7 <code>JOIN</code>s that you’ve never ever seen before</h1>
<section id="asof-join" class="level2"><h2 class="anchored" data-anchor-id="asof-join">#7.1 <code>ASOF JOIN</code>
</h2>
<p>An ASOF JOIN (As-Of Join) is a time-series specific join operation that matches rows based on the closest timestamp, typically used in financial and time-series data analysis.</p>
<ul>
<li>
<p>Key characteristics:</p>
<ul>
<li>Matches each row from one table to the most recent row in another table by time</li>
<li>Useful for tracking historical state changes</li>
<li>Common in financial databases and time-series analysis</li>
</ul>
</li>
<li>
<p>Example use case:</p>
<ul>
<li>Joining stock prices with trading orders</li>
<li>Matching historical prices at the nearest timestamp</li>
<li>Tracking changes in reference data over time</li>
</ul>
</li>
</ul>
<p>For eg. “<strong>give me the value of the property as of this time</strong>”:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WITH</span> stock_prices <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> (</span>
<span id="cb25-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'APPL'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> ticker, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:00:00'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"when"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> price</span>
<span id="cb25-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'APPL'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:01:00'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb25-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'APPL'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:02:00'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb25-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MSFT'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:00:00'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb25-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MSFT'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:01:00'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb25-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MSFT'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:02:00'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb25-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GOOG'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:00:00'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb25-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GOOG'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:01:00'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb25-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GOOG'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:02:00'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb25-19">),</span>
<span id="cb25-20">portfolio_holdings <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> (</span>
<span id="cb25-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'APPL'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> ticker, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2000-12-31 23:59:30'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"when"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.16</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> shares</span>
<span id="cb25-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'APPL'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:00:30'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.94</span></span>
<span id="cb25-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'APPL'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:01:30'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.13</span></span>
<span id="cb25-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GOOG'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2000-12-31 23:59:30'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.33</span></span>
<span id="cb25-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GOOG'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:00:30'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">23.45</span></span>
<span id="cb25-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GOOG'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:01:30'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.58</span></span>
<span id="cb25-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DATA'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2000-12-31 23:59:30'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.65</span></span>
<span id="cb25-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DATA'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:00:30'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">17.95</span></span>
<span id="cb25-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALL</span></span>
<span id="cb25-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DATA'</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">TIMESTAMP</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2001-01-01 00:01:30'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.37</span></span>
<span id="cb25-38">)</span>
<span id="cb25-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> h.ticker,</span>
<span id="cb25-40">    h.<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span>,</span>
<span id="cb25-41">    p.<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">as</span> stock_price_ts,</span>
<span id="cb25-42">    price,</span>
<span id="cb25-43">    shares,</span>
<span id="cb25-44">    price <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> shares <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">value</span></span>
<span id="cb25-45"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> portfolio_holdings h</span>
<span id="cb25-46">ASOF <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> stock_prices p</span>
<span id="cb25-47">       <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> h.ticker <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.ticker</span>
<span id="cb25-48">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> h.<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> p.<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span></span>
<span id="cb25-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>;</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/asof_join.png" class="img-fluid figure-img"></p>
<figcaption>output</figcaption></figure>
</div>
<p>Without <code>ASOF JOIN</code>, we must use a WINDOW function to achieve this.</p>
</section><section id="anti-join" class="level2"><h2 class="anchored" data-anchor-id="anti-join">#7.2 <code>ANTI JOIN</code>
</h2>
<p>The pattern is to get rows in one table that are not in another table:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> c.c_custkey</span>
<span id="cb26-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> customer c</span>
<span id="cb26-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LEFT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> orders o</span>
<span id="cb26-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> c.c_custkey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> o.o_custkey</span>
<span id="cb26-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> o.o_custkey <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">IS</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NULL</span></span>
<span id="cb26-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> c.c_custkey</span>
<span id="cb26-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LIMIT</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>;</span></code></pre></div>
</details>
</div>
<p>Some DBs have native support for <code>ANTI JOIN</code>:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> c.c_custkey</span>
<span id="cb27-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> customer c</span>
<span id="cb27-3">ANTI <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> orders o</span>
<span id="cb27-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> c.c_custkey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> o.o_custkey</span>
<span id="cb27-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> c.c_custkey</span>
<span id="cb27-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LIMIT</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>;</span></code></pre></div>
</details>
</div>
</section><section id="lateral-join" class="level2"><h2 class="anchored" data-anchor-id="lateral-join">#7.3 <code>LATERAL JOIN</code>
</h2>
<p>LATERAL JOIN is a powerful SQL join type that allows a subquery in the FROM clause to reference columns from preceding tables in the same FROM clause.</p>
<ul>
<li>Enables per-row dynamic subqueries</li>
<li>Allows correlated subqueries in the FROM clause</li>
<li>Supported in PostgreSQL, BigQuery, some other modern databases</li>
</ul>
<p>For e.g, for each row in the orders table (<code>o</code>), the subquery in the LATERAL JOIN selects line items (<code>l</code>) that match certain conditions.</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb28-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb28-2">    o.o_orderkey,</span>
<span id="cb28-3">    o.o_totalprice,</span>
<span id="cb28-4">    l.l_linenumber,</span>
<span id="cb28-5">    l.l_extendedprice</span>
<span id="cb28-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders o,</span>
<span id="cb28-7">LATERAL (</span>
<span id="cb28-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> l.l_linenumber,</span>
<span id="cb28-9">    l_extendedprice</span>
<span id="cb28-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> lineitem l</span>
<span id="cb28-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> l.l_orderkey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> o.o_orderkey</span>
<span id="cb28-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> l.l_linenumber <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb28-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> l.l_extendedprice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> (o.o_totalprice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb28-14">) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> l</span>
<span id="cb28-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>;</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/lateral_join_1.png" class="img-fluid figure-img"></p>
<figcaption>output - first 10 rows</figcaption></figure>
</div>
<p>For each row in the orders table (<code>o</code>), the subquery in the LATERAL JOIN counts the number of line items (<code>lineitem_count</code>) related to that order.</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb29-2">    o.o_orderkey,</span>
<span id="cb29-3">    o.o_totalprice,</span>
<span id="cb29-4">    l.lineitem_count</span>
<span id="cb29-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders o,</span>
<span id="cb29-6">LATERAL (</span>
<span id="cb29-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> lineitem_count</span>
<span id="cb29-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> lineitem l</span>
<span id="cb29-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> l.l_orderkey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> o.o_orderkey</span>
<span id="cb29-10">) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> l;</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/lateral_join_2.png" class="img-fluid figure-img"></p>
<figcaption>output - first 10 rows</figcaption></figure>
</div>
</section></section><section id="use-cases" class="level1"><h1>#8 use cases</h1>
<p>Some real business use cases:</p>
<section id="pivot" class="level2"><h2 class="anchored" data-anchor-id="pivot">#8.1 <code>PIVOT</code>
</h2>
<p>We often want to change a value of a column into individual columns, we can use <code>CASE ... WHEN ...</code>:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb30-2">    o_custkey,</span>
<span id="cb30-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> o_orderstatus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> o_totalprice <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ELSE</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">END</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> fulfilled_total,</span>
<span id="cb30-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> o_orderstatus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> o_totalprice <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ELSE</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">END</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> open_total,</span>
<span id="cb30-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> o_orderstatus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> o_totalprice <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ELSE</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">END</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> pending_total</span>
<span id="cb30-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders</span>
<span id="cb30-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> o_custkey</span>
<span id="cb30-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> o_custkey;</span></code></pre></div>
</details>
</div>
<p>But also leverage <code>PIVOT</code>:</p>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders</span>
<span id="cb31-2">PIVOT (</span>
<span id="cb31-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(o_totalprice)</span>
<span id="cb31-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FOR</span></span>
<span id="cb31-5">        o_orderstatus <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">IN</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P'</span>)</span>
<span id="cb31-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> o_custkey</span>
<span id="cb31-7">)</span>
<span id="cb31-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> o_custkey;</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/pivot.png" class="img-fluid figure-img"></p>
<figcaption>output - first 10 rows</figcaption></figure>
</div>
</section><section id="cube" class="level2"><h2 class="anchored" data-anchor-id="cube">#8.1 <code>CUBE</code>
</h2>
<div class="cell">
<details open="" class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb32-2">    o_orderpriority,</span>
<span id="cb32-3">    o_orderstatus,</span>
<span id="cb32-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">EXTRACT</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">YEAR</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> o_orderdate) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> order_year,</span>
<span id="cb32-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(o_totalprice) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> total_sales</span>
<span id="cb32-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> orders</span>
<span id="cb32-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CUBE</span> (o_orderpriority, o_orderstatus, order_year)</span>
<span id="cb32-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>;</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://lktuan.github.io/blog/2024-12-06-adv_sql/cube.png" class="img-fluid figure-img"></p>
<figcaption>output - first 10 rows</figcaption></figure>
</div>
<ul>
<li>
<code>CUBE (o_custkey, o_orderstatus, order_year)</code>: This will group the data and calculate subtotals and grand totals for all possible combinations of <code>o_custkey</code>, <code>o_orderstatus</code>, and <code>order_year</code>.</li>
<li>It will generate all combinations of the grouping columns, including:
<ul>
<li>Grouping by just o_custkey</li>
<li>Grouping by just o_orderstatus</li>
<li>Grouping by just order_year</li>
<li>Grouping by all three together</li>
<li>Grouping by pairs of columns</li>
<li>A grand total (no grouping by any column)</li>
<li>
<code>SUM(o_totalprice)</code>: For each combination of groupings, it sums the total order price.</li>
</ul>
</li>
</ul>
<p>Use cases:</p>
<blockquote class="blockquote">
<ol type="1">
<li>OLAP Reporting: CUBE is commonly used in OLAP scenarios where you need to analyze data from multiple perspectives. For instance, you may want to generate reports that show total sales by customer, by order status, by year, and all possible combinations of these dimensions.</li>
<li>Sales Analysis: In sales analysis, CUBE can help create pivot-like summaries that show how different attributes (e.g., region, product, time period) contribute to the overall sales.</li>
<li>Financial Reports: Financial departments often use CUBE to calculate totals and subtotals across dimensions like departments, time periods, and account categories, making it easier to prepare comprehensive financial reports.</li>
</ol>
</blockquote>
<p>Happy learning!</p>
</section></section><section id="resource" class="level1"><h1>resource</h1>
<ol type="1">
<li>Article by Start Data Engineering: <a href="https://www.startdataengineering.com/post/n-sql-tips-de/" class="uri">https://www.startdataengineering.com/post/n-sql-tips-de/</a>;</li>
<li>Repo and workbook: <a href="https://github.com/josephmachado/adv_data_transformation_in_sql/blob/main/concepts/sql_tips/sql_tips.ipynb">…concepts/sql_tips/sql_tips.ipynb</a>
</li>
</ol>
<div class="cell">
<details class="code-fold"><summary>Show the code</summary><div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I added this R code chunk and somehow knitr engine successfully rendered SQL formatting block code.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Workaround: https://github.com/quarto-dev/quarto-cli/issues/2137"</span>)</span></code></pre></div>
</details><div class="cell-output cell-output-stdout">
<pre><code>I added this R code chunk and somehow knitr engine successfully rendered SQL formatting block code.
Workaround: https://github.com/quarto-dev/quarto-cli/issues/2137</code></pre>
</div>
</div>


<!-- -->

</section> ]]></description>
  <category>til</category>
  <category>sql</category>
  <guid>https://lktuan.github.io/blog/2024-12-06-adv_sql/</guid>
  <pubDate>Thu, 05 Dec 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-12-06-adv_sql/duckdb.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>NN-Z2H Lesson 5: Building makemore part 4 - Becoming a Backprop Ninja</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important callout-titled" title="This is not orginal content!">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This is not orginal content!
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is my study notes / codes along with Andrej Karpathy’s “<a href="https://www.youtube.com/watch?v=VMj-3S1tku0&amp;list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ">Neural Networks: Zero to Hero</a>” series.</p>
<p><em>Edit 1st June, 25</em>: I changed the loop to 5k only, for the shake of time saving when re-rendering this post!</p>
</div>
</div>
<section id="intro-why-you-should-care" class="level1">
<h1>intro: why you should care</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/swole_doggo.jpg" class="img-fluid figure-img"></p>
<figcaption>swole doge style backpropagation, image credit to <a href="https://www.youtube.com/watch?v=LzxnmqnctmA">this video</a></figcaption>
</figure>
</div>
<p>In the previous lecture, we’re introduced to some common issues with our “shallow” (and of course for deep as well) neural network and how to fix with the initialization setting and Batch Normalization. We’re also learned some diagnostic tools to observe <em>forward pass activations</em>, <em>backward pass gradients</em>, and <em>weights update</em>, to calibrate the training loop. In this lecture, we aim to replace this line of code:</p>
<div id="384023bc" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">... loss.backward() ...</span></code></pre></div>
</details>
</div>
<p>with from-scratch-code. It’s basically identical to <code>MicroGrad</code>, but on <em>Tensor</em> rather than <em>Scalar</em>. But why we should care?</p>
<blockquote class="blockquote">
<p>The problem with Backpropagation is that it is a <a href="https://en.wikipedia.org/wiki/Leaky_abstraction">leaky abstraction</a>. – Andrej Karpathy</p>
</blockquote>
<p>readmore: - <a href="https://karpathy.medium.com/yes-you-should-understand-backprop-e2f06eab496b" class="uri">https://karpathy.medium.com/yes-you-should-understand-backprop-e2f06eab496b</a>, - and <a href="https://kratzert.github.io/2016/02/12/understanding-the-gradient-flow-through-the-batch-normalization-layer.html" class="uri">https://kratzert.github.io/2016/02/12/understanding-the-gradient-flow-through-the-batch-normalization-layer.html</a>.</p>
<p>inshort, to effectively debug neural network, we should be deeply understanding how back propagation work under the hood. Let’s do it!</p>
</section>
<section id="starter-code" class="level1">
<h1>starter code</h1>
<section id="import-libraries" class="level3">
<h3 class="anchored" data-anchor-id="import-libraries">import libraries:</h3>
<div id="6b6f4fd2" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</details>
</div>
</section>
<section id="read-data" class="level3">
<h3 class="anchored" data-anchor-id="read-data">read data:</h3>
<div id="bbaf3172" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-2"></span>
<span id="cb3-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/karpathy/makemore/refs/heads/master/names.txt"</span></span>
<span id="cb3-4">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>).iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tolist()</span>
<span id="cb3-5">words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>['emma', 'olivia', 'ava', 'isabella', 'sophia', 'charlotte', 'mia', 'amelia']</code></pre>
</div>
</div>
</section>
<section id="build-vocab" class="level3">
<h3 class="anchored" data-anchor-id="build-vocab">build vocab:</h3>
<div id="b6a201d3" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the vocabulary of characters and mapping to/from integer</span></span>
<span id="cb5-2">chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(words))))</span>
<span id="cb5-3">stoi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {s:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chars)}</span>
<span id="cb5-4">stoi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-5">itos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i: s <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s, i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> stoi.items()}</span>
<span id="cb5-6">vocab_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(itos)</span>
<span id="cb5-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(itos)</span>
<span id="cb5-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(vocab_size)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 0: '.'}
27</code></pre>
</div>
</div>
</section>
<section id="build-dataset-splits-identical-to-previous-so-i-folded-it" class="level3">
<h3 class="anchored" data-anchor-id="build-dataset-splits-identical-to-previous-so-i-folded-it">build dataset splits (identical to previous so I folded it):</h3>
<div id="d70e1df6" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># context length: how many characters do we take to predict the next one.</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the dataset</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> buid_dataset(words):</span>
<span id="cb7-4">    X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb7-5"></span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words:</span>
<span id="cb7-7">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size</span>
<span id="cb7-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb7-9">            ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb7-10">            X.append(context)</span>
<span id="cb7-11">            Y.append(ix)</span>
<span id="cb7-12">            context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb7-13"></span>
<span id="cb7-14">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb7-15">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span>
<span id="cb7-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.shape, Y.shape)</span>
<span id="cb7-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> X, Y</span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb7-20">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb7-21">random.shuffle(words)</span>
<span id="cb7-22">n1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb7-23">n2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb7-24"></span>
<span id="cb7-25">Xtr, Ytr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[:n1])        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 80#</span></span>
<span id="cb7-26">Xdev, Ydev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n1:n2])    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 10%</span></span>
<span id="cb7-27">Xte, Yte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n2:])        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 10%</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([182625, 3]) torch.Size([182625])
torch.Size([22655, 3]) torch.Size([22655])
torch.Size([22866, 3]) torch.Size([22866])</code></pre>
</div>
</div>
</section>
<section id="utility-function-we-will-use-later-when-comparing-manual-gradients-to-pytorch-gradients." class="level3">
<h3 class="anchored" data-anchor-id="utility-function-we-will-use-later-when-comparing-manual-gradients-to-pytorch-gradients.">utility function we will use later when comparing manual gradients to PyTorch gradients.</h3>
<div id="e0817df0" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(s, dt, t):</span>
<span id="cb9-2">  ex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> t.grad).item()</span>
<span id="cb9-3">  app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.allclose(dt, t.grad)</span>
<span id="cb9-4">  maxdiff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t.grad).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>().item()</span>
<span id="cb9-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:15s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | exact: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(ex)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:5s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | approximate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(app)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:5s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | maxdiff: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>maxdiff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="network-construction" class="level3">
<h3 class="anchored" data-anchor-id="network-construction">network construction:</h3>
<div id="704daae1" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the dimensionality of the character embedding vectors</span></span>
<span id="cb10-2">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of neurons in the hidden layer of the MLP</span></span>
<span id="cb10-3"></span>
<span id="cb10-4">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproducibility</span></span>
<span id="cb10-5">C  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_embd),            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1</span></span>
<span id="cb10-7">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>((n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb10-8">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_hidden,                        generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># using b1 just for fun, it's useless because of BN</span></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2</span></span>
<span id="cb10-10">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_hidden, vocab_size),          generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb10-11">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(vocab_size,                      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BatchNorm parameters</span></span>
<span id="cb10-13">bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb10-14">bnbias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb10-15"></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note: I am initializating many of these parameters in non-standard ways</span></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># because sometimes initializating with e.g. all zeros could mask an incorrect</span></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># implementation of the backward pass.</span></span>
<span id="cb10-19"></span>
<span id="cb10-20">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2, bngain, bnbias]</span>
<span id="cb10-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of parameters in total</span></span>
<span id="cb10-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb10-23">  p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>4137</code></pre>
</div>
</div>
</section>
<section id="mini-batch-construction" class="level3">
<h3 class="anchored" data-anchor-id="mini-batch-construction">mini-batch construction:</h3>
<div id="5a12fa6d" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb12-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a shorter variable also, for convenience</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># construct a minibatch</span></span>
<span id="cb12-4">ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb12-5">Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X,Y</span></span></code></pre></div>
</details>
</div>
</section>
<section id="forward-pass-chunkated-into-smaller-steps-that-are-possible-to-backward-one-at-a-time." class="level3">
<h3 class="anchored" data-anchor-id="forward-pass-chunkated-into-smaller-steps-that-are-possible-to-backward-one-at-a-time.">forward pass, “chunkated” into smaller steps that are possible to backward one at a time.</h3>
<div id="91baf44e" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors</span></span>
<span id="cb13-2">embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linear layer 1</span></span>
<span id="cb13-5">hprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer pre-activation</span></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BatchNorm layer</span></span>
<span id="cb13-8">bnmeani <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hprebn.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-9">bndiff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bnmeani</span>
<span id="cb13-10">bndiff2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bndiff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb13-11">bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(bndiff2).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note: Bessel's correction (dividing by n-1, not n)</span></span>
<span id="cb13-12">bnvar_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb13-13">bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bndiff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnvar_inv</span>
<span id="cb13-14">hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias</span>
<span id="cb13-15"></span>
<span id="cb13-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non-linearity</span></span>
<span id="cb13-17">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(hpreact) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer</span></span>
<span id="cb13-18"></span>
<span id="cb13-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linear layer 2</span></span>
<span id="cb13-20">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output layer</span></span>
<span id="cb13-21"></span>
<span id="cb13-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cross entropy loss (same as F.cross_entropy(logits, Yb)), Kullback–Leibler divergence</span></span>
<span id="cb13-23">logit_maxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).values</span>
<span id="cb13-24">norm_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> logit_maxes <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subtract max for numerical stability</span></span>
<span id="cb13-25">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm_logits.exp()</span>
<span id="cb13-26">counts_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-27">counts_sum_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts_sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if I use (1.0 / counts_sum) instead then I can't get backprop to be bit exact...</span></span>
<span id="cb13-28">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> counts_sum_inv</span>
<span id="cb13-29">logprobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probs.log()</span>
<span id="cb13-30">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>logprobs[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n), Yb].mean()</span>
<span id="cb13-31"></span>
<span id="cb13-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PyTorch backward pass</span></span>
<span id="cb13-33"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb13-34">  p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb13-35"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [logprobs, probs, counts, counts_sum, counts_sum_inv, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># afaik there is no cleaner way</span></span>
<span id="cb13-36">          norm_logits, logit_maxes, logits, h, hpreact, bnraw,</span>
<span id="cb13-37">         bnvar_inv, bnvar, bndiff2, bndiff, hprebn, bnmeani,</span>
<span id="cb13-38">         embcat, emb]:</span>
<span id="cb13-39">  t.retain_grad()</span>
<span id="cb13-40"></span>
<span id="cb13-41">hprebn.retain_grad() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tuan added this line since code above does not ensure hprebn's grad to be retained.</span></span>
<span id="cb13-42"></span>
<span id="cb13-43">loss.backward()</span>
<span id="cb13-44">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>tensor(3.3424, grad_fn=&lt;NegBackward0&gt;)</code></pre>
</div>
</div>
</section>
</section>
<section id="exercise-1-backproping-the-atomic-compute-graph" class="level1">
<h1>exercise 1: backproping the atomic compute graph</h1>
<p>I can do 60, 70% of this myself ~ for popular mathematics operations. What I need to remember after these excercises are backwards of:</p>
<ul>
<li>elements in matrix mult;</li>
<li>max operator;</li>
<li>indexing operator; and</li>
<li>broadcasting behavior.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/explain_matrix_mult_grad.png" class="img-fluid figure-img"></p>
<figcaption>Andrej inductive reasoning, explains how to get a derivative from matrix multiplication.</figcaption>
</figure>
</div>
<p>Given the matrix mult expression <img src="https://latex.codecogs.com/png.latex?d%20=%20a%20@%20b%20+%20c">, we have:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Cmathbf%7Ba%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Cmathbf%7Bd%7D%7D%20@%20%5Cmathbf%7Bb%7D%5ET"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Cmathbf%7Bb%7D%7D%20=%20%5Cmathbf%7Ba%7D%5ET%20@%20%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Cmathbf%7Bd%7D%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Cmathbf%7Bc%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Cmathbf%7Bd%7D%7D.sum(0)"></li>
</ul>
<div id="aeaca19b" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exercise 1: backprop through the whole thing manually,</span></span>
<span id="annotated-cell-10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backpropagating through exactly all of the variables</span></span>
<span id="annotated-cell-10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as they are defined in the forward pass above, one by one</span></span>
<span id="annotated-cell-10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cross entropy loss"</span>.upper())</span>
<span id="annotated-cell-10-5">dlogprobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(logprobs) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create zeros tensor with same size</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="1">1</button><span id="annotated-cell-10-6" class="code-annotation-target">dlogprobs[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n), Yb] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n</span>
<span id="annotated-cell-10-7">dprobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(probs)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="2">2</button><span id="annotated-cell-10-8" class="code-annotation-target">dprobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> probs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dlogprobs</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="3">3</button><span id="annotated-cell-10-9" class="code-annotation-target">dcounts_sum_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dprobs).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-10-10">dcounts_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> counts_sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dcounts_sum_inv</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="4">4</button><span id="annotated-cell-10-11" class="code-annotation-target">dcounts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones_like(counts) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dcounts_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counts_sum_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dprobs</span>
<span id="annotated-cell-10-12">dnorm_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (norm_logits.exp()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dcounts <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># = counts * dcounts</span></span>
<span id="annotated-cell-10-13">dlogit_maxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dnorm_logits).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># broadcasting, again</span></span>
<span id="annotated-cell-10-14"></span>
<span id="annotated-cell-10-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logprobs'</span>, dlogprobs, logprobs)</span>
<span id="annotated-cell-10-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'probs'</span>, dprobs, probs)</span>
<span id="annotated-cell-10-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts_sum_inv'</span>, dcounts_sum_inv, counts_sum_inv)</span>
<span id="annotated-cell-10-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts_sum'</span>, dcounts_sum, counts_sum)</span>
<span id="annotated-cell-10-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>, dcounts, counts)</span>
<span id="annotated-cell-10-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'norm_logits'</span>, dnorm_logits, norm_logits)</span>
<span id="annotated-cell-10-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logit_maxes'</span>, dlogit_maxes, logit_maxes)</span>
<span id="annotated-cell-10-22"></span>
<span id="annotated-cell-10-23"></span>
<span id="annotated-cell-10-24">dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (dnorm_logits.clone()</span>
<span id="annotated-cell-10-25">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> F.one_hot( logits.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).indices, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># broadcasting, again</span></span>
<span id="annotated-cell-10-26">                        num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>logits.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="5">5</button><span id="annotated-cell-10-27" class="code-annotation-target">                        ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dlogit_maxes)</span>
<span id="annotated-cell-10-28"></span>
<span id="annotated-cell-10-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Layer 2 with Linear and Non-linearity tanh"</span>.upper())</span>
<span id="annotated-cell-10-30">dh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2.T</span>
<span id="annotated-cell-10-31">dW2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dlogits</span>
<span id="annotated-cell-10-32">db2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dlogits.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sum by column, vertical, to eliminate the 0-index dim</span></span>
<span id="annotated-cell-10-33"></span>
<span id="annotated-cell-10-34"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logits'</span>, dlogits, logits)</span>
<span id="annotated-cell-10-35"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>, dh, h)</span>
<span id="annotated-cell-10-36"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'W2'</span>, dW2, W2)</span>
<span id="annotated-cell-10-37"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b2'</span>, db2, b2)</span>
<span id="annotated-cell-10-38"></span>
<span id="annotated-cell-10-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Batch Norm layer"</span>.upper())</span>
<span id="annotated-cell-10-40">dhpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dh <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output of the tanh, square</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="6">6</button><span id="annotated-cell-10-41" class="code-annotation-target">dbngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dhpreact).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-10-42">dbnbias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dhpreact.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-10-43">dbnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dhpreact</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="7">7</button><span id="annotated-cell-10-44" class="code-annotation-target">dbnvar_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (bndiff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbnraw).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-10-45">dbnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbnvar_inv</span>
<span id="annotated-cell-10-46">dbndiff2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.ones_like(bndiff2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbnvar</span>
<span id="annotated-cell-10-47">dbndiff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bnvar_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bndiff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbndiff2</span>
<span id="annotated-cell-10-48">dbnmeani <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> torch.ones_like(dbndiff) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbndiff).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="annotated-cell-10-49"></span>
<span id="annotated-cell-10-50"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hpreact'</span>, dhpreact, hpreact)</span>
<span id="annotated-cell-10-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bngain'</span>, dbngain, bngain)</span>
<span id="annotated-cell-10-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bnbias'</span>, dbnbias, bnbias)</span>
<span id="annotated-cell-10-53"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bnraw'</span>, dbnraw, bnraw)</span>
<span id="annotated-cell-10-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bnvar_inv'</span>, dbnvar_inv, bnvar_inv)</span>
<span id="annotated-cell-10-55"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bnvar'</span>, dbnvar, bnvar)</span>
<span id="annotated-cell-10-56"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bndiff2'</span>, dbndiff2, bndiff2)</span>
<span id="annotated-cell-10-57"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bndiff'</span>, dbndiff, bndiff)</span>
<span id="annotated-cell-10-58"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bnmeani'</span>, dbnmeani, bnmeani)</span>
<span id="annotated-cell-10-59"></span>
<span id="annotated-cell-10-60"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linear layer 1"</span>.upper())</span>
<span id="annotated-cell-10-61">dhprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dbndiff.clone() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (torch.ones_like(hprebn) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbnmeani))</span>
<span id="annotated-cell-10-62">dembcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dhprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1.T</span>
<span id="annotated-cell-10-63">dW1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dhprebn</span>
<span id="annotated-cell-10-64">db1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dhprebn.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="8">8</button><span id="annotated-cell-10-65" class="code-annotation-target">demb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dembcat.view(emb.shape)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="9">9</button><span id="annotated-cell-10-66" class="code-annotation-target">dC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(C)</span>
<span id="annotated-cell-10-67"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(Xb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate all elements of the Xb</span></span>
<span id="annotated-cell-10-68">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(Xb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="annotated-cell-10-69">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xb[k,j]</span>
<span id="annotated-cell-10-70">    dC[ix] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> demb[k,j]</span>
<span id="annotated-cell-10-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 2</span></span>
<span id="annotated-cell-10-72">dC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(C)</span>
<span id="annotated-cell-10-73">dC.index_add_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), demb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="annotated-cell-10-74"></span>
<span id="annotated-cell-10-75"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hprebn'</span>, dhprebn, hprebn)</span>
<span id="annotated-cell-10-76"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'embcat'</span>, dembcat, embcat)</span>
<span id="annotated-cell-10-77"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'W1'</span>, dW1, W1)</span>
<span id="annotated-cell-10-78"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b1'</span>, db1, b1)</span>
<span id="annotated-cell-10-79"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'emb'</span>, demb, emb)</span>
<span id="annotated-cell-10-80"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>, dC, C)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-10" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="6" data-code-annotation="1"><code>dlogprobs</code>: <code>logprobs</code> is an (32, 27) array - contains log probabilities of every character in 27 vocab for 32 output. <code>loss</code> just indexes (<code>(range(n), Yb)</code>) to pick out the corresponding numbers of the ground trues, then do mean (<code>1 / n</code>) and get negative (<code>-</code>). So the grad for each element that had been picked out is <code>-1/n</code>, while for others is <code>0</code>;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="8" data-code-annotation="2"><code>dprobs</code>: d/dx log(x) is just <code>1/x</code> - local derivative, then multiply by next leaf grad <code>dlogprobs</code>, element wise;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="9" data-code-annotation="3"><code>dcounts_sum_inv</code>: should be <code>counts * dprobs</code> according to chainrule. But remember <code>counts.shape</code> is (32, 27), and <code>counts_sum_inv.shape</code> is (32, 1), then there is <strong>broadcasting</strong> to 27 columns. <code>counts_sum_inv</code> is being used multiple times in the topo/diagram -&gt; we need to sum them (grad) up. We do it by columns so <code>Keepdim=True</code>;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="11" data-code-annotation="4"><code>dcount</code>: was used in 2 expression, so it would be the sum of (1) <code>counts_sum_inv * dprobs</code> - same with <code>dcounts_sum_inv</code> by symmetry, and (2) <code>torch.ones_like(counts) * dcounts_sum</code> - the gradient flow from <code>dcounts_sum</code> equally, and equal to <code>1</code>;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="27" data-code-annotation="5"><code>dlogits</code>: sum of 2 flows, the 2nd one for <code>max()</code> operations -&gt; gradient should be the <code>1</code> for those max elements, the remain would be <code>0</code>;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="41" data-code-annotation="6">Notice the <strong>vertical broadcasting</strong> of <code>bngain</code> and <code>bnbias</code>;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="44" data-code-annotation="7">Need to sum up vertically because <code>bnvar_inv</code> is (1, 64) while 2 multipliers are (32, 64);</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="65" data-code-annotation="8">Undo the concatenation;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="66" data-code-annotation="9">Undo the indexing: <code>emb.shape = (32, 3, 10)</code>, <code>C.shape = (27, 10)</code>, <code>Xb.shape = (32, 3)</code>.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>CROSS ENTROPY LOSS
logprobs        | exact: True  | approximate: True  | maxdiff: 0.0
probs           | exact: True  | approximate: True  | maxdiff: 0.0
counts_sum_inv  | exact: True  | approximate: True  | maxdiff: 0.0
counts_sum      | exact: True  | approximate: True  | maxdiff: 0.0
counts          | exact: True  | approximate: True  | maxdiff: 0.0
norm_logits     | exact: True  | approximate: True  | maxdiff: 0.0
logit_maxes     | exact: True  | approximate: True  | maxdiff: 0.0
LAYER 2 WITH LINEAR AND NON-LINEARITY TANH
logits          | exact: True  | approximate: True  | maxdiff: 0.0
h               | exact: True  | approximate: True  | maxdiff: 0.0
W2              | exact: True  | approximate: True  | maxdiff: 0.0
b2              | exact: True  | approximate: True  | maxdiff: 0.0
BATCH NORM LAYER
hpreact         | exact: True  | approximate: True  | maxdiff: 0.0
bngain          | exact: True  | approximate: True  | maxdiff: 0.0
bnbias          | exact: True  | approximate: True  | maxdiff: 0.0
bnraw           | exact: True  | approximate: True  | maxdiff: 0.0
bnvar_inv       | exact: True  | approximate: True  | maxdiff: 0.0
bnvar           | exact: True  | approximate: True  | maxdiff: 0.0
bndiff2         | exact: True  | approximate: True  | maxdiff: 0.0
bndiff          | exact: True  | approximate: True  | maxdiff: 0.0
bnmeani         | exact: True  | approximate: True  | maxdiff: 0.0
LINEAR LAYER 1
hprebn          | exact: True  | approximate: True  | maxdiff: 0.0
embcat          | exact: True  | approximate: True  | maxdiff: 0.0
W1              | exact: True  | approximate: True  | maxdiff: 0.0
b1              | exact: True  | approximate: True  | maxdiff: 0.0
emb             | exact: True  | approximate: True  | maxdiff: 0.0
C               | exact: True  | approximate: True  | maxdiff: 0.0</code></pre>
</div>
</div>
</section>
<section id="brief-digression-bessels-correction-in-batchnorm" class="level1">
<h1>brief digression: bessel’s correction in batchnorm</h1>
<p>The paper of Batch Norm inconsistantly mentioned that:</p>
<ul>
<li>they used biased variance for training;</li>
<li>and used un-biased variance for inference.</li>
</ul>
<p>We train on small mini-batch, so should be using un-biased variance. PyTorch, since implemented what exactly paper wrote, has this discrepancy.</p>
</section>
<section id="exercise-2-cross-entropy-loss-backward-pass" class="level1">
<h1>exercise 2: cross entropy loss backward pass</h1>
<p>We are realizing that we doing too much work since we need to break the <code>loss</code> calculation from <code>logits</code> into too many steps that (1) they are easy enough for us to do backpropagation, but (2) most of them can cancel each other out. So in exercise two, we need to convert those bunch of atomic pieces of calculation to a shorter formula of cross entropy that can facilitate the backpropating.</p>
<div id="70359676" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exercise 2: backprop through cross_entropy but all in one go</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to complete this challenge look at the mathematical expression of the loss,</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take the derivative, simplify the expression, and just write it out</span></span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># before:</span></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># logit_maxes = logits.max(1, keepdim=True).values</span></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># norm_logits = logits - logit_maxes # subtract max for numerical stability</span></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts = norm_logits.exp()</span></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts_sum = counts.sum(1, keepdims=True)</span></span>
<span id="cb16-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts_sum_inv = counts_sum**-1 # if I use (1.0 / counts_sum) instead then I can't get backprop to be bit exact...</span></span>
<span id="cb16-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probs = counts * counts_sum_inv</span></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># logprobs = probs.log()</span></span>
<span id="cb16-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss = -logprobs[range(n), Yb].mean()</span></span>
<span id="cb16-16"></span>
<span id="cb16-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now:</span></span>
<span id="cb16-18">loss_fast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Yb)</span>
<span id="cb16-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss_fast.item(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'diff:'</span>, (loss_fast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> loss).item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>3.3424184322357178 diff: 0.0</code></pre>
</div>
</div>
<p>Mathematically given the Cross-Entropy loss formula:</p>
<p><img src="https://latex.codecogs.com/png.latex?L%20=%20-%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Csum_%7Bj=1%7D%5E%7Bk%7D%20Y_%7Bij%7D%20%5Clog(%5Chat%7BY%7D_%7Bij%7D)"></p>
<p>with <img src="https://latex.codecogs.com/png.latex?%5Chat%7BY%7D%7Bij%7D"> is calculated by the softmax transformation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Chat%7BY%7D%7Bij%7D%20=%20%5Cfrac%7B%5Cexp(%5Ctext%7Blogits%7D%7Bij%7D)%7D%7B%5Csum_%7Bc=1%7D%5E%7Bk%7D%20%5Cexp(%5Ctext%7Blogits%7D_%7Bic%7D)%7D"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?n">: batch size, in this case is 32 - <code>n</code>;</li>
<li><img src="https://latex.codecogs.com/png.latex?k">: vocab size or number of classes, in this case is 27 - <code>vocab_size</code>;</li>
<li><img src="https://latex.codecogs.com/png.latex?Y%20%5Cin%20%7B0,1%7D%5E%7Bn%20%5Ctimes%20k%7D">: one-hot encoding maxtrix (ground truth) - <code>Y</code>;</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctext%7Blogits%7D%20%5Cin%20%5Cmathbb%7BR%7D%5E%7Bn%20%5Ctimes%20k%7D">: raw logits, input of softmax layer - <code>logits</code>;</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Chat%7BY%7D%20%5Cin%20%5B0,1%5D%5E%7Bn%20%5Ctimes%20k%7D">: probabilities after softmax layer - <code>probs</code>.</li>
</ul>
<p>I actually can not do this exercise so AK’s solution here:</p>
<div id="86e297c3" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb18-2"></span>
<span id="cb18-3">dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-4">dlogits[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n), Yb] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb18-5">dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logits'</span>, dlogits, logits) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I can only get approximate to be true, my maxdiff is 6e-9</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>logits          | exact: False | approximate: True  | maxdiff: 5.122274160385132e-09</code></pre>
</div>
</div>
<p>I will comeback with another post on thisss: the backward for cross entropy loss.</p>
<section id="what-is-dlogits-intuitively" class="level3">
<h3 class="anchored" data-anchor-id="what-is-dlogits-intuitively">what is <code>dlogits</code> intuitively?</h3>
<p>Now let’s look how <code>dlogits</code> look like.</p>
<p>This is the first row of <code>logits</code> through softmax layer, it’s probabilities of every possible character in vocab size 27, they are all small and sum of them is 1.</p>
<div id="aea29ff1" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">F.softmax(logits, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>tensor([0.0697, 0.0906, 0.0174, 0.0502, 0.0191, 0.0870, 0.0249, 0.0353, 0.0180,
        0.0324, 0.0344, 0.0388, 0.0368, 0.0274, 0.0311, 0.0135, 0.0091, 0.0183,
        0.0166, 0.0539, 0.0503, 0.0199, 0.0247, 0.0729, 0.0634, 0.0246, 0.0198],
       grad_fn=&lt;SelectBackward0&gt;)</code></pre>
</div>
</div>
<p>And this is the first row of <code>dlogits</code> multiplied by <code>n</code> for comparision, it’s all identical excep the 8th probability (<code>Xb[0] = 8</code>). <strong>And sum of them is 0!</strong></p>
<div id="5ca8f725" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1">dlogits[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>tensor([ 0.0697,  0.0906,  0.0174,  0.0502,  0.0191,  0.0870,  0.0249,  0.0353,
        -0.9820,  0.0324,  0.0344,  0.0388,  0.0368,  0.0274,  0.0311,  0.0135,
         0.0091,  0.0183,  0.0166,  0.0539,  0.0503,  0.0199,  0.0247,  0.0729,
         0.0634,  0.0246,  0.0198], grad_fn=&lt;MulBackward0&gt;)</code></pre>
</div>
</div>
<p>So for each data point in the batch of 32, we pushnish super hard the correct character, making the magnitude of it’s grad is so high (negative number), then the prob of that predict-character can change toward to correct one. This push and pull is somehow the way that network learn.</p>
<div id="8c0597db" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb24-2">plt.imshow(dlogits.detach(), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>When the network perfectly predict, softmax will have a full row vector except the 8th prob, which is 1. Then the <code>dlogits</code> will be full of 0, the network stop learning.</p>
</section>
</section>
<section id="exercise-3-batch-norm-layer-backward-pass" class="level1">
<h1>exercise 3: batch norm layer backward pass</h1>
<div id="8f6be113" class="cell" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exercise 3: backprop through batchnorm but all in one go</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to complete this challenge look at the mathematical expression of the output of batchnorm,</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take the derivative w.r.t. its input, simplify the expression, and just write it out</span></span>
<span id="cb25-4"></span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb25-6"></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># before:</span></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bnmeani = 1/n*hprebn.sum(0, keepdim=True)</span></span>
<span id="cb25-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bndiff = hprebn - bnmeani</span></span>
<span id="cb25-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bndiff2 = bndiff**2</span></span>
<span id="cb25-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bnvar = 1/(n-1)*(bndiff2).sum(0, keepdim=True) # note: Bessel's correction (dividing by n-1, not n)</span></span>
<span id="cb25-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bnvar_inv = (bnvar + 1e-5)**-0.5</span></span>
<span id="cb25-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bnraw = bndiff * bnvar_inv</span></span>
<span id="cb25-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hpreact = bngain * bnraw + bnbias</span></span>
<span id="cb25-15"></span>
<span id="cb25-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now:</span></span>
<span id="cb25-17">hpreact_fast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (hprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> hprebn.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.sqrt(hprebn.var(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, unbiased<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias</span>
<span id="cb25-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max diff:'</span>, (hpreact_fast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> hpreact).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>max diff: tensor(4.7684e-07, grad_fn=&lt;MaxBackward1&gt;)</code></pre>
</div>
</div>
<p>Below is the image of Batch Norm algorithm:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/bn_algo.png" class="img-fluid figure-img"></p>
<figcaption>Batch Normalization algo, <a href="https://arxiv.org/abs/1502.03167">source</a></figcaption>
</figure>
</div>
<p>And this is flowchart</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR

Input(...) --&gt; X(x)
X(x) -- "(4) dL/dx" --&gt; Mu(mu)
X(x) -- "(4) dL/dx" --&gt; Si("sigma (square)")
X(x) -- "(4) dL/dx" --&gt; Xh(x_hat)
Si("sigma (square)") -- "(2) dL/dsigma" --&gt; Xh(x_hat)
Mu(mu) -- "(3.1) dL/dmu" --&gt; Xh(x_hat)
Mu(mu) -- "(3.2) dL/dmu" --&gt; Si("sigma (square)")
Xh(x_hat) -- "(1) dL/dx_hat" --&gt; Y(y)

G(gamma) --&gt; Y(y)
B(beta) --&gt; Y(y)
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>We will need to calculate <code>dL/dx</code> given <code>dL/dy</code>, we will calculate by hand reversely:</p>
<ol type="1">
<li>scale and shift: <code>dL/dx_hat = gamma * dL/dy</code> easy enough;</li>
<li>normalize: <code>dL/dsigma = -1/2 * gamma * SUM[dL/dy * (x - mu) * (sigma^2 + eps)^(-3/2)]</code>;</li>
<li>normalize &amp; mini-batch variance: <code>dL/dmu = - SUM[dL/dy * gamma * (sigma^2 + eps)^(-1/2)]</code>, this is path (3.1), we can prove that path (3.2) equal to zero - since <code>mu</code> is average of <code>x</code>, we can think of change in <code>mu</code> will be eliminated by <code>x</code> itself w.r.t. <code>L</code>;</li>
<li>given all the gradients above, we just write the expressions down and do some transformation, this is the final: <code>dL/dx = gamma * (sigma^2 + eps)^(-1/2) / m { [m * dL/dy] - SUMj[dL/dy] - m/(m-1) * x_hat * SUMj[dL/dy * x_hat]}</code>, where <code>m</code> is mini-batch size (in our data is <code>n</code>)</li>
</ol>
<div id="234c9623" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb27-2"></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># before we had:</span></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbnraw = bngain * dhpreact</span></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbndiff = bnvar_inv * dbnraw</span></span>
<span id="cb27-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbnvar_inv = (bndiff * dbnraw).sum(0, keepdim=True)</span></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbnvar = (-0.5*(bnvar + 1e-5)**-1.5) * dbnvar_inv</span></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbndiff2 = (1.0/(n-1))*torch.ones_like(bndiff2) * dbnvar</span></span>
<span id="cb27-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbndiff += (2*bndiff) * dbndiff2</span></span>
<span id="cb27-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dhprebn = dbndiff.clone()</span></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbnmeani = (-dbndiff).sum(0)</span></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dhprebn += 1.0/n * (torch.ones_like(hprebn) * dbnmeani)</span></span>
<span id="cb27-13"></span>
<span id="cb27-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate dhprebn given dhpreact (i.e. backprop through the batchnorm)</span></span>
<span id="cb27-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (you'll also need to use some of the variables from the forward pass up above)</span></span>
<span id="cb27-16"></span>
<span id="cb27-17">dhprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnvar_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ( n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dhpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dhpreact.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (dhpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnraw).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb27-18"></span>
<span id="cb27-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hprebn'</span>, dhprebn, hprebn) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I can only get approximate to be true, my maxdiff is 9e-10</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>hprebn          | exact: False | approximate: True  | maxdiff: 9.313225746154785e-10</code></pre>
</div>
</div>
</section>
<section id="exercise-4-putting-it-all-together" class="level1">
<h1>exercise 4: putting it all together</h1>
<div id="924ee63a" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exercise 4: putting it all together!</span></span>
<span id="cb29-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train the MLP neural net with your own backward pass</span></span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># init</span></span>
<span id="cb29-5">n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the dimensionality of the character embedding vectors</span></span>
<span id="cb29-6">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of neurons in the hidden layer of the MLP</span></span>
<span id="cb29-7"></span>
<span id="cb29-8">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproducibility</span></span>
<span id="cb29-9">C  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_embd),            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb29-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1</span></span>
<span id="cb29-11">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>((n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb29-12">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_hidden,                        generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2</span></span>
<span id="cb29-14">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_hidden, vocab_size),          generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb29-15">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(vocab_size,                      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb29-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BatchNorm parameters</span></span>
<span id="cb29-17">bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb29-18">bnbias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb29-19"></span>
<span id="cb29-20">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2, bngain, bnbias]</span>
<span id="cb29-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of parameters in total</span></span>
<span id="cb29-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb29-23">  p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb29-24"></span>
<span id="cb29-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same optimization as last time</span></span>
<span id="cb29-26">max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5_000</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#200_000</span></span>
<span id="cb29-27">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb29-28">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convenience</span></span>
<span id="cb29-29">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb29-30"></span>
<span id="cb29-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use this context manager for efficiency once your backward pass is written (</span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb29-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb29-33"></span>
<span id="cb29-34">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kick off optimization</span></span>
<span id="cb29-35">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_steps):</span>
<span id="cb29-36"></span>
<span id="cb29-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct</span></span>
<span id="cb29-38">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb29-39">    Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X,Y</span></span>
<span id="cb29-40"></span>
<span id="cb29-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb29-42">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors</span></span>
<span id="cb29-43">    embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb29-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linear layer</span></span>
<span id="cb29-45">    hprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer pre-activation</span></span>
<span id="cb29-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BatchNorm layer</span></span>
<span id="cb29-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -------------------------------------------------------------</span></span>
<span id="cb29-48">    bnmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprebn.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-49">    bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprebn.var(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, unbiased<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-50">    bnvar_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb29-51">    bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (hprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bnmean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnvar_inv</span>
<span id="cb29-52">    hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias</span>
<span id="cb29-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -------------------------------------------------------------</span></span>
<span id="cb29-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non-linearity</span></span>
<span id="cb29-55">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(hpreact) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer</span></span>
<span id="cb29-56">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output layer</span></span>
<span id="cb29-57">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Yb) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb29-58"></span>
<span id="cb29-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb29-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb29-61">      p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb29-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss.backward() # use this for correctness comparisons, delete it later!</span></span>
<span id="cb29-63"></span>
<span id="cb29-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># manual backprop! #swole_doge_meme</span></span>
<span id="cb29-65">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------</span></span>
<span id="cb29-66">    dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-67">    dlogits[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n), Yb] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb29-68">    dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> n</span>
<span id="cb29-69">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2nd layer backprop</span></span>
<span id="cb29-70">    dh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2.T</span>
<span id="cb29-71">    dW2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dlogits</span>
<span id="cb29-72">    db2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dlogits.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb29-73">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tanh</span></span>
<span id="cb29-74">    dhpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dh</span>
<span id="cb29-75">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batchnorm backprop</span></span>
<span id="cb29-76">    dbngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dhpreact).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-77">    dbnbias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dhpreact.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-78">    dhprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>bnvar_inv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dhpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dhpreact.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>bnraw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(dhpreact<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>bnraw).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb29-79">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1st layer</span></span>
<span id="cb29-80">    dembcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dhprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1.T</span>
<span id="cb29-81">    dW1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dhprebn</span>
<span id="cb29-82">    db1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dhprebn.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb29-83">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embedding</span></span>
<span id="cb29-84">    demb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dembcat.view(emb.shape)</span>
<span id="cb29-85">    dC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(C)</span>
<span id="cb29-86">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(Xb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb29-87">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(Xb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb29-88">        ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xb[k,j]</span>
<span id="cb29-89">        dC[ix] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> demb[k,j]</span>
<span id="cb29-90">    grads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [dC, dW1, db1, dW2, db2, dbngain, dbnbias]</span>
<span id="cb29-91">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------</span></span>
<span id="cb29-92"></span>
<span id="cb29-93">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb29-94">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step learning rate decay</span></span>
<span id="cb29-95">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p, grad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(parameters, grads):</span>
<span id="cb29-96">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#p.data += -lr * p.grad # old way of cheems doge (using PyTorch grad from .backward())</span></span>
<span id="cb29-97">      p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grad <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new way of swole doge </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: enable</span></span>
<span id="cb29-98"></span>
<span id="cb29-99">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb29-100">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print every once in a while</span></span>
<span id="cb29-101">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb29-102">    lossi.append(loss.log10().item())</span>
<span id="cb29-103"></span>
<span id="cb29-104">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if i &gt;= 100: # </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: delete early breaking when you're ready to train the full net</span></span>
<span id="cb29-105">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   break</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>12297
      0/   5000: 3.7937</code></pre>
</div>
</div>
<p>We can check gradients using this:</p>
<div id="6ee92efe" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># useful for checking your gradients</span></span>
<span id="cb31-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p,g <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(parameters, grads):</span>
<span id="cb31-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># g.requires_grad = True</span></span>
<span id="cb31-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># g.retain_grad()</span></span>
<span id="cb31-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p.shape)), g, p)</span></code></pre></div>
</details>
</div>
<p>Calibrate the batch norm at the end of training:</p>
<div id="220a3702" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb32-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pass the training set through</span></span>
<span id="cb32-3">  emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xtr]</span>
<span id="cb32-4">  embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb32-5">  hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb32-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># measure the mean/std over the entire training set</span></span>
<span id="cb32-7">  bnmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hpreact.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb32-8">  bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hpreact.var(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, unbiased<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<p>Evaluate train and val loss:</p>
<div id="18792970" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this decorator disables gradient tracking</span></span>
<span id="cb33-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> split_loss(split):</span>
<span id="cb33-3">  x,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb33-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>: (Xtr, Ytr),</span>
<span id="cb33-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: (Xdev, Ydev),</span>
<span id="cb33-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: (Xte, Yte),</span>
<span id="cb33-7">  }[split]</span>
<span id="cb33-8">  emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[x] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, block_size, n_embd)</span></span>
<span id="cb33-9">  embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concat into (N, block_size * n_embd)</span></span>
<span id="cb33-10">  hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb33-11">  hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bnmean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias</span>
<span id="cb33-12">  h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(hpreact) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, n_hidden)</span></span>
<span id="cb33-13">  logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, vocab_size)</span></span>
<span id="cb33-14">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, y)</span>
<span id="cb33-15">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(split, loss.item())</span>
<span id="cb33-16"></span>
<span id="cb33-17">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span>
<span id="cb33-18">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>train 2.3197696208953857
val 2.3234214782714844</code></pre>
</div>
</div>
<p>Similar to what we achieved before!</p>
<p>Sample from model:</p>
<div id="4b088192" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample from the model</span></span>
<span id="cb35-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb35-5"></span>
<span id="cb35-6">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb35-7">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize with all ...</span></span>
<span id="cb35-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb35-9">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ------------</span></span>
<span id="cb35-10">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb35-11">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Embedding</span></span>
<span id="cb35-12">      emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[torch.tensor([context])] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1,block_size,d)</span></span>
<span id="cb35-13">      embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concat into (N, block_size * n_embd)</span></span>
<span id="cb35-14">      hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb35-15">      hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bnmean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias</span>
<span id="cb35-16">      h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(hpreact) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, n_hidden)</span></span>
<span id="cb35-17">      logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, vocab_size)</span></span>
<span id="cb35-18">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ------------</span></span>
<span id="cb35-19">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample</span></span>
<span id="cb35-20">      probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb35-21">      ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(probs, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb35-22">      context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb35-23">      out.append(ix)</span>
<span id="cb35-24">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb35-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb35-26"></span>
<span id="cb35-27">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(itos[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> out))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>mriahamyanniee.
mad.
ryah.
remmrettadrlen.
adee.
dielin.
sha.
jen.
eden.
kananaraelle.
malara.
nosadbergihahie.
tyn.
jowelle.
jobeulanu.
zayvda.
kylene.
eha.
kayshastonah.
halina.</code></pre>
</div>
</div>
</section>
<section id="outro" class="level1">
<h1>outro</h1>
<p>We have gone through and learned how can we manually do the gradients in our networks, it’s just some line of code for each step and pretty simple (<em>but not for the Batch Norm formula</em> 😪). And I’ll also be back with another post to calculate how the grad of cross entropy is coming.</p>
<p>In next lesson we will build RNN, LSTM, GRU, etc. Interesting and happly leanring!</p>
</section>
<section id="resources" class="level1">
<h1>resources</h1>
<ol type="1">
<li>Notebook: <a href="https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part4_backprop.ipynb" class="uri">https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part4_backprop.ipynb</a>;</li>
<li>Colab notebook: <a href="https://colab.research.google.com/drive/1WV2oi2fh9XXyldh02wupFQX0wh5ZC-z-?usp=sharing" class="uri">https://colab.research.google.com/drive/1WV2oi2fh9XXyldh02wupFQX0wh5ZC-z-?usp=sharing</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>til</category>
  <category>python</category>
  <category>andrej karpathy</category>
  <category>nn-z2h</category>
  <category>neural networks</category>
  <category>backpropagation</category>
  <guid>https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/</guid>
  <pubDate>Sun, 01 Dec 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/backprop_ninja.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>NN-Z2H Lesson 4: Building makemore part 3 - Activations &amp; Gradients, BatchNorm</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important callout-titled" title="This is not orginal content!">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This is not orginal content!
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is my study notes / codes along with Andrej Karpathy’s “<a href="https://www.youtube.com/watch?v=VMj-3S1tku0&amp;list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ">Neural Networks: Zero to Hero</a>” series.</p>
<p><em>Edit 1st June, 25</em>: I changed the loop to 5k only, for the shake of time saving when re-rendering this post!</p>
</div>
</div>
<p>We want to stay a bit longer with the MLPs, to have more concrete intuitive of the <strong>activations</strong> in the neural nets and <strong>gradients</strong> that flowing backwards. It’s good to learn about the development history of these architectures. Since Recurrent Neural Network (RNN), they are although very <em>expressive</em> but not easily <em>optimizable</em> with current gradient techniques we have so far. Let’s get started!</p>
<section id="part-1-intro" class="level1">
<h1>Part 1: intro</h1>
<section id="starter-code" class="level2">
<h2 class="anchored" data-anchor-id="starter-code">starter code</h2>
<div id="a6dd4a40" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</details>
</div>
<div id="fdbb1a3b" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"></span>
<span id="cb2-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/karpathy/makemore/refs/heads/master/names.txt"</span></span>
<span id="cb2-4">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>).iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tolist()</span>
<span id="cb2-5">words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>['emma', 'olivia', 'ava', 'isabella', 'sophia', 'charlotte', 'mia', 'amelia']</code></pre>
</div>
</div>
<div id="e5082c75" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>32033</code></pre>
</div>
</div>
<div id="56d192d1" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the vocabulary of characters and mapping to/from integer</span></span>
<span id="cb6-2">chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(words))))</span>
<span id="cb6-3">stoi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {s:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chars)}</span>
<span id="cb6-4">stoi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-5">itos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i: s <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s, i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> stoi.items()}</span>
<span id="cb6-6">vocab_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(itos)</span>
<span id="cb6-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(itos)</span>
<span id="cb6-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(vocab_size)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 0: '.'}
27</code></pre>
</div>
</div>
<div id="57207af4" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the dataset</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> buid_dataset(words):</span>
<span id="cb8-4">    X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb8-5"></span>
<span id="cb8-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words:</span>
<span id="cb8-7">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size</span>
<span id="cb8-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb8-9">            ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb8-10">            X.append(context)</span>
<span id="cb8-11">            Y.append(ix)</span>
<span id="cb8-12">            context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb8-13"></span>
<span id="cb8-14">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb8-15">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span>
<span id="cb8-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.shape, Y.shape)</span>
<span id="cb8-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> X, Y</span>
<span id="cb8-18"></span>
<span id="cb8-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb8-20">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb8-21">random.shuffle(words)</span>
<span id="cb8-22">n1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb8-23">n2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb8-24"></span>
<span id="cb8-25">Xtr, Ytr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[:n1])        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 80#</span></span>
<span id="cb8-26">Xdev, Ydev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n1:n2])    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 10%</span></span>
<span id="cb8-27">Xte, Yte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n2:])        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 10%</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([182625, 3]) torch.Size([182625])
torch.Size([22655, 3]) torch.Size([22655])
torch.Size([22866, 3]) torch.Size([22866])</code></pre>
</div>
</div>
<div id="efd0ad91" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MLP revisited</span></span>
<span id="cb10-2">n_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no of dimensions of the embedding space.</span></span>
<span id="cb10-3">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size of the hidden - tanh layer</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table - 10 dimensional space</span></span>
<span id="cb10-6">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproductivity</span></span>
<span id="cb10-7">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_emb),                  generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh - 300 neurons</span></span>
<span id="cb10-10">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb, n_hidden),      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb10-11">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_hidden,                            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb10-14">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_hidden, vocab_size),              generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb10-15">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(vocab_size,                          generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params</span></span>
<span id="cb10-18">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span>
<span id="cb10-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of params: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters))</span>
<span id="cb10-20"></span>
<span id="cb10-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb10-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb10-23">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>No of params:  11897</code></pre>
</div>
</div>
<div id="347e901c" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimization</span></span>
<span id="cb12-2">max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5_000</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#50_000 #200_000</span></span>
<span id="cb12-3">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stats holders</span></span>
<span id="cb12-6">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training on Xtr, Ytr</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_steps):</span>
<span id="cb12-10"></span>
<span id="cb12-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct</span></span>
<span id="cb12-12">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,))</span>
<span id="cb12-13">    Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X, Y</span></span>
<span id="cb12-14"></span>
<span id="cb12-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb12-16">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors</span></span>
<span id="cb12-17">    emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb12-18">    h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer pre-activation</span></span>
<span id="cb12-19">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(h_pre_act) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer</span></span>
<span id="cb12-20">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output layer</span></span>
<span id="cb12-21">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Yb) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb12-22"></span>
<span id="cb12-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb12-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb12-25">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb12-26">    loss.backward()</span>
<span id="cb12-27"></span>
<span id="cb12-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb12-29">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step learning rate decay</span></span>
<span id="cb12-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb12-31">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb12-32"></span>
<span id="cb12-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb12-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print once every while</span></span>
<span id="cb12-35">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-36">    lossi.append(loss.log10().item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>      0/   5000: 28.0078</code></pre>
</div>
</div>
<div id="582ab820" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">plt.plot(lossi)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="25fe6f8b" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># disables gradient tracking</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> split_loss(split: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb15-3">  x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb15-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>: (Xtr, Ytr),</span>
<span id="cb15-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: (Xdev, Ydev),</span>
<span id="cb15-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: (Xte, Yte)</span>
<span id="cb15-7">  }[split]</span>
<span id="cb15-8">  emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[x] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, block_size, n_emb)</span></span>
<span id="cb15-9">  emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate into (N, block_size * n_emb)</span></span>
<span id="cb15-10">  h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, n_hidden)</span></span>
<span id="cb15-11">  logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, vocab_size)</span></span>
<span id="cb15-12">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, y) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb15-13">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(split, loss.item())</span>
<span id="cb15-14"></span>
<span id="cb15-15">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span>
<span id="cb15-16">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>train 2.5229973793029785
val 2.531994104385376</code></pre>
</div>
</div>
<div id="dee9f49f" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample from the model</span></span>
<span id="cb17-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb17-5"></span>
<span id="cb17-6">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-7">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize with all ...</span></span>
<span id="cb17-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb17-9">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass the neural net</span></span>
<span id="cb17-10">      emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[torch.tensor([context])] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1,block_size,n_embd)</span></span>
<span id="cb17-11">      h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1)</span>
<span id="cb17-12">      logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb17-13">      probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-14">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample from the distribution</span></span>
<span id="cb17-15">      ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(probs, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb17-16">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shift the context window and track the samples</span></span>
<span id="cb17-17">      context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb17-18">      out.append(ix)</span>
<span id="cb17-19">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if we sample the special '.' token, break</span></span>
<span id="cb17-20">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb17-22"></span>
<span id="cb17-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(itos[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> out)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># decode and print the generated word</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>mria.
kmyanleee.
med.
rylle.
etmanieng.
leg.
adeer.
selii.
smi.
jenledeisesnanar.
kayeimlonaa.
nosadhergahiries.
kinde.
jeliranteudanu.
zennda.
kymani.
ehs.
kayjahsyn.
daihya.
sakyansun.</code></pre>
</div>
</div>
<p>Okay so now our network has multiple things wrong at the initialization, let’s list down below. The final code will be presented in the end of part 1, with <code># 👈</code> for lines that had been added / modified. The right code cell below re-initializes states at the beginning of network’s parameter (in my notebook, it’s rendered <strong>linearly</strong>!).</p>
<div id="f7b69502" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">n_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no of dimensions of the embedding space.</span></span>
<span id="cb19-2">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size of the hidden - tanh layer</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table - 10 dimensional space</span></span>
<span id="cb19-4">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproductivity</span></span>
<span id="cb19-5">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_emb),                  generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh - 300 neurons</span></span>
<span id="cb19-7">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb, n_hidden),      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb19-8">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_hidden,                            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb19-10">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_hidden, vocab_size),              generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb19-11">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(vocab_size,                          generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb19-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params</span></span>
<span id="cb19-13">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb19-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb19-16">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb19-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimization</span></span>
<span id="cb19-18">max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5_000</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#50_000 #200_000</span></span>
<span id="cb19-19">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb19-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training on Xtr, Ytr</span></span>
<span id="cb19-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_steps):</span>
<span id="cb19-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct</span></span>
<span id="cb19-23">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,))</span>
<span id="cb19-24">    Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X, Y</span></span>
<span id="cb19-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb19-26">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors</span></span>
<span id="cb19-27">    emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb19-28">    h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer pre-activation</span></span>
<span id="cb19-29">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(h_pre_act) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer</span></span>
<span id="cb19-30">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output layer</span></span>
<span id="cb19-31">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Yb) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb19-32"></span>
<span id="cb19-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span></code></pre></div>
</details>
</div>
</section>
<section id="fixing-the-initial-loss" class="level2">
<h2 class="anchored" data-anchor-id="fixing-the-initial-loss">fixing the initial loss</h2>
<p>We can see at the <code>step = 0</code>, the loss was <code>27</code> and after some <code>k</code>s training loops it decreased to <code>1</code> or <code>2</code>. It extremely high at the begining. In practice, we should give the network somehow the expectation we want when generating a character after some characters (<code>3</code>).</p>
<div id="cc47118d" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">loss.item()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>25.98784637451172</code></pre>
</div>
</div>
<p>In this case, without training yet, we expect all <code>27</code> characters’ possibilities to be equal (<code>1 / 27.0</code>) ~ <strong>uniform distribution</strong>, so the loss ~ negative log likelihood would be:</p>
<div id="e9307ab9" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> torch.tensor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">27.0</span>).log()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>tensor(3.2958)</code></pre>
</div>
</div>
<p>It’s far lower than <code>27</code>, we say that the network is <strong>confidently wrong</strong>. Andrej demonstrated by another simple 5 elements tensor and showed that the loss is lowest when all elements are equal.</p>
<p>We want the <code>logits</code> to be low entropy as possible (but not equal to <code>0</code>, which will be showed later), we added multipliers <code>0.01</code> to <code>W2</code>, and <code>0</code> to <code>b2</code>. We got the loss to be <code>3.xx</code> at the beginning.</p>
<div id="51189568" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb24-2">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_hidden, vocab_size),              generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb24-3">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(vocab_size,                          generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
</details>
</div>
<p>Now re-train the model and we will notice the the <code>lossi</code> will not look like the <em>hookey stick</em> anymore! Morever the final loss on train set and dev set is better!</p>
</section>
<section id="fixing-the-saturated-tanh" class="level2">
<h2 class="anchored" data-anchor-id="fixing-the-saturated-tanh">fixing the saturated <code>tanh</code></h2>
<p>The <code>logits</code> are now okay, the next problem is about the <code>h</code> - the activations of the hidden states! It’s hard to see but in the output of code cell below, there are too many values of <code>1</code> and <code>-1</code> in this tensor.</p>
<div id="4f881c5a" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1">h</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>tensor([[-0.9568, -0.0985, -0.9696,  ..., -1.0000,  0.9999,  1.0000],
        [ 0.9201,  0.7975, -0.9178,  ...,  0.9732, -0.8110,  1.0000],
        [-1.0000,  0.9893, -0.9832,  ...,  0.9573,  0.8989,  1.0000],
        ...,
        [-1.0000,  1.0000, -1.0000,  ...,  0.0247, -0.9899, -0.9938],
        [ 0.9995, -0.9957, -1.0000,  ...,  0.9994, -1.0000, -1.0000],
        [ 0.9993,  0.9333, -0.9900,  ..., -0.9986,  1.0000,  0.9996]],
       grad_fn=&lt;TanhBackward0&gt;)</code></pre>
</div>
</div>
<p>Recall that <code>tanh</code> is activation function that squashing arbitrary numbers to the range <code>[-1:1]</code>. Let’s visualize the distribution of <code>h</code>.</p>
<div id="34147b82" class="cell" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">plt.hist(h.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).tolist(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the ";" removes the presenting of data in code-block's output</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Most of them were distributed to the extreme values <code>-1</code> and <code>1</code>. Now come to the <code>h_pre_act</code>, we can see a <strong>flat-tails distribution</strong> from <code>-15</code> to <code>15</code>.</p>
<div id="8d02efc7" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">plt.hist(h_pre_act.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).tolist(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Looking back to how we implemented <code>tanh</code> in <code>micrograd</code> (which is mathematically the same with <code>PyTorch</code>), we’re multiplying the forward node’s gradient with <code>(1 - t**2)</code>, which <code>t</code> is local <code>tanh</code>. When <code>tanh</code> is near <code>-1</code> or <code>1</code>, this is close to <code>0</code>, we are <strong>killing the gradients</strong>. We are stopping the backpropagation through this <code>tanh</code> unit.</p>
<div id="fa4793a9" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1">...</span>
<span id="cb29-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tanh(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb29-3">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data</span>
<span id="cb29-4">        t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-5">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(t, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tanh'</span>)</span>
<span id="cb29-6"></span>
<span id="cb29-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _backward():</span>
<span id="cb29-8">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="cb29-9">        out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="cb29-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> out</span>
<span id="cb29-11">...</span></code></pre></div>
</details>
</div>
<p>When the gradients become zero, the previous nodes’ gradients will be <strong>vanishing</strong>. We call this <strong>saturated <code>tanh</code></strong>, this leads to <strong>dead neurons</strong> ~ always off and because the gradient is zero then they will never be turned on, and happens for other activations as well: <code>sigmoid</code>, <code>ReLU</code>, etc (but less significant on <code>Leaky ReLU</code> or <code>ELU</code>). The network is not learning!</p>
<p>The same with <code>logits</code>, now we want <code>h</code> to be more near zero, we add multipliers to the <code>W1</code> and <code>b1</code>:</p>
<div id="3e0a955a" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh - 300 neurons</span></span>
<span id="cb30-2">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb, n_hidden),      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb30-3">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_hidden,                            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># keep a little bit entropy,</span></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># It's okay to initialize the b1 to zero but AK found emperically this will enhance the optimiaztion</span></span></code></pre></div>
</details>
</div>
<p>We can see now less peak distribution of <code>h</code>:</p>
<div class="columns">
<div class="column" style="width:50%;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/tanh_0.2mult.png" class="img-fluid figure-img"></p>
<figcaption><code>tanh</code></figcaption>
</figure>
</div>
</div><div class="column" style="width:50%;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/pre_act_tanh_0.2mult.png" class="img-fluid figure-img"></p>
<figcaption>pre-activation <code>tanh</code></figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="calculating-the-init-scale-kaiming-init" class="level2">
<h2 class="anchored" data-anchor-id="calculating-the-init-scale-kaiming-init">calculating the init scale: “Kaiming init”</h2>
<p>Now let’s look to the number <code>0.02</code>, in practice no one will set it manually. Let’s look into the example below to see how parameters of Gaussian Distribution of <code>y</code> differ from <code>x</code> when multiplying by <code>W</code>.</p>
<p>The question is how we set the <code>W</code> to preserve the Gaussian Distribution of X. Emperical researches found out that the multiplier to <code>W</code> should be square root of the “fan in”, in this case is <code>10^0.5</code>.</p>
<div id="c9dff306" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb31-2">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb31-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W</span>
<span id="cb31-4"></span>
<span id="cb31-5">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb31-6">y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1</span>
<span id="cb31-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x.mean(), x.std())</span>
<span id="cb31-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y.mean(), y.std())</span>
<span id="cb31-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y1.mean(), y1.std())</span>
<span id="cb31-10">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb31-11">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">131</span>).set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input X"</span>)</span>
<span id="cb31-12">plt.hist(x.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).tolist(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-13">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">132</span>).set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initial output y, expanded by W"</span>)</span>
<span id="cb31-14">plt.hist(y.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).tolist(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-15">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span>).set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y1, preserve the X's Gaussian Dist"</span>)</span>
<span id="cb31-16">plt.hist(y1.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).tolist(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(0.0075) tensor(0.9942)
tensor(0.0019) tensor(3.2034)
tensor(0.0010) tensor(0.9749)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-21-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Please investigate more here:</p>
<ol type="1">
<li>Kaiming et al.&nbsp;paper: <a href="https://arxiv.org/abs/1502.01852" class="uri">https://arxiv.org/abs/1502.01852</a></li>
<li>Implementation in <code>Pytorch</code>: <a href="https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.kaiming_normal_" class="uri">https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.kaiming_normal_</a></li>
</ol>
<p>It’s recommended in Kaiming paper to use a <strong>gain</strong> multiplier base on nonlinearity/activation function (<a href="https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.calculate_gain">here</a>), for <code>tanh</code> it’s <code>5/3</code>. We endup modified the initialization of <code>W1</code> with:</p>
<div id="01d224a5" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb, n_hidden),      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># * 0.2</span></span></code></pre></div>
</details>
</div>
<p>In this case is roughly <code>0.3</code>, re-train and although the loss only improved so insignificant (because previously we set it to be <code>0.2</code> - very close), but we’ve parameterized this hyper-constant.</p>
</section>
<section id="batch-normalization" class="level2">
<h2 class="anchored" data-anchor-id="batch-normalization">batch normalization</h2>
<p>As discussed before, we dont want the <code>h_pre_act</code> to be way too small (~is not doing anything) or too large (~saturated), we want it to just roughly follow the standardized Gaussian Distribution (ie. mean equal to 0, std equal to 1).</p>
<p>We’ve done it at the initialization, <em>why don’t we just normalize the hidden states to be unit Gaussian</em>? in batch normalization, this can be achieved by 4 steps, demonstrated with our case:</p>
<div id="379d34fd" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. mini-batch mean</span></span>
<span id="cb34-2">hpa_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h_pre_act.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb34-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. mini-batch variance / standard deviation</span></span>
<span id="cb34-4">hpa_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h_pre_act.std(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb34-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. normalize</span></span>
<span id="cb34-6">h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> hpa_mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> hpa_std</span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. scale and shift</span></span>
<span id="cb34-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># multiply by a "gain" then "shift" it with a bias</span></span>
<span id="cb34-9">bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))</span>
<span id="cb34-10">bnbias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))</span>
<span id="cb34-11">h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias</span></code></pre></div>
</details>
</div>
<p>We modified our code accordingly and re-run the code, actually this time the model did not improve much. Because actually this is very <strong>simple and shallow</strong> neural network. We also notice that the training loop now is slower than before, because the calculation volumn is bigger. Batch Normalization also unexpectedly comes up with a side effect, the forward and backward pass of any input now also depend on the mini-batch, not just itself (because of <code>mean()</code>/<code>std()</code>). This effect is suprisingly a good thing and acts as a <strong>regularizer</strong>.</p>
<p>There are also non-coupling regularizers such as: Linear Normalization, Layer Normalization, Group Normalization.</p>
<p>One othering to consider is in the deployment/testing phase, we dont want to use the batch norm calculated by a mini-batch. Instead we want to use the mean and standard deviation from the whole training data set:</p>
<div id="8014176c" class="cell" data-execution_count="23">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calibrate the batch norm after training</span></span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb35-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pass the training set through</span></span>
<span id="cb35-5">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[x_train]</span>
<span id="cb35-6">    embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb35-7">    hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb35-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># measure the mean/std over the entire training set</span></span>
<span id="cb35-9">    bnmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hpreact.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb35-10">    bnstd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hpreact.std(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<p>Rather, we can also use the running mean and standard deviation as implemented below which will give close estimates. Remaining 2 notes on the BN are:</p>
<ol type="1">
<li>Dividing zeros: we add a <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> value to the <strong>variance</strong> to avoid. We do not include this here as it likely not to happen with out example;</li>
<li>The bias <code>b1</code> will be subtracting in BN calculation, we will notice the <code>b1.grad</code> will be zeros as it does not impact any other calculation. Thus when using the BN, for layer before like weight, we should remove the bias. The <code>bnbias</code> now will be incharge for biasing the distributions.</li>
</ol>
</section>
<section id="real-example-resnet50-walkthrough" class="level2">
<h2 class="anchored" data-anchor-id="real-example-resnet50-walkthrough">real example: <code>resnet50</code> walkthrough</h2>
<p>The code AK presented here: <a href="https://github.com/pytorch/vision/blob/main/torchvision/models/resnet.py#L108" class="uri">https://github.com/pytorch/vision/blob/main/torchvision/models/resnet.py#L108</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/resnet50.png" class="img-fluid figure-img"></p>
<figcaption>The architecture of ResNet-50 model.</figcaption>
</figure>
</div>
</section>
<section id="summary-of-the-lecture" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-the-lecture">summary of the lecture</h2>
<p>Understand the activations (non-linearity) and gradients is crucial when training deep / large neural networks, in part 1 we have observed some issue and come up with many solutions:</p>
<ol type="1">
<li>Confidently wrong of network at init leads to hookey stick for loss in training loop: adding multipliers to <code>logits</code>’s weights and biases;</li>
<li>Flat-tails distribution or saturated <code>tanh</code>: Kaiming init;</li>
<li>Normalization of the hidden states: introduction to BN.</li>
</ol>
<p>Our final code in part 1 (un-fold to see), <code># 👈</code> indicates a change:</p>
<div id="7cb3c762" class="cell" data-execution_count="24">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb36-2"></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MLP revisited</span></span>
<span id="cb36-4">n_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no of dimensions of the embedding space.</span></span>
<span id="cb36-5">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size of the hidden - tanh layer</span></span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table - 10 dimensional space</span></span>
<span id="cb36-8">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproductivity</span></span>
<span id="cb36-9">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_emb),                  generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb36-10"></span>
<span id="cb36-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh - 300 neurons</span></span>
<span id="cb36-12">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb, n_hidden),      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># * 0.2       # 👈</span></span>
<span id="cb36-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># b1 = torch.randn(n_hidden,                            generator=g) * 0.01       # 👈</span></span>
<span id="cb36-14"></span>
<span id="cb36-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb36-16">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_hidden, vocab_size),              generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-17">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(vocab_size,                          generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-18"></span>
<span id="cb36-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch Normalization gain and bias</span></span>
<span id="cb36-20">bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))                                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-21">bnbias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))                                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-22"></span>
<span id="cb36-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add running mean/std</span></span>
<span id="cb36-24">bnmean_running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-25">bnstd_running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-26"></span>
<span id="cb36-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params (deleted b1)</span></span>
<span id="cb36-28">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, W2, b2, bngain, bnbias]                                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of params: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters))</span>
<span id="cb36-30"></span>
<span id="cb36-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb36-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb36-33">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb36-34"></span>
<span id="cb36-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimization</span></span>
<span id="cb36-36">max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5_000</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#50_000 #200_000</span></span>
<span id="cb36-37">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb36-38"></span>
<span id="cb36-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stats holders</span></span>
<span id="cb36-40">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb36-41"></span>
<span id="cb36-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training on Xtr, Ytr</span></span>
<span id="cb36-43"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_steps):</span>
<span id="cb36-44"></span>
<span id="cb36-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct</span></span>
<span id="cb36-46">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,))</span>
<span id="cb36-47">    Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X, Y</span></span>
<span id="cb36-48"></span>
<span id="cb36-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb36-50">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors</span></span>
<span id="cb36-51">    emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb36-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linear layer</span></span>
<span id="cb36-53">    h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># + b1 # hidden layer pre-activation                               # 👈</span></span>
<span id="cb36-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BatchNorm layer</span></span>
<span id="cb36-55">    bnmeani <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h_pre_act.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)                                                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-56">    bnstdi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h_pre_act.std(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)                                                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-57">    h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bnmeani) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> bnstdi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-58">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Updating running mean and std (this runs outside the training loop)</span></span>
<span id="cb36-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():                                                                       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-60">        bnmean_running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.999</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnmean_running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnmeani                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-61">        bnstd_running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.999</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnstd_running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnstdi                                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non-linearity</span></span>
<span id="cb36-63">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(h_pre_act) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer</span></span>
<span id="cb36-64">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output layer</span></span>
<span id="cb36-65">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Yb) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb36-66"></span>
<span id="cb36-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb36-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb36-69">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb36-70">    loss.backward()</span>
<span id="cb36-71"></span>
<span id="cb36-72">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb36-73">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step learning rate decay</span></span>
<span id="cb36-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb36-75">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb36-76"></span>
<span id="cb36-77">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb36-78">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print once every while</span></span>
<span id="cb36-79">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb36-80">    lossi.append(loss.log10().item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>No of params:  12097
      0/   5000: 3.3170</code></pre>
</div>
</div>
<div id="e4ba66cb" class="cell" data-execution_count="25">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1">plt.plot(lossi)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="c32406a0" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># disables gradient tracking</span></span>
<span id="cb39-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> split_loss(split: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb39-3">  x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb39-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>: (Xtr, Ytr),</span>
<span id="cb39-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: (Xdev, Ydev),</span>
<span id="cb39-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: (Xte, Yte)</span>
<span id="cb39-7">  }[split]</span>
<span id="cb39-8">  emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[x]</span>
<span id="cb39-9">  emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb39-10">  h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1                                                                                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb39-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># h_pre_act = bngain * ((h_pre_act - h_pre_act.mean(0, keepdim=True)) / h_pre_act.std(0, keepdim=True)) + bnbias      # 👈</span></span>
<span id="cb39-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># h_pre_act = bngain * ((h_pre_act - bnmean) / bnstd) + bnbias                                                        # 👈</span></span>
<span id="cb39-13">  h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bnmean_running) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> bnstd_running) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias                                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb39-14">  h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(h_pre_act)</span>
<span id="cb39-15">  logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb39-16">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, y)</span>
<span id="cb39-17">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(split, loss.item())</span>
<span id="cb39-18"></span>
<span id="cb39-19">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span>
<span id="cb39-20">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>train 2.4195921421051025
val 2.422152519226074</code></pre>
</div>
</div>
<section id="loss-logs" class="level3">
<h3 class="anchored" data-anchor-id="loss-logs">loss logs</h3>
<p>The numbers somehow are approximate, I don’t know why my Thinkpad-E14 gave different results when running codes multiple times 😂.</p>
<table class="table-striped table-hover caption-top table">
<caption>Loss logs</caption>
<colgroup>
<col style="width: 10%">
<col style="width: 40%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th>Step</th>
<th>What we did</th>
<th>Loss we got (accum)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>original</td>
<td><p>train 2.1169614791870117</p>
<p>val 2.1623435020446777</p></td>
</tr>
<tr class="even">
<td>2</td>
<td>fixed softmax confidently wrong</td>
<td><p>train 2.0666463375091553</p>
<p>val 2.1468191146850586</p></td>
</tr>
<tr class="odd">
<td>3</td>
<td>fixed <code>tanh</code> layer too saturated at init</td>
<td><p>train 2.033477544784546</p>
<p>val 2.115907907485962</p></td>
</tr>
<tr class="even">
<td>4</td>
<td>used semi principle “kaiming init” instead of hacking init</td>
<td><p>train 2.038902997970581</p>
<p>val 2.1138899326324463</p></td>
</tr>
<tr class="odd">
<td>5</td>
<td>added batch norm layer</td>
<td><p>train 2.0662825107574463</p>
<p>val 2.1201331615448</p></td>
</tr>
</tbody>
</table>
</section>
</section>
</section>
<section id="part-2-pytorch-ifying-the-code-and-train-a-deeper-network" class="level1">
<h1>Part 2: PyTorch-ifying the code, and train a deeper network</h1>
<p>Below is PyTorch-ified code by Andrej, some comments inputted by me:</p>
<div id="9bd166e8" class="cell" data-execution_count="27">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's train a deeper network</span></span>
<span id="cb41-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The classes we create here are the same API as nn.Module in PyTorch</span></span>
<span id="cb41-3"></span>
<span id="cb41-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Linear:</span>
<span id="cb41-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb41-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Simplifying Pytorch Linear Layer: https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear</span></span>
<span id="cb41-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb41-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, fan_in, fan_out, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb41-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((fan_in, fan_out), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> fan_in<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb41-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(fan_out) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> bias <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb41-11"></span>
<span id="cb41-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb41-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight</span>
<span id="cb41-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb41-15">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias</span>
<span id="cb41-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb41-17"></span>
<span id="cb41-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb41-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ([] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias])</span>
<span id="cb41-20"></span>
<span id="cb41-21"></span>
<span id="cb41-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BatchNorm1d:</span>
<span id="cb41-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb41-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Simplifying Pytorch BatchNorm1D: https://pytorch.org/docs/stable/generated/torch.nn.BatchNorm1d.html</span></span>
<span id="cb41-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb41-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dim, eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb41-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eps</span>
<span id="cb41-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> momentum</span>
<span id="cb41-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.training <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to differentiate usage of class in training or evaluation (using running mean/std)</span></span>
<span id="cb41-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters (trained with backprop)</span></span>
<span id="cb41-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(dim) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gain</span></span>
<span id="cb41-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(dim) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bias</span></span>
<span id="cb41-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># buffers (trained with a running 'momentum update')</span></span>
<span id="cb41-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(dim)</span>
<span id="cb41-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(dim)</span>
<span id="cb41-36"></span>
<span id="cb41-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb41-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the forward pass</span></span>
<span id="cb41-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.training:</span>
<span id="cb41-40">            xmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch mean</span></span>
<span id="cb41-41">            xvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.var(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch variance, follow the paper exactly</span></span>
<span id="cb41-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb41-43">            xmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_mean</span>
<span id="cb41-44">            xvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_var</span>
<span id="cb41-45">        xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xmean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.sqrt(xvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eps) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalize to unit variance</span></span>
<span id="cb41-46">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to tracking and visualizing data later on, PyTorch does not have this</span></span>
<span id="cb41-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the buffers</span></span>
<span id="cb41-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.training:</span>
<span id="cb41-49">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb41-50">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> xmean</span>
<span id="cb41-51">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> xvar</span>
<span id="cb41-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb41-53"></span>
<span id="cb41-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb41-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta]</span>
<span id="cb41-56"></span>
<span id="cb41-57"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Tanh:</span>
<span id="cb41-58">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb41-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Just calculate the Tanh, just PyTorch: https://pytorch.org/docs/stable/generated/torch.nn.Tanh.html</span></span>
<span id="cb41-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb41-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb41-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(x)</span>
<span id="cb41-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb41-64">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb41-65">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> []</span>
<span id="cb41-66"></span>
<span id="cb41-67">n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the dimensionality of the character embedding vectors</span></span>
<span id="cb41-68">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of neurons in the hidden layer of the MLP</span></span>
<span id="cb41-69">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproducibility</span></span>
<span id="cb41-70"></span>
<span id="cb41-71">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_embd),            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb41-72"></span>
<span id="cb41-73">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb41-74">    Linear(n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden), Tanh(),</span>
<span id="cb41-75">    Linear(           n_hidden, n_hidden), Tanh(),</span>
<span id="cb41-76">    Linear(           n_hidden, n_hidden), Tanh(),</span>
<span id="cb41-77">    Linear(           n_hidden, n_hidden), Tanh(),</span>
<span id="cb41-78">    Linear(           n_hidden, n_hidden), Tanh(),</span>
<span id="cb41-79">    Linear(           n_hidden, vocab_size),</span>
<span id="cb41-80">]</span>
<span id="cb41-81"></span>
<span id="cb41-82"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb41-83">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># last layer: make less confident</span></span>
<span id="cb41-84">    layers[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb41-85">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all other layers: apply gain</span></span>
<span id="cb41-86">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb41-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(layer, Linear):</span>
<span id="cb41-88">            layer.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb41-89"></span>
<span id="cb41-90">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [p <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layer.parameters()]</span>
<span id="cb41-91"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of parameters in total</span></span>
<span id="cb41-92"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb41-93">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>46497</code></pre>
</div>
</div>
<div id="02c20bdc" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same optimization as last time</span></span>
<span id="cb43-2">max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200000</span></span>
<span id="cb43-3">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb43-4">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb43-5">ud <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb43-6"></span>
<span id="cb43-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_steps):</span>
<span id="cb43-8"></span>
<span id="cb43-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct</span></span>
<span id="cb43-10">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb43-11">    Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X,Y</span></span>
<span id="cb43-12"></span>
<span id="cb43-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb43-14">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors</span></span>
<span id="cb43-15">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb43-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers:</span>
<span id="cb43-17">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer(x)</span>
<span id="cb43-18">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(x, Yb) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb43-19"></span>
<span id="cb43-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb43-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers:</span>
<span id="cb43-22">        layer.out.retain_grad() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AFTER_DEBUG: would take out retain_graph</span></span>
<span id="cb43-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb43-24">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb43-25">    loss.backward()</span>
<span id="cb43-26"></span>
<span id="cb43-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb43-28">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150000</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step learning rate decay</span></span>
<span id="cb43-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb43-30">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb43-31"></span>
<span id="cb43-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb43-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print every once in a while</span></span>
<span id="cb43-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb43-35">    lossi.append(loss.log10().item())</span>
<span id="cb43-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb43-37">        ud.append([((lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p.grad).std() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p.data.std()).log10().item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters])</span>
<span id="cb43-38"></span>
<span id="cb43-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb43-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if i &gt;= 1000:</span></span>
<span id="cb43-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     break # AFTER_DEBUG: would take out obviously to run full optimization</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>      0/ 200000: 3.2962</code></pre>
</div>
</div>
<section id="viz-1-forward-pass-activations-statistics" class="level2">
<h2 class="anchored" data-anchor-id="viz-1-forward-pass-activations-statistics">viz #1: forward pass activations statistics</h2>
<div id="de9215ea" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualize histograms</span></span>
<span id="cb45-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># width and height of the plot</span></span>
<span id="cb45-3">legends <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb45-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(layers[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note: exclude the output layer</span></span>
<span id="cb45-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(layer, Tanh):</span>
<span id="cb45-6">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer.out</span>
<span id="cb45-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'layer </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%10s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">): mean </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, std </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, saturated: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f%%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (i, layer.__class__.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>, t.mean(), t.std(), (t.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.97</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb45-8">    hy, hx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.histogram(t, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb45-9">    plt.plot(hx[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].detach(), hy.detach())</span>
<span id="cb45-10">    legends.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'layer </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>layer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>__class__<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb45-11">plt.legend(legends)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-12">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'activation distribution'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>layer 1 (      Tanh): mean -0.02, std 0.75, saturated: 20.25%
layer 3 (      Tanh): mean -0.00, std 0.69, saturated: 8.38%
layer 5 (      Tanh): mean +0.00, std 0.67, saturated: 6.62%
layer 7 (      Tanh): mean -0.01, std 0.66, saturated: 5.47%
layer 9 (      Tanh): mean -0.02, std 0.66, saturated: 6.12%</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>Text(0.5, 1.0, 'activation distribution')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-30-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>If we set the gain to <code>1</code>, the std is shrinking, and the saturation is coming to zeros, due to the first layer is pretty decent, but the next ones are shrinking to zero because of the <code>tanh()</code> - a squashing function.</p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb48-1">layer 1 (      Tanh): mean -0.02, std 0.62, saturated: 3.50%</span>
<span id="cb48-2">layer 3 (      Tanh): mean -0.00, std 0.48, saturated: 0.03%</span>
<span id="cb48-3">layer 5 (      Tanh): mean +0.00, std 0.41, saturated: 0.06%</span>
<span id="cb48-4">layer 7 (      Tanh): mean +0.00, std 0.35, saturated: 0.00%</span>
<span id="cb48-5">layer 9 (      Tanh): mean -0.02, std 0.32, saturated: 0.00%</span>
<span id="cb48-6">Text(0.5, 1.0, 'activation distribution')</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz1_gain1.png" class="img-fluid figure-img"></p>
<figcaption>If the gain is 1</figcaption>
</figure>
</div>
<p>But if we set the gain is far too high, let’s say <code>3</code>, we can see the saturation is too high.</p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb49-1">layer 1 (      Tanh): mean -0.03, std 0.85, saturated: 47.66%</span>
<span id="cb49-2">layer 3 (      Tanh): mean +0.00, std 0.84, saturated: 40.47%</span>
<span id="cb49-3">layer 5 (      Tanh): mean -0.01, std 0.84, saturated: 42.38%</span>
<span id="cb49-4">layer 7 (      Tanh): mean -0.01, std 0.84, saturated: 42.00%</span>
<span id="cb49-5">layer 9 (      Tanh): mean -0.03, std 0.84, saturated: 42.41%</span>
<span id="cb49-6">Text(0.5, 1.0, 'activation distribution')</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz1_gain3.png" class="img-fluid figure-img"></p>
<figcaption>If the gain is 3</figcaption>
</figure>
</div>
<p>So <code>5/3</code> is a nice one, balancing the std and saturation.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Why 5/3?">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Why 5/3?
</div>
</div>
<div class="callout-body-container callout-body">
<p>A comment in his video explains why <code>5/3</code> is recommended, it comes from the avg of <img src="https://latex.codecogs.com/png.latex?%5B%5Ctanh(x)%5D%5E2"> where <img src="https://latex.codecogs.com/png.latex?x"> is distributed as a Gaussian:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20%5Cfrac%7B%5B%5Ctanh(x)%5D%5E2%20%5Cexp(-%5Cfrac%7Bx%5E2%7D%7B2%7D)%7D%7B%5Csqrt%7B2%5Cpi%7D%7D%20%5C,%20dx%20%5Capprox%200.39"></p>
<blockquote class="blockquote">
<p>The square root of this value is how much the <code>tanh</code> squeezes the variance of the incoming variable: 0.39 ** .5 ~= 0.63 ~= 3/5 (hence 5/3 is just an approximation of the exact gain).</p>
</blockquote>
</div>
</div>
</section>
<section id="viz-2-backward-pass-gradient-statistics" class="level2">
<h2 class="anchored" data-anchor-id="viz-2-backward-pass-gradient-statistics">viz #2: backward pass gradient statistics</h2>
<p>Similarly, we can do the same thing with gradients. With the setting of gain as <code>5/3</code>, the distribution of gradients through layers quite the same. Layer by layer, the value of gradients will be shrank close to zero, the distributions would be more and more peak, so the gain here will help expanding those distributions.</p>
<div id="06fde954" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualize histograms</span></span>
<span id="cb50-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># width and height of the plot</span></span>
<span id="cb50-3">legends <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb50-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(layers[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note: exclude the output layer</span></span>
<span id="cb50-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(layer, Tanh):</span>
<span id="cb50-6">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer.out.grad</span>
<span id="cb50-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'layer </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%10s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">): mean </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, std </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (i, layer.__class__.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>, t.mean(), t.std()))</span>
<span id="cb50-8">    hy, hx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.histogram(t, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb50-9">    plt.plot(hx[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].detach(), hy.detach())</span>
<span id="cb50-10">    legends.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'layer </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>layer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>__class__<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb50-11">plt.legend(legends)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb50-12">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gradient distribution'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>layer 1 (      Tanh): mean +0.000010, std 4.205588e-04
layer 3 (      Tanh): mean -0.000003, std 3.991179e-04
layer 5 (      Tanh): mean +0.000003, std 3.743020e-04
layer 7 (      Tanh): mean +0.000015, std 3.290473e-04
layer 9 (      Tanh): mean -0.000014, std 3.054035e-04</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>Text(0.5, 1.0, 'gradient distribution')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-31-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="the-fully-linear-case-of-no-non-linearity" class="level2">
<h2 class="anchored" data-anchor-id="the-fully-linear-case-of-no-non-linearity">the fully linear case of no non-linearity</h2>
<p>Now imagine if we remove the <code>tanh</code> from all layers, the recommend gain now for Linear is <code>1</code>.</p>
<div id="94bc0c48" class="cell" data-execution_count="31">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb53-1">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb53-2">  Linear(n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tanh(),</span></span>
<span id="cb53-3">  Linear(           n_hidden, n_hidden), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tanh(),</span></span>
<span id="cb53-4">  Linear(           n_hidden, n_hidden), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tanh(),</span></span>
<span id="cb53-5">  Linear(           n_hidden, n_hidden), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tanh(),</span></span>
<span id="cb53-6">  Linear(           n_hidden, n_hidden), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tanh(),</span></span>
<span id="cb53-7">  Linear(           n_hidden, vocab_size),</span>
<span id="cb53-8">]</span></code></pre></div>
</details>
</div>
<p>But you’ll end up getting a pure linear network. No matter of how many Linear Layers you stacked up, it just the combination of all layers to a massive linear function <img src="https://latex.codecogs.com/png.latex?y%20=%20xA%5ET%20+%20b">, which will greatly limit the capacity of the neural nets.</p>
</section>
<section id="viz-3-parameter-activation-and-gradient-statistics" class="level2">
<h2 class="anchored" data-anchor-id="viz-3-parameter-activation-and-gradient-statistics">viz #3: parameter activation and gradient statistics</h2>
<p>We can also visualize the distribution of paramaters, here below only weight for simplicity (ignoring gamma, beta, etc…). We observed mean, std, and the grad to data ratio (to see how much the data will be updated).</p>
<p>Problem for the last layer is shown in code output below, the weights on last layer are 10 times bigger than previous ones, and the grad to data ratio is too high.</p>
<p>We can try run 1st 1000 training loops and this can be slight reduced, but since we are using a simple optimizer SGD rather than modern one like Adam, it is still problematic.</p>
<div id="3ffa4ea9" class="cell" data-execution_count="32">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualize histograms</span></span>
<span id="cb54-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># width and height of the plot</span></span>
<span id="cb54-3">legends <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb54-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(parameters):</span>
<span id="cb54-5">  t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.grad</span>
<span id="cb54-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> p.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb54-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weight </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%10s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | mean </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | std </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | grad:data ratio </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p.shape), t.mean(), t.std(), t.std() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p.std()))</span>
<span id="cb54-8">    hy, hx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.histogram(t, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb54-9">    plt.plot(hx[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].detach(), hy.detach())</span>
<span id="cb54-10">    legends.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb54-11">plt.legend(legends)</span>
<span id="cb54-12">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weights gradient distribution'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>weight   (27, 10) | mean -0.000031 | std 1.365078e-03 | grad:data ratio 1.364090e-03
weight  (30, 100) | mean -0.000049 | std 1.207430e-03 | grad:data ratio 3.871660e-03
weight (100, 100) | mean +0.000016 | std 1.096730e-03 | grad:data ratio 6.601988e-03
weight (100, 100) | mean -0.000010 | std 9.893572e-04 | grad:data ratio 5.893091e-03
weight (100, 100) | mean -0.000011 | std 8.623432e-04 | grad:data ratio 5.158123e-03
weight (100, 100) | mean -0.000004 | std 7.388576e-04 | grad:data ratio 4.415211e-03
weight  (100, 27) | mean -0.000000 | std 2.364824e-02 | grad:data ratio 2.328203e+00</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-33-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="viz-4-update-data-ratio-over-time" class="level2">
<h2 class="anchored" data-anchor-id="viz-4-update-data-ratio-over-time">viz #4: update data ratio over time</h2>
<p>The grad to data above ratio is at the end not really informative (only at one point in time), what matter is actual amount which we change the data in these tensors (over time). AK introduce a tracking list <code>ud</code> (update to data). This calculates the ratio between (std) of the grad to the data of parameters (and <code>log10()</code> for a nicer viz) <strong>without context of gradient</strong>.</p>
<div id="56b0c0dc" class="cell" data-execution_count="33">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb56-2">legends <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb56-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(parameters):</span>
<span id="cb56-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> p.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb56-5">    plt.plot([ud[j][i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ud))])</span>
<span id="cb56-6">    legends.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> i)</span>
<span id="cb56-7">plt.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ud)], [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># these ratios should be ~1e-3, indicate on plot</span></span>
<span id="cb56-8">plt.legend(legends)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
</div>
<p>Below is the visualization from data collected after 1000 training loops:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz4_1000times.png" class="img-fluid figure-img"></p>
<figcaption>Viz 4 1000</figcaption>
</figure>
</div>
<p>Recall what we did to the last layer, avoiding over confidence, so the pink line looks different among others. In general, the learning process are good, if we change the learning rate to <code>0.0001</code>, the chart looks much worse.</p>
<p>Below are viz 1 after 1000 training loops:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz1_1000times.png" class="img-fluid figure-img"></p>
<figcaption>Viz 1 1000</figcaption>
</figure>
</div>
<p>and viz 2:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz2_1000times.png" class="img-fluid figure-img"></p>
<figcaption>Viz 2 1000</figcaption>
</figure>
</div>
<p>and viz 3:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz3_1000times.png" class="img-fluid figure-img"></p>
<figcaption>Viz 3 1000</figcaption>
</figure>
</div>
<p>Pretty decent till now. Let’s bring the BatchNorm back.</p>
</section>
<section id="bringing-back-batch-norm-looking-at-the-visualizations" class="level2">
<h2 class="anchored" data-anchor-id="bringing-back-batch-norm-looking-at-the-visualizations">bringing back batch norm, looking at the visualizations</h2>
<p>We re-define the layers, and change <code>gamma</code> in last layer under no gradient instead of <code>weight</code>. We also dont want the “manual normalization” fan-in, and the gain <code>5/3</code> as well:</p>
<div id="840692e8" class="cell" data-execution_count="34">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb57-2">  Linear(n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb57-3">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb57-4">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb57-5">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb57-6">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb57-7">  Linear(           n_hidden, vocab_size, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(vocab_size),</span>
<span id="cb57-8">]</span></code></pre></div>
</details>
</div>
</section>
<section id="summary-of-the-lecture-for-real-this-time" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-the-lecture-for-real-this-time">summary of the lecture for real this time</h2>
<ol type="1">
<li>Intruduction of Batch Normalization - the 1st one of modern innovation to stablize Deep NN training;</li>
<li>PyTorch-ifying code;</li>
<li>Introduction to some diagnostic tools that we can use to verify the network is in good state dynamically.</li>
</ol>
<p>What he did not try to improve here is the loss of the network. It’s now somehow bottleneck not by the Optimization, but by the Context Length he suspect.</p>
<blockquote class="blockquote">
<p>Training Neural Network is like balancing a pencil on a finger.</p>
</blockquote>
<p>Final network architecture and training:</p>
<div id="0b154986" class="cell" data-execution_count="35">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BatchNorm1D and Tanh are the same</span></span>
<span id="cb58-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Linear:</span>
<span id="cb58-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb58-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Simplifying Pytorch Linear Layer: https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear</span></span>
<span id="cb58-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb58-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, fan_in, fan_out, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb58-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((fan_in, fan_out), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># / fan_in**0.5</span></span>
<span id="cb58-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(fan_out) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> bias <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb58-9"></span>
<span id="cb58-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb58-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight</span>
<span id="cb58-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb58-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias</span>
<span id="cb58-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb58-15"></span>
<span id="cb58-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb58-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ([] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias])</span>
<span id="cb58-18"></span>
<span id="cb58-19">n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the dimensionality of the character embedding vectors</span></span>
<span id="cb58-20">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of neurons in the hidden layer of the MLP</span></span>
<span id="cb58-21">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproducibility</span></span>
<span id="cb58-22">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_embd),            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb58-23">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb58-24">  Linear(n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb58-25">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb58-26">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb58-27">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb58-28">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb58-29">  Linear(           n_hidden, vocab_size, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(vocab_size),</span>
<span id="cb58-30">]</span>
<span id="cb58-31"></span>
<span id="cb58-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb58-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># last layer: make less confident</span></span>
<span id="cb58-34">    layers[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb58-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all other layers: apply gain</span></span>
<span id="cb58-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb58-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(layer, Linear):</span>
<span id="cb58-38">            layer.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#5/3</span></span>
<span id="cb58-39"></span>
<span id="cb58-40">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [p <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layer.parameters()]</span>
<span id="cb58-41"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of parameters in total</span></span>
<span id="cb58-42"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb58-43">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb58-44"></span>
<span id="cb58-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same optimization as last time</span></span>
<span id="cb58-46">max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5_000</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#200_000</span></span>
<span id="cb58-47">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb58-48">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb58-49">ud <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb58-50"></span>
<span id="cb58-51"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_steps):</span>
<span id="cb58-52"></span>
<span id="cb58-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct</span></span>
<span id="cb58-54">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb58-55">    Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X,Y</span></span>
<span id="cb58-56"></span>
<span id="cb58-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb58-58">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors</span></span>
<span id="cb58-59">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb58-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers:</span>
<span id="cb58-61">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer(x)</span>
<span id="cb58-62">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(x, Yb) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb58-63"></span>
<span id="cb58-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb58-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers:</span>
<span id="cb58-66">        layer.out.retain_grad() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AFTER_DEBUG: would take out retain_graph</span></span>
<span id="cb58-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb58-68">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb58-69">    loss.backward()</span>
<span id="cb58-70"></span>
<span id="cb58-71">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb58-72">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150000</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step learning rate decay</span></span>
<span id="cb58-73">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb58-74">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb58-75"></span>
<span id="cb58-76">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb58-77">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print every once in a while</span></span>
<span id="cb58-78">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb58-79">    lossi.append(loss.log10().item())</span>
<span id="cb58-80">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb58-81">        ud.append([((lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p.grad).std() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p.data.std()).log10().item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters])</span>
<span id="cb58-82"></span>
<span id="cb58-83">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># break</span></span>
<span id="cb58-84">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if i &gt;= 1000:</span></span>
<span id="cb58-85">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     break # AFTER_DEBUG: would take out obviously to run full optimization</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>47024
      0/   5000: 3.2870</code></pre>
</div>
</div>
<p>Final visualization:</p>
<p>Viz 1:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz1_final.png" class="img-fluid figure-img"></p>
<figcaption>Viz 1 final</figcaption>
</figure>
</div>
<p>Viz 2:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz2_final.png" class="img-fluid figure-img"></p>
<figcaption>Viz 2 final</figcaption>
</figure>
</div>
<p>Viz 3:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz3_final.png" class="img-fluid figure-img"></p>
<figcaption>Viz 3 final</figcaption>
</figure>
</div>
<p>Viz 4:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz4_final.png" class="img-fluid figure-img"></p>
<figcaption>Viz 4 final</figcaption>
</figure>
</div>
<p>The final loss on train/val:</p>
<div id="36ee7e7f" class="cell" data-execution_count="36">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this decorator disables gradient tracking</span></span>
<span id="cb60-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> split_loss(split):</span>
<span id="cb60-3">  x,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb60-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>: (Xtr, Ytr),</span>
<span id="cb60-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: (Xdev, Ydev),</span>
<span id="cb60-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: (Xte, Yte),</span>
<span id="cb60-7">  }[split]</span>
<span id="cb60-8">  emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[x] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, block_size, n_embd)</span></span>
<span id="cb60-9">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concat into (N, block_size * n_embd)</span></span>
<span id="cb60-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers:</span>
<span id="cb60-11">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer(x)</span>
<span id="cb60-12">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(x, y)</span>
<span id="cb60-13">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(split, loss.item())</span>
<span id="cb60-14"></span>
<span id="cb60-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put layers into eval mode</span></span>
<span id="cb60-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers:</span>
<span id="cb60-17">  layer.training <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb60-18">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span>
<span id="cb60-19">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>train 2.4574997425079346
val 2.453139066696167</code></pre>
</div>
</div>
<p>Sample from the model:</p>
<div id="461a9645" class="cell" data-execution_count="37">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample from the model</span></span>
<span id="cb62-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb62-3"></span>
<span id="cb62-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb62-5"></span>
<span id="cb62-6">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb62-7">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize with all ...</span></span>
<span id="cb62-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb62-9">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass the neural net</span></span>
<span id="cb62-10">      emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[torch.tensor([context])] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1,block_size,n_embd)</span></span>
<span id="cb62-11">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb62-12">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers:</span>
<span id="cb62-13">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer(x)</span>
<span id="cb62-14">      logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb62-15">      probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb62-16">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample from the distribution</span></span>
<span id="cb62-17">      ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(probs, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb62-18">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shift the context window and track the samples</span></span>
<span id="cb62-19">      context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb62-20">      out.append(ix)</span>
<span id="cb62-21">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if we sample the special '.' token, break</span></span>
<span id="cb62-22">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb62-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb62-24"></span>
<span id="cb62-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(itos[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> out)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># decode and print the generated word</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>eria.
kmyanliee.
mad.
ryal.
rethasiendrlen.
adered.
elii.
emy.
jearekenneananareelyniohlkaann.
shdbvrgnhi.
jest.
jair.
jelelxnthaoriu.
maycdariylyne.
ehs.
kaejahsanyah.
hal.
salyansuh.
zajelvau.
ere.</code></pre>
</div>
</div>
<p>Happy learning!</p>
</section>
<section id="exercises" class="level2">
<h2 class="anchored" data-anchor-id="exercises">Exercises:</h2>
<ul>
<li>E01: I did not get around to seeing what happens when you initialize all weights and biases to zero. Try this and train the neural net. You might think either that 1) the network trains just fine or 2) the network doesn’t train at all, but actually it is 3) the network trains but only partially, and achieves a pretty bad final performance. Inspect the gradients and activations to figure out what is happening and why the network is only partially training, and what part is being trained exactly.</li>
<li>E02: BatchNorm, unlike other normalization layers like LayerNorm/GroupNorm etc. has the big advantage that after training, the batchnorm gamma/beta can be “folded into” the weights of the preceeding Linear layers, effectively erasing the need to forward it at test time. Set up a small 3-layer MLP with batchnorms, train the network, then “fold” the batchnorm gamma/beta into the preceeding Linear layer’s W,b by creating a new W2, b2 and erasing the batch norm. Verify that this gives the same forward pass during inference. i.e.&nbsp;we see that the batchnorm is there just for stabilizing the training, and can be thrown out after training is done! pretty cool.</li>
</ul>
</section>
</section>
<section id="resources" class="level1">
<h1>resources:</h1>
<ol type="1">
<li>other people learn from AK like me: <a href="https://bedirtapkan.com/posts/blog_posts/karpathy_3_makemore_activations/" class="uri">https://bedirtapkan.com/posts/blog_posts/karpathy_3_makemore_activations/</a>; <a href="https://skeptric.com/index.html#category=makemore" class="uri">https://skeptric.com/index.html#category=makemore</a> - a replicate (?) with more OOPs on another dataset;</li>
<li>some good papers recommended by Andrej:
<ul>
<li>“Kaiming init” paper: <a href="https://arxiv.org/abs/1502.01852" class="uri">https://arxiv.org/abs/1502.01852</a>;</li>
<li>BatchNorm paper: <a href="https://arxiv.org/abs/1502.03167" class="uri">https://arxiv.org/abs/1502.03167</a>;</li>
<li>Bengio et al.&nbsp;2003 MLP language model paper (pdf): <a href="https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf" class="uri">https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf</a>;</li>
<li>Good paper illustrating some of the problems with batchnorm in practice: <a href="https://arxiv.org/abs/2105.07576" class="uri">https://arxiv.org/abs/2105.07576</a>.</li>
</ul></li>
<li>Notebook: <a href="https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part3_bn.ipynb" class="uri">https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part3_bn.ipynb</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>til</category>
  <category>python</category>
  <category>andrej karpathy</category>
  <category>nn-z2h</category>
  <category>neural networks</category>
  <guid>https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/</guid>
  <pubDate>Mon, 25 Nov 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/resnet50.png" medium="image" type="image/png" height="83" width="144"/>
</item>
<item>
  <title>NN-Z2H Lesson 3: Building makemore part 2 - MLP</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important callout-titled" title="This is not orginal content!">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This is not orginal content!
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is my study notes / codes along with Andrej Karpathy’s “<a href="https://www.youtube.com/watch?v=VMj-3S1tku0&amp;list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ">Neural Networks: Zero to Hero</a>” series.</p>
<p><em>Edit 1st June, 25</em>: I changed the loop to 5k only, for the shake of time saving when re-rendering this post!</p>
</div>
</div>
<p>In the previous lecture, we built a simple <code>bigram</code> character-level language model, using 2 different approaches that are (1) count, and (2) 1 layer neural network. They produced the same (and both poor - since the context is 1 character only) result but the neural network option offers more flexibility so that we can complexify our model to get better performance.</p>
<p>In this lecture we are going to implement 20-years ago neural probabilistic language model by <em>Bengio et al.&nbsp;(2003)</em>.</p>
<section id="part-1-intro-to-mlp" class="level1">
<h1>PART 1: intro to MLP</h1>
<section id="bengio-et-al.-2003-mlp-language-model-paper-walkthrough" class="level2">
<h2 class="anchored" data-anchor-id="bengio-et-al.-2003-mlp-language-model-paper-walkthrough">Bengio et al.&nbsp;2003 (MLP language model) paper walkthrough</h2>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">Summary</h3>
<p><strong>Problem Statement</strong>:</p>
<ul>
<li>Traditional n-gram language models suffer from the <em>curse of dimensionality</em>: they can’t effectively generalize to word sequences not seen in training data;</li>
<li>The core issue is treating words as atomic units with no <em>inherent similarity</em> to each other;</li>
<li>For example, if we’ve seen “dog is eating” in training but never “cat is eating”, n-gram models can’t leverage the similarity between “dog” and “cat”;</li>
<li>This leads to poor probability estimates for rare or unseen word sequences.</li>
</ul>
<p><strong>Solution</strong>:</p>
<ul>
<li>Learn a <em>distributed representation</em> (embedding) for each word in a continuous vector space where similar words are close to each other;</li>
<li>Use a neural network architecture with:
<ul>
<li>Input layer: concatenated embeddings of n-1 previous words;</li>
<li>Hidden layer: dense neural network with <code>tanh</code> activation;</li>
<li>Output layer: softmax over entire vocabulary to predict next word probability.</li>
</ul></li>
</ul>
<p><strong>The model simultaneously learns</strong>:</p>
<ul>
<li>Word feature vectors (embeddings) that capture <em>semantic/syntactic word similarities</em>;</li>
<li>Neural network parameters that combine these features to estimate probability distributions.</li>
</ul>
<p><strong>Key advantages</strong>:</p>
<ul>
<li>Words with similar meanings get similar feature vectors, enabling better <em>generalization</em>;</li>
<li>The probability function is smooth with respect to word embeddings, so similar words yield <em>similar predictions</em>;</li>
<li>Can generalize to <em>unseen sequences</em> by leveraging learned word similarities.</li>
</ul>
</section>
<section id="methodology" class="level3">
<h3 class="anchored" data-anchor-id="methodology">Methodology:</h3>
<ul>
<li><p>Traditional Problem:</p>
<ul>
<li>In n-gram models, each word sequence of length n is a separate parameter;</li>
<li>For vocabulary size <img src="https://latex.codecogs.com/png.latex?%7CV%7C">, need <img src="https://latex.codecogs.com/png.latex?%7CV%7C%5En"> parameters;</li>
<li>Most sequences never appear in training, leading to poor generalization;</li>
</ul></li>
<li><p>Solution via <strong>Distributed Representation</strong>:</p>
<ul>
<li>Each word mapped to a dense vector in <img src="https://latex.codecogs.com/png.latex?R%5Em"> (typically m=50-100);</li>
<li>Similar words get similar vectors through training;</li>
<li>Probability function is smooth w.r.t these vectors;</li>
<li>Key benefit: If “dog” and “cat” have similar vectors, model can generalize from “dog is eating” to “cat is eating”;</li>
<li>Number of parameters reduces to <img src="https://latex.codecogs.com/png.latex?O(%7CV%7C%C3%97m%20+%20m%C3%97h%20+%20h%C3%97%7CV%7C)">, where <img src="https://latex.codecogs.com/png.latex?h"> is hidden layer size;</li>
<li>This is much smaller than <img src="https://latex.codecogs.com/png.latex?%7CV%7C%5En"> and allows better generalization;</li>
</ul></li>
</ul>
</section>
<section id="neural-architecture" class="level3">
<h3 class="anchored" data-anchor-id="neural-architecture">Neural architecture:</h3>
<p><strong>Input Layer</strong>:</p>
<ul>
<li>Takes <img src="https://latex.codecogs.com/png.latex?n-1"> previous words (context window);</li>
<li>Each word i mapped to vector <img src="https://latex.codecogs.com/png.latex?C(i)%20%E2%88%88%20R%5Em"> via lookup table;</li>
<li>Concatenates these vectors: <img src="https://latex.codecogs.com/png.latex?x%20=%20%5BC(w%E2%82%9C%E2%82%8B%E2%82%99%E2%82%8A%E2%82%81),%20...,%20C(w%E2%82%9C%E2%82%8B%E2%82%81)%5D">;</li>
<li><img src="https://latex.codecogs.com/png.latex?x"> dimension is <img src="https://latex.codecogs.com/png.latex?(n-1)%C3%97m">;</li>
</ul>
<p><strong>Hidden Layer</strong>:</p>
<ul>
<li>Dense layer with tanh activation;</li>
<li>Computation: <img src="https://latex.codecogs.com/png.latex?h%20=%20tanh(d%20+%20Hx)">;</li>
<li><img src="https://latex.codecogs.com/png.latex?H"> is weight matrix, <img src="https://latex.codecogs.com/png.latex?d"> is bias vector;</li>
<li>Maps concatenated context to hidden representation;</li>
</ul>
<p><strong>Output Layer</strong>:</p>
<ul>
<li>Computes probability distribution over all words;</li>
<li><img src="https://latex.codecogs.com/png.latex?y%20=%20b%20+%20Wx%20+%20Uh">;</li>
<li>Softmax activation: <img src="https://latex.codecogs.com/png.latex?P(w%E2%82%9C%7Ccontext)%20=%20exp(y%E1%B5%A2)/%CE%A3%E2%B1%BCexp(y%E2%B1%BC)">;</li>
<li><img src="https://latex.codecogs.com/png.latex?W"> provides “shortcut” connections from input to output;</li>
<li>Direct connection helps learn simpler patterns;</li>
</ul>
<p><strong>Training</strong>:</p>
<ul>
<li>Maximizes log-likelihood of training data;</li>
<li>Uses stochastic gradient descent;</li>
<li>Learns both word vectors <img src="https://latex.codecogs.com/png.latex?C(i)"> and neural network parameters <img src="https://latex.codecogs.com/png.latex?(H,%20d,%20W,%20U,%20b)">;</li>
<li>Word vectors capture similarities as they help predict similar contexts;</li>
<li>Can initialize word vectors randomly or with pretrained vectors.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/NLM_Bengio_etal.png" class="img-fluid figure-img"></p>
<figcaption>Neural Language Model proposed by (Bengio et al., 2003). C(i) is the i th word embedding.</figcaption>
</figure>
</div>
</section>
</section>
<section id="re-building-our-training-dataset" class="level2">
<h2 class="anchored" data-anchor-id="re-building-our-training-dataset">(re-)building our training dataset</h2>
<p>Loading library, reading data, building dictionary:</p>
<div id="fdd3087a" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</details>
</div>
<div id="e2965745" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"></span>
<span id="cb2-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/karpathy/makemore/refs/heads/master/names.txt"</span></span>
<span id="cb2-4">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>).iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tolist()</span>
<span id="cb2-5">words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>['emma', 'olivia', 'ava', 'isabella', 'sophia', 'charlotte', 'mia', 'amelia']</code></pre>
</div>
</div>
<div id="b0c6b45d" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>32033</code></pre>
</div>
</div>
<div id="ca40b4e4" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the vocabulary of characters and mapping to/from integer</span></span>
<span id="cb6-2">chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(words))))</span>
<span id="cb6-3">stoi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {s:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chars)}</span>
<span id="cb6-4">stoi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-5"></span>
<span id="cb6-6">itos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i: s <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s, i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> stoi.items()}</span>
<span id="cb6-7">itos</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>{1: 'a',
 2: 'b',
 3: 'c',
 4: 'd',
 5: 'e',
 6: 'f',
 7: 'g',
 8: 'h',
 9: 'i',
 10: 'j',
 11: 'k',
 12: 'l',
 13: 'm',
 14: 'n',
 15: 'o',
 16: 'p',
 17: 'q',
 18: 'r',
 19: 's',
 20: 't',
 21: 'u',
 22: 'v',
 23: 'w',
 24: 'x',
 25: 'y',
 26: 'z',
 0: '.'}</code></pre>
</div>
</div>
<p>Building the dataset:</p>
<div id="c2d0e12d" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the context length: how many characters do we take to predict the next one?</span></span>
<span id="cb8-2">X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]:</span>
<span id="cb8-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(w)</span>
<span id="cb8-6">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 so context will be padded by '.'</span></span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb8-8">        ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb8-9">        X.append(context)</span>
<span id="cb8-10">        Y.append(ix)</span>
<span id="cb8-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(itos[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> context), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-----&gt;'</span>, itos[ix] )</span>
<span id="cb8-12">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rolling to the next one</span></span>
<span id="cb8-13"></span>
<span id="cb8-14">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb8-15">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>emma
... -----&gt; e
..e -----&gt; m
.em -----&gt; m
emm -----&gt; a
mma -----&gt; .
olivia
... -----&gt; o
..o -----&gt; l
.ol -----&gt; i
oli -----&gt; v
liv -----&gt; i
ivi -----&gt; a
via -----&gt; .
ava
... -----&gt; a
..a -----&gt; v
.av -----&gt; a
ava -----&gt; .
isabella
... -----&gt; i
..i -----&gt; s
.is -----&gt; a
isa -----&gt; b
sab -----&gt; e
abe -----&gt; l
bel -----&gt; l
ell -----&gt; a
lla -----&gt; .
sophia
... -----&gt; s
..s -----&gt; o
.so -----&gt; p
sop -----&gt; h
oph -----&gt; i
phi -----&gt; a
hia -----&gt; .</code></pre>
</div>
</div>
<div id="f58ee224" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">X.shape, X.dtype, Y.shape, Y.dtype</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>(torch.Size([32, 3]), torch.int64, torch.Size([32]), torch.int64)</code></pre>
</div>
</div>
</section>
<section id="implementing-the-embedding-lookup-table" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-embedding-lookup-table">implementing the embedding lookup table</h2>
<p>In the paper they cram 17k word into as-low-as-possible 30 dimensions space, for our data, we just cram words into 2D space.</p>
<div id="42d14a1a" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
</details>
</div>
<p>We can access the element of <code>torch.tensor</code> by:</p>
<div id="5acc903f" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># can be integer, list [5, 6, 7], or torch.tensor([5,6,7])</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; tensor([1.0825, 0.2010])</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or</span></span>
<span id="cb13-5"></span>
<span id="cb13-6">F.one_hot(torch.tensor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C</span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># produce identical result, remember torch.tensor() infer long dtype int64, so we need to cast to float</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>tensor([0.8894, 1.9139])</code></pre>
</div>
</div>
<p>…but in this lecture accessing by <code>C[5]</code> would be sufficient. We can even access using a more than 1 dimension tensor:</p>
<div id="489e2022" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(C[X].shape)</span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># integer 1 for 13rd index of 2nd dimension</span></span>
<span id="cb15-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(C[X][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will be the embedding of that element</span></span>
<span id="cb15-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># so C[X][13,2] = C[1]</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([32, 3, 2])
tensor(1)
tensor([ 0.3933, -0.0305])
tensor([ 0.3933, -0.0305])</code></pre>
</div>
</div>
<p>PyTorch is great for embedding words:</p>
<div id="6a42dac6" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X]</span>
<span id="cb17-2">emb.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>torch.Size([32, 3, 2])</code></pre>
</div>
</div>
<p>We’ve compeleted the first layer with <code>context</code> and lookup table!</p>
</section>
<section id="implementing-the-hidden-layer-internals-of-torch.tensor-storage-views" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-hidden-layer-internals-of-torch.tensor-storage-views">implementing the hidden layer + internals of <code>torch.Tensor</code>: <code>storage</code>, <code>views</code></h2>
<div id="f9346419" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input of tanh layer will be 6 (3 words in context x 2 dimensions)</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and the number or neurons is up to us - let's set it 100</span></span>
<span id="cb19-3">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb19-4">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
</details>
</div>
<p>Now we need to do something like <code>emb @ W1 + b1</code>, but <code>emb.shape</code> is <code>[32, 3, 2]</code> and <code>W1.shape</code> is <code>[6, 100]</code>. We need to somehow concatnate/transform:</p>
<div id="c18f9ed8" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># emb[:, 0, :] is tensor for each input in the 3-words context, shape is [32, 2]</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cat 3 of them using the 2nd dimension (index 1) -&gt; so we set dim = 1</span></span>
<span id="cb20-3">torch.cat([emb[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :], emb[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :], emb[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, :]], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>torch.Size([32, 6])</code></pre>
</div>
</div>
<p>However this code does not change dynamically when we change the block size. We will be using <code>torch.unbind()</code></p>
<div id="c5da2fd1" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is good!</span></span>
<span id="cb22-2">torch.cat(torch.unbind(emb, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).shape</span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new memory for storage is created, so it is not efficient</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>torch.Size([32, 6])</code></pre>
</div>
</div>
<p>This works, but we have a better and more efficient way to do this. Since:</p>
<ul>
<li>every <code>torch.Tensor</code> have <code>.storage()</code> which is one-dimensional vector tensor;</li>
<li>when we call <code>.view()</code>, we instruct how this vector tensor is interpreted;</li>
<li>no memory is being changed/copied/moved/or created. the storage is identical.</li>
</ul>
<p>Readmore: <a href="http://blog.ezyang.com/2019/05/pytorch-internals/" class="uri">http://blog.ezyang.com/2019/05/pytorch-internals/</a></p>
<p>So this hidden layer can be declared:</p>
<div id="073fb56b" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instead or 32 we can write emb.shape[1], or -1 (whatever fitted)</span></span>
<span id="cb24-2">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb24-3">h.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>torch.Size([32, 100])</code></pre>
</div>
</div>
<p>Notice that in the final operation, <code>b1</code> will be broadcasted.</p>
</section>
<section id="implementing-the-output-layer" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-output-layer">implementing the output layer</h2>
<div id="2fe17834" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>))</span>
<span id="cb26-2">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>)</span></code></pre></div>
</details>
</div>
<p>In Deep Learning, people use <code>logits</code> for what raw output that range from negative inf to positive inf.</p>
<div id="9a5f0b69" class="cell" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span></code></pre></div>
</details>
</div>
<div id="3d055c67" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">logits.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>torch.Size([32, 27])</code></pre>
</div>
</div>
<p>Now we need to exponentiate it and get the probability.</p>
<div id="cdee3279" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp()</span></code></pre></div>
</details>
</div>
<div id="f50dcece" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<div id="571595fd" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1">probs.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>torch.Size([32, 27])</code></pre>
</div>
</div>
<p>Every row of <code>probs</code> has sum of 1.</p>
<div id="96c01118" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1">probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>tensor(1.)</code></pre>
</div>
</div>
<p>And this is the <code>probs</code> of each ground true <code>Y</code> in current output of the neural nets:</p>
<div id="1a92c30a" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">probs[torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>), Y]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>tensor([4.7061e-24, 3.7041e-35, 4.8793e-07, 7.2092e-24, 3.7791e-13, 1.0648e-35,
        6.9894e-13, 3.9922e-36, 5.4665e-26, 4.1032e-37, 1.1009e-11, 1.6808e-12,
        3.1990e-13, 1.2050e-29, 3.0691e-12, 7.4121e-09, 1.7415e-12, 5.6369e-30,
        1.2058e-32, 6.7942e-15, 1.8272e-36, 2.1324e-16, 0.0000e+00, 9.5874e-30,
        8.1249e-17, 1.0161e-18, 0.0000e+00, 3.1831e-13, 0.0000e+00, 6.8864e-19,
        2.5463e-16, 5.0601e-13])</code></pre>
</div>
</div>
<p>Result is not good as we’ve not trained the network yet!</p>
</section>
<section id="implementing-the-negative-log-likelihood-loss" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-negative-log-likelihood-loss">implementing the negative log likelihood loss</h2>
<p>We define the negative log likelihood as:</p>
<div id="e8fb2462" class="cell" data-execution_count="23">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> probs[torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>), Y].log().mean()</span>
<span id="cb38-2">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>tensor(inf)</code></pre>
</div>
</div>
</section>
<section id="summary-of-the-full-network" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-the-full-network">summary of the full network</h2>
<p>Dataset:</p>
<div id="6ed72068" class="cell" data-execution_count="24">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1">X.shape, Y.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>(torch.Size([32, 3]), torch.Size([32]))</code></pre>
</div>
</div>
<p>Neural network layers:</p>
<div id="cfe31779" class="cell" data-execution_count="25">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb42-2">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb42-3">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb42-4">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb42-5">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb42-6">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb42-7"></span>
<span id="cb42-8">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span></code></pre></div>
</details>
</div>
<p>Size of the network:</p>
<div id="06c91191" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>3481</code></pre>
</div>
</div>
<p>Constructing forward pass:</p>
<div id="dde18326" class="cell" data-execution_count="27">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)</span></span>
<span id="cb45-2">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb45-3">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb45-4">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp()</span>
<span id="cb45-5">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb45-6">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> probs[torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>), Y].log().mean()</span>
<span id="cb45-7">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>tensor(17.7697)</code></pre>
</div>
</div>
</section>
</section>
<section id="part-2-intro-to-many-basics-of-machine-learning" class="level1">
<h1>PART 2: intro to many basics of machine learning</h1>
<section id="introducing-f.cross_entropy-and-why" class="level2">
<h2 class="anchored" data-anchor-id="introducing-f.cross_entropy-and-why">introducing <code>F.cross_entropy</code> and why</h2>
<p>We re-define loss:</p>
<div id="2bc16c81" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb47-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y)</span>
<span id="cb47-2">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>tensor(17.7697)</code></pre>
</div>
</div>
<p>Why?</p>
<ul>
<li>Pytorch will create more intermediate tensor for every assignment: <code>counts</code>, <code>probs</code> -&gt; more memory;</li>
<li>Backward pass will be more optimized, because the expressions are much analytically and mathematically interpreted;</li>
<li>Cross entropy can be significantly &amp; numerically well behaved (for eg when we exponentiate a large positive number we got inf, PyTorch cross entropy will calculate the max of set and subtract it - which will not impact the exp result)</li>
</ul>
</section>
<section id="implementing-the-training-loop-overfitting-one-batch" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-training-loop-overfitting-one-batch">implementing the training loop, overfitting one batch</h2>
<p>So the forward pass, backward pass, and update loop will be implemented as below:</p>
<div id="0233325e" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb49-2">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</details>
</div>
<div id="d1dfc450" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb50-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb50-3">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)</span></span>
<span id="cb50-4">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb50-5">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb50-6">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y)</span>
<span id="cb50-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss.item())</span>
<span id="cb50-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb50-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb50-10">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb50-11">    loss.backward()</span>
<span id="cb50-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb50-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb50-14">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb50-15"></span>
<span id="cb50-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss.item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>17.76971435546875
13.656400680541992
11.298768997192383
9.452457427978516
7.984262466430664
6.891322135925293
6.100014686584473
5.452037334442139
4.8981523513793945
4.414664268493652
4.414664268493652</code></pre>
</div>
</div>
<p>We are fitting 32 examples to a neural nets of 3481 params, so it’s super easy to be overfitting. We got a low final loss, but it would never be 0, because the output can varry for the same input, for eg, <code>...</code>.</p>
<div id="5ad23bfa" class="cell" data-execution_count="31">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1">logits.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>torch.return_types.max(
values=tensor([10.7865, 12.2558, 17.3982, 13.2739, 10.6965, 10.7865,  9.5145,  9.0495,
        14.0280, 11.8378,  9.9038, 15.4187, 10.7865, 10.1476,  9.8372, 11.7660,
        10.7865, 10.0029,  9.2940,  9.6824, 11.4241,  9.4885,  8.1164,  9.5176,
        12.6383, 10.7865, 10.6021, 11.0822,  6.3617, 17.3157, 12.4544,  8.1669],
       grad_fn=&lt;MaxBackward0&gt;),
indices=tensor([ 1,  8,  9,  0, 15,  1, 17,  2,  9,  9,  2,  0,  1, 15,  1,  0,  1, 19,
         1,  1, 16, 10, 26,  9,  0,  1, 15, 16,  3,  9, 19,  1]))</code></pre>
</div>
</div>
</section>
<section id="training-on-the-full-dataset-minibatches" class="level2">
<h2 class="anchored" data-anchor-id="training-on-the-full-dataset-minibatches">training on the full dataset, minibatches</h2>
<p>We can deploy our code to all the dataset, un-fold the below code block to see full code.</p>
<div id="abf23143" class="cell" data-execution_count="32">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb54-2">X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb54-3"></span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dataset</span></span>
<span id="cb54-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words:</span>
<span id="cb54-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(w)</span></span>
<span id="cb54-7">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size</span>
<span id="cb54-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb54-9">        ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb54-10">        X.append(context)</span>
<span id="cb54-11">        Y.append(ix)</span>
<span id="cb54-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(''.join(itos[i] for i in context), '-----&gt;', itos[ix] )</span></span>
<span id="cb54-13">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rolling to the next one</span></span>
<span id="cb54-14"></span>
<span id="cb54-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input and ground true</span></span>
<span id="cb54-16">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb54-17">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span>
<span id="cb54-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data size"</span>, X.shape, Y.shape)</span>
<span id="cb54-19"></span>
<span id="cb54-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table</span></span>
<span id="cb54-21">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb54-22">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb54-23">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)</span></span>
<span id="cb54-24"></span>
<span id="cb54-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh</span></span>
<span id="cb54-26">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb54-27">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb54-28">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb54-29"></span>
<span id="cb54-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb54-31">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb54-32">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb54-33">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb54-34">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y)</span>
<span id="cb54-35"></span>
<span id="cb54-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params</span></span>
<span id="cb54-37">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span>
<span id="cb54-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of params: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters))</span>
<span id="cb54-39"></span>
<span id="cb54-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb54-41"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb54-42">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Data size torch.Size([228146, 3]) torch.Size([228146])
No of params:  3481</code></pre>
</div>
</div>
<p>We notice that it takes a bit long time for each training in the loop. In practice, we will perform the forward/backward passes and update parameters for a small batch of the dataset. The minibatch construction is added/modified for lines of code with <code>#👈</code>.</p>
<p>Read more: <a href="https://nttuan8.com/bai-10-cac-ky-thuat-co-ban-trong-deep-learning/" class="uri">https://nttuan8.com/bai-10-cac-ky-thuat-co-ban-trong-deep-learning/</a></p>
<div id="73e0e9b7" class="cell" data-execution_count="33">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training</span></span>
<span id="cb56-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>):</span>
<span id="cb56-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct                                           #👈</span></span>
<span id="cb56-4">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,))                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#👈</span></span>
<span id="cb56-5"></span>
<span id="cb56-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb56-7">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X[ix]] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)                                     #👈</span></span>
<span id="cb56-8">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb56-9">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb56-10">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y[ix])                           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#👈</span></span>
<span id="cb56-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9990</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"___after running </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> time: "</span>, loss.item())</span>
<span id="cb56-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb56-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb56-14">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb56-15">    loss.backward()</span>
<span id="cb56-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb56-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb56-18">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb56-19"></span>
<span id="cb56-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"final minibatch loss: "</span>, loss.item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>___after running 9990 time:  2.3651716709136963
___after running 9991 time:  2.547208786010742
___after running 9992 time:  2.886200189590454
___after running 9993 time:  2.6920998096466064
___after running 9994 time:  2.448667526245117
___after running 9995 time:  2.080944299697876
___after running 9996 time:  2.4017341136932373
___after running 9997 time:  2.379610061645508
___after running 9998 time:  2.3751413822174072
___after running 9999 time:  2.551131010055542
final minibatch loss:  2.551131010055542</code></pre>
</div>
</div>
<p>The <code>loss</code> decrease much much better, although the direction of gradient might be not correct direction. But it is good enough for an approximation. Notice the loss for a minibatch is not the loss of whole dataset.</p>
<div id="74c06f3e" class="cell" data-execution_count="34">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb58-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)</span></span>
<span id="cb58-2">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb58-3">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb58-4">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y)</span>
<span id="cb58-5">loss.item()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>2.4879841804504395</code></pre>
</div>
</div>
<p>We archived 2.39 loss for final minibatch and 2.5 on overall network.</p>
</section>
<section id="finding-a-good-initial-learning-rate" class="level2">
<h2 class="anchored" data-anchor-id="finding-a-good-initial-learning-rate">finding a good initial learning rate</h2>
<p>Now we’re continuing the optimization, let’s focus on how much we update the data from the gradient <code>p.data += -0.1 * p.grad</code>. We do not know if we step too little or too much.</p>
<p>We can create 1000 learning rates to use along with the training loop and see which one offers more stable convergence.</p>
<div id="42082ac7" class="cell" data-execution_count="35">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1">lre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb60-2">lrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>lre</span></code></pre></div>
</details>
</div>
<p>Reset the code:</p>
<div id="6a80f664" class="cell" data-execution_count="36">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb61-1">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb61-2">X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb61-3"></span>
<span id="cb61-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dataset</span></span>
<span id="cb61-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words:</span>
<span id="cb61-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(w)</span></span>
<span id="cb61-7">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size</span>
<span id="cb61-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb61-9">        ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb61-10">        X.append(context)</span>
<span id="cb61-11">        Y.append(ix)</span>
<span id="cb61-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(''.join(itos[i] for i in context), '-----&gt;', itos[ix] )</span></span>
<span id="cb61-13">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rolling to the next one</span></span>
<span id="cb61-14"></span>
<span id="cb61-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input and ground true</span></span>
<span id="cb61-16">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb61-17">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span>
<span id="cb61-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data size"</span>, X.shape, Y.shape)</span>
<span id="cb61-19"></span>
<span id="cb61-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table</span></span>
<span id="cb61-21">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb61-22">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb61-23">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)</span></span>
<span id="cb61-24"></span>
<span id="cb61-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh</span></span>
<span id="cb61-26">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb61-27">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb61-28">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb61-29"></span>
<span id="cb61-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb61-31">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb61-32">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb61-33">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb61-34">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y)</span>
<span id="cb61-35"></span>
<span id="cb61-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params</span></span>
<span id="cb61-37">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span>
<span id="cb61-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of params: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters))</span>
<span id="cb61-39"></span>
<span id="cb61-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb61-41"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb61-42">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Data size torch.Size([228146, 3]) torch.Size([228146])
No of params:  3481</code></pre>
</div>
</div>
<p>Training and tracking stats:</p>
<div id="7eff55ae" class="cell" data-execution_count="37">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb63-1">lri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb63-2">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb63-3"></span>
<span id="cb63-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>):</span>
<span id="cb63-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct</span></span>
<span id="cb63-6">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,))</span>
<span id="cb63-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb63-8">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X[ix]] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)</span></span>
<span id="cb63-9">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb63-10">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb63-11">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y[ix])</span>
<span id="cb63-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb63-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb63-14">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb63-15">    loss.backward()</span>
<span id="cb63-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb63-17">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lrs[i]</span>
<span id="cb63-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb63-19">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb63-20"></span>
<span id="cb63-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb63-22">    lri.append(lre[i])</span>
<span id="cb63-23">    lossi.append(loss.item())</span>
<span id="cb63-24"></span>
<span id="cb63-25">loss.item()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>9.962945938110352</code></pre>
</div>
</div>
<p>Plotting, we see a good exponential element of learning rate turn out to be around <code>-1</code>.</p>
<p><img src="https://latex.codecogs.com/png.latex?10%5E%7B-1%7D"> is <code>0.1</code> so our initial guess seems good.</p>
<div id="ecfc32b9" class="cell" data-execution_count="38">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb65-1">plt.plot(lri, lossi)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/index_files/figure-html/cell-39-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="splitting-up-the-dataset-into-trainvaltest-splits-and-why" class="level2">
<h2 class="anchored" data-anchor-id="splitting-up-the-dataset-into-trainvaltest-splits-and-why">splitting up the dataset into train/val/test splits and why</h2>
<p>Now we can keep lengthening the training loop to continue decreasing loss. We can try some techniques like change the learning rate to <code>0.001</code> after 20k, 30k loops of training with <code>0.1</code>.</p>
<p>But it will come to be overfitting when we try to keep training or increase the size of network to achieve a lower loss. The model just memorizing our training set verbatim, so if we try to sample from the model it just gives us the same thing in the dataset. Or if we calculate the loss on another dataset, it might be very high.</p>
<p>So another industry standard is we will split the data set into 3 pieces: (1) training set; (2) dev/validation set; and (3) test set, they can be 80% - 10% - 10% roughly and respectively.</p>
<ol type="1">
<li>Training split: train the parameters;</li>
<li>Dev/validation split: train the hyperparamerters (size of hidden layer, size of embedding, streng of regularization, etc);</li>
<li>Test split: evaluate the performance of the model at the end, we only work on this a very very few times, otherwise we learn from it and repeat overfitting.</li>
</ol>
<p>We are going to implement this train/dev/test splits:</p>
<div id="33815b87" class="cell" data-execution_count="39">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the dataset</span></span>
<span id="cb66-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> buid_dataset(words):</span>
<span id="cb66-3">    block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb66-4">    X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb66-5"></span>
<span id="cb66-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words:</span>
<span id="cb66-7">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size</span>
<span id="cb66-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb66-9">            ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb66-10">            X.append(context)</span>
<span id="cb66-11">            Y.append(ix)</span>
<span id="cb66-12">            context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb66-13"></span>
<span id="cb66-14">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb66-15">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span>
<span id="cb66-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.shape, Y.shape)</span>
<span id="cb66-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> X, Y</span>
<span id="cb66-18"></span>
<span id="cb66-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb66-20">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb66-21">random.shuffle(words)</span>
<span id="cb66-22">n1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb66-23">n2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb66-24"></span>
<span id="cb66-25">Xtr, Ytr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[:n1])</span>
<span id="cb66-26">Xdev, Ydev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n1:n2])</span>
<span id="cb66-27">Xte, Yte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n2:])</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([182625, 3]) torch.Size([182625])
torch.Size([22655, 3]) torch.Size([22655])
torch.Size([22866, 3]) torch.Size([22866])</code></pre>
</div>
</div>
<p>Now we’re already to train on splits of the dataset, but let’s hold on as we are talking abount overfitting. As discussed, overfitting also come from using a complex (too many parameters) for a small data set.</p>
<p>Our dataset has roughly 228k records, while the size of network is only 3.4k. So we are still underfitting, let’s continue to complexify our neural networks.</p>
<p>2 things to consider here:</p>
<ul>
<li>the size of tanh - hidden layer; and</li>
<li>dimensions of embedding space.</li>
</ul>
</section>
<section id="visualizing-the-loss-character-embeddings" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-the-loss-character-embeddings">visualizing the loss, character embeddings</h2>
<p>First we want to see: - how the loss decrease with 200k training loop with current network setting, learning rate decay to 0.01 after first 100k; and - how the current character embeddings recognize the similarity between characters in (2D) space.</p>
<p>Training on the <code>Xtr</code>, <code>Ytr</code>:</p>
<div id="33e1a4c4" class="cell" data-execution_count="40">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table</span></span>
<span id="cb68-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb68-3">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb68-4"></span>
<span id="cb68-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh</span></span>
<span id="cb68-6">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb68-7">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb68-8"></span>
<span id="cb68-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb68-10">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb68-11">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb68-12"></span>
<span id="cb68-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params</span></span>
<span id="cb68-14">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span>
<span id="cb68-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of params: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters))</span>
<span id="cb68-16"></span>
<span id="cb68-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb68-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb68-19">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb68-20"></span>
<span id="cb68-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stats holders</span></span>
<span id="cb68-22">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb68-23">stepi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb68-24"></span>
<span id="cb68-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training on Xtr, Ytr</span></span>
<span id="cb68-26"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5_000</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#200_000</span></span>
<span id="cb68-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct</span></span>
<span id="cb68-28">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,))                       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#👈</span></span>
<span id="cb68-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb68-30">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xtr[ix]] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)                                    #👈</span></span>
<span id="cb68-31">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb68-32">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb68-33">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Ytr[ix])                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#👈</span></span>
<span id="cb68-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb68-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb68-36">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb68-37">    loss.backward()</span>
<span id="cb68-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb68-39">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100_000</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>                                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#👈</span></span>
<span id="cb68-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb68-41">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb68-42"></span>
<span id="cb68-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb68-44">    lossi.append(loss.item())</span>
<span id="cb68-45">    stepi.append(i)</span>
<span id="cb68-46"></span>
<span id="cb68-47"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss on minibatch: "</span>, loss.item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>No of params:  3481
Loss on minibatch:  2.652956485748291</code></pre>
</div>
</div>
<p>Loss on whole training dataset:</p>
<div id="5559d90b" class="cell" data-execution_count="41">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb70-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xtr] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)</span></span>
<span id="cb70-2">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb70-3">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb70-4">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Ytr)</span>
<span id="cb70-5">loss.item()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>2.5263497829437256</code></pre>
</div>
</div>
<p>Loss on dev/validation dataset, it’s not much different from loss on training as the model is still underfitting, it still generalizes thing:</p>
<div id="8b2cc082" class="cell" data-execution_count="42">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb72-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xdev] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)</span></span>
<span id="cb72-2">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb72-3">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb72-4">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Ydev)</span>
<span id="cb72-5">loss.item()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>2.520705461502075</code></pre>
</div>
</div>
<p>Visualizing loss, we can see the loss shaking significantly as the batch size still small - 32.</p>
<div id="bd285cd6" class="cell" data-execution_count="43">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb74-1">plt.plot(stepi, lossi)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/index_files/figure-html/cell-44-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Visualizing the character embeddings, we can see the model can cluster for eg. vowels a, e, i, o, u.</p>
<div id="a23eb13a" class="cell" data-execution_count="44">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb75-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb75-2">plt.scatter(C[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].data, C[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].data, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb75-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(C.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb75-4">    plt.text(C[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].item(),C[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].item(), itos[i], ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span>
<span id="cb75-5">plt.grid(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/index_files/figure-html/cell-45-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="experiment-larger-hidden-layer-larger-embedding-size" class="level2">
<h2 class="anchored" data-anchor-id="experiment-larger-hidden-layer-larger-embedding-size">experiment: larger hidden layer, larger embedding size</h2>
<p>Now we can experiment a larger hidden layer (300), and larger embedding_size (10). Below is the whole code:</p>
<div id="015476ba" class="cell" data-execution_count="45">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hyper-parameters</span></span>
<span id="cb76-2">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of chracters / inputs to predict the nextone</span></span>
<span id="cb76-3">no_chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of possible chracters, include '.'</span></span>
<span id="cb76-4">emb_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no of dimensions of the embedding space.</span></span>
<span id="cb76-5">hidden_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size of the hidden - tanh layer</span></span>
<span id="cb76-6">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch size for training, 2, 4, 8, 16, 32, 64, etc</span></span>
<span id="cb76-7"></span>
<span id="cb76-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the dataset</span></span>
<span id="cb76-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> buid_dataset(words):</span>
<span id="cb76-10"></span>
<span id="cb76-11">    X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb76-12"></span>
<span id="cb76-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words:</span>
<span id="cb76-14">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size</span>
<span id="cb76-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb76-16">            ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb76-17">            X.append(context)</span>
<span id="cb76-18">            Y.append(ix)</span>
<span id="cb76-19">            context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb76-20"></span>
<span id="cb76-21">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb76-22">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span>
<span id="cb76-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.shape, Y.shape)</span>
<span id="cb76-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> X, Y</span>
<span id="cb76-25"></span>
<span id="cb76-26"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb76-27">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb76-28">random.shuffle(words)</span>
<span id="cb76-29">n1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb76-30">n2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb76-31"></span>
<span id="cb76-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 80 - 10 - 10 splits</span></span>
<span id="cb76-33">Xtr, Ytr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[:n1])</span>
<span id="cb76-34">Xdev, Ydev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n1:n2])</span>
<span id="cb76-35">Xte, Yte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n2:])</span>
<span id="cb76-36"></span>
<span id="cb76-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table - 10 dimensional space</span></span>
<span id="cb76-38">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproductivity</span></span>
<span id="cb76-39">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((no_chars, emb_size), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb76-40"></span>
<span id="cb76-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh - 300 neurons</span></span>
<span id="cb76-42">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> emb_size, hidden_size), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb76-43">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(hidden_size, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb76-44"></span>
<span id="cb76-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb76-46">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((hidden_size, no_chars), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb76-47">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(no_chars, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb76-48"></span>
<span id="cb76-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params</span></span>
<span id="cb76-50">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span>
<span id="cb76-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of params: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters))</span>
<span id="cb76-52"></span>
<span id="cb76-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb76-54"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb76-55">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb76-56"></span>
<span id="cb76-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stats holders</span></span>
<span id="cb76-58">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb76-59">stepi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb76-60"></span>
<span id="cb76-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training on Xtr, Ytr</span></span>
<span id="cb76-62"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5_000</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#200_000</span></span>
<span id="cb76-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct</span></span>
<span id="cb76-64">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,))</span>
<span id="cb76-65">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb76-66">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xtr[ix]]</span>
<span id="cb76-67">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> emb_size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1)</span>
<span id="cb76-68">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb76-69">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Ytr[ix])</span>
<span id="cb76-70">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb76-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb76-72">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb76-73">    loss.backward()</span>
<span id="cb76-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb76-75">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100_000</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb76-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parameters:</span>
<span id="cb76-77">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb76-78"></span>
<span id="cb76-79">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb76-80">    lossi.append(loss.item())</span>
<span id="cb76-81">    stepi.append(i)</span>
<span id="cb76-82"></span>
<span id="cb76-83"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss on minibatch: "</span>, loss.item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([182580, 3]) torch.Size([182580])
torch.Size([22767, 3]) torch.Size([22767])
torch.Size([22799, 3]) torch.Size([22799])
No of params:  17697
Loss on minibatch:  3.161036252975464</code></pre>
</div>
</div>
<div id="0ad21115" class="cell" data-execution_count="46">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb78-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xtr]</span>
<span id="cb78-2">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> emb_size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1)</span>
<span id="cb78-3">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb78-4">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Ytr)</span>
<span id="cb78-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss on whole training set: "</span>, loss.item())</span>
<span id="cb78-6"></span>
<span id="cb78-7">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xdev]</span>
<span id="cb78-8">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> emb_size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1)</span>
<span id="cb78-9">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb78-10">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Ydev)</span>
<span id="cb78-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss on dev/validation set: "</span>, loss.item())</span>
<span id="cb78-12"></span>
<span id="cb78-13">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xte]</span>
<span id="cb78-14">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> emb_size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1)</span>
<span id="cb78-15">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb78-16">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Yte)</span>
<span id="cb78-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss on test set: "</span>, loss.item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Loss on whole training set:  2.955504894256592
Loss on dev/validation set:  2.96545672416687
Loss on test set:  2.9667985439300537</code></pre>
</div>
</div>
</section>
<section id="summary-of-our-final-code-conclusion" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-our-final-code-conclusion">summary of our final code, conclusion</h2>
<div id="19e6a5ba" class="cell" data-execution_count="47">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb80-1">plt.plot(stepi, lossi)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/index_files/figure-html/cell-48-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="989d29e3" class="cell" data-execution_count="48">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb81-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb81-2">plt.scatter(C[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].data, C[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].data, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb81-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(C.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb81-4">    plt.text(C[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].item(),C[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].item(), itos[i], ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span>
<span id="cb81-5">plt.grid(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/index_files/figure-html/cell-49-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can see the loss on validation set and test set are quite similar as we are not try different scenarios to calibrate/tune hyperparamters much. So they both have the same suprise to the model training by <code>Xtr</code>.</p>
<p>We still have rooms for improvement!</p>
</section>
<section id="sampling-from-the-model" class="level2">
<h2 class="anchored" data-anchor-id="sampling-from-the-model">sampling from the model</h2>
<p>But our networks now can generate more name-like name!</p>
<div id="78e22062" class="cell" data-execution_count="49">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb82-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb82-2"></span>
<span id="cb82-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb82-4"></span>
<span id="cb82-5">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb82-6">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize with all ...</span></span>
<span id="cb82-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb82-8">      emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[torch.tensor([context])] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1,block_size,d)</span></span>
<span id="cb82-9">      h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1)</span>
<span id="cb82-10">      logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb82-11">      probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb82-12">      ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(probs, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb82-13">      context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb82-14">      out.append(ix)</span>
<span id="cb82-15">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb82-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb82-17"></span>
<span id="cb82-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(itos[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> out))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>dra.
aisya.
zhyes.
ddyn.
kai.
eavin.
dadra.
kai.
chadielie.
sailiea.
daeis.
doanaileatzivila.
adi.
sadhersahiah.
saila.
rajayslen.
kula.
uyr.
yada.
kyryle.</code></pre>
</div>
</div>
</section>
<section id="google-collab-new-notebook-advertisement" class="level2">
<h2 class="anchored" data-anchor-id="google-collab-new-notebook-advertisement">google collab (new!!) notebook advertisement</h2>
<p>Colab link: <a href="https://colab.research.google.com/drive/1YIfmkftLrz6MPTOO9Vwqrop2Q5llHIGK?usp=sharing" class="uri">https://colab.research.google.com/drive/1YIfmkftLrz6MPTOO9Vwqrop2Q5llHIGK?usp=sharing</a></p>
<p>Thanks Andrej!</p>
</section>
</section>
<section id="resources" class="level1">
<h1>resources</h1>
<ol type="1">
<li><a href="https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf"><strong>A Neural Probabilistic Language Model</strong>, Bengio et al.&nbsp;(2003)</a></li>
<li><a href="https://www.youtube.com/watch?v=TCH_1BHY58I">Video lecturer</a></li>
<li><a href="https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part2_mlp.ipynb">Notebook</a></li>
<li><a href="https://github.com/karpathy/makemore"><code>makemore</code> on Github</a></li>
<li><a href="https://pytorch.org/docs/main/tensors.html"><code>torch.Tensor()</code> documentation</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>til</category>
  <category>python</category>
  <category>andrej karpathy</category>
  <category>nn-z2h</category>
  <category>neural networks</category>
  <guid>https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/</guid>
  <pubDate>Tue, 19 Nov 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/NLM_Bengio_etal.png" medium="image" type="image/png" height="121" width="144"/>
</item>
<item>
  <title>NN-Z2H Lesson 2: The spelled-out intro to language modeling - building makemore</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-11-15-nn-z2h-p2/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important callout-titled" title="This is not orginal content!">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This is not orginal content!
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is my study notes / codes along with Andrej Karpathy’s “<a href="https://www.youtube.com/watch?v=VMj-3S1tku0&amp;list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ">Neural Networks: Zero to Hero</a>” series.</p>
</div>
</div>
<section id="part-1-intro" class="level1">
<h1>PART 1: intro</h1>
<blockquote class="blockquote">
<p><code>makemore</code> takes one text file as input, where each line is assumed to be one training thing, and generates more things like it. Under the hood, it is an autoregressive character-level language model, with a wide choice of models from bigrams all the way to a Transformer (exactly as seen in GPT).</p>
</blockquote>
<section id="reading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="reading-and-exploring-the-dataset">reading and exploring the dataset</h2>
<div id="0ea22772" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"></span>
<span id="cb1-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/karpathy/makemore/refs/heads/master/names.txt"</span></span>
<span id="cb1-4">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>).iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tolist()</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>['emma', 'olivia', 'ava', 'isabella', 'sophia', 'charlotte', 'mia', 'amelia', 'harper', 'evelyn']
32033</code></pre>
</div>
</div>
<div id="48282015" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of chars for the shortest word: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(w) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words))</span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of chars for the longest word: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(w) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>No of chars for the shortest word:  2
No of chars for the longest word:  15</code></pre>
</div>
</div>
<p>By looking into (1) the order of characters in individual word, and (2) that pattern for the whole dataset of 32k words, we will try to infer which character is likely to follow a character or chain of characters.</p>
<p>We will first building a <code>bigrams</code> languague model - which only works will 2 characters at a time - look at the current character and try to predict the next one. We are just following this local structure!</p>
<p>It’s just a simple (and weak) model but a good way to start.</p>
</section>
<section id="exploring-the-bigrams-in-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="exploring-the-bigrams-in-the-dataset">exploring the <code>bigrams</code> in the dataset</h2>
<div id="fce71b8d" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]:</span>
<span id="cb5-2">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;S&gt;'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;E&gt;'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># special start and ending token, `list()` will turn all character in word to list</span></span>
<span id="cb5-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb5-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ch1, ch2)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;S&gt; e
e m
m m
m a
a &lt;E&gt;
&lt;S&gt; o
o l
l i
i v
v i
i a
a &lt;E&gt;
&lt;S&gt; a
a v
v a
a &lt;E&gt;</code></pre>
</div>
</div>
</section>
<section id="counting-bigrams-in-a-python-dictionary" class="level2">
<h2 class="anchored" data-anchor-id="counting-bigrams-in-a-python-dictionary">counting <code>bigrams</code> in a python dictionary</h2>
<p>In order to learn statistics about what character is more likely to follow another character, the simplest way is <code>counting</code>.</p>
<div id="787d0f5b" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dict to store all pair of character</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do it for first five words</span></span>
<span id="cb7-3">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;S&gt;'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;E&gt;'</span>]</span>
<span id="cb7-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb7-5">    bigram <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ch1, ch2)</span>
<span id="cb7-6">    b[bigram] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.get(bigram, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(ch1, ch2)</span></span></code></pre></div>
</details>
</div>
<div id="bd28596f" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(b.items(), key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> kv: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>kv[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>[(('a', '&lt;E&gt;'), 5),
 (('i', 'a'), 2),
 (('&lt;S&gt;', 'e'), 1),
 (('e', 'm'), 1),
 (('m', 'm'), 1),
 (('m', 'a'), 1),
 (('&lt;S&gt;', 'o'), 1),
 (('o', 'l'), 1),
 (('l', 'i'), 1),
 (('i', 'v'), 1),
 (('v', 'i'), 1),
 (('&lt;S&gt;', 'a'), 1),
 (('a', 'v'), 1),
 (('v', 'a'), 1),
 (('&lt;S&gt;', 'i'), 1),
 (('i', 's'), 1),
 (('s', 'a'), 1),
 (('a', 'b'), 1),
 (('b', 'e'), 1),
 (('e', 'l'), 1),
 (('l', 'l'), 1),
 (('l', 'a'), 1),
 (('&lt;S&gt;', 's'), 1),
 (('s', 'o'), 1),
 (('o', 'p'), 1),
 (('p', 'h'), 1),
 (('h', 'i'), 1)]</code></pre>
</div>
</div>
</section>
<section id="counting-bigrams-in-a-2d-torch-tensor-training-the-model" class="level2">
<h2 class="anchored" data-anchor-id="counting-bigrams-in-a-2d-torch-tensor-training-the-model">counting <code>bigrams</code> in a 2D <code>torch</code> tensor (“training the model”)</h2>
<p>Instead of using Python dictionary, we will use <code>torch</code> 2D array to store this information.</p>
<div id="aa542844" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span></code></pre></div>
</details>
</div>
<div id="bb1f69c5" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.int32)</span>
<span id="cb11-2">a</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>tensor([[0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0]], dtype=torch.int32)</code></pre>
</div>
</div>
<p>How can we access/assign a value in torch array:</p>
<div id="b949ed96" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb13-2">a</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>tensor([[ 0,  0,  0,  0,  0],
        [10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10]], dtype=torch.int32)</code></pre>
</div>
</div>
<p>Now the english alphabet contain 26 characters, we will need to capture the <code>&lt;S&gt;</code> and <code>&lt;E&gt;</code> also. So it would be 28 x 28 array.</p>
<div id="44ecf096" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.int32)</span></code></pre></div>
</details>
</div>
<p>This will collect all the characters used in our dataset (join all words to a massive string and pass it to a <code>set()</code>, which will remove duplicate). With such a large dataset, all the english characters were used.</p>
<div id="0e126a7d" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1">chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(words))))</span>
<span id="cb16-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(chars) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 26</span></span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with index</span></span>
<span id="cb16-5">stoi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {s:i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chars)}</span>
<span id="cb16-6">stoi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;S&gt;'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span></span>
<span id="cb16-7">stoi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;E&gt;'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span></span>
<span id="cb16-8">stoi</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>{'a': 0,
 'b': 1,
 'c': 2,
 'd': 3,
 'e': 4,
 'f': 5,
 'g': 6,
 'h': 7,
 'i': 8,
 'j': 9,
 'k': 10,
 'l': 11,
 'm': 12,
 'n': 13,
 'o': 14,
 'p': 15,
 'q': 16,
 'r': 17,
 's': 18,
 't': 19,
 'u': 20,
 'v': 21,
 'w': 22,
 'x': 23,
 'y': 24,
 'z': 25,
 '&lt;S&gt;': 26,
 '&lt;E&gt;': 27}</code></pre>
</div>
</div>
<div id="770a267a" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words:</span>
<span id="cb18-2">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;S&gt;'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;E&gt;'</span>]</span>
<span id="cb18-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb18-4">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb18-5">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb18-6">    N[ix1, ix2] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</details>
</div>
</section>
<section id="visualizing-the-bigram-tensor" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-the-bigram-tensor">visualizing the <code>bigram</code> tensor</h2>
<div id="8fbb8730" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">itos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i:s <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s, i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> stoi.items()}</span></code></pre></div>
</details>
</div>
<div id="fb8b64cc" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb20-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb20-3"></span>
<span id="cb20-4">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>))</span>
<span id="cb20-5">plt.imshow(N, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blues'</span>)</span>
<span id="cb20-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>):</span>
<span id="cb20-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>):</span>
<span id="cb20-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot character strings with number of time</span></span>
<span id="cb20-9">    chstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itos[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> itos[j]</span>
<span id="cb20-10">    plt.text(j, i, chstr, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)</span>
<span id="cb20-11">    plt.text(j, i, N[i, j].item(), ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)</span>
<span id="cb20-12">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-15-nn-z2h-p2/index_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="deleting-spurious-s-and-e-tokens-in-favor-of-a-single-.-token" class="level2">
<h2 class="anchored" data-anchor-id="deleting-spurious-s-and-e-tokens-in-favor-of-a-single-.-token">deleting spurious (S) and (E) tokens in favor of a single <code>.</code> token</h2>
<p><code>&lt;S&gt;</code>, and <code>&lt;E&gt;</code> look a bit annoying. let’s replace them by simple <code>.</code>.</p>
<div id="81b945de" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.int32)</span>
<span id="cb21-2">stoi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {s:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chars)}</span>
<span id="cb21-3">stoi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-4">itos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i:s <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s, i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> stoi.items()}</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words:</span>
<span id="cb21-7">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>]</span>
<span id="cb21-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb21-9">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb21-10">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb21-11">    N[ix1, ix2] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</details>
</div>
<div id="a634532d" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb22-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb22-3"></span>
<span id="cb22-4">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>))</span>
<span id="cb22-5">plt.imshow(N, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blues'</span>)</span>
<span id="cb22-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>):</span>
<span id="cb22-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>):</span>
<span id="cb22-8">        chstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itos[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> itos[j]</span>
<span id="cb22-9">        plt.text(j, i, chstr, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb22-10">        plt.text(j, i, N[i, j].item(), ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb22-11">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-15-nn-z2h-p2/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="sampling-from-the-model" class="level2">
<h2 class="anchored" data-anchor-id="sampling-from-the-model">sampling from the model</h2>
<p>Taking the first column of the array.</p>
<div id="17be25da" class="cell" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">N[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>tensor([   0, 4410, 1306, 1542, 1690, 1531,  417,  669,  874,  591, 2422, 2963,
        1572, 2538, 1146,  394,  515,   92, 1639, 2055, 1308,   78,  376,  307,
         134,  535,  929], dtype=torch.int32)</code></pre>
</div>
</div>
<p>Column-wise probability.</p>
<div id="0585c1bc" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb25-2">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb25-3">p</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>tensor([0.0000, 0.1377, 0.0408, 0.0481, 0.0528, 0.0478, 0.0130, 0.0209, 0.0273,
        0.0184, 0.0756, 0.0925, 0.0491, 0.0792, 0.0358, 0.0123, 0.0161, 0.0029,
        0.0512, 0.0642, 0.0408, 0.0024, 0.0117, 0.0096, 0.0042, 0.0167, 0.0290])</code></pre>
</div>
</div>
<p>Creating random number with Pytorch generator at a state.</p>
<div id="d275d3e5" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb27-2">p_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb27-3">p_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p_test.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
</details>
</div>
<div id="c7f90e90" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">torch.multinomial(p_test, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>tensor([1, 1, 2, 0, 0, 2, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 2, 0, 0,
        1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1,
        0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0,
        0, 1, 1, 1])</code></pre>
</div>
</div>
<p>Now back to our data, generate a tensor with 1 value from the <code>p</code> vector.</p>
<div id="f6618272" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb30-2">ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(p, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb30-3">itos[ix]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>'j'</code></pre>
</div>
</div>
<p>Let’s automate it:</p>
<div id="0667a185" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb32-2"></span>
<span id="cb32-3">ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb32-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb32-5">  p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N[ix].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb32-6">  p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb32-7">  ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(p, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb32-8">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(itos[ix])</span>
<span id="cb32-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb32-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>j
u
n
i
d
e
.</code></pre>
</div>
</div>
<p>And more, joining the last result to single word, and make new 10 names:</p>
<div id="7bb51f97" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb34-4"></span>
<span id="cb34-5">  out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb34-6">  ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb34-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb34-8">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N[ix].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb34-9">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb34-10"></span>
<span id="cb34-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p = torch.ones(27) / 27.0</span></span>
<span id="cb34-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the result look terrible, but compare to an un-trained model for eg p - uncomment to code above, they are still like names.</span></span>
<span id="cb34-13">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(p, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb34-14">    out.append(itos[ix])</span>
<span id="cb34-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb34-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb34-17">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(out))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>junide.
janasah.
p.
cony.
a.
nn.
kohin.
tolian.
juee.
ksahnaauranilevias.</code></pre>
</div>
</div>
</section>
<section id="efficiency-vectorized-normalization-of-the-rows-tensor-broadcasting" class="level2">
<h2 class="anchored" data-anchor-id="efficiency-vectorized-normalization-of-the-rows-tensor-broadcasting">efficiency! vectorized normalization of the rows, tensor broadcasting</h2>
<p>We just fetching a row of <code>N</code> from the counts matrix, and then always do the same things: converting to float, dividing. That’s not efficient! We now will optimize this:</p>
<div id="2a716719" class="cell" data-execution_count="23">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># param 1 helps summing horizontally, by rows</span></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># keepdim keeps the dimension the output is still 2D array with 1 column for each row, not a vertical vector entirely</span></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tensor already support to broadcast the row sum allowing this dividing (keepdim helped not to mess the broadcast)</span></span>
<span id="cb36-5">P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> P.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb36-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inplace operator instead of P = P / P.sum(1, keepdim=True), take care of memory!</span></span></code></pre></div>
</details>
</div>
<div id="3d19094d" class="cell" data-execution_count="24">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb37-2"></span>
<span id="cb37-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb37-4"></span>
<span id="cb37-5">  out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb37-6">  ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb37-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb37-8">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P[ix]</span>
<span id="cb37-9">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(p, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb37-10">    out.append(itos[ix])</span>
<span id="cb37-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb37-12">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb37-13">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(out))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>junide.
janasah.
p.
cony.
a.
nn.
kohin.
tolian.
juee.
ksahnaauranilevias.</code></pre>
</div>
</div>
</section>
<section id="loss-function-the-negative-log-likelihood-of-the-data-under-our-model" class="level2">
<h2 class="anchored" data-anchor-id="loss-function-the-negative-log-likelihood-of-the-data-under-our-model">loss function (the negative log likelihood of the data under our model)</h2>
<p>We’ve just trained and sampled from the model, iteratively sampled the next character and fed it in each time and got the next one. Now we need to somehow measure the quality of the model.</p>
<p>How good is it in predicting? Gimme a number!</p>
<div id="e6b02309" class="cell" data-execution_count="25">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># showing bigram for the first 3 words, along with the probability inferred by our model (`P`)</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the higher the prob, the better of prediction</span></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># since a fair (under no data) probability of occuring a character is roughly 1/27 ~ 4%, any prob higher than 4% should be good</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we need to combine all the prob to a single 1 number, measuring how good is our model?</span></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># since multiplying all the prob resulting a very very small number, we will approach by the log likelihood function</span></span>
<span id="cb39-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the log likelihood is just the sum of log of individual multiplier</span></span>
<span id="cb39-7"></span>
<span id="cb39-8">log_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb39-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]:</span>
<span id="cb39-10">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>]</span>
<span id="cb39-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb39-12">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb39-13">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb39-14">    prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P[ix1, ix2]</span>
<span id="cb39-15">    log_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.log(prob)</span>
<span id="cb39-16">    log_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> log_prob</span>
<span id="cb39-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ch1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>ch2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>log_prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb39-18"></span>
<span id="cb39-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>log_likelihood<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print both the variable name and its value, for the first 3 words</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>.e: 0.0478 -3.0408
em: 0.0377 -3.2793
mm: 0.0253 -3.6772
ma: 0.3899 -0.9418
a.: 0.1960 -1.6299
.o: 0.0123 -4.3982
ol: 0.0780 -2.5508
li: 0.1777 -1.7278
iv: 0.0152 -4.1867
vi: 0.3541 -1.0383
ia: 0.1381 -1.9796
a.: 0.1960 -1.6299
.a: 0.1377 -1.9829
av: 0.0246 -3.7045
va: 0.2495 -1.3882
a.: 0.1960 -1.6299
log_likelihood=tensor(-38.7856)</code></pre>
</div>
</div>
<p>If all the probs equal to 1, the logs will be 0. If they close to 0, the logs will be more negative. We want to use this as a loss function, meaning lower the better, so we will invert it:</p>
<div id="d3ec484a" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1">neg_log_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb41-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb41-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words:</span>
<span id="cb41-4">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>]</span>
<span id="cb41-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb41-6">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb41-7">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb41-8">    prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P[ix1, ix2]</span>
<span id="cb41-9">    log_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.log(prob)</span>
<span id="cb41-10">    neg_log_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>log_prob</span>
<span id="cb41-11">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb41-12"></span>
<span id="cb41-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>neg_log_likelihood<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb41-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>neg_log_likelihood<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>neg_log_likelihood=tensor(559891.7500)
2.454094171524048</code></pre>
</div>
</div>
<p>Finally we insert a count and calculate the “normalized” (or average) negative log likelihood. The lower of this number, the better model we have.</p>
<p>You can test with your name:</p>
<div id="8f2ce3da" class="cell" data-execution_count="27">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1">neg_log_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb43-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb43-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tuan'</span>]:</span>
<span id="cb43-4">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>]</span>
<span id="cb43-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb43-6">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb43-7">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb43-8">    prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P[ix1, ix2]</span>
<span id="cb43-9">    log_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.log(prob)</span>
<span id="cb43-10">    neg_log_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>log_prob</span>
<span id="cb43-11">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb43-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ch1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>ch2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>log_prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb43-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>neg_log_likelihood<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb43-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>neg_log_likelihood<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>.t: 0.0408 -3.1983
tu: 0.0140 -4.2684
ua: 0.0520 -2.9566
an: 0.1605 -1.8296
n.: 0.3690 -0.9969
neg_log_likelihood=tensor(13.2498)
2.649962902069092</code></pre>
</div>
</div>
<p><code>tu</code> is not common in our dataset.</p>
</section>
<section id="model-smoothing-with-fake-counts" class="level2">
<h2 class="anchored" data-anchor-id="model-smoothing-with-fake-counts">model smoothing with fake counts</h2>
<p>For a pair of bigram that does not exist in the dataset, for eg <code>jq</code>, the prob will be zero and log likelihood will be infinity. We can kind of smooth our model by adding constant “fake counts” to the model:</p>
<div id="ecc8ca53" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1">P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span></code></pre></div>
</details>
</div>
<p><code>1</code> is decent number, the more you added, you’ll have a more uniformed distribution, the less, the more peaked distribution you have.</p>
</section>
</section>
<section id="part-2-the-neural-network-approach---intro" class="level1">
<h1>PART 2: the neural network approach - intro</h1>
<p>Now we will try to cast the problem of bigram character level of language modeling into the <strong>neural network framework</strong>. We first understand how to feed it in with 1 point dataset - only the first word <code>emma</code>:</p>
<section id="creating-the-bigram-dataset-for-the-neural-net" class="level2">
<h2 class="anchored" data-anchor-id="creating-the-bigram-dataset-for-the-neural-net">creating the <code>bigram</code> dataset for the neural net</h2>
<div id="67b517b9" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creating training set of bigram(x, y)</span></span>
<span id="cb46-2">xs, ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb46-3"></span>
<span id="cb46-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb46-5">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>]</span>
<span id="cb46-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb46-7">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb46-8">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb46-9">    xs.append(ix1)</span>
<span id="cb46-10">    ys.append(ix2)</span>
<span id="cb46-11"></span>
<span id="cb46-12">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(xs) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># both .tensor() and .Tensor() work!</span></span>
<span id="cb46-13">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(ys)</span>
<span id="cb46-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://stackoverflow.com/questions/51911749/what-is-the-difference-between-torch-tensor-and-torch-tensor</span></span>
<span id="cb46-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .tensor() infers dtype as int64 while .Tensor() infers dtype as float32, in this case</span></span></code></pre></div>
</details>
</div>
<p>The input and output tensor for the first word will be look like this:</p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource {md} number-lines code-with-copy"><code class="sourceCode"><span id="cb47-1">&gt; print(ch1,ch2)</span>
<span id="cb47-2">. e</span>
<span id="cb47-3">e m</span>
<span id="cb47-4">m m</span>
<span id="cb47-5">m a</span>
<span id="cb47-6">a .</span>
<span id="cb47-7">&gt; xs</span>
<span id="cb47-8">tensor([ 0,  5, 13, 13,  1])</span>
<span id="cb47-9">&gt; ys</span>
<span id="cb47-10">tensor([ 5, 13, 13,  1,  0])</span></code></pre></div>
</section>
<section id="feeding-integers-into-neural-nets-one-hot-encodings" class="level2">
<h2 class="anchored" data-anchor-id="feeding-integers-into-neural-nets-one-hot-encodings">feeding integers into neural nets? one-hot encodings</h2>
<div id="e27dbca1" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb48-2"></span>
<span id="cb48-3">xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.one_hot(xs, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remember to cast integer to float, which can be fed to neural nets</span></span>
<span id="cb48-4">xenc</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>tensor([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0.]])</code></pre>
</div>
</div>
<div id="266a2b94" class="cell" data-execution_count="31">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1">xenc.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>torch.Size([5, 27])</code></pre>
</div>
</div>
<div id="f059115c" class="cell" data-execution_count="32">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1">plt.imshow(xenc, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blues"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-15-nn-z2h-p2/index_files/figure-html/cell-33-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="the-neural-net-one-linear-layer-of-neurons-implemented-with-matrix-multiplication" class="level2">
<h2 class="anchored" data-anchor-id="the-neural-net-one-linear-layer-of-neurons-implemented-with-matrix-multiplication">the “neural net”: one linear layer of neurons implemented with matrix multiplication</h2>
<div id="431b7ac2" class="cell" data-execution_count="33">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb53-1">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fulfill a tensor with random number followed normal distribution, 1 is indicating 1 single neuron</span></span>
<span id="cb53-2">xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @ is matrix mult operator in PyTorch</span></span>
<span id="cb53-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (5, 27) @ (27, 1) will result (5, 1) matrix</span></span>
<span id="cb53-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no bias is added for now</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>tensor([[-2.2498],
        [ 2.3020],
        [-0.3719],
        [-0.3719],
        [-0.3827]])</code></pre>
</div>
</div>
<p>This is 1 neuron only, now we want to evaluate all 27 characters using only 5 inputs from the first word, we’ll make 27 neurons:</p>
<div id="42439a3d" class="cell" data-execution_count="34">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb55-1">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>))</span>
<span id="cb55-2">xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W</span>
<span id="cb55-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (5, 27) @ (27, 27) will result (5, 27) matrix</span></span>
<span id="cb55-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no bias is added for now</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>tensor([[-0.0355,  2.3155,  0.2896,  1.6266, -0.0783, -0.7462, -1.2353, -0.0841,
         -0.2500,  0.1591, -1.1639,  0.4458,  1.1365,  0.9159,  1.0602, -0.9488,
         -1.1932,  0.3338,  0.0301, -0.2639,  0.5924, -1.0144, -2.3080, -0.7702,
          0.3844,  1.6278,  0.9473],
        [-0.2300,  0.8866, -0.4229,  1.2298,  2.0847,  0.6033, -1.0144, -1.5902,
          1.0441, -0.4558, -1.1732,  0.0468,  1.3476, -1.2999,  0.4707, -0.9575,
         -0.5092,  0.7076, -1.1781,  0.8005,  0.7489,  1.9017, -0.3109, -1.2747,
         -1.1256,  0.0907, -0.0929],
        [ 0.3460, -0.3902, -2.1835,  0.0527, -1.0908,  1.4131, -1.0061, -2.4889,
         -0.0110,  0.1494, -0.5154,  1.0459, -0.1377, -1.1176, -0.1330,  1.4926,
          1.7071, -1.1803,  1.0755,  1.2720, -1.0548,  0.2015, -0.2355,  1.5274,
          0.4777,  0.8109,  1.1829],
        [ 0.3460, -0.3902, -2.1835,  0.0527, -1.0908,  1.4131, -1.0061, -2.4889,
         -0.0110,  0.1494, -0.5154,  1.0459, -0.1377, -1.1176, -0.1330,  1.4926,
          1.7071, -1.1803,  1.0755,  1.2720, -1.0548,  0.2015, -0.2355,  1.5274,
          0.4777,  0.8109,  1.1829],
        [-0.5041,  2.1254, -1.9396, -0.7349,  1.1386,  0.6593, -0.5744, -0.9488,
         -0.5028,  1.0566, -0.2909,  0.7718, -0.2889, -0.6343, -1.3896, -0.0291,
         -1.4302, -1.4050,  0.5104,  1.2061,  0.9506, -2.0897, -1.0904, -0.2561,
         -0.5369,  0.8944,  0.9525]])</code></pre>
</div>
</div>
</section>
<section id="transforming-neural-net-outputs-into-probabilities-the-softmax" class="level2">
<h2 class="anchored" data-anchor-id="transforming-neural-net-outputs-into-probabilities-the-softmax">transforming neural net outputs into probabilities: the softmax</h2>
<p>So far we have fed 5 inputs to 27 neurons for 27 characters in <strong>the first layer</strong> of the neural net. We notice that the output number ranges from negative to positive while we want “how likely of the next characters”. It would be counts, or probs, hence we exponentiate the logits, then dividing row-wise total to get the prob of each character.</p>
<p>This is call the softmax!</p>
<div id="ee08bfe4" class="cell" data-execution_count="35">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># log-counts</span></span>
<span id="cb57-2">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># equivalent N</span></span>
<span id="cb57-3">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb57-4">probs</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>tensor([[0.0200, 0.2101, 0.0277, 0.1055, 0.0192, 0.0098, 0.0060, 0.0191, 0.0162,
         0.0243, 0.0065, 0.0324, 0.0646, 0.0518, 0.0599, 0.0080, 0.0063, 0.0290,
         0.0214, 0.0159, 0.0375, 0.0075, 0.0021, 0.0096, 0.0305, 0.1056, 0.0535],
        [0.0173, 0.0528, 0.0142, 0.0744, 0.1749, 0.0397, 0.0079, 0.0044, 0.0618,
         0.0138, 0.0067, 0.0228, 0.0837, 0.0059, 0.0348, 0.0083, 0.0131, 0.0441,
         0.0067, 0.0484, 0.0460, 0.1456, 0.0159, 0.0061, 0.0071, 0.0238, 0.0198],
        [0.0303, 0.0145, 0.0024, 0.0226, 0.0072, 0.0880, 0.0078, 0.0018, 0.0212,
         0.0249, 0.0128, 0.0610, 0.0187, 0.0070, 0.0188, 0.0953, 0.1181, 0.0066,
         0.0628, 0.0764, 0.0075, 0.0262, 0.0169, 0.0987, 0.0345, 0.0482, 0.0699],
        [0.0303, 0.0145, 0.0024, 0.0226, 0.0072, 0.0880, 0.0078, 0.0018, 0.0212,
         0.0249, 0.0128, 0.0610, 0.0187, 0.0070, 0.0188, 0.0953, 0.1181, 0.0066,
         0.0628, 0.0764, 0.0075, 0.0262, 0.0169, 0.0987, 0.0345, 0.0482, 0.0699],
        [0.0153, 0.2124, 0.0036, 0.0122, 0.0792, 0.0490, 0.0143, 0.0098, 0.0153,
         0.0729, 0.0190, 0.0549, 0.0190, 0.0134, 0.0063, 0.0246, 0.0061, 0.0062,
         0.0422, 0.0847, 0.0656, 0.0031, 0.0085, 0.0196, 0.0148, 0.0620, 0.0657]])</code></pre>
</div>
</div>
</section>
<section id="summary-preview-to-next-steps-reference-to-micrograd" class="level2">
<h2 class="anchored" data-anchor-id="summary-preview-to-next-steps-reference-to-micrograd">summary, preview to next steps, reference to <code>micrograd</code></h2>
<div id="25a51a0d" class="cell" data-execution_count="36">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># randomly initialize 27 neurons' weights. each neuron receives 27 inputs</span></span>
<span id="cb59-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to make sure we all have same random</span></span>
<span id="cb59-3">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb59-4">xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.one_hot(xs, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input to the network: one-hot encoding</span></span>
<span id="cb59-5">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict log-counts</span></span>
<span id="cb59-6">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts, equivalent to N</span></span>
<span id="cb59-7">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probabilities for next character</span></span>
<span id="cb59-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># btw: the last 2 lines here are together called a 'softmax'</span></span></code></pre></div>
</details>
</div>
<div id="039b1980" class="cell" data-execution_count="37">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1">probs.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>torch.Size([5, 27])</code></pre>
</div>
</div>
<p>Below is detail explaination for each example from our 5-datapoint dataset.</p>
<div id="02716f70" class="cell" data-execution_count="38">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb62-1">nlls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb62-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb62-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i-th bigram:</span></span>
<span id="cb62-4">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xs[i].item() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input character index</span></span>
<span id="cb62-5">  y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ys[i].item() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># label character index</span></span>
<span id="cb62-6">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--------'</span>)</span>
<span id="cb62-7">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'bigram example </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>itos[x]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>itos[y]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (indexes </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb62-8">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input to the neural net:'</span>, x)</span>
<span id="cb62-9">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output probabilities from the neural net:'</span>, probs[i])</span>
<span id="cb62-10">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label (actual next character):'</span>, y)</span>
<span id="cb62-11">  p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probs[i, y]</span>
<span id="cb62-12">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'probability assigned by the net to the the correct character:'</span>, p.item())</span>
<span id="cb62-13">  logp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.log(p)</span>
<span id="cb62-14">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log likelihood:'</span>, logp.item())</span>
<span id="cb62-15">  nll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>logp</span>
<span id="cb62-16">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'negative log likelihood:'</span>, nll.item())</span>
<span id="cb62-17">  nlls[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nll</span>
<span id="cb62-18"></span>
<span id="cb62-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'========='</span>)</span>
<span id="cb62-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'average negative log likelihood, i.e. loss ='</span>, nlls.mean().item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>--------
bigram example 1: .e (indexes 0,5)
input to the neural net: 0
output probabilities from the neural net: tensor([0.0200, 0.2101, 0.0277, 0.1055, 0.0192, 0.0098, 0.0060, 0.0191, 0.0162,
        0.0243, 0.0065, 0.0324, 0.0646, 0.0518, 0.0599, 0.0080, 0.0063, 0.0290,
        0.0214, 0.0159, 0.0375, 0.0075, 0.0021, 0.0096, 0.0305, 0.1056, 0.0535])
label (actual next character): 5
probability assigned by the net to the the correct character: 0.009835068136453629
log likelihood: -4.621800899505615
negative log likelihood: 4.621800899505615
--------
bigram example 2: em (indexes 5,13)
input to the neural net: 5
output probabilities from the neural net: tensor([0.0173, 0.0528, 0.0142, 0.0744, 0.1749, 0.0397, 0.0079, 0.0044, 0.0618,
        0.0138, 0.0067, 0.0228, 0.0837, 0.0059, 0.0348, 0.0083, 0.0131, 0.0441,
        0.0067, 0.0484, 0.0460, 0.1456, 0.0159, 0.0061, 0.0071, 0.0238, 0.0198])
label (actual next character): 13
probability assigned by the net to the the correct character: 0.00592648284509778
log likelihood: -5.128324508666992
negative log likelihood: 5.128324508666992
--------
bigram example 3: mm (indexes 13,13)
input to the neural net: 13
output probabilities from the neural net: tensor([0.0303, 0.0145, 0.0024, 0.0226, 0.0072, 0.0880, 0.0078, 0.0018, 0.0212,
        0.0249, 0.0128, 0.0610, 0.0187, 0.0070, 0.0188, 0.0953, 0.1181, 0.0066,
        0.0628, 0.0764, 0.0075, 0.0262, 0.0169, 0.0987, 0.0345, 0.0482, 0.0699])
label (actual next character): 13
probability assigned by the net to the the correct character: 0.007006798405200243
log likelihood: -4.960874557495117
negative log likelihood: 4.960874557495117
--------
bigram example 4: ma (indexes 13,1)
input to the neural net: 13
output probabilities from the neural net: tensor([0.0303, 0.0145, 0.0024, 0.0226, 0.0072, 0.0880, 0.0078, 0.0018, 0.0212,
        0.0249, 0.0128, 0.0610, 0.0187, 0.0070, 0.0188, 0.0953, 0.1181, 0.0066,
        0.0628, 0.0764, 0.0075, 0.0262, 0.0169, 0.0987, 0.0345, 0.0482, 0.0699])
label (actual next character): 1
probability assigned by the net to the the correct character: 0.014500692486763
log likelihood: -4.233558654785156
negative log likelihood: 4.233558654785156
--------
bigram example 5: a. (indexes 1,0)
input to the neural net: 1
output probabilities from the neural net: tensor([0.0153, 0.2124, 0.0036, 0.0122, 0.0792, 0.0490, 0.0143, 0.0098, 0.0153,
        0.0729, 0.0190, 0.0549, 0.0190, 0.0134, 0.0063, 0.0246, 0.0061, 0.0062,
        0.0422, 0.0847, 0.0656, 0.0031, 0.0085, 0.0196, 0.0148, 0.0620, 0.0657])
label (actual next character): 0
probability assigned by the net to the the correct character: 0.015316599979996681
log likelihood: -4.178818225860596
negative log likelihood: 4.178818225860596
=========
average negative log likelihood, i.e. loss = 4.624675273895264</code></pre>
</div>
</div>
</section>
<section id="vectorized-loss" class="level2">
<h2 class="anchored" data-anchor-id="vectorized-loss">vectorized loss</h2>
<div id="db090f39" class="cell" data-execution_count="39">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb64-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> probs[torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), ys].log().mean()</span>
<span id="cb64-2">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>tensor(4.6247)</code></pre>
</div>
</div>
</section>
<section id="backward-and-update-in-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="backward-and-update-in-pytorch">backward and update, in PyTorch</h2>
<div id="b419e3ec" class="cell" data-execution_count="40">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb66-2">W.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set to zero the gradient</span></span>
<span id="cb66-3">loss.backward()</span>
<span id="cb66-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this can not yet run for now, PyTorch require the specification of require_grad</span></span></code></pre></div>
</details>
</div>
<div id="0c883e49" class="cell" data-execution_count="41">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb67-1">W.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> W.grad</span></code></pre></div>
</details>
</div>
</section>
<section id="putting-everything-together" class="level2">
<h2 class="anchored" data-anchor-id="putting-everything-together">putting everything together</h2>
<div id="08a1d971" class="cell" data-execution_count="42">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the dataset</span></span>
<span id="cb68-2">xs, ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb68-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words:</span>
<span id="cb68-4">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>]</span>
<span id="cb68-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb68-6">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb68-7">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb68-8">    xs.append(ix1)</span>
<span id="cb68-9">    ys.append(ix2)</span>
<span id="cb68-10">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(xs)</span>
<span id="cb68-11">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(ys)</span>
<span id="cb68-12">num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xs.nelement()</span>
<span id="cb68-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number of examples: '</span>, num)</span>
<span id="cb68-14"></span>
<span id="cb68-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize the 'network'</span></span>
<span id="cb68-16">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb68-17">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g, requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>number of examples:  228146</code></pre>
</div>
</div>
<div id="9550201b" class="cell" data-execution_count="43">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gradient descent</span></span>
<span id="cb70-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># after run 100 times, shorten the notebook</span></span>
<span id="cb70-3"></span>
<span id="cb70-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb70-5">  xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.one_hot(xs, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input to the network: one-hot encoding</span></span>
<span id="cb70-6">  logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict log-counts</span></span>
<span id="cb70-7">  counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts, equivalent to N</span></span>
<span id="cb70-8">  probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probabilities for next character</span></span>
<span id="cb70-9">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>probs[torch.arange(num), ys].log().mean() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(W<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regularization loss</span></span>
<span id="cb70-10">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss.item())</span>
<span id="cb70-11"></span>
<span id="cb70-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb70-13">  W.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set to zero the gradient</span></span>
<span id="cb70-14">  loss.backward()</span>
<span id="cb70-15"></span>
<span id="cb70-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb70-17">  W.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> W.grad</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>3.768618583679199</code></pre>
</div>
</div>
<p>Looking back to the backprogation in the <a href="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/#doing-gradient-descent-optimization-manually-training-the-network">lesson 1</a>, everything look similar here:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 38%">
<col style="width: 36%">
</colgroup>
<thead>
<tr class="header">
<th>Part</th>
<th>This neural nets for bigram language modeling</th>
<th>Neural nets introduced in the lesson 1</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Forward pass</td>
<td><code>probs</code> , use negative log likelihood as loss function, doing classification</td>
<td><code>ypred</code> , use MSE for loss function, doing regression</td>
</tr>
<tr class="even">
<td>Backward pass</td>
<td>Same, offered by Torch.</td>
<td>Set grad of params to be zeros and do backpropagation.</td>
</tr>
<tr class="odd">
<td>Update loss</td>
<td>Same</td>
<td>Update the parameters, change the parameters following opposite direction to reduce the loss.</td>
</tr>
</tbody>
</table>
</section>
<section id="note-1-one-hot-encoding-really-just-selects-a-row-of-the-next-linear-layers-weight-matrix" class="level2">
<h2 class="anchored" data-anchor-id="note-1-one-hot-encoding-really-just-selects-a-row-of-the-next-linear-layers-weight-matrix">note 1: one-hot encoding really just selects a row of the next Linear layer’s weight matrix</h2>
<p>Look at the below code, <code>xenc @ W</code> is (5, 27) @ (27, 27) that will result (5, 27) matrix. Each <code>ix</code> row of that 5-rows result matrix should be the selection of corresponding character rows in the <code>W</code>.</p>
<div id="c27d1377" class="cell" data-execution_count="44">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb72-1">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict log-counts</span></span>
<span id="cb72-2">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts, equivalent to N</span></span>
<span id="cb72-3">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probabilities for next character</span></span></code></pre></div>
</details>
</div>
<p>So in this gradient-based framework, we start with a random array of parameters. By optimizing the loss function we will get the same result with the bigram approach (<code>W</code> and <code>N</code> are almost the same, it’s log count here why is count in bigram). That’s why we obtained the same loss!</p>
<p>The neural networks offer more flexibility!</p>
</section>
<section id="note-2-model-smoothing-as-regularization-loss" class="level2">
<h2 class="anchored" data-anchor-id="note-2-model-smoothing-as-regularization-loss">note 2: model smoothing as regularization loss</h2>
<p>Same with smoothing technique when we’ve doing the bigram model, gradient-based framework have an equivalent way for smoothing. We will try to incentivize <code>W</code> to be near zero. We augment to loss function by adding this: <code>0.01*(W**2).mean()</code>.</p>
<div id="d05d18b7" class="cell" data-execution_count="45">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb73-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>probs[torch.arange(num), ys].log().mean() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(W<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span></code></pre></div>
</details>
</div>
</section>
<section id="sampling-from-the-neural-net" class="level2">
<h2 class="anchored" data-anchor-id="sampling-from-the-neural-net">sampling from the neural net</h2>
<div id="b7ae9051" class="cell" data-execution_count="46">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># finally, sample from the 'neural net' model</span></span>
<span id="cb74-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb74-3"></span>
<span id="cb74-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb74-5"></span>
<span id="cb74-6">  out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb74-7">  ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb74-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb74-9"></span>
<span id="cb74-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ----------</span></span>
<span id="cb74-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BEFORE:</span></span>
<span id="cb74-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p = P[ix]</span></span>
<span id="cb74-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ----------</span></span>
<span id="cb74-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NOW:</span></span>
<span id="cb74-15">    xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.one_hot(torch.tensor([ix]), num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb74-16">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict log-counts</span></span>
<span id="cb74-17">    counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts, equivalent to N</span></span>
<span id="cb74-18">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probabilities for next character</span></span>
<span id="cb74-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ----------</span></span>
<span id="cb74-20"></span>
<span id="cb74-21">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(p, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb74-22">    out.append(itos[ix])</span>
<span id="cb74-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb74-24">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb74-25">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(out))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>juwjdjdjancqydjufhqyywecnw.
.
oiin.
toziasz.
twt.</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">conclusion</h2>
<p>What we’ve gone through:</p>
<ul>
<li>introduced bigrams language model? how we can train, sample, and evaluate the model;</li>
<li>we modeled by 2 different ways:
<ul>
<li>1st: counted out the freq of bigram and normalized it;</li>
<li>2nd: used a negative log likelihood loss as a guide to optimizing the counts matrix/array in a gradient-based framework;</li>
<li>we obtained the same result!</li>
</ul></li>
<li>gradient-based framework is more flexible. We’ve just modeled the simplest/dumpiest language model. In next lessons, we will complexify it.</li>
</ul>
<p>We are on the way out to <strong>transformer</strong>!</p>
<p>Thank you, Andrej!</p>
</section>
</section>
<section id="resources" class="level1">
<h1>resources</h1>
<ol type="1">
<li>YouTube video lecture: <a href="https://www.youtube.com/watch?v=PaCmpygFfXo" class="uri">https://www.youtube.com/watch?v=PaCmpygFfXo</a></li>
<li>Jupyter notebook files: <a href="https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part1_bigrams.ipynb" class="uri">https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part1_bigrams.ipynb</a></li>
<li><code>makemore</code> Github repo: <a href="https://github.com/karpathy/makemore" class="uri">https://github.com/karpathy/makemore</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>andrej karpathy</category>
  <category>nn-z2h</category>
  <category>neural networks</category>
  <guid>https://lktuan.github.io/blog/2024-11-15-nn-z2h-p2/</guid>
  <pubDate>Thu, 14 Nov 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-11-15-nn-z2h-p2/andrej_new.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data Science Project with Mamba, Python, and VS Code on Window</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-11-04-intro-to-mamba/</link>
  <description><![CDATA[ 





<section id="vì-sao-mà-mamba" class="level1">
<h1>Vì sao mà Mamba?</h1>
<p>Là một non-tech data coder, mình vẫn loay hoay việc setup một dự án có thể được tái sử dụng và dễ dàng deploy, đặc biệt là với dự án dạng data - khi mà DS/DA sẽ làm việc nhiều với notebook - rất anti production.</p>
<div class="columns">
<div class="column" style="width:60%;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-04-intro-to-mamba/meme_top.png" class="img-fluid figure-img"></p>
<figcaption>Arggg! Cơn đau đầu của non-tech làm data, nguồn ảnh <a href="https://www.analyticsvidhya.com/blog/2023/03/choosing-the-right-python-environment-tool-for-your-next-project/">Analytics Vidhya</a></figcaption>
</figure>
</div>
</div><div class="column" style="width:40%;">
<p><img src="https://lktuan.github.io/blog/2024-11-04-intro-to-mamba/meme_bottom.png" class="img-fluid"></p>
</div>
</div>
<p>Mình tìm hiểu một số công cụ và dưới đây là so sánh:</p>
<ol type="1">
<li><code>Mamba</code> ✅</li>
</ol>
<ul>
<li><p>Ưu điểm:</p>
<ul>
<li>Nhanh hơn Conda nhiều lần</li>
<li>Tương thích hoàn toàn với Conda</li>
<li>Quản lý được cả Python và non-Python dependencies</li>
<li>Tích hợp tốt với notebooks</li>
</ul></li>
</ul>
<ol start="2" type="1">
<li><code>Poetry</code></li>
</ol>
<ul>
<li><p>Ưu điểm:</p>
<ul>
<li>Dependency resolution tốt</li>
<li>Lock file chính xác</li>
</ul></li>
<li><p>Nhược điểm:</p>
<ul>
<li>Khó xử lý non-Python dependencies</li>
<li>Cần thêm setup cho notebook kernels</li>
<li>Không phù hợp lắm với data science</li>
</ul></li>
</ul>
<ol type="1">
<li><code>venv</code></li>
</ol>
<ul>
<li>Quá đơn giản cho data science</li>
<li>Không xử lý được dependencies phức tạp</li>
<li>Cần nhiều cấu hình thủ công</li>
</ul>
<ol start="4" type="1">
<li><code>pipenv</code></li>
</ol>
<ul>
<li>Tương tự Poetry nhưng ít tính năng hơn</li>
<li>Không phù hợp với data science</li>
</ul>
<ol start="5" type="1">
<li><code>uv</code></li>
</ol>
<ul>
<li>Mới và nhanh</li>
<li>Chưa đủ chín muồi cho data science</li>
<li>Thiếu nhiều tính năng cần thiết</li>
</ul>
<p>Xem ra <code>mamba</code> có vẻ ổn nhất, hãy đào sâu hơn về ưu điểm của nó:</p>
<ol type="1">
<li>Xử lý dependencies phức tạp</li>
</ol>
<ul>
<li>Data science thường cần nhiều thư viện với dependencies phức tạp (numpy, pandas, scipy, pytorch…)</li>
<li>Mamba giải quyết dependencies nhanh và hiệu quả hơn Conda</li>
<li>Xử lý tốt các thư viện có binary dependencies (như CUDA)</li>
</ul>
<ol start="2" type="1">
<li>Quản lý môi trường kernel cho notebooks</li>
</ol>
<ul>
<li>Tự động tích hợp với Jupyter notebooks</li>
<li>Dễ dàng switch giữa các môi trường trong notebook</li>
<li>Không cần cấu hình thêm cho notebook kernels</li>
</ul>
<p>Oke giờ hãy thử xem làm thế nào để tổ chức phát triển một dự án với mamba - VS Code trên Window.</p>
</section>
<section id="hướng-dẫn-cài-đặt-và-sử-dụng-mamba-với-vs-code-trên-windows" class="level1">
<h1>Hướng dẫn Cài đặt và Sử dụng Mamba với VS Code trên Windows</h1>
<section id="cài-đặt-mamba-trên-windows" class="level2">
<h2 class="anchored" data-anchor-id="cài-đặt-mamba-trên-windows">1. Cài đặt Mamba trên Windows</h2>
<section id="cách-1-tải-trực-tiếp" class="level3">
<h3 class="anchored" data-anchor-id="cách-1-tải-trực-tiếp">Cách 1: Tải trực tiếp</h3>
<ul>
<li>Tải Mambaforge cho Windows từ: <a href="https://github.com/conda-forge/miniforge#mambaforge" class="uri">https://github.com/conda-forge/miniforge#mambaforge</a></li>
<li>Chạy file installer và làm theo hướng dẫn.</li>
</ul>
</section>
<section id="cách-2-dùng-windows-terminalpowershell" class="level3">
<h3 class="anchored" data-anchor-id="cách-2-dùng-windows-terminalpowershell">Cách 2: Dùng Windows Terminal/PowerShell</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Windows-x86_64.exe <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-OutFile</span> mambaforge.exe</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">start</span> /wait <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> mambaforge.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\Mambaforge</span></code></pre></div>
</section>
</section>
<section id="tích-hợp-với-vs-code" class="level2">
<h2 class="anchored" data-anchor-id="tích-hợp-với-vs-code">2. Tích hợp với VS Code</h2>
<section id="cài-đặt-extensions" class="level3">
<h3 class="anchored" data-anchor-id="cài-đặt-extensions">Cài đặt Extensions</h3>
<ol type="1">
<li>Python (Microsoft)</li>
<li>Jupyter (Microsoft)</li>
</ol>
</section>
<section id="tạo-và-cấu-hình-môi-trường" class="level3">
<h3 class="anchored" data-anchor-id="tạo-và-cấu-hình-môi-trường">Tạo và Cấu hình Môi trường</h3>
<p>Tạo file <code>environment.yml</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ds-project</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> conda-forge</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> defaults</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dependencies</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> python=3.10</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ipykernel</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pandas</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> numpy</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> matplotlib</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> scikit-learn</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> jupyter</span></span></code></pre></div>
<p>Tạo môi trường từ file:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> env create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> environment.yml</span></code></pre></div>
</section>
</section>
<section id="cấu-hình-vs-code" class="level2">
<h2 class="anchored" data-anchor-id="cấu-hình-vs-code">3. Cấu hình VS Code</h2>
<section id="chọn-python-interpreter" class="level3">
<h3 class="anchored" data-anchor-id="chọn-python-interpreter">Chọn Python Interpreter</h3>
<ol type="1">
<li>Mở Command Palette (<code>Ctrl + Shift + P</code>)</li>
<li>Tìm “Python: Select Interpreter”</li>
<li>Chọn môi trường Mamba vừa tạo</li>
</ol>
</section>
<section id="cấu-hình-notebooks" class="level3">
<h3 class="anchored" data-anchor-id="cấu-hình-notebooks">Cấu hình Notebooks</h3>
<ul>
<li>VS Code tự động nhận diện kernel từ môi trường Mamba</li>
<li>Kernel có thể được chọn ở góc phải trên của notebook</li>
</ul>
</section>
</section>
<section id="cấu-trúc-project-đề-xuất" class="level2">
<h2 class="anchored" data-anchor-id="cấu-trúc-project-đề-xuất">4. Cấu trúc Project Đề Xuất</h2>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">project/</span>
<span id="cb4-2">│</span>
<span id="cb4-3">├── .vscode/                      # VS Code settings</span>
<span id="cb4-4">│   ├── settings.json</span>
<span id="cb4-5">│   └── launch.json</span>
<span id="cb4-6">│</span>
<span id="cb4-7">├── data/</span>
<span id="cb4-8">│   ├── raw/</span>
<span id="cb4-9">│   └── processed/</span>
<span id="cb4-10">│</span>
<span id="cb4-11">├── notebooks/</span>
<span id="cb4-12">│   ├── 01_exploration.ipynb</span>
<span id="cb4-13">│   └── 02_analysis.ipynb</span>
<span id="cb4-14">│</span>
<span id="cb4-15">├── src/</span>
<span id="cb4-16">│   └── processing/</span>
<span id="cb4-17">│       ├── __init__.py</span>
<span id="cb4-18">│       └── data_processing.py</span>
<span id="cb4-19">│</span>
<span id="cb4-20">├── environment.yml</span>
<span id="cb4-21">├── .gitignore</span>
<span id="cb4-22">└── README.md</span></code></pre></div>
</section>
<section id="cấu-hình-vs-code-settings" class="level2">
<h2 class="anchored" data-anchor-id="cấu-hình-vs-code-settings">5. Cấu hình VS Code Settings</h2>
<p>Tạo file <code>.vscode/settings.json</code>:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"python.defaultInterpreterPath"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"${env:USERPROFILE}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Mambaforge</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">envs</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ds-project</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">python.exe"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"jupyter.notebookFileRoot"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"${workspaceFolder}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"python.analysis.extraPaths"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"${workspaceFolder}/src"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"python.formatting.provider"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"editor.formatOnSave"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"ruff.enable"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"ruff.format.args"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--config=pyproject.toml"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"ruff.lint.args"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--config=pyproject.toml"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"mypy.enabled"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"mypy.configFile"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pyproject.toml"</span></span>
<span id="cb5-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="cấu-hình-development-tools" class="level2">
<h2 class="anchored" data-anchor-id="cấu-hình-development-tools">6. Cấu hình Development Tools</h2>
<section id="cài-đặt-development-dependencies" class="level3">
<h3 class="anchored" data-anchor-id="cài-đặt-development-dependencies">6.1 Cài đặt Development Dependencies</h3>
<p>Cập nhật <code>environment.yml</code>:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ds-project</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> conda-forge</span></span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> defaults</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dependencies</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> python=3.10</span></span>
<span id="cb6-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ipykernel</span></span>
<span id="cb6-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pandas</span></span>
<span id="cb6-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> numpy</span></span>
<span id="cb6-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> matplotlib</span></span>
<span id="cb6-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> scikit-learn</span></span>
<span id="cb6-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> jupyter</span></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # Dev dependencies</span></span>
<span id="cb6-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> black</span></span>
<span id="cb6-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ruff</span></span>
<span id="cb6-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mypy</span></span>
<span id="cb6-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pre-commit</span></span>
<span id="cb6-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nbqa</span></span>
<span id="cb6-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> jupytext</span></span></code></pre></div>
</section>
<section id="cấu-hình-pyproject.toml" class="level3">
<h3 class="anchored" data-anchor-id="cấu-hình-pyproject.toml">6.2 Cấu hình pyproject.toml</h3>
<p>Tạo file <code>pyproject.toml</code>:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource toml number-lines code-with-copy"><code class="sourceCode toml"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.black]</span></span>
<span id="cb7-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">line-length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span></span>
<span id="cb7-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">target-version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"py310"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">include</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">\.pyi?$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.ruff]</span></span>
<span id="cb7-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">line-length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span></span>
<span id="cb7-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">target-version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"py310"</span></span>
<span id="cb7-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb7-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pycodestyle</span></span>
<span id="cb7-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyflakes</span></span>
<span id="cb7-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># isort</span></span>
<span id="cb7-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UP"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyupgrade</span></span>
<span id="cb7-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ignore</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb7-16"></span>
<span id="cb7-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.ruff.isort]</span></span>
<span id="cb7-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">known-first-party</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tool.mypy]</span></span>
<span id="cb7-21"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">python_version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3.10"</span></span>
<span id="cb7-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">warn_return_any</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb7-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">warn_unused_configs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb7-24"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">disallow_untyped_defs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb7-25"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">check_untyped_defs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb7-26"></span>
<span id="cb7-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[tool.mypy.overrides]]</span></span>
<span id="cb7-28"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">module</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb7-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas.*"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numpy.*"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matplotlib.*"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seaborn.*"</span></span>
<span id="cb7-33"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-34"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ignore_missing_imports</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</section>
<section id="cấu-hình-pre-commit" class="level3">
<h3 class="anchored" data-anchor-id="cấu-hình-pre-commit">6.3 Cấu hình Pre-commit</h3>
<p>Tạo file <code>.pre-commit-config.yaml</code>:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repos</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/pre-commit/pre-commit-hooks</span></span>
<span id="cb8-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v4.5.0</span></span>
<span id="cb8-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hooks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> trailing-whitespace</span></span>
<span id="cb8-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> end-of-file-fixer</span></span>
<span id="cb8-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> check-yaml</span></span>
<span id="cb8-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> check-json</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> check-added-large-files</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--maxkb=5000'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/psf/black</span></span>
<span id="cb8-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.1.1</span></span>
<span id="cb8-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hooks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> black</span></span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/astral-sh/ruff-pre-commit</span></span>
<span id="cb8-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v0.2.1</span></span>
<span id="cb8-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hooks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ruff</span></span>
<span id="cb8-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--fix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb8-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ruff-format</span></span>
<span id="cb8-23"></span>
<span id="cb8-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/pre-commit/mirrors-mypy</span></span>
<span id="cb8-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v1.8.0</span></span>
<span id="cb8-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hooks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mypy</span></span>
<span id="cb8-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">additional_dependencies</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">types-all</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb8-29"></span>
<span id="cb8-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/nbQA-dev/nbQA</span></span>
<span id="cb8-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7.1</span></span>
<span id="cb8-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hooks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb8-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nbqa-black</span></span>
<span id="cb8-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">additional_dependencies</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">black==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.1.1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb8-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nbqa-ruff</span></span>
<span id="cb8-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">additional_dependencies</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ruff==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2.1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span></code></pre></div>
</section>
<section id="cấu-hình-git-ignore" class="level3">
<h3 class="anchored" data-anchor-id="cấu-hình-git-ignore">6.4 Cấu hình Git Ignore</h3>
<p>Tạo file <code>.gitignore</code>:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource gitignore number-lines code-with-copy"><code class="sourceCode"><span id="cb9-1"># Python</span>
<span id="cb9-2">__pycache__/</span>
<span id="cb9-3">*.py[cod]</span>
<span id="cb9-4">*$py.class</span>
<span id="cb9-5">*.so</span>
<span id="cb9-6">.Python</span>
<span id="cb9-7">build/</span>
<span id="cb9-8">develop-eggs/</span>
<span id="cb9-9">dist/</span>
<span id="cb9-10">downloads/</span>
<span id="cb9-11">eggs/</span>
<span id="cb9-12">.eggs/</span>
<span id="cb9-13">lib/</span>
<span id="cb9-14">lib64/</span>
<span id="cb9-15">parts/</span>
<span id="cb9-16">sdist/</span>
<span id="cb9-17">var/</span>
<span id="cb9-18">wheels/</span>
<span id="cb9-19">*.egg-info/</span>
<span id="cb9-20">.installed.cfg</span>
<span id="cb9-21">*.egg</span>
<span id="cb9-22"></span>
<span id="cb9-23"># Jupyter Notebook</span>
<span id="cb9-24">.ipynb_checkpoints</span>
<span id="cb9-25">*/.ipynb_checkpoints/*</span>
<span id="cb9-26">profile_default/</span>
<span id="cb9-27">ipython_config.py</span>
<span id="cb9-28"></span>
<span id="cb9-29"># VS Code</span>
<span id="cb9-30">.vscode/*</span>
<span id="cb9-31">!.vscode/settings.json</span>
<span id="cb9-32">!.vscode/tasks.json</span>
<span id="cb9-33">!.vscode/launch.json</span>
<span id="cb9-34">!.vscode/extensions.json</span>
<span id="cb9-35"></span>
<span id="cb9-36"># Environment</span>
<span id="cb9-37">.env</span>
<span id="cb9-38">.venv</span>
<span id="cb9-39">env/</span>
<span id="cb9-40">venv/</span>
<span id="cb9-41">ENV/</span>
<span id="cb9-42">env.bak/</span>
<span id="cb9-43">venv.bak/</span>
<span id="cb9-44">.conda/</span>
<span id="cb9-45">conda-env/</span>
<span id="cb9-46"></span>
<span id="cb9-47"># Data</span>
<span id="cb9-48">data/raw/*</span>
<span id="cb9-49">!data/raw/.gitkeep</span>
<span id="cb9-50">data/processed/*</span>
<span id="cb9-51">!data/processed/.gitkeep</span>
<span id="cb9-52">*.csv</span>
<span id="cb9-53">*.xlsx</span>
<span id="cb9-54">*.xls</span>
<span id="cb9-55">*.db</span>
<span id="cb9-56">*.sqlite</span>
<span id="cb9-57">*.h5</span>
<span id="cb9-58"></span>
<span id="cb9-59"># Logs</span>
<span id="cb9-60">logs/</span>
<span id="cb9-61">*.log</span>
<span id="cb9-62">.hypothesis/</span>
<span id="cb9-63">.pytest_cache/</span>
<span id="cb9-64">.coverage</span>
<span id="cb9-65">htmlcov/</span>
<span id="cb9-66"></span>
<span id="cb9-67"># OS specific</span>
<span id="cb9-68">.DS_Store</span>
<span id="cb9-69">.DS_Store?</span>
<span id="cb9-70">._*</span>
<span id="cb9-71">.Spotlight-V100</span>
<span id="cb9-72">.Trashes</span>
<span id="cb9-73">ehthumbs.db</span>
<span id="cb9-74">Thumbs.db</span></code></pre></div>
</section>
<section id="khởi-tạo-pre-commit" class="level3">
<h3 class="anchored" data-anchor-id="khởi-tạo-pre-commit">6.5 Khởi tạo Pre-commit</h3>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate môi trường</span></span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate ds-project</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cài đặt pre-commit hooks</span></span>
<span id="cb10-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pre-commit</span> install</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Tùy chọn) Chạy pre-commit trên tất cả files</span></span>
<span id="cb10-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pre-commit</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--all-files</span></span></code></pre></div>
</section>
<section id="extensions-vs-code-cho-notebooks" class="level3">
<h3 class="anchored" data-anchor-id="extensions-vs-code-cho-notebooks">6.6 Extensions VS Code cho Notebooks</h3>
<p>Cài thêm các extensions sau:</p>
<ol type="1">
<li>“Jupyter Notebook Renderers”</li>
<li>“Jupytext for Notebooks”</li>
<li>“Black Formatter”</li>
<li>“Ruff”</li>
<li>“Mypy Type Checker”</li>
</ol>
</section>
<section id="cấu-hình-jupytext" class="level3">
<h3 class="anchored" data-anchor-id="cấu-hình-jupytext">6.7 Cấu hình Jupytext</h3>
<p>Tạo file <code>.jupytext.toml</code>:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource toml number-lines code-with-copy"><code class="sourceCode toml"><span id="cb11-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">formats</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ipynb,qmd"</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[formats]</span></span>
<span id="cb11-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ipynb</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb11-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">qmd</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span></code></pre></div>
</section>
</section>
<section id="pro-tips-cho-windows" class="level2">
<h2 class="anchored" data-anchor-id="pro-tips-cho-windows">7. Pro Tips cho Windows</h2>
<section id="path-management" class="level3">
<h3 class="anchored" data-anchor-id="path-management">Path Management</h3>
<p>Sử dụng <code>pathlib</code> để xử lý đường dẫn:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb12-2">data_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file.csv"</span></span></code></pre></div>
</section>
<section id="git-configuration" class="level3">
<h3 class="anchored" data-anchor-id="git-configuration">Git Configuration</h3>
<p>Tạo file <code>.gitignore</code>:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource gitignore number-lines code-with-copy"><code class="sourceCode"><span id="cb13-1"># .gitignore</span>
<span id="cb13-2">data/raw/*</span>
<span id="cb13-3">data/processed/*</span>
<span id="cb13-4">.ipynb_checkpoints/</span>
<span id="cb13-5">__pycache__/</span>
<span id="cb13-6">*.pyc</span></code></pre></div>
</section>
<section id="jupyter-trong-vs-code" class="level3">
<h3 class="anchored" data-anchor-id="jupyter-trong-vs-code">Jupyter trong VS Code</h3>
<ul>
<li>Chạy cell: <code>Shift + Enter</code></li>
<li>Variable explorer có sẵn</li>
<li>Plot viewer tích hợp</li>
<li>Intellisense hoạt động tốt</li>
</ul>
</section>
<section id="debugging" class="level3">
<h3 class="anchored" data-anchor-id="debugging">Debugging</h3>
<ul>
<li>Debugger tích hợp cho cả <code>.py</code> và <code>.ipynb</code></li>
<li>Có thể đặt breakpoints trong notebooks</li>
</ul>
</section>
</section>
<section id="xử-lý-lỗi-thường-gặp" class="level2">
<h2 class="anchored" data-anchor-id="xử-lý-lỗi-thường-gặp">8. Xử lý Lỗi Thường Gặp</h2>
<ol type="1">
<li><p><strong>Path quá dài trên Windows</strong></p>
<ul>
<li>Sử dụng đường dẫn ngắn hơn</li>
<li>Kích hoạt hỗ trợ đường dẫn dài trong Windows</li>
</ul></li>
<li><p><strong>Conflict với môi trường Python khác</strong></p>
<ul>
<li>Đảm bảo PATH được cập nhật đúng</li>
<li>Kiểm tra <code>where python</code> trong terminal</li>
</ul></li>
<li><p><strong>Jupyter Kernel không hiển thị</strong></p>
<ul>
<li>Cài lại <code>ipykernel</code></li>
<li>Kiểm tra jupyter kernelspec list</li>
</ul></li>
</ol>
</section>
<section id="resources-hữu-ích" class="level2">
<h2 class="anchored" data-anchor-id="resources-hữu-ích">9. Resources Hữu ích</h2>
<ul>
<li><a href="https://mamba.readthedocs.io/">Mamba Documentation</a></li>
<li><a href="https://code.visualstudio.com/docs/python/python-tutorial">VS Code Python Documentation</a></li>
<li><a href="https://code.visualstudio.com/docs/datascience/jupyter-notebooks">Jupyter in VS Code</a></li>
</ul>
</section>
<section id="workflow-đề-xuất" class="level2">
<h2 class="anchored" data-anchor-id="workflow-đề-xuất">10. Workflow Đề Xuất</h2>
<ol type="1">
<li><strong>Khởi tạo project mới</strong>:</li>
</ol>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tạo và activate môi trường</span></span>
<span id="cb14-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> env create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> environment.yml</span>
<span id="cb14-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate ds-project</span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cài đặt pre-commit hooks</span></span>
<span id="cb14-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pre-commit</span> install</span></code></pre></div>
<ol start="2" type="1">
<li><strong>Phát triển</strong>:</li>
</ol>
<ul>
<li>Code trong VS Code với các extensions đã cài</li>
<li>Notebooks sẽ tự động được format bởi nbQA</li>
<li>Pre-commit sẽ kiểm tra code trước mỗi commit</li>
</ul>
<ol start="3" type="1">
<li><strong>Commit Changes</strong>:</li>
</ol>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your message"</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-commit sẽ tự động chạy các checks</span></span></code></pre></div>
<ol start="4" type="1">
<li><strong>Update Dependencies</strong>:</li>
</ol>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Thêm package mới</span></span>
<span id="cb16-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install package-name</span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export environment</span></span>
<span id="cb16-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> env export <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> environment.yml</span></code></pre></div>
</section>
<section id="bonus-nếu-muốn-import-một-module-từ-src-trong-notebook.ipynb-thì-làm-thế-nào" class="level2">
<h2 class="anchored" data-anchor-id="bonus-nếu-muốn-import-một-module-từ-src-trong-notebook.ipynb-thì-làm-thế-nào">Bonus: nếu muốn import một module từ <code>src</code> trong <code>notebook.ipynb</code> thì làm thế nào?</h2>
<div id="c9cc4dfd" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Trong notebook của bạn (ví dụ notebooks/analysis.ipynb)</span></span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Setup path</span></span>
<span id="cb17-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb17-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb17-6">project_root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(Path.cwd().parent)</span>
<span id="cb17-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> project_root <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sys.path:</span>
<span id="cb17-8">    sys.path.append(project_root)</span>
<span id="cb17-9"></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Import function</span></span>
<span id="cb17-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.processing.data_preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> process_data, clean_data</span>
<span id="cb17-12"></span>
<span id="cb17-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Sử dụng function</span></span>
<span id="cb17-14">df_processed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_data(df_raw)</span></code></pre></div>
</details>
</div>
<p>Với lưu ý:</p>
<ul>
<li>Đảm bảo có file <code>__init__.py</code> trong mỗi thư mục Python</li>
<li>Không nên dùng relative imports (<code>from ...src.processing</code>) vì dễ gây lỗi</li>
<li>Nên đặt tên module và function theo PEP 8</li>
<li>Trong <code>data_preprocessing.py</code> nên có docstring mô tả function</li>
</ul>
<div id="05d43597" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># src/processing/data_preprocessing.py</span></span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> process_data(df):</span>
<span id="cb18-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Process the input dataframe.</span></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        df (pd.DataFrame): Input dataframe</span></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb18-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pd.DataFrame: Processed dataframe</span></span>
<span id="cb18-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb18-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your code here</span></span>
<span id="cb18-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> processed_df</span></code></pre></div>
</details>
</div>


<!-- -->

</section>
</section>

 ]]></description>
  <category>python</category>
  <guid>https://lktuan.github.io/blog/2024-11-04-intro-to-mamba/</guid>
  <pubDate>Sun, 03 Nov 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-11-04-intro-to-mamba/mamba.png" medium="image" type="image/png" height="92" width="144"/>
</item>
<item>
  <title>Keynote on: Causal Effect Estimation in Practice - lessons learned from E-commerce &amp; Banking</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/</link>
  <description><![CDATA[ 





<p>Link: <a href="https://www.youtube.com/watch?v=pz7QD2GPBlE" class="uri">https://www.youtube.com/watch?v=pz7QD2GPBlE</a></p>
<p><a href="https://github.com/Senejohnny">Danial</a> focuses on the practical challenges and solutions in implementing causal effect estimation in business settings, particularly in finance and banking. The speaker emphasizes the gap between <strong>theoretical frameworks</strong> and <strong>real-world applications</strong>, sharing lessons learned from actual implementations.</p>
<section id="intro" class="level1">
<h1>0. Intro</h1>
<p>The author aim to shed some light on the practical setting and challenges of <strong>causal inference</strong>. Causal analysis goes further than predicting an outcome, all the way to influence it.</p>
</section>
<section id="practical-use-cases" class="level1">
<h1>1. Practical Use Cases</h1>
<ul>
<li>Effect estimation:
<ul>
<li>Marketing campaign effectiveness evaluation (on client/product acquisition and retention);</li>
<li>Assessment of free financial consultation services’ value (on revenue/NPS);</li>
</ul></li>
<li>Other applications [Out of scope]:
<ul>
<li>Root Cause Analysis: To what factor(s) the estimated effect can be attributed;</li>
<li>What if analysis: What is the result of a counterfactual scenario.</li>
</ul></li>
</ul>
<p>Eg.: the impact measurement of credit lines on customer retention. The primary challenge is moving from <strong>theoretical frameworks</strong> to <strong>practical business applications</strong>.</p>
</section>
<section id="the-gold-standard-vs.-reality" class="level1">
<h1>2. The Gold Standard vs.&nbsp;Reality</h1>
<ul>
<li>While A/B testing (randomized experiments) is considered the gold standard, it’s often impractical or impossible in real business settings;</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/1_ab_testing.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>golden standard</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Common obstacles include:
<ul>
<li>Marketers forgetting to implement proper randomization;</li>
<li>Cost and business constraints;</li>
<li>Ethical considerations;</li>
<li>Client non-compliance;</li>
<li>Limited data availability.</li>
</ul></li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/2_limitations.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>limitations</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="practical-challenges" class="level1">
<h1>3. Practical Challenges</h1>
<ul>
<li>Non-simultaneous contact: In reality, campaigns often target different groups at different times;</li>
<li>Lack of proper control groups: When targeting specific customer segments, finding comparable control groups is difficult;</li>
<li>No randomization: Business rules often determine who receives treatment, leading to selection bias.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/3_differences.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>differences</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="solutions-and-approaches" class="level1">
<h1>4. Solutions and Approaches</h1>
<section id="handling-non-randomization" class="level2">
<h2 class="anchored" data-anchor-id="handling-non-randomization">4.1. Handling Non-randomization</h2>
<ul>
<li>Use propensity score modeling to mimic randomization;</li>
<li>Account for confounding variables (like age, sex) that affect both treatment assignment and outcomes;</li>
<li>Apply inverse probability weighting to correct for selection bias.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/4_sol_1.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>minic randomization</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="control-group-selection" class="level2">
<h2 class="anchored" data-anchor-id="control-group-selection">4.2. Control Group Selection</h2>
<ul>
<li>Use rule-based methods to create comparable control groups;</li>
<li>Apply the same filters used in campaign targeting;</li>
<li>Consider similar products within the same category;</li>
<li>Implement exclusion criteria to maintain non-interference and consistency;</li>
<li>Ensure basic criteria matching (e.g., valid email addresses, opt-in status).</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/10_good_control.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>good control</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="kpi-consideration" class="level2">
<h2 class="anchored" data-anchor-id="kpi-consideration">4.3. KPI Consideration</h2>
<ul>
<li>Understand the propagation of effects through time:
<ul>
<li>Short-term metrics (email opens, clicks);</li>
<li>Mid-term metrics (product adoption);</li>
<li>Long-term metrics (revenue generation);</li>
</ul></li>
<li>Consider data availability and measurement timing;</li>
<li>Account for different variables affecting each level of metrics.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/9_effect_propagation_kpi.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>KPIs consideration</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="theoretical-frameworks" class="level1">
<h1>5. Theoretical Frameworks</h1>
<p>The speaker discusses two main schools of thought:</p>
<section id="potential-outcomes-framework" class="level2">
<h2 class="anchored" data-anchor-id="potential-outcomes-framework">5.1. Potential Outcomes Framework</h2>
<ul>
<li>Focuses on treatment assignment mechanisms;</li>
<li>Uses propensity scoring and inverse probability weighting;</li>
<li>Simpler to implement in practice.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/5_potantial_outcome.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>potential outcome</figcaption>
</figure>
</div>
</div>
</div>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/6_potential_outcome_assumption.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>potential outcome assumptions</figcaption>
</figure>
</div>
</div>
</div>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/7_when_association_is_causation.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>when association is causation?</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="structural-causal-models" class="level2">
<h2 class="anchored" data-anchor-id="structural-causal-models">5.2. Structural Causal Models</h2>
<ul>
<li>Based on causal graphs;</li>
<li>Provides a more complete picture of relationships;</li>
<li>Requires careful consideration of mediators, confounders, and colliders.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/8_SCM.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>structural causal models</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="practical-implementation-tips" class="level1">
<h1>6. Practical Implementation Tips</h1>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/11_practice_example.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>pratical example</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Start with simple rule-based approaches before applying sophisticated models;</li>
<li>Validate assumptions with domain experts;</li>
<li>Consider multiple time horizons for effect measurement;</li>
<li>Use survival analysis for handling time-varying outcomes;</li>
<li>Apply multiple methods to validate results;</li>
<li>Focus on business relevance rather than theoretical perfection.</li>
</ul>
</section>
<section id="key-considerations-for-success" class="level1">
<h1>7. Key Considerations for Success</h1>
<ul>
<li>Ensure exchangeability between treatment and control groups;</li>
<li>Maintain positivity (overlap in covariate distributions);</li>
<li>Avoid interference between groups;</li>
<li>Maintain consistency in treatment application;</li>
<li>Consider both direct and indirect effects;</li>
<li>Account for time-varying effects.</li>
</ul>
</section>
<section id="evaluation-challenges" class="level1">
<h1>8. Evaluation Challenges</h1>
<ul>
<li>Unlike simulated data, real-world applications lack known true effects;</li>
<li>Recommend using multiple methods and comparing results;</li>
<li>Validate findings with domain experts;</li>
<li>Consider business context and practical significance.</li>
</ul>
</section>
<section id="outtro" class="level1">
<h1>9. Outtro</h1>
<p>The speaker emphasizes that successful causal inference in practice requires:</p>
<ul>
<li>Balance between theoretical rigor and practical constraints;</li>
<li>Understanding of business context and limitations;</li>
<li>Use of simple, interpretable methods where appropriate;</li>
<li>Careful consideration of data quality and availability;</li>
<li>Collaboration with domain experts;</li>
<li>Focus on business-relevant metrics and timeframes.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/12_take_aways.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>take aways</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>The speech concludes by highlighting that while causal inference in practice may not always match theoretical ideals, careful application of basic principles, combined with practical business understanding, can still provide valuable insights for decision-making.</p>
<p>Summary with the help of <a href="https://claude.ai/"><strong>Claude 3.5 Sonnet</strong></a>. Happy exploring!</p>


<!-- -->

</section>

 ]]></description>
  <category>causal inference</category>
  <guid>https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/</guid>
  <pubDate>Thu, 24 Oct 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/causal_inf.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>DAX exercises by WiseOwl Training</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-09-30-DAX-practices/</link>
  <description><![CDATA[ 





<p>Link to the challenge: <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/" class="uri">https://www.wiseowl.co.uk/power-bi/exercises/dax/</a></p>
<section id="calculated-columns" class="level1">
<h1>1. <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/calculated-columns/">Calculated columns</a></h1>
<p>Including 11 exercises:</p>
<section id="operations-in-row-context" class="level4">
<h4 class="anchored" data-anchor-id="operations-in-row-context">1 <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/calculated-columns/5086/">Operations in Row context</a></h4>
<p>It’s pretty simple to calculate the <em>total floors</em>, just find the <strong>New column</strong> under <strong>Table tools</strong>, and sum the floors up:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb1-1">Total floors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Building[Floors above ground] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Building[Floors below ground]</span></code></pre></div>
</section>
<section id="div0" class="level4">
<h4 class="anchored" data-anchor-id="div0">2 <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/calculated-columns/4409/">!DIV0</a></h4>
<p>And for <em>Average floor height</em>, we just need to use “/”, or better practice, use <code>DIVIDE()</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb2-1">Average floor height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Building[Height m] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> Building[Floors above ground]</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// or</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">Average floor height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DIVIDE</span>(Building[Height m]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Building[Floors above ground])</span></code></pre></div>
<p>For each column, we have column tools to format the data.</p>
</section>
<section id="flow-control-with-if-and-switch" class="level4">
<h4 class="anchored" data-anchor-id="flow-control-with-if-and-switch">3 <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/calculated-columns/5089/">Flow control with <code>IF()</code> and <code>SWITCH()</code></a></h4>
<p>The <code>IF()</code> in DAX row context is pretty the same with Excel!</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb3-1">Has basement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IF</span>(Building[Floors below ground] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No"</span>)</span>
<span id="cb3-2">Century <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IF</span>(Building[Year Opened] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2001</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"20th Century"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"21st Century"</span>)</span></code></pre></div>
<p>Do you ever use <code>SWITCH()</code> in Excel, it’s the same in PBI:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb4-1">Category <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SWITCH</span> (</span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TRUE</span> ()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-4">    Building[Height m] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tiny"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-5">    Building[Height m] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Small"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-6">    Building[Height m] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Medium"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-7">    Building[Height m] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">700</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Big"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Large"</span></span>
<span id="cb4-9">)</span></code></pre></div>
</section>
<section id="more-operations" class="level4">
<h4 class="anchored" data-anchor-id="more-operations">4 <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/calculated-columns/5088/">More operations</a></h4>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is simple</span></span>
<span id="cb5-2">Tour length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Tour[End year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Tour[Start year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// With division operation, it's recommended to use DIVIDE() function:</span></span>
<span id="cb5-5">Shows per year <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DIVIDE</span>(Tour[Shows]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tour[Tour length])</span>
<span id="cb5-6">Avg show revenue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DIVIDE</span>(Tour[Actual gross]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tour[Shows])</span>
<span id="cb5-7">Avg attendance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DIVIDE</span>(Tour[Attendance]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tour[Shows])</span>
<span id="cb5-8">Avg ticket price <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DIVIDE</span>(Tour[Actual gross]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Tour[Attendance])</span></code></pre></div>
</section>
<section id="using-of-related" class="level4">
<h4 class="anchored" data-anchor-id="using-of-related">5 <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/calculated-columns/5091/">Using of <code>RELATED()</code></a></h4>
<p>We can use “<strong>&amp;</strong>” or the <code>CONCANATE()</code> function to join texts (in row context), and use <code>RELATED()</code> to get data from other tables with a relationship set up.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource js number-lines code-with-copy"><code class="sourceCode javascript"><span id="cb6-1">Name and location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATE</span>(Building[Building Name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RELATED</span>(City[City]))</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// or if we want to include the Country name</span></span>
<span id="cb6-4"></span>
<span id="cb6-5">Name and location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CONCATENATE</span> (</span>
<span id="cb6-7">    Building[Building Name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RELATED</span> ( City[City] ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span></span>
<span id="cb6-9">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RELATED</span> ( Country[Country] )</span>
<span id="cb6-10">)</span></code></pre></div>
</section>
<section id="handling-mismatch-with-related" class="level4">
<h4 class="anchored" data-anchor-id="handling-mismatch-with-related">6 <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/calculated-columns/4410/">Handling mismatch with <code>RELATED()</code></a></h4>
<p>We can use <code>RELATED()</code> and <code>ISBLANK()</code> to refer and check if there any matching record is returned.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb7-1">Quadrant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb7-2">IF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb7-3">    ISBLANK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> RELATED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> Quadrants<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>QuadrantName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb7-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No quadrant found"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-5">    RELATED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> Quadrants<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>QuadrantName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-7"></span>
<span id="cb7-8">Region <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb7-9">IF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb7-10">    ISBLANK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> RELATED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> Regions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>RegionName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb7-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No region assigned"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-12">    RELATED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> Regions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>RegionName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</section>
<section id="more-on-related" class="level4">
<h4 class="anchored" data-anchor-id="more-on-related">6 <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/calculated-columns/5092/">More on <code>RELATED()</code></a></h4>
</section>
<section id="context-transition-in-calculated-column" class="level4">
<h4 class="anchored" data-anchor-id="context-transition-in-calculated-column">7 <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/calculated-columns/4417/">Context transition in calculated column</a></h4>
<p>The first one <em>Total sales</em> was calculated in <strong>Products</strong> table, simply interate all the table <strong>Purchase</strong>, multiply <em>quanity</em> by <em>price</em> to get the entire revenue:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb8-1">Total Sales <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SUMX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Purchase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Purchase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>Quantity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Purchase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>Price<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span></code></pre></div>
<p>The second one - <em>Sales for product</em>, we want to calculate the corresponding sales for each product at the current row, so we just <strong>wrap</strong> the <code>CALCULATE()</code> function for the <strong>context transition</strong>:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb9-1">Sales <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb9-2">CALCULATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb9-3">    SUMX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> Purchase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Purchase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>Quantity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Purchase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>Price<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>And the final one:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb10-1">Product contribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DIVIDE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([</span>Sales <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> product<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],[</span>Total sales<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span></code></pre></div>
</section>
</section>
<section id="basic-measures" class="level1">
<h1>2. <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/basic-measures/">Basic measures</a></h1>
<p>Including 5 exercises:</p>
</section>
<section id="the-calculate-function" class="level1">
<h1>3. <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/filtering/">The <code>CALCULATE()</code> function</a></h1>
<p>Including 16 exercises</p>
</section>
<section id="the-values-function" class="level1">
<h1>4. <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/values-function/">The <code>VALUES()</code> function</a></h1>
<p>Including 7 exercises</p>
</section>
<section id="the-filter-function" class="level1">
<h1>5. <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/filter/">The <code>FILTER()</code> function</a></h1>
<p>Including 4 exercises</p>
</section>
<section id="understanding-earlier" class="level1">
<h1>6. <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/understanding-earlier/">Understanding <code>EARLIER()</code></a></h1>
<p>Including 2 exercises</p>
</section>
<section id="calendars-and-dates" class="level1">
<h1>7. <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/calendars-and-dates/">Calendars and dates</a></h1>
<p>Including 8 exercises</p>
</section>
<section id="advanced-date-functions" class="level1">
<h1>8. <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/advanced-date-functions/">Advanced date functions</a></h1>
<p>Including 1 exercise</p>
</section>
<section id="dax-queries" class="level1">
<h1>9. <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/dax-queries/">DAX queries</a></h1>
<p>Including 2 exercises</p>
</section>
<section id="variables" class="level1">
<h1>10. <a href="https://www.wiseowl.co.uk/power-bi/exercises/dax/variables/">Variables</a></h1>
<p>Including 3 exercises</p>


<!-- -->

</section>

 ]]></description>
  <category>dax</category>
  <guid>https://lktuan.github.io/blog/2024-09-30-DAX-practices/</guid>
  <pubDate>Sun, 29 Sep 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-09-30-DAX-practices/wise_owl.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Note on Mathematics as the Universal Language of Nature</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-08-08-note-muln/</link>
  <description><![CDATA[ 





<p>mình nghe bài nói chuyện “Mathematics as the Universal Language of Nature” của R. Seiringer, tổ chức tại Trường Đại học Sư phạm Huế, ngày 8 tháng 8 năm 2024. Dưới đây là note của mình.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-08-08-note-muln/talk_cover.png" class="img-fluid figure-img"></p>
<figcaption>talk cover</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Robert là 1 giáo sư chuyên, đầu ngành về Toán và Vật lý, từng giảng dạy tại Princeton, hiện nay công tác tại Viện Kỹ Thuật và Khoa học của Áo. Bài giảng này của giáo sư nhằm nêu bật vẻ đẹp của Toán và Vật lý, dùng Toán để giải thích tự nhiên.</p>
<section id="history" class="level1">
<h1>History</h1>
<ul>
<li>Newton: calculus, motion of earth around the sun, theory of gravity;</li>
<li>Fourier: Fourier series to understand hear transfer &amp; conduction (also green house effect!);</li>
<li>Rieman: thuyết tương đối tổng quát, lý thuyết trường lượng tử, lý thuyết dây.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
green house effect
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Jean-Baptiste Joseph Fourier, nhà toán học và vật lý học người Pháp, là người đầu tiên mô tả hiệu ứng nhà kính (greenhouse effect) vào năm 1824. Hãy giải thích về khái niệm này:</p>
<ol type="1">
<li><p><strong>Định nghĩa:</strong> Hiệu ứng nhà kính của Fourier đề cập đến quá trình mà khí quyển của Trái Đất giữ nhiệt, làm cho bề mặt hành tinh ấm hơn so với trường hợp không có khí quyển.</p></li>
<li><p><strong>Cơ chế cơ bản:</strong></p></li>
</ol>
<ol type="a">
<li><p>Bức xạ mặt trời đi qua khí quyển và được hấp thụ bởi bề mặt Trái Đất.</p></li>
<li><p>Trái Đất phát ra bức xạ hồng ngoại (nhiệt).</p></li>
<li><p>Một phần bức xạ này bị các khí nhà kính trong khí quyển hấp thụ và tái phát ra theo mọi hướng.</p></li>
<li><p>Quá trình này giữ nhiệt trong khí quyển, làm tăng nhiệt độ trung bình của Trái Đất.</p></li>
</ol>
<ol start="3" type="1">
<li><strong>Đóng góp của Fourier:</strong></li>
</ol>
<ul>
<li>Fourier nhận ra rằng khí quyển đóng vai trò như một “tấm chăn”, giữ nhiệt cho Trái Đất.</li>
<li>Ông so sánh quá trình này với cách hoạt động của nhà kính trồng cây.</li>
</ul>
<ol start="4" type="1">
<li><strong>Tầm quan trọng:</strong></li>
</ol>
<ul>
<li>Hiệu ứng nhà kính tự nhiên làm cho Trái Đất có thể ở được, duy trì nhiệt độ trung bình khoảng 15°C thay vì -18°C nếu không có nó.</li>
<li>Hiểu biết này đặt nền móng cho nghiên cứu về biến đổi khí hậu hiện đại.</li>
</ul>
<ol start="5" type="1">
<li><strong>Phát triển sau này:</strong></li>
</ol>
<ul>
<li>John Tyndall (1859) xác định các khí cụ thể gây ra hiệu ứng nhà kính.</li>
<li>Svante Arrhenius (1896) tính toán định lượng ảnh hưởng của CO2 đối với nhiệt độ Trái Đất.</li>
</ul>
<ol start="6" type="1">
<li><strong>Khác biệt với hiểu biết hiện đại:</strong></li>
</ol>
<ul>
<li>Fourier chưa biết về các khí nhà kính cụ thể hoặc cơ chế phân tử của quá trình này.</li>
<li>Hiểu biết hiện đại về hiệu ứng nhà kính phức tạp hơn nhiều, bao gồm các phản hồi và tương tác khí hậu.</li>
</ul>
<ol start="7" type="1">
<li><strong>Ý nghĩa lịch sử:</strong></li>
</ol>
<ul>
<li>Công trình của Fourier đặt nền móng cho khoa học khí hậu hiện đại và hiểu biết của chúng ta về cách Trái Đất duy trì nhiệt độ.</li>
</ul>
<p>Hiệu ứng nhà kính của Fourier là một ví dụ tuyệt vời về cách một khái niệm khoa học cơ bản có thể dẫn đến những hiểu biết sâu sắc về hệ thống Trái Đất và cuối cùng ảnh hưởng đến chính sách toàn cầu về biến đổi khí hậu.</p>
</div>
</div>
</div>
</section>
<section id="math-desc.-of-laws-of-nature" class="level1">
<h1>Math Desc. of Laws of Nature</h1>
<p>the unreasonable effectiveness of math in the natural sciences (Eugene P. Wigner), formulation of the basic laws of nature in mathematically precise terms.</p>
<p>ví dụ: Phương trình Schrodinger -&gt; áp dụng từ atomic nuclei to neutron stars.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Phương Trình Schrödinger: Cánh Cửa Vào Thế Giới Lượng Tử
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Phương trình Schrödinger là một phương trình vi phân từng phần cơ bản trong cơ học lượng tử, được đặt tên theo nhà vật lý Erwin Schrödinger. Nó mô tả sự biến đổi theo thời gian của hàm sóng của một hệ lượng tử. Hàm sóng này chứa đựng tất cả thông tin về trạng thái của hệ thống, bao gồm cả vị trí, động lượng và các tính chất khác.</p>
<p><strong>Ý nghĩa Vật lý</strong></p>
<ul>
<li>Mô tả sự chuyển động của các hạt ở cấp độ lượng tử: Nếu trong cơ học cổ điển, chúng ta sử dụng các phương trình Newton để mô tả chuyển động của các vật thể, thì trong cơ học lượng tử, phương trình Schrödinger đóng vai trò tương tự. Nó cho phép chúng ta tính toán xác suất tìm thấy một hạt tại một vị trí nào đó tại một thời điểm nhất định.</li>
<li>Hàm sóng: Hàm sóng không phải là một đại lượng vật lý có thể đo trực tiếp, mà là một hàm toán học phức. Bình phương mô đun của hàm sóng tại một điểm trong không gian cho ta xác suất tìm thấy hạt tại điểm đó.</li>
</ul>
<p><strong>Ứng dụng của Phương Trình Schrödinger</strong>. Phương trình Schrödinger có ứng dụng rộng rãi trong nhiều lĩnh vực của vật lý, bao gồm:</p>
<ul>
<li>Vật lý nguyên tử: Dùng để mô tả cấu trúc của nguyên tử, phân tử và tính toán các mức năng lượng của chúng.</li>
<li>Vật lý hạt nhân: Áp dụng để nghiên cứu cấu trúc của hạt nhân nguyên tử và các quá trình tương tác hạt nhân.</li>
<li>Vật lý chất rắn: Được sử dụng để mô tả các tính chất điện, từ, và quang học của vật liệu.</li>
<li>Vật lý thiên văn: Áp dụng để nghiên cứu các vật thể thiên văn như sao, tinh vân và lỗ đen.</li>
</ul>
<p><strong>Tại Sao Phương Trình Schrödinger Áp Dụng Rộng Rãi?</strong></p>
<ul>
<li>Tính phổ quát: Phương trình Schrödinger là một phương trình cơ bản, áp dụng cho mọi hệ lượng tử, từ các hạt đơn lẻ đến các hệ phức tạp như nguyên tử, phân tử và vật liệu rắn.</li>
<li>Độ chính xác cao: Các kết quả tính toán dựa trên phương trình Schrödinger đã được kiểm nghiệm thực nghiệm một cách chính xác cao, khẳng định tính đúng đắn của lý thuyết lượng tử.</li>
<li>Khả năng dự đoán: Phương trình Schrödinger cho phép chúng ta dự đoán kết quả của các thí nghiệm lượng tử, từ đó mở ra nhiều ứng dụng trong công nghệ hiện đại.</li>
</ul>
<p><strong>Từ Nguyên Tử đến Sao Neutron</strong></p>
<ul>
<li>Nguyên tử: Phương trình Schrödinger được sử dụng để mô tả sự chuyển động của electron xung quanh hạt nhân, từ đó giải thích quang phổ nguyên tử và các tính chất hóa học của các nguyên tố.</li>
<li>Hạt nhân: Phương trình Schrödinger (ở dạng tương đối tính) được sử dụng để mô tả cấu trúc của hạt nhân nguyên tử, các tương tác giữa các nucleon (proton và neutron) bên trong hạt nhân.</li>
<li>Sao neutron: Sao neutron là những ngôi sao đã chết, cực kỳ đặc, chủ yếu gồm các neutron. Mặc dù cấu trúc bên trong của sao neutron rất phức tạp, nhưng các nhà vật lý vẫn sử dụng các phiên bản mở rộng của phương trình Schrödinger để mô tả hành vi của vật chất trong điều kiện cực đoan bên trong sao neutron.</li>
</ul>
<p><strong>Tóm lại</strong>, phương trình Schrödinger là một công cụ toán học mạnh mẽ, cho phép chúng ta hiểu sâu sắc về thế giới lượng tử. Sự thành công của phương trình này trong việc giải thích các hiện tượng từ cấp độ nguyên tử đến cấp độ vũ trụ đã khẳng định vị trí trung tâm của nó trong nền tảng của vật lý hiện đại.</p>
</div>
</div>
</div>
</section>
<section id="technology-development" class="level1">
<h1>Technology Development</h1>
<p>How quantum mechanic works, it’s understanding from human lies at the heart of technological advances in the past century</p>
<ul>
<li>phone</li>
<li>computer</li>
<li>satellite</li>
<li>…</li>
</ul>
</section>
<section id="complexity" class="level1">
<h1>Complexity</h1>
<p>the more basic physical laws are stated, the more complex be allowed for calculating their solution.</p>
<p>eg: description of the air in this lecture room, there will me rought ly 10^30 parameters</p>
<p>eg: phase transitions -&gt; one small change in system’s params lead to a masive change of its behaviour.</p>
<p>read more: “More is Different - broken symertry and the nature of hierarchical structure of science” – P. W. Anderson – (<a href="https://inters.org/files/more-is-different.pdf">link</a>).</p>
</section>
<section id="aims-of-mathematical-physics" class="level1">
<h1>Aims of Mathematical Physics</h1>
<ul>
<li>dev new math tools, allowing deduction of …</li>
<li>improve understanding of physical systems, dưới nhiều góc nhìn hơn.</li>
</ul>
<p>eg: <strong>fruitful interaction</strong>, Toán là nền tảng, Lý thể hiện các câu hỏi một cách tự nhiên để mang lại sự phát triển cho sự khám phá Toán học.</p>
</section>
<section id="stability-of-atoms" class="level1">
<h1>Stability of Atoms</h1>
<p>Tại sao electron không spiral vào nguyên tử, giải phóng một năng lượng vô hạn.</p>
<ul>
<li>Heisenberg uncertainty principle</li>
<li>In math, non-commutativity implies…</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-08-08-note-muln/stability_of_atoms.png" class="img-fluid figure-img"></p>
<figcaption>stability of atoms</figcaption>
</figure>
</div>
<p>? electromagtic radiation</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
electromagtic radiation
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Bức xạ điện từ là một dạng năng lượng truyền đi dưới dạng sóng điện từ. Sóng điện từ này bao gồm cả trường điện từ và trường từ trường dao động vuông góc với nhau và vuông góc với phương truyền sóng.</p>
<p><strong>Đặc điểm chính của bức xạ điện từ:</strong></p>
<ul>
<li>Tốc độ: Tất cả các sóng điện từ đều truyền đi với tốc độ ánh sáng trong chân không (khoảng 3 x 10^8 m/s).</li>
<li>Tần số và bước sóng: Các sóng điện từ khác nhau bởi tần số (số lần dao động trong một giây) và bước sóng (khoảng cách giữa hai đỉnh sóng liên tiếp).</li>
<li>Phổ điện từ: Phổ điện từ là một dải liên tục các loại bức xạ điện từ, từ sóng vô tuyến có bước sóng dài đến tia gamma có bước sóng ngắn.</li>
<li>Tính chất sóng-hạt lưỡng tính: Bức xạ điện từ thể hiện cả tính chất sóng (giao thoa, nhiễu xạ) và tính chất hạt (hiệu ứng quang điện).</li>
</ul>
<p><strong>Các loại bức xạ điện từ phổ biến:</strong></p>
<ul>
<li>Sóng vô tuyến: Sử dụng trong truyền thông, radio, truyền hình.</li>
<li>Vi sóng: Sử dụng trong lò vi sóng, radar.</li>
<li>Tia hồng ngoại: Tạo ra nhiệt, được sử dụng trong điều khiển từ xa, thiết bị nhìn đêm.</li>
<li>Ánh sáng khả kiến: Ánh sáng mà mắt người có thể nhìn thấy.</li>
<li>Tia tử ngoại: Sử dụng trong khử trùng, sản xuất vitamin D.</li>
<li>Tia X: Sử dụng trong y tế để chụp X-quang.</li>
<li>Tia gamma: Có năng lượng rất cao, được sử dụng trong điều trị ung thư.</li>
</ul>
<p><strong>Ứng dụng của bức xạ điện từ:</strong> Bức xạ điện từ có rất nhiều ứng dụng trong cuộc sống hàng ngày và trong các lĩnh vực khoa học, công nghệ. Ví dụ:</p>
<ul>
<li>Truyền thông: Điện thoại, truyền hình, internet.</li>
<li>Y tế: Chụp X-quang, điều trị ung thư.</li>
<li>Công nghiệp: Hàn, cắt kim loại.</li>
<li>Quân sự: Radar, sóng âm.</li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tính Không Giao Hoán (Non-Commutativity) trong Toán học
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Tính không giao hoán là một khái niệm quan trọng trong toán học, đặc biệt trong đại số trừu tượng. Nó mô tả một tính chất của các phép toán, khi mà việc đổi chỗ các đối tượng trong phép toán đó lại cho kết quả khác nhau.</p>
<p><strong>Ví dụ minh họa:</strong></p>
<ul>
<li>Phép nhân số: Phép nhân số là một phép toán giao hoán. Ví dụ: <code>2 x 3 = 3 x 2</code>.</li>
<li>Phép trừ số: Phép trừ số không phải là phép toán giao hoán. Ví dụ: <code>5 - 3 ≠ 3 - 5</code>.</li>
<li>Phép nhân ma trận: Phép nhân ma trận nói chung không giao hoán. Tức là, nếu A và B là hai ma trận, thì thường <code>AB ≠ BA</code>.</li>
</ul>
<p><strong>Ứng dụng của tính không giao hoán:</strong></p>
<ul>
<li>Đại số trừu tượng: Tính không giao hoán xuất hiện trong nhiều cấu trúc đại số như nhóm, vành, trường.</li>
<li>Vật lý lượng tử: Trong cơ học lượng tử, các toán tử đại diện cho các đại lượng vật lý thường không giao hoán. Điều này dẫn đến nguyên lý bất định Heisenberg, một trong những nguyên lý cơ bản của vật lý lượng tử.</li>
<li>Khoa học máy tính: Tính không giao hoán xuất hiện trong các cấu trúc dữ liệu như hàng đợi, ngăn xếp, và trong các ngôn ngữ lập trình.</li>
</ul>
<p><strong>Ý nghĩa của tính không giao hoán:</strong></p>
<ul>
<li>Thứ tự quan trọng: Khi thực hiện các phép toán không giao hoán, thứ tự các đối tượng đóng vai trò quyết định trong việc xác định kết quả.</li>
<li>Mô hình hóa các hệ thống phức tạp: Tính không giao hoán cho phép mô hình hóa các hệ thống phức tạp trong đó các yếu tố tương tác với nhau theo một cách không đối xứng.</li>
</ul>
<p>Ví dụ cụ thể trong vật lý lượng tử:</p>
<p>Trong cơ học lượng tử, vị trí (x) và động lượng (p) của một hạt là hai đại lượng vật lý không giao hoán. Quan hệ không giao hoán này được biểu diễn bởi công thức:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Bx,%20p%5D%20=%20xp%20-%20px%20=%20i%C4%A7"></p>
<p>Trong đó:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?x"> là toán tử vị trí</li>
<li><img src="https://latex.codecogs.com/png.latex?p"> là toán tử động lượng</li>
<li><img src="https://latex.codecogs.com/png.latex?%C4%A7"> là hằng số Planck rút gọn</li>
<li><img src="https://latex.codecogs.com/png.latex?i"> là đơn vị ảo</li>
</ul>
<p>Công thức trên cho thấy, việc đo vị trí và động lượng của một hạt cùng một lúc sẽ có độ chính xác bị giới hạn. Đây chính là nội dung của nguyên lý bất định Heisenberg.</p>
<p><strong>Tóm lại</strong>, tính không giao hoán là một khái niệm quan trọng trong toán học và vật lý, giúp chúng ta hiểu rõ hơn về sự tương tác giữa các đối tượng và các hệ thống phức tạp.</p>
</div>
</div>
</div>
</section>
<section id="stability-of-matter" class="level1">
<h1>Stability of Matter</h1>
<p>nếu nguyên tử là ổn định, điều gì xảy ra nếu chúng ta assemble chúng lại với nhau, như 10^30 nguyên tử trong 1 viên gạch. việc 1 viên gạch tại sao lớn như vậy, chứ không thể đặc hơn, khó có thể coi là hiển nhiên, và uncertainty principle ko thể tự mình giải thích.</p>
<p>extensitivity: electrons là fermions, thỏa Pauli exclusion principle.</p>
<p>why a brick is a brick?</p>
<p>book recommendation: “Stability of Matter in Quantum Mechanics”</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Fermions and Bosons
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>These are two fundamental types of particles in physics. They differ in their quantum properties.</p>
<ul>
<li><strong>Fermions</strong>: These particles obey the Pauli Exclusion Principle, which means that no two identical fermions can occupy the same quantum state simultaneously. Examples of fermions include electrons, protons, and neutrons. &nbsp;</li>
<li><strong>Bosons</strong>: Unlike fermions, multiple bosons can occupy the same quantum state. This property is essential for phenomena like superconductivity and laser light. Examples of bosons include photons (particles of light) and the Higgs boson.</li>
</ul>
</div>
</div>
</div>
</section>
<section id="gravitational-in-stability-of-stars" class="level1">
<h1>Gravitational (In) Stability of Stars</h1>
<p>scale up to Stars, where the gravitation becomes a major factor -&gt; can be taken in to account.</p>
<p>Chandrasekhar limit - for the maximun mass of stable white dwarf (amounts roughly 1.4 solar masses)</p>
<p>Schrodinger equation can be applied to a huge range of scalces, from atoms to stars!</p>
</section>
<section id="phase-transitions" class="level1">
<h1>Phase Transitions</h1>
<p>phương trình cơ bản có dạng đơn giản, nhưng lời giải có thể ở rất nhiều dạng do có rất nhiều biến và tham số.</p>
<p>ví dụ như nước, có thể khí, lỏng và rắn - phase transitions.</p>
</section>
<section id="more-phase-transitions" class="level1">
<h1>More Phase Transitions</h1>
<ul>
<li>magnetism;</li>
<li>traffic jams: hociminh city, tiny change can make huge effect?;</li>
<li>superfluidity (siêu chảy, một trạng thái “kỳ lạ” - exotic của vật chất);</li>
<li>superconductivity (siêu dẫn).</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
superfluidity
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p><strong>Định nghĩa siêu chảy</strong>: Siêu chảy là trạng thái của vật chất, trong đó chất lỏng có độ nhớt bằng không và chảy mà không có ma sát. Điều này xảy ra ở nhiệt độ cực thấp, gần bằng không tuyệt đối.</p></li>
<li><p><strong>Đặc điểm chính</strong>:</p></li>
</ol>
<ul>
<li>Không có ma sát nội: Chất lỏng siêu chảy có thể chảy mà không mất năng lượng.</li>
<li>Hiệu ứng phun tia: Có thể leo lên thành bình chứa.</li>
<li>Dẫn nhiệt vô hạn: Truyền nhiệt cực kỳ hiệu quả.</li>
<li>Xoáy lượng tử: Tạo ra các xoáy với động lượng góc lượng tử hóa.</li>
</ul>
<ol start="3" type="1">
<li><strong>Ví dụ về chất siêu chảy</strong>:</li>
</ol>
<ul>
<li>Helium-4 lỏng dưới 2.17 K (điểm lambda).</li>
<li>Helium-3 lỏng dưới khoảng 0.0025 K.</li>
</ul>
<p><strong>Tại sao gọi là “exotic” (kỳ lạ):</strong></p>
<ol type="a">
<li><strong>Hiếm gặp trong tự nhiên</strong>:</li>
</ol>
<ul>
<li>Chỉ xuất hiện ở nhiệt độ cực thấp, hiếm khi gặp trong điều kiện tự nhiên.</li>
</ul>
<ol start="2" type="a">
<li><strong>Vi phạm trực giác thông thường</strong>:</li>
</ol>
<ul>
<li>Chảy mà không có ma sát, trái ngược với hầu hết các chất lỏng thông thường.</li>
<li>Có thể “leo” ra khỏi bình chứa, dường như vi phạm trọng lực.</li>
</ul>
<ol start="3" type="a">
<li><strong>Hành vi lượng tử vĩ mô</strong>:</li>
</ol>
<ul>
<li>Hiển thị các hiệu ứng lượng tử ở quy mô có thể quan sát được.</li>
<li>Thể hiện tính chất sóng-hạt của vật chất ở mức độ lớn.</li>
</ul>
<ol start="4" type="a">
<li><strong>Liên quan đến vật lý cơ bản</strong>:</li>
</ol>
<ul>
<li>Nghiên cứu siêu chảy giúp hiểu sâu hơn về cơ học lượng tử và vật lý trạng thái ngưng tụ.</li>
</ul>
<ol start="5" type="a">
<li><strong>Ứng dụng tiềm năng độc đáo</strong>:</li>
</ol>
<ul>
<li>Có thể được sử dụng trong các thiết bị làm lạnh siêu dẫn và các ứng dụng công nghệ cao khác.</li>
</ul>
<p>Tóm lại, siêu chảy được coi là “exotic” vì nó thể hiện các tính chất kỳ lạ, hiếm gặp và vi phạm trực giác thông thường về cách chất lỏng hoạt động. Nó là một ví dụ về cách các hiệu ứng lượng tử có thể biểu hiện ở quy mô vĩ mô, làm cho nó trở thành một chủ đề thú vị và quan trọng trong vật lý hiện đại.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
superconductivity
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p><strong>Định nghĩa</strong>: Siêu dẫn là trạng thái của vật chất trong đó điện trở suất của vật liệu giảm xuống bằng không và từ trường bị đẩy ra khỏi vật liệu (hiệu ứng Meissner) khi nhiệt độ giảm xuống dưới một nhiệt độ tới hạn nhất định.</p></li>
<li><p>Đặc điểm chính:</p></li>
</ol>
<ol type="a">
<li><p><strong>Điện trở bằng không</strong>: Dòng điện có thể chảy mà không mất năng lượng.</p></li>
<li><p><strong>Hiệu ứng Meissner</strong>: Từ trường bị đẩy ra khỏi vật liệu siêu dẫn.</p></li>
<li><p><strong>Nhiệt độ tới hạn (Tc)</strong>: Nhiệt độ mà dưới đó vật liệu trở thành siêu dẫn.</p></li>
</ol>
<ol start="3" type="1">
<li><strong>Loại siêu dẫn</strong>:</li>
</ol>
<ol type="a">
<li><p>Siêu dẫn loại I: Thường là kim loại nguyên chất, chuyển đột ngột sang trạng thái siêu dẫn.</p></li>
<li><p>Siêu dẫn loại II: Thường là hợp kim hoặc hợp chất phức tạp, có hai nhiệt độ tới hạn và có thể duy trì trạng thái siêu dẫn trong từ trường mạnh hơn.</p></li>
</ol>
<ol start="4" type="1">
<li><strong>Cơ chế</strong>:</li>
</ol>
<ul>
<li>Lý thuyết BCS (Bardeen-Cooper-Schrieffer): Giải thích siêu dẫn thông qua sự hình thành các cặp Cooper (electron ghép đôi).</li>
<li>Siêu dẫn nhiệt độ cao: Cơ chế chưa được hiểu đầy đủ, là một lĩnh vực nghiên cứu đang phát triển.</li>
</ul>
<ol start="5" type="1">
<li><strong>Ứng dụng</strong>:</li>
</ol>
<ul>
<li>Nam châm siêu dẫn mạnh cho MRI và máy gia tốc hạt.</li>
<li>Máy dò SQUID (Superconducting Quantum Interference Device) để đo từ trường cực nhỏ.</li>
<li>Tiềm năng trong máy tính lượng tử và truyền tải điện không tổn thất.</li>
</ul>
<ol start="6" type="1">
<li><strong>Thách thức</strong>:</li>
</ol>
<ul>
<li>Tìm kiếm vật liệu siêu dẫn ở nhiệt độ cao hơn, lý tưởng là ở nhiệt độ phòng.</li>
<li>Hiểu rõ hơn về cơ chế của siêu dẫn nhiệt độ cao.</li>
</ul>
<ol start="7" type="1">
<li><strong>Lịch sử và phát triển</strong>:</li>
</ol>
<ul>
<li>Phát hiện năm 1911 bởi Heike Kamerlingh Onnes trong thủy ngân ở 4.2K.</li>
<li>Lý thuyết BCS được đề xuất năm 1957.</li>
<li>Siêu dẫn nhiệt độ cao được phát hiện năm 1986 bởi Bednorz và Müller.</li>
</ul>
<p>Siêu dẫn là một lĩnh vực nghiên cứu đang phát triển mạnh mẽ trong vật lý hiện đại, với tiềm năng ứng dụng rộng rãi trong công nghệ và kỹ thuật.</p>
</div>
</div>
</div>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<ul>
<li>toán không phải là ngôn ngữ vũ trụ, nhưng rất mạnh mẽ để giải thích tự nhiên;</li>
<li>các luật vật lý cơ bản được diễn giải bằng ngôn ngữ toán, rất thú ví là nhiều định luật vật lý cơ bản lại giải thích được rất nhiều hiện tượng khác nhau, như chuyển thể;</li>
<li>việc hiểu các định luật vật lý tạo ra các tiến bộ công nghệ;</li>
<li>mục tiêu của toán vật lý là phát triển các công cụ toán để hiểu các hệ quả của các định luật vật lý cơ bản và khai phá các cơ chế cũng như nguyên lý đằng sau các hiện tượng quan sát được;</li>
<li>một trong các thành tựu của toán vật lý chính là nghiên cứu về tính ổn định của vật chất.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-08-08-note-muln/summary.png" class="img-fluid figure-img"></p>
<figcaption>summary</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="qa-and-outro" class="level1">
<h1>q&amp;a and outro</h1>
<ol type="1">
<li>hamiltonian mechanics;</li>
<li>non-commutativity;</li>
<li>fermions, fundamental particle, bosons, 4-dimensions space;</li>
<li>schrodinger equation, lagrangian;</li>
<li>phase transitions, is this similar to the butterfly effect (notion of chaos)? eg double pendulum;</li>
<li>when was quantum mechanics been cared;</li>
<li>in classical physics, can predict trajectory; but why in quantum mechanics, we can not. (electron does not have definite position, read more on bell inequalities);</li>
<li>given the particles moving very fast, will they exchange the energy (read more on kinetic energy);</li>
<li>standing wave.</li>
</ol>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-08-08-note-muln/my_brain_is_full.png" class="img-fluid figure-img"></p>
<figcaption>bye bye</figcaption>
</figure>
</div>
</div>
</div>
</div>


<!-- -->

</section>

 ]]></description>
  <category>math</category>
  <guid>https://lktuan.github.io/blog/2024-08-08-note-muln/</guid>
  <pubDate>Wed, 07 Aug 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-08-08-note-muln/rs_portrait.png" medium="image" type="image/png" height="101" width="144"/>
</item>
<item>
  <title>Một số khuôn mẫu tư duy trong Brazilian Jiu-jitsu</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-08-06-bjj-mental-models/</link>
  <description><![CDATA[ 





<p><strong>lược dịch</strong> và/hoặc <strong>tóm tắt</strong> cho khóa học cũng “Mechanic Models of BJJ: A Crash Course” của Steve Kwan.</p>
<section id="theory-of-alignment" class="level1">
<h1>1. <a href="https://www.bjjmentalmodels.com/theory-of-alignment/">theory of alignment</a></h1>
<p>là lý thuyết tối cao của Jiu-jitsu, bao gồm ba yếu tố:</p>
<ol type="1">
<li><strong>posture</strong> - tư thế: position một cách hiệu quả cổ (neck) và cột sống (spine);</li>
<li><strong>structure</strong> - cấu trúc: position một cách hiệu quả tay (arms) và chân (legs);</li>
<li><strong>base</strong> - cở sở: khả năng hấp thụ (absorb) hoặc tạo ra lực liên quan để đạt được mục tiêu.</li>
</ol>
<p>để đạt được alignment hiệu quả, luôn ghi nhớ hai mục tiêu sau:</p>
<ol type="1">
<li>maintain your alignment;</li>
<li>break your opponent’s alignment;</li>
<li>do not proceed 2. if you are failing at 1.</li>
</ol>
<p>trong đào tạo, với trọng số của ba yếu tố như nhau, có thể “chấm điểm” (alignment scorecard) với thang từ 0-3 cho mỗi người chơi. điểm càng cao hơn sẽ là dấu hiệu cho việc bạn có một cơ hội tốt để phá vỡ alignment của đối thủ. ví dụ, trong closed guard, bạn ở dưới, và không ai đang khống chế đối phương bằng một hand grip:</p>
<p>bạn sẽ có 3 điểm nếu:</p>
<ul>
<li><strong>posture</strong>: cổ (neck) và cột sống (spine) ở vị trí tự nhiên, thẳng, không bị kiểm soát. hông (hip) được tự do di chuyển;</li>
<li><strong>structure</strong>: tay (hands) và chân (legs) tự do tạo ra các grips và khung - frames;</li>
<li><strong>base</strong>: bạn có thể tạo (gen) hoặc hấp thụ lực (absorb) nhờ vai và vị trí đặt chân.</li>
</ul>
<p>đối thủ sẽ có 3 điểm nếu, tương ứng:</p>
<ul>
<li>cổ và cột sống thẳng, nằm chính diện (vertical, centre) giữa cơ thể bạn;</li>
<li>tay của họ không bị kiểm soát một cách chủ động;</li>
<li>họ có thể chống lại lực từ bạn với cột sống thẳng, vai mở. họ có khả năng break guard khi ngồi - dùng tay, hoặc đứng lên.</li>
</ul>
<p>cả hai đều không có lợi thế đáng kể và nỗ lực submission sẽ dẫn đến escape hoặc reversal.</p>
</section>
<section id="core-mechanics" class="level1 page-columns page-full">
<h1>2. <a href="https://www.bjjmentalmodels.com/core-mechanics/">core mechanics</a></h1>
<p>nếu tiếp cận BJJ theo technique approach, sẽ có rất nhiều kỹ thuật cũng các biến thể (variations) mà bạn không thể khi nhớ hết. <em>may mắn là</em>, các kỹ thuật của BJJ đều là sự kết hợp của 6 cơ chế cốt lõi (core mechanics) sau đây:</p>
<ol type="1">
<li><strong>frame (khung)</strong>:</li>
</ol>
<ul>
<li>là concept phòng thủ quan trọng nhất trong BJJ, nó tạo ra một khung bảo vệ (shield) sử dụng những phần cơ thể cứng (hard) hoặc nhiều xương (bony), thường được sử dụng cho người ở vị trí dưới (bottom);</li>
<li>frame không phụ thuộc vào cơ bắp, mà là sự căn chỉnh hệ xương. bạn không muốn dùng áp lực đẩy đối thủ ra xa, mà là dùng cấu trúc xương để giữ đối thủ tại một khoảng cách nhất định, tạo không gian để bản thân di chuyển. frame tốt thì phải chắc chắn và không sử dụng quá nhiều sức lực ;</li>
<li>không nên frame với các khớp (joints) dễ bị đối phương khai thác: ví dụ dùng hai tay để đẩy đối thủ, phần cổ (wrist) và khuỷu tay yếu và rất dễ bị counter. tương tự, khi frame bằng chân, bạn nên sử dụng gối (knees) và ống chân (shins) nhờ diện tích lớn, dùng bàn chân (feet) có lợi thế về khoảng cách tạo được tuy nhiên rất dễ bị khai thác.</li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">đọc thêm về <a href="https://bjjmentalmodels.com/solid-frames/">solid frame</a></span></div><ol start="2" type="1">
<li><strong>levers (đòn bẩy)</strong>:</li>
</ol>
<ul>
<li>đòn bẩy là phép bội lực rất hiệu quả để tạo sơ hở (openings) và tấn công và kiểm soát đối thủ;</li>
<li>theo thứ tự từ khỏe đến yếu nhất, 3 công cụ đòn bẩy trên cơ thể bạn chính là <em>chân, tay, và đầu</em>; </li>
<li>đầu (head) thường được sử dụng để break tư thế (posture) của đối thủ, trong khi tay (arms) và chân (legs) thường được sử dụng để tấn công cấu trúc (structure);</li>
<li>mỗi chi bạn đều có 3 khớp (joints) chính: với tay là vai (shoulders), khuỷu tay (elbows), cổ tay (wrists), với chân là hông (hips), đầu gối (knees), và cổ chân (ankles);</li>
<li>để kiểm soát tốt tay hoặc chân đối phương bạn cần kiểm soát được ít nhất 2/3 khớp; trên trục tay, chân, khớp tạo ra hiệu ứng đòn bẩy tốt nhất là khớp ngoài cùng; </li>
<li>lúc bạn tấn công, đòn bẩy cho phép bạn tiến tới các vị trí kiểm soát và submission, suy cho cùng thì trong mọi submission hợp lệ, bạn luôn phải tận dụng, kiểm soát được ít nhất một đòn bẩy của đối phương; </li>
<li>khi không ai có ưu thế, người đầu tiên kiểm soát được lever của đối phương sẽ kiểm soát trận đấu; </li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">đây chính là <a href="https://www.bjjmentalmodels.com/anatomic-hierarchy/">anatomic hierarchy</a></span><span class="margin-aside">đọc thêm về <a href="https://bjjmentalmodels.com/3-joint-rule/">3-joint rule</a></span><span class="margin-aside">đọc thêm về <a href="https://bjjmentalmodels.com/isolate-a-single-target/">isolate a single target</a></span><span class="margin-aside">đọc thêm về <a href="https://bjjmentalmodels.com/grips-dictate-position/">grips dictate position</a></span></div><ol start="3" type="1">
<li><strong>wedges (nêm/chêm)</strong>:</li>
</ol>
<p>có hai kiểu nêm:</p>
<ul>
<li>nêm chặn (blocking wedges): cố định một phần cơ thể đối thủ;</li>
<li>nêm cạy (prying wedge): giúp mở khung (frame) của đối thủ.</li>
</ul>
<p>một số ví dụ:</p>
<ul>
<li>cho tay vào hông (hip) của đối phương để pass guard, không cho đối thủ re-guard chính là ví dụ của nêm chặn;</li>
<li>đòn cắt gối để pass guard (knee cut pass), khi bạn cố đưa gối vào mở hai chân đối thủ, chính là ví dụ của nêm cạy.</li>
</ul>
<p>nêm và đòn bẩy thường đi với nhau, bạn cần dùng nêm để sử dụng đòn bẩy hiệu quả hơn: <strong>nêm một đầu, đòn bẩy một đầu</strong> giúp cố định tốt hơn. gồm hai schemes:</p>
<ul>
<li>hai đánh một: two-on-one (two limbs controlling one lever);</li>
<li>bốn đánh một: four-on-one (four limbs controlling one lever).</li>
</ul>
<ol start="4" type="1">
<li><strong>clamps (kẹp)</strong>:</li>
</ol>
<div class="page-columns page-full"><p>kẹp thường được sử dụng khi bạn đã khóa (lock) được một phần cơ thể của đối thủ trong một vòng khép kín (<strong>closed circuit</strong>), siết chặt hai tay và hai chân để tạo ra một chuỗi động lực học. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://bjjmentalmodels.com/kinetic-chains/">kinetic chains</a></span></div></div>
<p>cơ chế kiểm soát này như một chiếc neo làm chậm đối thủ, kết dính cơ thể bạn với họ.</p>
<ol start="5" type="1">
<li><strong>hooks (móc)</strong>:</li>
</ol>
<div class="page-columns page-full"><p>các móc được tạo ra từ phần cuối mỗi chi (ND: bàn chân, bàn tay). tuy nhiên người ta thường chỉ hook với phần mu bàn chân (instep ~ shoelace area), nó được gọi là butterfly hook. móc tạo ra các chuyển động, lực kéo từ vị trí dưới, yêu cầu bạn phải kiểm soát được không gian phía trong giữa bạn và đối thủ. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://bjjmentalmodels.com/inside-channel-control/">inside channel</a></span></div></div>
<p>hook nhìn chung cũng yếu, bởi vì bạn kiểm soát từ bên trong (không phải bên ngoài và tạo một vòng <strong>khép kín</strong>). nó sẽ bị vô hiệu hóa nếu đối phương luồn tay thoát vị trí (pummels) hoặc thoát ly, gỡ khóa (disengages) ~ thường thì họ cũng không mất nhiều sức và thời gian cho chuyện này.</p>
<ol start="6" type="1">
<li><strong>posts (trụ)</strong>:</li>
</ol>
<p>post (trụ) được dùng để duy trì base (cơ sở). mindset về giữ vững trụ cho phép sự linh hoạt và chuyển động hông (hip) khi ở vị trí dưới, hay chống bị quét, lật (sweep) khi ở vị trí trên/đứng.</p>
<div class="page-columns page-full"><p>khí sử dụng post ở vị trí dưới, điều quan trọng là trụ phải cùng phương với vector lực tới, nếu không post của bạn sẽ support cho trọng lượng của đối thủ. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thên <a href="https://www.bjjmentalmodels.com/force-vectors/">force vectors</a></span></div></div>
</section>
<section id="anatomic-hierarchy" class="level1 page-columns page-full">
<h1>3. <a href="https://bjjmentalmodels.com/anatomic-hierarchy/">anatomic hierarchy</a></h1>
<p>cơ thể con người có 6 cơ quan vũ khí, trong đó core (gòm <em>ngực - chest, bụng - midsection, hông - hips</em>) là phần mạnh nhất.</p>
<ol type="1">
<li>core;</li>
<li>2 legs;</li>
<li>2 arms;</li>
<li>head.</li>
</ol>
<p>với bạn, 6 bộ phận này là vũ khí chống lại đối thủ. ở chiều ngược lại - với họ, 6 bộ phận này là mục tiêu để họ tấn công, khống chế, và submits.</p>
<div class="page-columns page-full"><p>hãy luôn nhớ rằng, bạn phải tận dụng tối đa phần cơ thể khỏe nhất của bạn. vì core là phần mạnh nhất, nếu khai thác được đó, xác xuất là rất cao bạn sử dụng được các kỹ thuật một cách hiệu quả. một sai lầm phổ biến của người mới là sử dụng quá mức năng lượng vào tay và chân. ngoài việc ưu tiên core, bạn cũng cần có tư duy sử dụng mọi bộ phận cơ thể nhiều nhất có thể. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://www.bjjmentalmodels.com/overwhelming-force/">overwhelming force</a></span></div></div>
<p>ngược lại, nên hạn chế tấn công vào core của đối thủ. sẽ dễ dàng hơn khi tấn công vào 4 góc phần tư của cơ thể (torso) họ - là 4 chi (limbs) và tất nhiên bao gồm hai bên hông và hai vai. kiểm soát levers tạo ra leverages, sẽ dễ phá vỡ được alignment của đối thủ hơn.</p>
</section>
<section id="type-of-guards" class="level1">
<h1>4. <a href="https://bjjmentalmodels.com/types-of-guard/">type of guards</a></h1>
<p>có hàng chục, thậm chí là hàng trăm các loại guards, chúng cũng đang được thêm mới mỗi ngày. do đó rất cần thiết để hiểu, phân loại các guards dựa trên đặc điểm cơ chế (mechanical characteristics) của chúng. chúng ta sẽ hiểu sâu hơn và dễ dàng áp dụng được hơn.</p>
<ol type="1">
<li><strong>hook-based</strong>;</li>
</ol>
<p>bạn theo và bám (track and check) chuyển động của đối thủ bằng cách “móc” (hooking) sử dụng tay (bàn tay) và chân (mu bàn chân). tuy chúng lỏng lẻo (shallow), và thường không có tác dụng cố định đối thủ (immobilizing), nhưng là cách rất tốt để cảm nhận vị trí cơ thể và phản ứng lại. hooks thường được dùng để nâng đối thủ lên một cách linh hoạt.</p>
<p>ví dụ:</p>
<ul>
<li>butterfly guard;</li>
<li>instep/shin-to-shin guard.</li>
</ul>
<ol start="2" type="1">
<li><strong>clamp-based</strong>;</li>
</ol>
<p>bạn sẽ trói (tethering) cơ thể của mình vào cơ thể đối thủ, ngăn cản (hindering) họ chuyển động. nhiều traditional guard là dựa vào việc kẹp, chúng bẫy, làm chậm đối thủ và đưa họ vào tình thế không thi đấu, triển khai được phương án. đối với người thực hiện, chúng cũng nguy hiểm khi cho phép đối thủ nâng bạn lên hoặc tạo áp lực bằng trọng lượng.</p>
<p>ví dụ:</p>
<ul>
<li>closed guard;</li>
<li>half guard.</li>
</ul>
<ol start="3" type="1">
<li><strong>frame-based</strong>;</li>
</ol>
<p>sử dụng frame tạo thành từ các chi (limbs) để giữ cho đối thủ ở một khoảng cách an toàn. rất hiệu quả đối với các đối thủ aggressive hoặc khỏe hơn, cũng rất hiệu quả trong MMA và chiến đấu thực tế khi giảm hiểu quả các đòn đánh/đấm của đối phương.</p>
<p>ví dụ:</p>
<ul>
<li>spider guard;</li>
<li>knee shield guard.</li>
</ul>
<ol start="4" type="1">
<li><strong>hybrid</strong>.</li>
</ol>
<p>các guard hiện đại thường là sự kết hợp giữa các thể loại đề cập ở trên.</p>
<p>ví dụ:</p>
<ul>
<li>de la Riva guard và các biến thể;</li>
<li>X guard và các biến thể.</li>
</ul>
</section>
<section id="breaking-mechanics" class="level1 page-columns page-full">
<h1>5. <a href="https://bjjmentalmodels.com/breaking-mechanics/">breaking mechanics</a></h1>
<p>có 4 kiểu khóa gãy (breaks):</p>
<ol type="1">
<li><strong>linear</strong> locks: như kneebars hoặc armbars;</li>
<li><strong>rotational</strong> locks: như heel hooks hoặc Kimuras;</li>
<li><strong>compression</strong> locks: như calf slicer;</li>
<li><strong>hybrid</strong> locks: kết hợp các kiểu hình trên.</li>
</ol>
<div class="page-columns page-full"><p>tương tự như choke, nên kết hợp các cơ chế khóa gãy bằng cách sử dụng hybrid locks. ví dụ: khi thực hiện kneebar ~ linear, nên sử dụng thêm rotation để nó thêm hiệu quả. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://www.bjjmentalmodels.com/choking-mechanics/">chokes</a></span></div></div>
<p>các bước để khóa gãy đối phương:</p>
<ol type="1">
<li><strong>isolate a lever</strong>: cô lập một chi, như chân hoặc tay;</li>
<li><strong>prevent predictable defenses</strong>: dự đoán các cách phòng thủ của đối thủ và đưa ra biện pháp phòng ngừa, cũng nên tập cải thiện alignment của bản thân trước khi phá vỡ alignment của họ;</li>
<li><strong>maximize leverage</strong>:</li>
</ol>
<ul>
<li>triệt để cố định khớp mà bạn có ý định tấn công, sử dụng 1 cái nêm cho khớp đó và khống chế các khớp lân cận.</li>
<li>các khớp lân cận nếu còn có thể di chuyển sẽ giảm bớt áp lực và làm suy yếu đòn tấn công của bạn.<br>
</li>
<li>đảm bảo là grip là chắc chắn và kéo dài “cánh tay đòn” nhất có thể (maximizing leverage), bạn phải từ từ đào bới “digging” để ra được vị trí đó.</li>
<li>trước khi siết lực, hãy đảm bảo mình đang có vị trí tốt nhất. sau khi siết cần hạn chế chuyển động.</li>
<li>các chuyển động của hông nên được sử dụng sau cùng;</li>
</ul>
<ol start="4" type="1">
<li><strong>apply overwhelming force</strong>.</li>
</ol>
<p>chỉ khi bạn cô lập được levers, ngăn chặn các rủi ro bị phòng ngự, tối ưu cánh tay đòn bạn mới nên bung sức.</p>
<div class="page-columns page-full"><p>khi bung sức, cần sử dụng cả core và sức mạnh từ nhiều chi nhất có thể, hãy nhớ chỉ <strong>sau khi</strong> tận dụng tối đa các ưu thế kĩ thuật (technical leverages), bạn mới bung sức. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://www.bjjmentalmodels.com/overwhelming-force/">overwhelming force</a></span></div></div>
</section>
<section id="choking-mechanics" class="level1 page-columns page-full">
<h1>6. <a href="https://bjjmentalmodels.com/choking-mechanics/">choking mechanics</a></h1>
<p>có năm loại siết nghẹt:</p>
<ol type="1">
<li><strong>air chokes</strong>: tạo áp lực lên khí quản (trachea/windpipe) để ngăn cản đối phương hô hấp, thở. nó cũng có thể được hiệu chỉnh để tạo ra phản xạ hầu / phản xạ họng (gax reflex),  tạo ra hiệu ứng như blood choke;</li>
<li><strong>blood chokes</strong>:</li>
</ol>
<div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://en.wikipedia.org/wiki/Pharyngeal_reflex">pharyngeal reflex</a></span></div><ul>
<li>tạo áp lực lên động mạnh cảnh (carotid arteries) ở hai bên cổ, ngặn chặn máu lưu thông lên não và làm mất ý thức đối thủ. vì ảnh hưởng rất nhanh, blood chokes thường được coi là hiệu quả hơn air chokes, đa số các đòn chokes trong Jiu-jitsu thuộc loại này.</li>
<li>mục tiêu của mọi blood choke đều là tìm cách siết chặn động mạnh cảnh, dùng một cái nêm (wedge) để đẩy từ sau đầu (ND: trong trường hợp của RNC là cẳng tay) vào choke.</li>
<li>hãy hình dung RNC như một tam giác bao quanh đầu đối thủ (hai khuỷu tay và 1 vai), trong đó một góc tam giác - khuỷu tay ở vị trí dưới cằm (chin). công việc của bạn là tăng áp lực lên mỗi “cạnh” của tam giác đó đồng thời ghìm cái góc tam giác đó xuống;</li>
</ul>
<ol start="3" type="1">
<li><strong>cranks</strong>: giữ và tạo một lực xoắn/ ngẫu lực (torque) tới cổ (neck) và cột sống (spine), ví dụ đẩy hàm (jaw) vào phía trong sọ, hoặc vặn cổ bằng cách sử dụng hàm như một điểm móc. bạn không nhất thiết phải luồn được tay vào dưới cằm (chin) để thực hiện neck crank. crank thường tạo ra các chấn thương nghiêm trọng và thường hạn chế trong luyện tập, nó cũng bị cấm trong một số giải đấu;</li>
<li><strong>compression chokes</strong>: ép phổi làm đối phương khó chịu vì không đưa không khí vào phổi được, ví dụ như body triangle hay <a href="https://www.youtube.com/watch?v=baiTE16e5xE">Bas Rutten body crush</a>. nó cũng có thể làm gãy xương sườn và có thể không hợp lệ trong một số giải đấu;</li>
<li><strong>hybrid chokes</strong>: nên kết hợp nhiều kĩ thuật choke khác nhau, ví dụ blook choke kết hợp với một yếu tố crank.</li>
</ol>
</section>
<section id="ratchet-control" class="level1">
<h1>7. <a href="https://bjjmentalmodels.com/ratchet-control/">ratchet control</a></h1>
<p>kiểm soát đầu hoặc một chi sẽ đơn giản hơn rất nhiều nếu chúng ta xoay trục (rotation) một chút, và tốt nhất chính là để phương tạo lực của chúng ta vuông góc với phương chịu lực của đối thủ (ND: người dịch confused về bản dịch này). phương pháp này gọi là kiểm soát bánh cóc (ratchet control). có 2 loại:</p>
<ol type="1">
<li><strong>internal ratchet control</strong>: khi bạn xoay một chi <em>ngược lại với chuyển động tự nhiên</em> của nó. ví dụ Kimuras (ngoặt tay đối thủ ra sau lưng) hay heel hooks (trục chân bị xoay với hướng gót ra ngoài);</li>
<li><strong>external ratchet control</strong>: khi bạn xoay một chi <em>theo hướng chuyển động tự nhiên</em> của nó, cho tới khi đối thủ không chịu đựng được. ví dụ Americana hay knee flares.</li>
</ol>
<p>dù external ratchet control rất hữu ích nhưng nó thường mang lại sự thoải mái cho đối thủ trong lúc bạn tấn công (khi chưa tới ngưỡng chịu đựng). nên internal ratchet control thường được lựa chọn hơn khi bắt đối thủ phải quay đi và để hở lưng, ví dụ Kimuras hay backside 50-50.</p>
<p>một số ví dụ:</p>
<ul>
<li>khi dùng đòn armbar, hãy xoắn (twist) tay đối phương song song với việc duỗi ra (hyper-extending);</li>
<li>khi dùng đòn kneebar, hãy kéo gót chân gần về phía bạn để tăng lực xoay;</li>
<li>khi kéo đầu đối phương xuống, hãy kéo và vặn/xoắn cổ.</li>
</ul>
<p>chúng rất hữu dụng vì phá đi posture và structure của đối thủ. khi hệ xương của đối phương không còn ngay hàng thẳng lối, sức mạnh cơ bắp (musculature) cũng sẽ bị hạn chế đi nhiều.</p>
</section>
<section id="controlled-breathing" class="level1 page-columns page-full">
<h1>8. <a href="https://bjjmentalmodels.com/controlled-breathing/">controlled breathing</a></h1>
<p>hãy chú ý đế nhịp thở của bạn, hãy duy trí một nhịp thở thoải mái (relaxed cadence) có chủ ý (deliberate).</p>
<div class="page-columns page-full"><p>chúng ta thường nghĩ tâm trí (mind) sẽ dẫn dắt cơ thể (body), tuy nhiên trên thực tế chúng có mối quan hệ chặt chẽ và đôi khi cơ chế là ngược lại.  ví dụ khi bạn cươi, tâm lý của bạn sẽ vui vẻ hơn. tương tự, kiểm soát hơi thở sẽ giúp bạn thoải mái và tiết kiệm (conserve) năng lượng.</p><div class="no-row-height column-margin column-container"><span class="margin-aside">ref <a href="https://www.scientificamerican.com/article/smile-it-could-make-you-happier/">Smile! It Could Make You Happier</a></span></div></div>
<p>kiểm soát hơi thở là rất quan trọng khi bạn đối đầu với những người to hoặc nhiều kinh nghiệm hơn. bên cạnh việc bảo toàn được sức lực, nó còn giúp bạn bình tĩnh lại. sự bình tĩnh là tối quan trọng để ngăn sự hoàng loạn (panicking) khi bạn chịu thử thách thực sự.</p>
<p>đối thủ có kinh nghiệm cũng sẽ cảm nhận (sensing) được sự hoảng loạn nếu có trong nhịp thở của bạn. thở không kiểm soát có thể báo hiệu sự hoảng loạn đó cho đối thủ, khiến anh ta bắt đầu tấn công chớp nhoáng (blitz attacking) hoặc tăng nhịp độ (tempo).</p>
<p>nó cũng giúp tim phân phối lượng oxy tới cơ bắp đồng đều hơn, rất quan trọng trong việc giữ nhịp tim và tránh mệt mỏi quá mức.</p>
</section>
<section id="staying-loose" class="level1 page-columns page-full">
<h1>9. <a href="https://bjjmentalmodels.com/staying-loose/">staying loose</a></h1>
<p>hãy luôn chú ý một cách có ý thức (conscious attention) tới việc thả lỏng cơ bắp (relaxed &amp; fluid), chỉ gồng/căng (tense) chúng khi mọi thứ đã sẵn sàng. nhưng khi nào thì được gọi là “sẵn sàng”?:</p>
<ul>
<li>chiếm được một góc đánh ưu thế; </li>
<li>phá vỡ, gián đoạn một cách có hiệu quả vị trí căn chính của đối phương; </li>
<li>hoặc bạn đưa đối thủ vào một tình huống tiến thoái lưỡng nan. </li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://www.bjjmentalmodels.com/dominant-angles/">dominant angles</a></span><span class="margin-aside">xem thêm về <a href="https://bjjmentalmodels.com/theory-of-alignment/">alignment</a></span><span class="margin-aside">xem thêm về <a href="https://www.bjjmentalmodels.com/dilemma/">dilema</a></span></div><p>gồng cứng cơ bắp khi không cần thiết sẽ:</p>
<ul>
<li>làm chúng mệt mỏi (fatigues);</li>
<li>làm lộ ý định của bạn;</li>
<li>tay hoặc chân gồng quá cứng sẽ dễ dàng cho đối phương kiểm soát và khống chế.</li>
</ul>
<p>nó cũng là hiện tượng dễ hiểu khi cơ chế phản ứng của con người thường là sẽ gồng lại khi cảm thấy bị đe dọa, đó là lý do mà người mới tập thường gồng cứng khi roll. cần tập luyện và kỷ luật để có thể thả lỏng được trước áp lực - calm under fire!</p>
<p>nếu đa số các kỹ năng / kỹ thuật mà bạn tập trung vào đều phụ thuộc vào sức mạnh cơ bắp, và bạn thường xuyên cảm thấy đuối, mệt mỏi, đó chính là dấu hiệu của việc bạn không thực hiện đúng kỹ năng / kỹ thật đó. cần đánh giá và luyện tập lại.</p>
<p>chỉ có một tính huống duy nhất mà bạn nên bung sức mạnh cơ bắp, đó là lúc bạn đảm bảo được việc thực hiện thành công một kĩ thuật, đối phương không thể phòng thủ và bạn đã ở tư thế hiệu quả nhất có thể. lúc đó sức mạnh cơ bắp sẽ khuếch đại cao nhất lợi thế bạn đang có.</p>
<p>tóm lại: chỉ bung cơ bắp khi đã ở trong tính huống hiệu quả nhất trong một đòn thế, còn lại, <strong>đừng</strong>.</p>
<blockquote class="blockquote">
<p>“Notice that the stiffest tree is most easily cracked, while the bamboo or willow survives by bending with the wind.” <strong>—- Bruce Lee</strong></p>
</blockquote>
</section>
<section id="limb-coiling" class="level1">
<h1>10. <a href="https://bjjmentalmodels.com/limb-coiling/">limb coiling</a></h1>
<p>giữ tứ chi của bạn cuộn sát vào cơ thể, sẵn sáng tấn công. cụ thể:</p>
<ul>
<li>giữ cằm của bạn khom xuống, hai vai cũng gù, khom vào để hạn chế việc đối thủ tấn công vào cổ;</li>
<li>khuỷu tay luôn khép chặt vào hông, sườn (core, hips);</li>
<li>giữ đầu gối gập lại.</li>
</ul>
<p>điều này hạn chế việc đối thủ của bạn <em>cô lập và kiểm soát</em> các chi - vì khi co cuộn lại như một con rắn, đối thủ sẽ khó đạt được kiểm soát 2/3 khớp trên mỗi chi, cũng như đảm bảo bạn luôn <em>sẵn sàng phát lực</em> để thoát đi hoặc tấn công.</p>
<p>bạn chỉ nên duỗi chân ra khi</p>
</section>
<section id="elbow-knee-connection" class="level1">
<h1>11. <a href="https://bjjmentalmodels.com/elbow-knee-connection/">elbow-knee connection</a></h1>
</section>
<section id="solid-frames" class="level1">
<h1>12. <a href="https://bjjmentalmodels.com/solid-frames/">solid frames</a></h1>
</section>
<section id="kinetic-chains" class="level1">
<h1>13. <a href="https://bjjmentalmodels.com/kinetic-chains/">kinetic chains</a></h1>
</section>
<section id="body-tethering" class="level1">
<h1>14. <a href="https://bjjmentalmodels.com/body-tethering/">body tethering</a></h1>
</section>
<section id="inside-channel-control" class="level1">
<h1>15. <a href="https://bjjmentalmodels.com/inside-channel-control/">inside channel control</a></h1>
</section>
<section id="single-vs.-double-level-control" class="level1">
<h1>16. <a href="https://bjjmentalmodels.com/single-vs-double-lever-control/">single vs.&nbsp;double level control</a></h1>
</section>
<section id="overwhelming-force" class="level1">
<h1>17. <a href="https://bjjmentalmodels.com/overwhelming-force/">overwhelming force</a></h1>
</section>
<section id="surface-area" class="level1">
<h1>18. <a href="https://bjjmentalmodels.com/surface-area/">surface area</a></h1>
</section>
<section id="joint-rule" class="level1">
<h1>19. <a href="https://bjjmentalmodels.com/3-joint-rule/">3-joint rule</a></h1>
</section>
<section id="center-of-gravity" class="level1">
<h1>20. center of gravity</h1>
</section>
<section id="critical-control-points" class="level1">
<h1>21. critical control points</h1>
</section>
<section id="direct-vs.-proxy-control" class="level1">
<h1>22. direct vs.&nbsp;proxy control</h1>
</section>
<section id="force-compression" class="level1">
<h1>23. force compression</h1>
</section>
<section id="force-vectors" class="level1">
<h1>24. force vectors</h1>
</section>
<section id="head-position" class="level1">
<h1>25. head position</h1>
</section>
<section id="inertia" class="level1">
<h1>26. inertia</h1>
</section>
<section id="leading-edges" class="level1">
<h1>27. leading edges</h1>
</section>
<section id="mirrored-stances" class="level1">
<h1>28. mirrored stances</h1>
</section>
<section id="momentum" class="level1">
<h1>29. momentum</h1>
</section>
<section id="priits-45-rule" class="level1">
<h1>30. priit’s 45° rule</h1>
</section>
<section id="redundancies" class="level1">
<h1>31. redundancies</h1>
</section>
<section id="seated-vs.-supine-guards" class="level1">
<h1>32. seated vs.&nbsp;supine guards</h1>
</section>
<section id="stress-and-recovery" class="level1">
<h1>33. stress and recovery</h1>
<p><a href="https://www.youtube.com/watch?v=XGZ-0ZoFqKk" class="uri">https://www.youtube.com/watch?v=XGZ-0ZoFqKk</a></p>


<!-- -->

</section>

 ]]></description>
  <category>bjj</category>
  <guid>https://lktuan.github.io/blog/2024-08-06-bjj-mental-models/</guid>
  <pubDate>Mon, 05 Aug 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-08-06-bjj-mental-models/bjj_mental_models.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Now I know docker init is a thing</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-30-docker-init/</link>
  <description><![CDATA[ 





<p>TIL that Docker has an <a href="https://docs.docker.com/language/python/containerize/">example</a> for containerizing Python apps. It uses a simple <a href="https://fastapi.tiangolo.com/">FastAPI</a> example for demonstration. We can download the project as below:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/estebanx64/python-docker-example</span></code></pre></div>
<p>After navigating to our project, we can easily set up our project for containerization with <code>docker init</code>. This will create:</p>
<ul>
<li><code>.dockerignore</code></li>
<li><code>Dockerfile</code></li>
<li><code>compose.yaml</code></li>
<li><code>README.Docker.md</code></li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> init</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Welcome</span> to the Docker Init CLI!</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">This</span> utility will walk you through creating the following files with sensible defaults for your project:</span>
<span id="cb2-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> .dockerignore</span>
<span id="cb2-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Dockerfile</span>
<span id="cb2-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> compose.yaml</span>
<span id="cb2-9">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> README.Docker.md</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Let</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s get started!</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What application platform does your project use? Python</span></span>
<span id="cb2-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What version of Python do you want to use? (3.11.4)</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What version of Python do you want to use? 3.11.4</span></span>
<span id="cb2-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What port do you want your app to listen on? (8000)</span></span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What port do you want your app to listen on? 8000</span></span>
<span id="cb2-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What is the command you use to run your app? (uvicorn '</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">app:app</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' --host=0.0.0.0 --port=8000)</span></span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What is the command you use to run your app? uvicorn '</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">app:app</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' --host=0.0.0.0 --port=8000</span></span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✔ Created → .dockerignore</span></span>
<span id="cb2-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✔ Created → Dockerfile</span></span>
<span id="cb2-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✔ Created → compose.yaml</span></span>
<span id="cb2-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✔ Created → README.Docker.md</span></span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">→ Your Docker files are ready!</span></span>
<span id="cb2-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Review your Docker files and tailor them to your application.</span></span>
<span id="cb2-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Consult README.Docker.md for information about using the generated files.</span></span>
<span id="cb2-32"></span>
<span id="cb2-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">! Warning → Make sure your requirements.txt contains an entry for the uvicorn package, which is required to run your application.</span></span>
<span id="cb2-34"></span>
<span id="cb2-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">What'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">s</span> next<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span>
<span id="cb2-36">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Start</span> your application by running → docker compose up <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build</span></span>
<span id="cb2-37">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Your</span> application will be available at http://localhost:8000</span></code></pre></div>
<p>I can access the application right after running <code>docker compose up --build</code>. The image buidling process was fast, and image size was only <code>203.21MB</code>.</p>
<p>Let’s take a look at the <code>Dockerfile</code>. IMHO, this is not yet a optimal Dockerized Python project:</p>
<ul>
<li>Lack off a dependency management tool (for e.g, <code>pipenv</code>, <code>poetry</code> both are good, production-ready);</li>
<li>This is single-step builder. Should we split it to <code>dependencies</code> and <code>runtime</code> steps, which will limit the objects in the <code>runtime</code> image to only those needed to run the application? </li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">further reading, <a href="https://sourcery.ai/blog/python-docker/">“A perfect way to Dockerize your Pipenv Python application”</a></span></div><p>I do see some good practices here that we should run our apps in a non-privileged user rather than root as well as <em>mount cache and bind</em>, using Docker’s BuildKit feature, which allows more advanced mounting capabilities during build time:</p>
<ol type="1">
<li>first <code>--mount=type=cache,target=/root/.cache/pip</code> option:</li>
</ol>
<ul>
<li>This creates a cache mount for pip’s cache directory;</li>
<li>It speeds up subsequent builds by reusing cached pip packages;</li>
<li>The cache persists between builds, saving time and bandwidth.</li>
</ul>
<ol start="2" type="1">
<li>second <code>--mount=type=bind,source=requirements.txt,target=requirements.txt</code> option:</li>
</ol>
<ul>
<li>This creates a bind mount for the <code>requirements.txt</code> file;</li>
<li>It allows access to the <code>requirements.txt</code> file without copying it into the image layer;</li>
<li>This is useful for keeping the image size smaller and allowing changes to <code>requirements.txt</code> without rebuilding all layers.</li>
</ul>
<p>In conclusion, benefits are:</p>
<ol type="1">
<li><strong>Faster builds</strong>: By using a cache mount for pip, subsequent builds can reuse cached packages, significantly speeding up the process.</li>
<li><strong>Smaller image size</strong>: The bind mount for <code>requirements.txt</code> means the file doesn’t need to be copied into the image, keeping the image size smaller.</li>
<li><strong>Better caching</strong>: Changes to <code>requirements.txt</code> don’t invalidate the entire layer cache, only the parts that have changed.</li>
<li><strong>Separation of concerns</strong>: Downloading dependencies is done as a separate step, which can be beneficial for Docker’s layer caching mechanism.</li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># syntax=docker/dockerfile:1</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Comments are provided throughout this file to help you get started.</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you need more help, visit the Dockerfile reference guide at</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://docs.docker.com/go/dockerfile-reference/</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ARG</span> PYTHON_VERSION=3.11.4</span>
<span id="cb3-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FROM</span> python:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${PYTHON_VERSION}</span>-slim as base</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prevents Python from writing pyc files.</span></span>
<span id="cb3-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ENV</span> PYTHONDONTWRITEBYTECODE=1</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keeps Python from buffering stdout and stderr to avoid situations where</span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the application crashes without emitting any logs due to buffering.</span></span>
<span id="cb3-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ENV</span> PYTHONUNBUFFERED=1</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a non-privileged user that the app will run under.</span></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># See https://docs.docker.com/go/dockerfile-user-best-practices/</span></span>
<span id="cb3-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ARG</span> UID=10001</span>
<span id="cb3-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> adduser <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--disabled-password</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--gecos</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--home</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/nonexistent"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--shell</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/sbin/nologin"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-create-home</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--uid</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${UID}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-31">    appuser</span>
<span id="cb3-32"></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download dependencies as a separate step to take advantage of Docker's caching.</span></span>
<span id="cb3-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.</span></span>
<span id="cb3-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Leverage a bind mount to requirements.txt to avoid having to copy them into</span></span>
<span id="cb3-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># into this layer.</span></span>
<span id="cb3-37"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mount</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>type=cache,target=/root/.cache/pip <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mount</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>type=bind,source=requirements.txt,target=requirements.txt <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-39">    python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span>
<span id="cb3-40"></span>
<span id="cb3-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Switch to the non-privileged user to run the application.</span></span>
<span id="cb3-42"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">USER</span> appuser</span>
<span id="cb3-43"></span>
<span id="cb3-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy the source code into the container.</span></span>
<span id="cb3-45"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">COPY</span> . .</span>
<span id="cb3-46"></span>
<span id="cb3-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Expose the port that the application listens on.</span></span>
<span id="cb3-48"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">EXPOSE</span> 8000</span>
<span id="cb3-49"></span>
<span id="cb3-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the application.</span></span>
<span id="cb3-51"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CMD</span> uvicorn <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'app:app'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--host</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>0.0.0.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--port</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>8000</span></code></pre></div>
<p>Happy coding!</p>


<!-- -->


 ]]></description>
  <category>docker</category>
  <category>python</category>
  <guid>https://lktuan.github.io/blog/2024-07-30-docker-init/</guid>
  <pubDate>Mon, 29 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-30-docker-init/python_docker.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>BJJ Beginners Guide</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/</link>
  <description><![CDATA[ 





<p>Đây là bài (lược) dịch từ beginners guide của Reddit community <code>r/bjj</code>. Link gốc bài viết: <a href="https://www.reddit.com/r/bjj/wiki/beginners-guide/" class="uri">https://www.reddit.com/r/bjj/wiki/beginners-guide/</a>. Một số thuật ngữ mình có thể sẽ để nguyên bản Tiếng Anh, hoặc để kèm trong ngoặc tròn <code>()</code>, chú thích (nếu có) sẽ được đặt trong dấu ngoặc tròn sau “ND”.</p>
<p>Mục đích đánh giá lại những gì mình đạt được sau 6 tháng theo đuổi BJJ.</p>
<section id="hướng-dẫn-jiu-jitsu-cho-người-mới-bắt-đầu" class="level1">
<h1>Hướng dẫn Jiu-jitsu cho người mới bắt đầu</h1>
<p>Chào mừng đến với Brazil Jiujitsu và chào mừng đến với <code>r/bjj</code>! Đây là hướng dẫn tổng hợp dành cho người mới để bắt đầu hành trình Jiu-jitsu của bạn.</p>
<p>Chúc may mắn, và hãy tử tế!</p>
<p>Bạn có đề xuất, cải tiến hoặc nhận xét cho bài viết này? Để nó ở <a href="https://docs.google.com/forms/d/e/1FAIpQLSclF8d-uXVmPVQ3EoV3K-SexnoWbefI5y6lofkSUNI68RpDCQ/viewform">đây</a>.</p>
</section>
<section id="bjj-là-gì" class="level1">
<h1>BJJ là gì?</h1>
<p>Brazilian Jiu-jitsu, đôi lúc gọi là Jiu-jitsu (ND: 八四柔术 Nhu thuật Brazin) là một môn võ kế thừa từ Judo (ND: 柔道 Nhu đạo Nhật bản). Nó:</p>
<ul>
<li>Đối kháng (contact), nghĩa là bạn cần tranh giành ưu thế, chiến thắng với người khác;</li>
<li>Tay không (bare-handed), nghĩa là không vũ khí nào được chấp nhận;</li>
<li>Dựa vào vật lộn (grappling-based), phương thức chiến đấu là vật (grappling, wrestling), đấm (punching) và đá (kicking) là không được phép;</li>
<li>Submission-based (ND: chưa thể dịch từ này), nghĩa là mục tiêu cần đạt được là bắt đối thủ đầu hàng (submission) thông qua một đòn siết nghẹt (choke) hoặc đe dọa tổn thương tới các khớp của họ, hơn là chỉ đơn thuần là chiếm vị trí ưu thế (positioning) hoặc ghim chặt đối thủ (pinning).</li>
</ul>
<p>BJJ khác với Judo ở chỗ nó thiên về vật lộn / địa chiến (ground grappling), trong khi Judo nhấn mạnh về quăng (throws) và quật ngã (takedowns) từ vị trí đứng.</p>
</section>
<section id="tôi-có-thực-sự-thích-jiu-jitsu-không" class="level1">
<h1>Tôi có (thực sự) thích Jiu-jitsu không?</h1>
<p>Bạn sẽ thích Jiu-jitsu nếu:</p>
<ul>
<li>Đang tìm kiếm một bài thể thao rèn luyện (workout), nhưng ghét tập các môn thể dục như chạy bộ, nâng tạ;</li>
<li>Tìm kiếm một cộng đồng sôi động;</li>
<li>Cần tìm cảm giác có mục đích và tiến bộ;</li>
<li>Thích các hoạt động thể thao kết hợp thể chất và trí não (cerebral), như leo núi;</li>
<li>Đã từng đào tạo các môn thể thao đối kháng (combat) khác;</li>
<li>Muốn thử gì đó mới mẻ?.</li>
</ul>
</section>
<section id="jiu-jitsu-có-phù-hợp-với-tôi-không" class="level1">
<h1>Jiu-jitsu có phù hợp với tôi không?</h1>
<p>Nó phù hợp với tất cả bất kể tuổi, thể trạng, giới tính, hoàn cảnh, kinh nghiệm. Tuy nhiên, có thể tập và không cần coi nó là sở thích của bạn, và bạn cũng không cần xuất sắc trong môn này. Mục tiêu không phải là hơn thua với người khác, mà là trở nên <em>tốt nhất có thể</em>.</p>
</section>
<section id="làm-sao-để-thử-và-bắt-đầu" class="level1">
<h1>Làm sao để thử và bắt đầu</h1>
<ol type="1">
<li>Tìm một phòng tập, nên là các phòng có đánh giá tốt;</li>
<li>Tìm hiểu lịch tập, chính sách, giá cả;</li>
<li>Mặc quần áo thoải mái, không đeo trang sức, mang nước, thời điểm này bạn chưa cần trang bị nào khác;</li>
<li>Tập thử;</li>
<li>Lớp thông thường sẽ bao gồm: khởi động (warmups), dạy kĩ thuật và tập luyện (teaching &amp; drilling), sau đó là đối kháng (sparring, rolling, open mat). Tập nhẹ nhàng và không nên kì vọng quá nhiều;</li>
<li>(&amp; 7) Xin tập thử thêm, hoặc tìm một CLB khác, hãy mạnh dạn, cho tới khi ưng ý.</li>
</ol>
</section>
<section id="lựa-chọn-clbphòng-tập" class="level1">
<h1>Lựa chọn CLB/Phòng tập</h1>
<p>Nếu thấy thích BJJ thì bạn nên commit tới một phòng tập. Dưới đây là các tiêu chí:</p>
<ul>
<li>Không khí (Vibe): Thấy hợp không (jibe with the vibe), các thành viên có thân thiện không. Trang thiết bị có sơ sài, có mùi hay không?;</li>
<li>Chất lượng (Quality): Có năng lực tổ chức tốt hay không? Họ focus vào Jiu-jitsu hay các môn khác nữa? Người chủ có đai đen hay không? Họ đào tạo BJJ bao lâu rồi?;</li>
<li>Địa điểm (Location): Thuận tiện cho bạn hay không?;</li>
<li>Chi phí (Cost): Có phù hợp với bạn hay không?.</li>
</ul>
</section>
<section id="các-quy-tắc-lịch-sự" class="level1">
<h1>Các quy tắc lịch sự</h1>
<section id="tổng-quan" class="level2">
<h2 class="anchored" data-anchor-id="tổng-quan">Tổng quan</h2>
<p>Hãy lịch sử và tuân thủ các quy tắc. Bạn đang tham gia một cộng đồng đang cố gắng cải thiện kỹ năng của họ, chứ không phải chiến đấu để đứng đầu theo kiểu của bạn.</p>
</section>
<section id="vệ-sinh-và-sức-khỏe" class="level2">
<h2 class="anchored" data-anchor-id="vệ-sinh-và-sức-khỏe">Vệ sinh và sức khỏe</h2>
<ul>
<li>Đừng đến phòng tập nếu bạn ốm hoặc có virus hoặc bệnh truyền nhiễm khác;</li>
<li>Mang dép hoặc giày ngoài thảm, đi chân đất trên thảm;</li>
<li>Giặt, vệ sinh đồ tập sau mỗi buổi học;</li>
<li>Cắt gọn ngón chân / tay để tránh làm bị thương bạn tập;</li>
<li>Sử dụng xịt khử mùi, nước súc miệng nếu cần;</li>
<li>Trước buổi tập nếu có mồ hôi hoặc mùi, hãy tắm trước;</li>
<li>Tắm càng sớm càng tốt sau buổi tập để tránh nhiễm trùng da;</li>
<li>Chú ý đến da, nếu có vấn đề hãy ngừng tập và gặp bác sĩ.</li>
</ul>
</section>
<section id="tập-luyện-kĩ-thuật-drilling" class="level2">
<h2 class="anchored" data-anchor-id="tập-luyện-kĩ-thuật-drilling">Tập luyện kĩ thuật (Drilling)</h2>
<ul>
<li>Chia đều thời gian của bạn và bạn tập;</li>
<li>Chỉ nên đưa ra lời khuyên khi bạn thực sự tự tin, nếu không thì nghe coach (ND: Biết thì thưa thốt, không biết dựa cột mà nghe);</li>
<li>Mục tiêu là tập luyện các động tác trong điều kiện không có áp lực từ đối thủ. Nên đừng tạo áp lực quá nhiều cho bạn tập, cũng không nên quá thoải mái như một người nộm;</li>
<li>Tập trung vào các chuyện động (movement) hơn là đạt được kết quả của động tác.</li>
</ul>
</section>
<section id="tập-luyện-đối-kháng-rolling" class="level2">
<h2 class="anchored" data-anchor-id="tập-luyện-đối-kháng-rolling">Tập luyện đối kháng (Rolling)</h2>
<ul>
<li>Bạn có quyền từ chối việc roll với bất cứ ai, trong bất cứ thời điểm nào, hoặc bất kì lí do nào. Họ có thể không thích hoặc cho rằng nó thiếu lịch sự, nhưng, bạn có quyền;</li>
<li>Người ta thường đập và cụng ta (hand slap and dump) để đánh dấu cho một ca roll bắt đầu;</li>
<li>Cảm ơn bạn tập sau mỗi lần roll, bất kể nó kết thúc như thế nào;</li>
<li>Mục tiêu của roll là học hỏi chứ không phải chiến thắng, để dành cái ham muốn đó cho các trận đánh thực sự;</li>
<li>Điều tệ nhất bạn có thể làm là gây ra chấn thương cho bạn tập;</li>
<li>Một số thế submission có thể chuyển từ không đau cho tới tạo ra chấn thương nghiêm trọng nhất nhanh. Trong các trường hợp đó, hãy siết lực chậm lại để tạo thời gian cho bạn tập tap-out;</li>
<li>Khi roll với một bạn tập nhỏ hơn mình nhiều, đừng cố gắng dùng trọng lượng để đè họ xuống. Mục tiêu là học hỏi, và 5 phút đè như vậy và chả ai học được gì cả. Hãy cố linh hoạt nhiều tư thế;</li>
<li>Các va chạm tình cờ vào các vùng nhạy cảm là điều bình thường trong các môn vật. Cứ tiếp tục roll hoặc nói “Sorry” nếu bạn muốn, không nên giải thích dài dòng và nên tập trung vào tập luyện.</li>
</ul>
</section>
</section>
<section id="tổng-quan-các-vị-trí-trong-bjj" class="level1">
<h1>Tổng quan các vị trí trong BJJ</h1>
<p>Jiu-jitsu có phong phú các thế, tư thế chiến đấu (configurations and positions). Mỗi tư thế, đối với cả bạn và bạn tập đều sẽ có các chiến lược, kỹ thuật khác nhau.</p>
<p>Mỗi thế sẽ tương ưng là sự chiếm ưu thế cho một cá nhân, và sự thất thế cho một bên còn lại. Đối với người chiếm ưu thế, bạn đang tấn công, ngược lại, bạn đang trong vai trò phòng thủ. (ND) Sự chênh lệch giữa ưu / thất thế cũng sẽ khác nhau cho các thế đánh khác nhau. Mỗi người đều sẽ cố gắng dùng các chiến lược và kĩ thuật để tạo lợi thế cho bản thân.</p>
<p>Dưới đây là một số thế như vậy, bạn không cần ghi nhớ, bạn sẽ được dạy theo thời gian:</p>
<p><em>All photos below credit to orginal post.</em></p>
<section id="closed-guard" class="level2">
<h2 class="anchored" data-anchor-id="closed-guard">Closed Guard</h2>
<p>Closed Guard là tư thế phố biến nhất cho người mới bắt đầu, hai chân bạn sẽ vòng qua hông (waist) đối thủ và dùng mắt cá chân khóa (ankles) lại. Lợi thế thuộc về người ở trên (bạn tập của bạn).</p>
<p>Trong Jiu-jitsu, “guard” mang nghĩa tương tự như “chân”, tư thế này được gọi như vậy vì bạn dùng chân khóa kín đối thủ.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/closed_guard.png" class="img-fluid figure-img"></p>
<figcaption>Closed Guard</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="open-guard" class="level2">
<h2 class="anchored" data-anchor-id="open-guard">Open Guard</h2>
<p>Khi người ở trên có thể thoát, gỡ được móc nối giữa hai mắt cá chân, sẽ hình thành nên tư thế Open Guard. Lúc này “guard” đã được “open”, tư thế này rất linh động và có nhiều biến thể / tên gọi cho từng vị trí cụ thể, như <em>Spider Guard</em> hay <em>Lasso Guard</em>. Nhìn chung tư thế này không có lợi cho cả hai người.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/open_guard.png" class="img-fluid figure-img"></p>
<figcaption>Open Guard</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="side-control" class="level2">
<h2 class="anchored" data-anchor-id="side-control">Side Control</h2>
<p>Khi một người có thể vòng qua chân của người phía dưới và kiểm soát thân mình (torso) thì người đó được xem là đã “passed the guard”, động tác này kết thúc bằng từ thế Side Control. Lợi thế thuộc về người đó - người ở trên.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/side_control.png" class="img-fluid figure-img"></p>
<figcaption>Side Control</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="mount" class="level2">
<h2 class="anchored" data-anchor-id="mount">Mount</h2>
<p>Nếu người ở trên có thể giành được nhiều quyền kiểm soát hơn, họ có thể ngồi lên phần bụng (hips) hoặc ngực (chest), tư thế này được gọi là Mount và nó <em>cực kì</em> có lợi cho người ở trên.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/mount.png" class="img-fluid figure-img"></p>
<figcaption>Mount</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="back" class="level2">
<h2 class="anchored" data-anchor-id="back">Back</h2>
<p>Con người giỏi chiến đấu với các mối đe dọa đến trước mặt mình hơn là từ đằng sau. Vì thế lấy lưng là một tư thế tốt cho việc tấn công, và bị lấy lưng sẽ tạo ra sự thất thế cực lớn cho việc phòng ngự.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/back.png" class="img-fluid figure-img"></p>
<figcaption>Back</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="turtle" class="level2">
<h2 class="anchored" data-anchor-id="turtle">Turtle</h2>
<p>Tư thế con rùa mang lại một chút lợi thế cho người ở trên. Gọi là con rùa bởi vì tư thế của người ở dưới.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/turtle.png" class="img-fluid figure-img"></p>
<figcaption>Turtle</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="half-guard" class="level2">
<h2 class="anchored" data-anchor-id="half-guard">Half Guard</h2>
<p>Khi một người có thể dùng chân khống chế được một chân (thay vì từ phần hông và hai chân) của đối thủ, từ phía dưới, ta gọi đó là Half Guard. Ai có lợi thế còn tùy thuộc vào từng trường hợp cụ thể</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/half_guard.png" class="img-fluid figure-img"></p>
<figcaption>Half Guard</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="làm-sao-để-tiến-bộ" class="level1">
<h1>Làm sao để tiến bộ</h1>
<section id="chấp-nhận-thất-bại-nhất-là-khi-chỉ-mới-bắt-đầu" class="level2">
<h2 class="anchored" data-anchor-id="chấp-nhận-thất-bại-nhất-là-khi-chỉ-mới-bắt-đầu">Chấp nhận thất bại, nhất là khi chỉ mới bắt đầu</h2>
<ul>
<li>Rất là bình thường nếu bạn cảm thấy mình tệ. Bạn đang đào sâu vào một lĩnh vực sâu và phức tạp, ngay cả đai đen cũng có lúc nhận thấy nhiều thứ họ chưa thể hiểu được;</li>
<li>Nếu bạn không có kinh nghiệp vật (grappling) trước đó, 12 tháng đầu tiên bạn sẽ học 108 các phong cách tap-out khác nhau. Vậy nên đừng đo lường mức độ tiến bộ của bạn bằng các chiến thắng, mà nên là cách bạn cải thiện việc phòng thủ;</li>
<li>Hãy khiêm tốn và học cách trân trọng từng sự tiến bộ, tập trung vào học hỏi thay vì kết quả cuối cùng. Tất cả những gì bạn có thể đạt được là một chút tiến bộ mỗi ngày, ai cũng thế, ngay cả khi bạn không chứng kiến.</li>
</ul>
</section>
<section id="việc-khai-triển-kĩ-thuật-khó-hơn-rất-nhiều-khi-roll" class="level2">
<h2 class="anchored" data-anchor-id="việc-khai-triển-kĩ-thuật-khó-hơn-rất-nhiều-khi-roll">Việc khai triển kĩ thuật khó hơn rất nhiều khi Roll</h2>
<ul>
<li>Bạn có thể học được một kĩ thuật và thực hành nó một cách mượt mà khi đối thủ gần như không kháng cự khi tập luyện;</li>
<li>Nhưng khi vào live roll thì khác, khi đối thủ biết bạn muốn làm gì, bạn sẽ thậm chí không thế thực hiện được bước đầu tiên và mọi thứ đều đi chệch khỏi hướng. Hoặc, bạn cũng cảm thấy đầu óc bạn hoàn toàn trống rỗng (ND: hành động theo bản năng);</li>
<li>Điều này là hoàn toàn bình thường, học các bước cơ bản là khởi đầu cho hành trình dài để trở nên thành thạo. Hãy kiên nhẫn nghiên cứu xem mình đã làm chưa đúng ở bước nào, và tiếp tục thực hành.</li>
</ul>
</section>
<section id="làm-sao-tiến-bộ-một-cách-có-hiệu-quả" class="level2">
<h2 class="anchored" data-anchor-id="làm-sao-tiến-bộ-một-cách-có-hiệu-quả">Làm sao tiến bộ một cách có hiệu quả</h2>
<ul>
<li>Hãy đặt câu hỏi cho coach;</li>
<li>Hãy hỏi các tiền bối đi trước, nhớ rằng cần phải tôn trọng thời gian của họ;</li>
<li>Hãy xem các video hướng dẫn, tài nguyên rất phong phú trên Youtube. Cẩn thận với click-bait và video-brain - hãy xem có chọn lọc:</li>
<li>Click-bait: nhờ thuật toán của Youtube mà các video với tiêu đề ‘learn this unstoppable sweep’ hoặc ‘never get submitted again ever’ sẽ xuất hiện rất nhiều. Những thứ này không chính xác, hãy học những thứ basic. Những thứ trông fancy sẽ không phù hợp với mức độ kĩ năng của bạn đâu;</li>
<li>Video-brain: rất dễ để xem hết hai ba chục video youtube về các kỹ thuật submissions, escapes. Nhưng não bộ bạn sẽ không thể hấp thu hết được chừng đấy các kỹ thuật một cách chi tiết. Nếu bạn muốn áp dụng trong rolling, bạn sẽ thấy đầu ong ong và nhức nhức khi cố nhớ về kỹ thuật nào đó đã xem trong video nào đó trong hàng chục cái video khác. Hãy đi sâu thay vì đi rộng (recommended to go deep rather than broad). Xem nhiều video cho cùng một kĩ thuật, hoặc xem một video lặp lại nhiều lần và cố gắng tiếp thu trước khi move on.</li>
<li>Yêu cầu các bạn tập open mat học một kĩ thuật cụ thể hơn là rolling. Rolling mang lại cho bạn kinh nghiệm, nhưng nó sẽ rất loãng. Nếu bạn tập một tư thế guard hoặc một kỹ thuật với nhiều bạn tập khác nhau trong một thời gian ngắn, bạn sẽ thấy sự cải thiện rõ rệt. Hãy bắt đầu với tư thế mà bạn chưa thành thạo và reset nếu một trong hai thoát được khỏi đó. Tất nhiên cũng nên hỏi bạn tập xem họ muốn tập kĩ thuật nào;</li>
<li>Sau mỗi buổi tập, hãy nghĩ về những thứ mình chưa làm được khi roll. Hãy chọn 1, 2 chủ đề trong đó để tự học qua video, buổi sau bạn có thể thực hành cho tới khi thấy có cải thiện. Cứ thế tiếp tục một chu trình như vậy.</li>
</ul>
</section>
</section>
<section id="trang-bị-phụ-kiện" class="level1">
<h1>Trang bị, phụ kiện</h1>
<section id="gi" class="level2">
<h2 class="anchored" data-anchor-id="gi">Gi</h2>
<p>Bạn có thể mua Gi online hoặc ở ngay phòng tập. Tuy nhiên mua online sẽ rẻ hơn. Có một số phòng tập sẽ yêu cầu mua Gi hoặc patch.</p>
<p>Hãy kiểm tra kĩ size chart, nhất là nên hỏi những <em>bạn tập có cùng kích thước với mình</em>. Cũng nên nhớ rằng size chart có thể khác nhau cho các brand khác nhau.</p>
</section>
<section id="rashguard-for-no-gi" class="level2">
<h2 class="anchored" data-anchor-id="rashguard-for-no-gi">Rashguard (for No Gi)</h2>
<p>TODO</p>
</section>
<section id="quần-áo-lót-underclothes" class="level2">
<h2 class="anchored" data-anchor-id="quần-áo-lót-underclothes">Quần áo lót (Underclothes)</h2>
<p>Đối với Gi, bạn có thể mặc đồ lót dưới Gi (ND: vì áo Gi có thể bị kéo bung trong lúc tập luyện và bạn không muốn để ngực trần). Bạn có thể dễ dàng tìm các elastic/compression shirts và pants (spat) online. Hãy nhớ rằng chúng có thể bị nắm/kéo (ND: như là một phần của các kĩ thuật luyện tập với Gi), và có thể làm bạn nóng nực.</p>
<p>Trong thi đấu, nam <em>không được</em> mặc gì dưới áo Gi (Gi top). Còn nữ thì <em>phải mặc</em> compression shirt, gymnast top, hoặc one-piece swimsuit.</p>
</section>
<section id="bảo-vệ-hàm-mounthguard" class="level2">
<h2 class="anchored" data-anchor-id="bảo-vệ-hàm-mounthguard">Bảo vệ hàm (Mounthguard)</h2>
<p>Mặc dù không phải là môn về đấm / đá (striking), sẽ vẫn có khả năng đối thủ, bạn tập của bạn đánh trúng mặt hoặc siết vào hàm của bạn. Do đó, việc đeo bảo vệ hàm sẽ giúp hạn chế các tổn thương tới hàm, răng, môi, lưỡi - những tổn thương rất đau và khó hồi phục.</p>
</section>
<section id="cup" class="level2">
<h2 class="anchored" data-anchor-id="cup">… Cup</h2>
<p>Một số người dùng cup để vào vệ háng / bẹn (crotch), nhưng nó thực sự không cần thiết. Cup có thể làm tổn thương bạn tập, và bị cấm trong hầu hết các tour đấu.</p>
</section>
<section id="bảo-vệ-đầu-headgear" class="level2">
<h2 class="anchored" data-anchor-id="bảo-vệ-đầu-headgear">Bảo vệ đầu (Headgear)</h2>
<p>Bảo về đầu sẽ giúp bạn hạn chế các tổn thương tai - thường dẫn đến “tai súp lơ” (cauliflower ear). Tuy nhiên nó không phổ biến và việc dùng headgear bị cấm trong các tour đấu. Bạn chỉ nên dùng khi đã có các chấn thương và muốn chúng không nặng thêm cho tới khi lành lại.</p>
</section>
</section>
<section id="các-tài-liệu-khác" class="level1">
<h1>Các tài liệu khác</h1>
<p><a href="http://www.artemisbjj.com/FAQ/" class="uri">http://www.artemisbjj.com/FAQ/</a></p>


<!-- -->

</section>

 ]]></description>
  <category>bjj</category>
  <guid>https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/</guid>
  <pubDate>Sun, 28 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/sloth_bjj.png" medium="image" type="image/png" height="141" width="144"/>
</item>
<item>
  <title>Another James Powell’s impromptu talk, summary by Clauder 3.5 Sonnet</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-18-claude-summary/</link>
  <description><![CDATA[ 





<p>source: <a href="https://www.youtube.com/watch?v=-z2eqLwVmzw">James Powell - Whatever I Can do to Entertain You in 30 Minutes | PyData London 2022</a></p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-18-claude-summary/James Powell - Whatever I Can do to Entertain You in 30 Minutes _ PyData London 2022 0-35 screenshot.png" class="img-fluid figure-img"></p>
<figcaption>Whatever I Can do to Entertain You in 30 Minutes</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>i was using this extension <a href="https://chromewebstore.google.com/detail/language-reactor/hoombieeljmmljlkjmnheibnpciblicm">Language Reactor</a> to export transcript into Excel and convert it to json. here is data in short:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span>   </span>
<span id="cb1-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"5s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"okay let me get started i'll give you the"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"7s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"premise the premise is the issues are not av related the issues are that my"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"12s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"laptop where i was up until 4am last night writing this talk"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"16s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"did not boot at all and as a consequence of that my notes that i spent quite a"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"21s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bit of time putting together are not available to you but i am still on the"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"24s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hook to keep you entertained for 30 minutes so we're going to see what i can"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"..."</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"..."</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"25:55"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"that makes it possible for us to write code that"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"25:58"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"put some structuring around the core computation now with that said i hope i"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"26:03"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"was able to entertain you i think we're just at the time that we have"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"26:07"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"thank you everybody i'm james powell hopefully i'll give the real talk"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>and this is summary by Clauder AI:</p>
<p>James Powell’s impromptu talk at PyData London 2022 covers several key points about Python programming, particularly aimed at data scientists. Here are the main points he’s trying to convey:</p>
<ol type="1">
<li><strong>Python is more than just APIs and function calls</strong>: Many data scientists focus solely on memorizing APIs (like Pandas or NumPy) without truly understanding the language’s depth and richness.</li>
<li><strong>Generators are underutilized</strong>: Generators can be powerful tools, especially for simulations or non-closed form operations where each incremental step is computationally expensive.</li>
<li><strong>Lazy vs.&nbsp;Eager computation</strong>: Understanding when to use lazy or eager computation can significantly impact performance, especially in data science tasks.</li>
<li><strong>Functions should not be overused</strong>: There’s a tendency to create functions for any repeated code, but this isn’t always the best approach. Powell distinguishes between intentional and coincidental repetition.</li>
<li><strong>Avoid premature abstraction</strong>: Creating functions deep in libraries, especially for data loading, can lead to issues with testing and maintenance. Sometimes, ad-hoc behavior is preferable.</li>
<li><strong>Iteration helpers and intentionality</strong>: Tools like <code>enumerate</code>, <code>zip</code>, and custom iteration helpers can make code more expressive and reveal the programmer’s intentions more clearly.</li>
<li><strong>Understanding Python conventions</strong>: Looking beyond the surface-level functionality of Python’s standard library (e.g., <code>itertools</code>) can reveal patterns and conventions that lead to better code.</li>
<li><strong>Code should express human intention</strong>: Loops in data science code often represent human-level processes rather than low-level computations. The code structure should reflect this.</li>
<li><strong>Flexibility in code structure</strong>: Allowing code to diverge when necessary, rather than forcing premature unification, can lead to more maintainable and adaptable codebases.</li>
<li><strong>Critical thinking about basic tools</strong>: Even when using basic Python constructs, data scientists should think deeply about why they’re using them and what alternatives might exist.</li>
</ol>
<p>Overall, Powell encourages data scientists to look beyond superficial knowledge of Python and its libraries, urging them to understand the language more deeply and use its features more thoughtfully to write more intentional, maintainable, and expressive code.</p>


<!-- -->


 ]]></description>
  <category>python</category>
  <category>pydata</category>
  <guid>https://lktuan.github.io/blog/2024-07-18-claude-summary/</guid>
  <pubDate>Wed, 17 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-18-claude-summary/claude.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A Prefect Workshop</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-17-prefect-workshop/</link>
  <description><![CDATA[ 





<p>🎞 Video source: <a href="https://www.youtube.com/watch?v=yIDBsHwTaa8&amp;list=PLGVZCDnMOq0rrhYTNedKKuJ9716fEaAdK&amp;index=4">Dr.&nbsp;Adam Hill - Empower Your Projects with Prefect’s Pipeline Magic | PyData London 2024</a></p>
<p>⛏ Github repo: <a href="https://github.com/Cadarn/PyData-Prefect-Workshop" class="uri">https://github.com/Cadarn/PyData-Prefect-Workshop</a></p>
<section id="goals" class="level1">
<h1>goals</h1>
<p>by end of this session you will:</p>
<ul>
<li>understand what Prefect is;</li>
<li>build and execute tasks and flows;</li>
<li>have schedules flow using deployment;</li>
<li>have a grasp what else can be done;</li>
<li>have some fun.</li>
</ul>
</section>
<section id="prefect-overview" class="level1">
<h1>prefect overview</h1>
<p>just simple as using jupyter notebook, you only need to use decorators (<code>@task</code> and <code>@flow</code>) to designate functions as <strong>task</strong> for <strong>flow</strong>. you need to breakdown your “notebook” into “code chunks” and organize to get them done.</p>
<div id="3aa32d45" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> prefect <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> task, flow</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> my_task():</span>
<span id="cb1-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello, i am a task!"</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@flow</span></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> my_flow():</span>
<span id="cb1-9">  my_task()</span></code></pre></div>
</details>
</div>
</section>
<section id="jump-to-the-workshop" class="level1">
<h1>jump to the workshop</h1>
<p>clone the repo, have docker compose up and running. then explore <code>http://localhost:8000/get_tweet</code>, this is shown which i have yet no idea:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tweet_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">570306133677760500</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"airline_sentiment"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"neutral"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"airline_sentiment_confidence"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"airline"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Virgin America"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cairdin"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-7">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"text"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@VirginAmerica What @dhepburn said."</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"retweet_count"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tweet_timestamp"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2015-02-24T11:35:52-08:00"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tweet_coord"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loop"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>the first thing you need to do is telling where the Prefect API is gonna live. currently it runs on free tier of the their cloud server (?) and now we config it to run in the localhost (?):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> config set PREFECT_API_URL=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://127.0.0.1:4200/api"</span></span></code></pre></div>
<p>then we gonna reset the database, do some config then can start the server. please note that if you are using window, you need to add <code>Scripts</code> variable to environment variables also, the value of the path can be found when you install Prefect by <code>pip</code>:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> server database reset <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> config set PREFECT_API_DATABASE_CONNECTION_URL=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postgresql+asyncpg://postgres:password@localhost:5432/prefect_server"</span></span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> config view <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--show-sources</span></span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> server start</span></code></pre></div>
<p>below is my initial dashboard, there is nothing!</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-17-prefect-workshop/initial_prefect_server.png" class="img-fluid figure-img"></p>
<figcaption>Prefect Dashboard</figcaption>
</figure>
</div>
</div>
</div>
</div>
<section id="e01-my-first-flow" class="level2">
<h2 class="anchored" data-anchor-id="e01-my-first-flow">e01 my first flow</h2>
<p>the basic component of prefect is <code>task</code> and <code>flow</code>. these are decorators to funtions we want to run. we can name and log easily:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>e01.py</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="e01.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example of processing some data</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> prefect <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> task, flow</span>
<span id="cb5-3"></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task</span>(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Addition operator"</span>)</span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add(a, b):</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb5-8"></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task</span>(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Squaring operator"</span>)</span>
<span id="cb5-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square_num(num):</span>
<span id="cb5-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb5-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span></span>
<span id="cb5-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-15"></span>
<span id="cb5-16"></span>
<span id="cb5-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@flow</span>(log_prints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My first simple flow"</span>)</span>
<span id="cb5-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_and_square(a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb5-19">    add_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> add(a, b)</span>
<span id="cb5-20">    square_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> square_num(add_result)</span>
<span id="cb5-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) squared = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>square_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-22"></span>
<span id="cb5-23"></span>
<span id="cb5-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb5-25">    add_and_square(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
</div>
</section>
<section id="e02a-sentiment-pipeline-v1" class="level2">
<h2 class="anchored" data-anchor-id="e02a-sentiment-pipeline-v1">e02a sentiment pipeline v1</h2>
</section>
<section id="e02b-sentiment-pipeline-v2" class="level2">
<h2 class="anchored" data-anchor-id="e02b-sentiment-pipeline-v2">e02b sentiment pipeline v2</h2>
</section>
<section id="e03a-kafka-tweet-publisher" class="level2">
<h2 class="anchored" data-anchor-id="e03a-kafka-tweet-publisher">e03a kafka tweet publisher</h2>
</section>
<section id="e03b-kafka-tweet-deployment" class="level2">
<h2 class="anchored" data-anchor-id="e03b-kafka-tweet-deployment">e03b kafka tweet deployment</h2>
</section>
<section id="e04-sentiment-pipeline-v3" class="level2">
<h2 class="anchored" data-anchor-id="e04-sentiment-pipeline-v3">e04 sentiment pipeline v3</h2>
</section>
</section>
<section id="further-reading" class="level1">
<h1>further reading</h1>
<ol type="1">
<li><a href="https://www.reddit.com/r/dataengineering/comments/oqbiiu/airflow_vs_prefect/">Prefect vs Airflow on Reddit</a></li>
</ol>
<p>Bình luận bởi <strong>u/alexisprince</strong>:</p>
<blockquote class="blockquote">
<p>Tôi đang sử dụng song song Airflow và Prefect (A cho scheduling, P cho execution), P được sử dụng khi yêu cầu về hiệu năng tính toán và phần scheduler của A vẫn chưa thể bị thay thế.</p>
<p>Lợi thế của A là đã quá phổ biến, dễ tìm hướng dẫn, dễ tuyển người cho chuyên môn. Yếu điểm là A đã quá cũ, không còn phù hợp cho dynamic workflow và modern data env. Hơn nữa A luôn best fit khi sử dụng chung với Astronomer, ngoài ra khá khó dùng.</p>
<p>P hiện đại hơn, cung cấp nhiều modern execution models, DAG được xác định tại runtime do đó dynamic hơn.</p>
<p>Prefer P hơn, better modularization of code.</p>
</blockquote>
<p>Bình luận bởi <strong>u/ChrisHC05</strong>:</p>
<blockquote class="blockquote">
<p>Tao đã đánh giá Airflow, Dagster, Argo và Prefect mấy tháng nay.</p>
<p>Airflow thì đã già, tuy nhiên tài liệu, hướng dẫn rất phong phú.</p>
<p>Dagster có vẻ gặp nhiều vấn đề với Production.</p>
<p>Prefect có cộng đồng phát triển, support, sửa lỗi active.</p>
<p>Vậy nên tôi chỉ đánh giá cao hai thằng Argo và Prefect. Argo khác biệt một cách mạnh mẽ, config được viết dưới dạng YAML, chạy trên cụm Kubernetes, và việc viết DAG không phụ thuộc vào một ngôn ngữ lập trình nào. Argo (tại thời điểm đó) cũng đang phát triển một module kiểu event listening, from outside, như Sensor của Airflow, thứ mà Prefect thiếu (workaround là call Prefect GraphQL-API).</p>
<p>Nếu đã có sẵn infra là K8S, khuyến nghị Argo, không chỉ là orchestration mà còn là một hệ sinh thái support từ event responding tới CI/CD. Nhưng learning curve thì steep nhé. Nó có nhiều tiềm năng vì giờ thì phần mềm nào cũng cần dockerized cả, tính trừu tượng cao hơn. “And IT in general is all about abstraction to make complicated things easier.”</p>
<p>Vậy nên:</p>
<ul>
<li>Nếu có sẵn cụm K8S: dùng Argo</li>
<li>Nếu không: dùng Prefect</li>
</ul>
</blockquote>
<ol start="2" type="1">
<li><a href="https://www.youtube.com/watch?v=XrZegcm1ftw">Airflow Vs. Prefect: Full Breakdown! by The Data Guy</a></li>
<li><a href="https://www.horsewithapointyhat.com/posts/being-a-data-scientist-in-a-post-truth-world/">Adam Hill’s blog</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>pydata</category>
  <category>prefect</category>
  <guid>https://lktuan.github.io/blog/2024-07-17-prefect-workshop/</guid>
  <pubDate>Tue, 16 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-17-prefect-workshop/adam_hill.png" medium="image" type="image/png" height="179" width="144"/>
</item>
</channel>
</rss>
