<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Le Khac Tuan</title>
<link>https://lktuan.github.io/blog.html</link>
<atom:link href="https://lktuan.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description>This is Tuan&#39;s blog</description>
<generator>quarto-1.4.554</generator>
<lastBuildDate>Sun, 01 Dec 2024 17:00:00 GMT</lastBuildDate>
<item>
  <title>NN-Z2H Lesson 5: Building makemore part 4 - Becoming a Backprop Ninja</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important callout-titled" title="This is not orginal content!">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This is not orginal content!
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is my study notes / codes along with Andrej Karpathy’s “<a href="https://www.youtube.com/watch?v=VMj-3S1tku0&amp;list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ">Neural Networks: Zero to Hero</a>” series.</p>
</div>
</div>
<section id="intro-why-you-should-care" class="level1">
<h1>intro: why you should care</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/swole_doggo.jpg" class="img-fluid figure-img"></p>
<figcaption>swole doge style backpropagation, image credit to <a href="https://www.youtube.com/watch?v=LzxnmqnctmA">this video</a></figcaption>
</figure>
</div>
<p>In previous lecture, we’re introduced to some common issues with our “shallow” (and of course for deep as well) neural network and how to fix with the initialization setting and Batch Normalization. We’re also learnt some diagnostic tools to observe <em>forward pass activations</em>, <em>backward pass gradients</em>, and <em>weights update</em>, to calibrate the training loop. In this lacture, we aim to replace this line of code:</p>
<div id="5200ddd8" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">... loss.backward() ...</span></code></pre></div>
</details>
</div>
<p>with from-scratch-code. It’s basically identical to <code>MicroGrad</code>, but on <em>Tensor</em> rather than <em>Scalar</em>. Why?</p>
<blockquote class="blockquote">
<p>The problem with Backpropagation is that it is a <a href="https://en.wikipedia.org/wiki/Leaky_abstraction">leaky abstraction</a>. – Andrej Karpathy</p>
</blockquote>
<p>readmore: <a href="https://karpathy.medium.com/yes-you-should-understand-backprop-e2f06eab496b" class="uri">https://karpathy.medium.com/yes-you-should-understand-backprop-e2f06eab496b</a>, and <a href="https://kratzert.github.io/2016/02/12/understanding-the-gradient-flow-through-the-batch-normalization-layer.html" class="uri">https://kratzert.github.io/2016/02/12/understanding-the-gradient-flow-through-the-batch-normalization-layer.html</a></p>
<p>inshort, to effectively debug neural network, we should be deeply understanding how back propagation work under the hood. Let’s do it!</p>
</section>
<section id="starter-code" class="level1">
<h1>starter code</h1>
<section id="import-libraries" class="level3">
<h3 class="anchored" data-anchor-id="import-libraries">import libraries:</h3>
<div id="2393205a" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</details>
</div>
</section>
<section id="read-data" class="level3">
<h3 class="anchored" data-anchor-id="read-data">read data:</h3>
<div id="87df8040" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-2"></span>
<span id="cb3-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/karpathy/makemore/refs/heads/master/names.txt"</span></span>
<span id="cb3-4">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>).iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tolist()</span>
<span id="cb3-5">words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>['emma', 'olivia', 'ava', 'isabella', 'sophia', 'charlotte', 'mia', 'amelia']</code></pre>
</div>
</div>
</section>
<section id="build-vocab" class="level3">
<h3 class="anchored" data-anchor-id="build-vocab">build vocab:</h3>
<div id="1d124728" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the vocabulary of characters and mapping to/from integer</span></span>
<span id="cb5-2">chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(words))))</span>
<span id="cb5-3">stoi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {s:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chars)}</span>
<span id="cb5-4">stoi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-5">itos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i: s <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s, i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> stoi.items()}</span>
<span id="cb5-6">vocab_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(itos)</span>
<span id="cb5-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(itos)</span>
<span id="cb5-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(vocab_size)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 0: '.'}
27</code></pre>
</div>
</div>
</section>
<section id="build-dataset-splits-identical-to-previous-so-i-folded-it" class="level3">
<h3 class="anchored" data-anchor-id="build-dataset-splits-identical-to-previous-so-i-folded-it">build dataset splits (identical to previous so I folded it):</h3>
<div id="3d495e39" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># context length: how many characters do we take to predict the next one.</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the dataset</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> buid_dataset(words):</span>
<span id="cb7-4">    X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb7-5"></span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words:</span>
<span id="cb7-7">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size</span>
<span id="cb7-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb7-9">            ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb7-10">            X.append(context)</span>
<span id="cb7-11">            Y.append(ix)</span>
<span id="cb7-12">            context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb7-13"></span>
<span id="cb7-14">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb7-15">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span>
<span id="cb7-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.shape, Y.shape)</span>
<span id="cb7-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> X, Y</span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb7-20">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb7-21">random.shuffle(words)</span>
<span id="cb7-22">n1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb7-23">n2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb7-24"></span>
<span id="cb7-25">Xtr, Ytr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[:n1])        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 80#</span></span>
<span id="cb7-26">Xdev, Ydev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n1:n2])    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 10%</span></span>
<span id="cb7-27">Xte, Yte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n2:])        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 10%</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([182625, 3]) torch.Size([182625])
torch.Size([22655, 3]) torch.Size([22655])
torch.Size([22866, 3]) torch.Size([22866])</code></pre>
</div>
</div>
</section>
<section id="utility-function-we-will-use-later-when-comparing-manual-gradients-to-pytorch-gradients." class="level3">
<h3 class="anchored" data-anchor-id="utility-function-we-will-use-later-when-comparing-manual-gradients-to-pytorch-gradients.">utility function we will use later when comparing manual gradients to PyTorch gradients.</h3>
<div id="8d6f7320" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(s, dt, t):</span>
<span id="cb9-2">  ex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> t.grad).item()</span>
<span id="cb9-3">  app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.allclose(dt, t.grad)</span>
<span id="cb9-4">  maxdiff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t.grad).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>().item()</span>
<span id="cb9-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:15s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | exact: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(ex)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:5s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | approximate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(app)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:5s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | maxdiff: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>maxdiff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="network-construction" class="level3">
<h3 class="anchored" data-anchor-id="network-construction">network construction:</h3>
<div id="dcfa5fa7" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the dimensionality of the character embedding vectors</span></span>
<span id="cb10-2">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of neurons in the hidden layer of the MLP</span></span>
<span id="cb10-3"></span>
<span id="cb10-4">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproducibility</span></span>
<span id="cb10-5">C  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_embd),            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1</span></span>
<span id="cb10-7">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>((n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb10-8">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_hidden,                        generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># using b1 just for fun, it's useless because of BN</span></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2</span></span>
<span id="cb10-10">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_hidden, vocab_size),          generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb10-11">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(vocab_size,                      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BatchNorm parameters</span></span>
<span id="cb10-13">bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb10-14">bnbias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb10-15"></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note: I am initializating many of these parameters in non-standard ways</span></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># because sometimes initializating with e.g. all zeros could mask an incorrect</span></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># implementation of the backward pass.</span></span>
<span id="cb10-19"></span>
<span id="cb10-20">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2, bngain, bnbias]</span>
<span id="cb10-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of parameters in total</span></span>
<span id="cb10-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb10-23">  p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>4137</code></pre>
</div>
</div>
</section>
<section id="mini-batch-construction" class="level3">
<h3 class="anchored" data-anchor-id="mini-batch-construction">mini-batch construction:</h3>
<div id="1ab9bbfd" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb12-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a shorter variable also, for convenience</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># construct a minibatch</span></span>
<span id="cb12-4">ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb12-5">Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X,Y</span></span></code></pre></div>
</details>
</div>
</section>
<section id="forward-pass-chunkated-into-smaller-steps-that-are-possible-to-backward-one-at-a-time." class="level3">
<h3 class="anchored" data-anchor-id="forward-pass-chunkated-into-smaller-steps-that-are-possible-to-backward-one-at-a-time.">forward pass, “chunkated” into smaller steps that are possible to backward one at a time.</h3>
<div id="07df6e23" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors</span></span>
<span id="cb13-2">embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linear layer 1</span></span>
<span id="cb13-5">hprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer pre-activation</span></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BatchNorm layer</span></span>
<span id="cb13-8">bnmeani <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hprebn.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-9">bndiff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bnmeani</span>
<span id="cb13-10">bndiff2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bndiff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb13-11">bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(bndiff2).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note: Bessel's correction (dividing by n-1, not n)</span></span>
<span id="cb13-12">bnvar_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb13-13">bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bndiff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnvar_inv</span>
<span id="cb13-14">hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias</span>
<span id="cb13-15"></span>
<span id="cb13-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non-linearity</span></span>
<span id="cb13-17">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(hpreact) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer</span></span>
<span id="cb13-18"></span>
<span id="cb13-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linear layer 2</span></span>
<span id="cb13-20">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output layer</span></span>
<span id="cb13-21"></span>
<span id="cb13-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cross entropy loss (same as F.cross_entropy(logits, Yb)), Kullback–Leibler divergence</span></span>
<span id="cb13-23">logit_maxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).values</span>
<span id="cb13-24">norm_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> logit_maxes <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subtract max for numerical stability</span></span>
<span id="cb13-25">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm_logits.exp()</span>
<span id="cb13-26">counts_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-27">counts_sum_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts_sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if I use (1.0 / counts_sum) instead then I can't get backprop to be bit exact...</span></span>
<span id="cb13-28">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> counts_sum_inv</span>
<span id="cb13-29">logprobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probs.log()</span>
<span id="cb13-30">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>logprobs[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n), Yb].mean()</span>
<span id="cb13-31"></span>
<span id="cb13-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PyTorch backward pass</span></span>
<span id="cb13-33"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb13-34">  p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb13-35"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [logprobs, probs, counts, counts_sum, counts_sum_inv, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># afaik there is no cleaner way</span></span>
<span id="cb13-36">          norm_logits, logit_maxes, logits, h, hpreact, bnraw,</span>
<span id="cb13-37">         bnvar_inv, bnvar, bndiff2, bndiff, hprebn, bnmeani,</span>
<span id="cb13-38">         embcat, emb]:</span>
<span id="cb13-39">  t.retain_grad()</span>
<span id="cb13-40"></span>
<span id="cb13-41">hprebn.retain_grad() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tuan added this line since code above does not ensure hprebn's grad to be retained.</span></span>
<span id="cb13-42"></span>
<span id="cb13-43">loss.backward()</span>
<span id="cb13-44">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>tensor(3.3346, grad_fn=&lt;NegBackward0&gt;)</code></pre>
</div>
</div>
</section>
</section>
<section id="exercise-1-backproping-the-atomic-compute-graph" class="level1">
<h1>exercise 1: backproping the atomic compute graph</h1>
<p>I can do 60, 70% of this myself ~ for popular mathematics operations. What I need to remember after this excercise are backwards of:</p>
<ul>
<li>elements in matrix mult;</li>
<li>max operator;</li>
<li>indexing operator; and</li>
<li>broadcasting behavior.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/explain_matrix_mult_grad.png" class="img-fluid figure-img"></p>
<figcaption>Andrej inductive reasoning, explains how to get a derivative from matrix multiplication.</figcaption>
</figure>
</div>
<p>Given the matrix mult expression <img src="https://latex.codecogs.com/png.latex?d%20=%20a%20@%20b%20+%20c">, we have:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Cmathbf%7Ba%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Cmathbf%7Bd%7D%7D%20@%20%5Cmathbf%7Bb%7D%5ET"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Cmathbf%7Bb%7D%7D%20=%20%5Cmathbf%7Ba%7D%5ET%20@%20%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Cmathbf%7Bd%7D%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Cmathbf%7Bc%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20L%7D%7B%5Cpartial%20%5Cmathbf%7Bd%7D%7D.sum(0)"></li>
</ul>
<div id="6b4865a6" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exercise 1: backprop through the whole thing manually, </span></span>
<span id="annotated-cell-10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backpropagating through exactly all of the variables </span></span>
<span id="annotated-cell-10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as they are defined in the forward pass above, one by one</span></span>
<span id="annotated-cell-10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cross entropy loss"</span>.upper())</span>
<span id="annotated-cell-10-5">dlogprobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(logprobs) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create zeros tensor with same size</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="1">1</button><span id="annotated-cell-10-6" class="code-annotation-target">dlogprobs[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n), Yb] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n</span>
<span id="annotated-cell-10-7">dprobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(probs) </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="2">2</button><span id="annotated-cell-10-8" class="code-annotation-target">dprobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> probs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dlogprobs</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="3">3</button><span id="annotated-cell-10-9" class="code-annotation-target">dcounts_sum_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dprobs).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-10-10">dcounts_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> counts_sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dcounts_sum_inv</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="4">4</button><span id="annotated-cell-10-11" class="code-annotation-target">dcounts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones_like(counts) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dcounts_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counts_sum_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dprobs</span>
<span id="annotated-cell-10-12">dnorm_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (norm_logits.exp()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dcounts <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># = counts * dcounts</span></span>
<span id="annotated-cell-10-13">dlogit_maxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dnorm_logits).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># broadcasting, again</span></span>
<span id="annotated-cell-10-14"></span>
<span id="annotated-cell-10-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logprobs'</span>, dlogprobs, logprobs)</span>
<span id="annotated-cell-10-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'probs'</span>, dprobs, probs)</span>
<span id="annotated-cell-10-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts_sum_inv'</span>, dcounts_sum_inv, counts_sum_inv)</span>
<span id="annotated-cell-10-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts_sum'</span>, dcounts_sum, counts_sum)</span>
<span id="annotated-cell-10-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>, dcounts, counts)</span>
<span id="annotated-cell-10-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'norm_logits'</span>, dnorm_logits, norm_logits)</span>
<span id="annotated-cell-10-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logit_maxes'</span>, dlogit_maxes, logit_maxes)</span>
<span id="annotated-cell-10-22"></span>
<span id="annotated-cell-10-23"></span>
<span id="annotated-cell-10-24">dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (dnorm_logits.clone() </span>
<span id="annotated-cell-10-25">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> F.one_hot( logits.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).indices, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># broadcasting, again</span></span>
<span id="annotated-cell-10-26">                        num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>logits.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="5">5</button><span id="annotated-cell-10-27" class="code-annotation-target">                        ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dlogit_maxes)</span>
<span id="annotated-cell-10-28"></span>
<span id="annotated-cell-10-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Layer 2 with Linear and Non-linearity tanh"</span>.upper())</span>
<span id="annotated-cell-10-30">dh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2.T</span>
<span id="annotated-cell-10-31">dW2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dlogits</span>
<span id="annotated-cell-10-32">db2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dlogits.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sum by column, vertical, to eliminate the 0-index dim</span></span>
<span id="annotated-cell-10-33"></span>
<span id="annotated-cell-10-34"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logits'</span>, dlogits, logits)</span>
<span id="annotated-cell-10-35"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>, dh, h)</span>
<span id="annotated-cell-10-36"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'W2'</span>, dW2, W2)</span>
<span id="annotated-cell-10-37"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b2'</span>, db2, b2)</span>
<span id="annotated-cell-10-38"></span>
<span id="annotated-cell-10-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Batch Norm layer"</span>.upper())</span>
<span id="annotated-cell-10-40">dhpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dh <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output of the tanh, square</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="6">6</button><span id="annotated-cell-10-41" class="code-annotation-target">dbngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dhpreact).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-10-42">dbnbias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dhpreact.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-10-43">dbnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dhpreact</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="7">7</button><span id="annotated-cell-10-44" class="code-annotation-target">dbnvar_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (bndiff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbnraw).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-10-45">dbnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbnvar_inv</span>
<span id="annotated-cell-10-46">dbndiff2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.ones_like(bndiff2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbnvar</span>
<span id="annotated-cell-10-47">dbndiff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bnvar_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bndiff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbndiff2</span>
<span id="annotated-cell-10-48">dbnmeani <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> torch.ones_like(dbndiff) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbndiff).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="annotated-cell-10-49"></span>
<span id="annotated-cell-10-50"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hpreact'</span>, dhpreact, hpreact)</span>
<span id="annotated-cell-10-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bngain'</span>, dbngain, bngain)</span>
<span id="annotated-cell-10-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bnbias'</span>, dbnbias, bnbias)</span>
<span id="annotated-cell-10-53"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bnraw'</span>, dbnraw, bnraw)</span>
<span id="annotated-cell-10-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bnvar_inv'</span>, dbnvar_inv, bnvar_inv)</span>
<span id="annotated-cell-10-55"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bnvar'</span>, dbnvar, bnvar)</span>
<span id="annotated-cell-10-56"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bndiff2'</span>, dbndiff2, bndiff2)</span>
<span id="annotated-cell-10-57"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bndiff'</span>, dbndiff, bndiff)</span>
<span id="annotated-cell-10-58"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bnmeani'</span>, dbnmeani, bnmeani)</span>
<span id="annotated-cell-10-59"></span>
<span id="annotated-cell-10-60"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linear layer 1"</span>.upper())</span>
<span id="annotated-cell-10-61">dhprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dbndiff.clone() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (torch.ones_like(hprebn) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dbnmeani))</span>
<span id="annotated-cell-10-62">dembcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dhprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1.T</span>
<span id="annotated-cell-10-63">dW1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dhprebn</span>
<span id="annotated-cell-10-64">db1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dhprebn.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="8">8</button><span id="annotated-cell-10-65" class="code-annotation-target">demb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dembcat.view(emb.shape)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="9">9</button><span id="annotated-cell-10-66" class="code-annotation-target">dC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(C)</span>
<span id="annotated-cell-10-67"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(Xb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate all elements of the Xb</span></span>
<span id="annotated-cell-10-68">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(Xb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="annotated-cell-10-69">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xb[k,j]</span>
<span id="annotated-cell-10-70">    dC[ix] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> demb[k,j]</span>
<span id="annotated-cell-10-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 2</span></span>
<span id="annotated-cell-10-72">dC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(C)</span>
<span id="annotated-cell-10-73">dC.index_add_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), demb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="annotated-cell-10-74"></span>
<span id="annotated-cell-10-75"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hprebn'</span>, dhprebn, hprebn)</span>
<span id="annotated-cell-10-76"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'embcat'</span>, dembcat, embcat)</span>
<span id="annotated-cell-10-77"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'W1'</span>, dW1, W1)</span>
<span id="annotated-cell-10-78"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b1'</span>, db1, b1)</span>
<span id="annotated-cell-10-79"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'emb'</span>, demb, emb)</span>
<span id="annotated-cell-10-80"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>, dC, C)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-10" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="6" data-code-annotation="1"><code>dlogprobs</code>: <code>logprobs</code> is an (32, 27) array - contains log probabilities of every character in 27 vocab for 32 output. <code>loss</code> just indexes (<code>(range(n), Yb)</code>) to pick out the corresponding numbers of the ground trues, then do mean (<code>1 / n</code>) and get negative (<code>-</code>). So the grad for each element that had been picked out is <code>-1/n</code>, while for others is <code>0</code>;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="8" data-code-annotation="2"><code>dprobs</code>: d/dx log(x) is just <code>1/x</code> - local derivative, then multiply by next leaf grad <code>dlogprobs</code>, element wise;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="9" data-code-annotation="3"><code>dcounts_sum_inv</code>: should be <code>counts * dprobs</code> according to chainrule. But remember <code>counts.shape</code> is (32, 27), and <code>counts_sum_inv.shape</code> is (32, 1), then there is <strong>broadcasting</strong> to 27 columns. <code>counts_sum_inv</code> is being used multiple times in the topo/diagram -&gt; we need to sum them (grad) up. We do it by columns so <code>Keepdim=True</code>;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="11" data-code-annotation="4"><code>dcount</code>: was used in 2 expression, so it would be the sum of (1) <code>counts_sum_inv * dprobs</code> - same with <code>dcounts_sum_inv</code> by symmetry, and (2) <code>torch.ones_like(counts) * dcounts_sum</code> - the gradient flow from <code>dcounts_sum</code> equally, and equal to <code>1</code>;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="27" data-code-annotation="5"><code>dlogits</code>: sum of 2 flows, the 2nd one for <code>max()</code> operations -&gt; gradient should be the <code>1</code> for those max elements, the remain would be <code>0</code>;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="41" data-code-annotation="6">Notice the <strong>vertical broadcasting</strong> of <code>bngain</code> and <code>bnbias</code>;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="44" data-code-annotation="7">Need to sum up vertically because <code>bnvar_inv</code> is (1, 64) while 2 multipliers are (32, 64);</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="65" data-code-annotation="8">Undo the concatenation;</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="66" data-code-annotation="9">Undo the indexing: <code>emb.shape = (32, 3, 10)</code>, <code>C.shape = (27, 10)</code>, <code>Xb.shape = (32, 3)</code>.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>CROSS ENTROPY LOSS
logprobs        | exact: True  | approximate: True  | maxdiff: 0.0
probs           | exact: True  | approximate: True  | maxdiff: 0.0
counts_sum_inv  | exact: True  | approximate: True  | maxdiff: 0.0
counts_sum      | exact: True  | approximate: True  | maxdiff: 0.0
counts          | exact: True  | approximate: True  | maxdiff: 0.0
norm_logits     | exact: True  | approximate: True  | maxdiff: 0.0
logit_maxes     | exact: True  | approximate: True  | maxdiff: 0.0
LAYER 2 WITH LINEAR AND NON-LINEARITY TANH
logits          | exact: True  | approximate: True  | maxdiff: 0.0
h               | exact: True  | approximate: True  | maxdiff: 0.0
W2              | exact: True  | approximate: True  | maxdiff: 0.0
b2              | exact: True  | approximate: True  | maxdiff: 0.0
BATCH NORM LAYER
hpreact         | exact: True  | approximate: True  | maxdiff: 0.0
bngain          | exact: True  | approximate: True  | maxdiff: 0.0
bnbias          | exact: True  | approximate: True  | maxdiff: 0.0
bnraw           | exact: True  | approximate: True  | maxdiff: 0.0
bnvar_inv       | exact: True  | approximate: True  | maxdiff: 0.0
bnvar           | exact: True  | approximate: True  | maxdiff: 0.0
bndiff2         | exact: True  | approximate: True  | maxdiff: 0.0
bndiff          | exact: True  | approximate: True  | maxdiff: 0.0
bnmeani         | exact: True  | approximate: True  | maxdiff: 0.0
LINEAR LAYER 1
hprebn          | exact: True  | approximate: True  | maxdiff: 0.0
embcat          | exact: True  | approximate: True  | maxdiff: 0.0
W1              | exact: True  | approximate: True  | maxdiff: 0.0
b1              | exact: True  | approximate: True  | maxdiff: 0.0
emb             | exact: True  | approximate: True  | maxdiff: 0.0
C               | exact: True  | approximate: True  | maxdiff: 0.0</code></pre>
</div>
</div>
</section>
<section id="brief-digression-bessels-correction-in-batchnorm" class="level1">
<h1>brief digression: bessel’s correction in batchnorm</h1>
<p>The paper of Batch Norm inconsistantly mentioned that:</p>
<ul>
<li>they used biased variance for training;</li>
<li>and used un-biased variance for inference.</li>
</ul>
<p>We train on small mini-batch, so should be using un-biased variance. PyTorch, since implemented what exactly paper wrote, has this discrepancy.</p>
</section>
<section id="exercise-2-cross-entropy-loss-backward-pass" class="level1">
<h1>exercise 2: cross entropy loss backward pass</h1>
<p>We are realizing that we doing too much work since we need to break the <code>loss</code> calculation from <code>logits</code> into too many steps that (1) they are easy enough for us to do backpropagation, but (2) most of them can cancel each other out. So in exercise two, we need to convert those bunch of atomic pieces of calculation to a shorter formula of cross entropy that can facilitate the backpropating.</p>
<div id="47e7435f" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exercise 2: backprop through cross_entropy but all in one go</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to complete this challenge look at the mathematical expression of the loss,</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take the derivative, simplify the expression, and just write it out</span></span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># before:</span></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># logit_maxes = logits.max(1, keepdim=True).values</span></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># norm_logits = logits - logit_maxes # subtract max for numerical stability</span></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts = norm_logits.exp()</span></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts_sum = counts.sum(1, keepdims=True)</span></span>
<span id="cb16-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts_sum_inv = counts_sum**-1 # if I use (1.0 / counts_sum) instead then I can't get backprop to be bit exact...</span></span>
<span id="cb16-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probs = counts * counts_sum_inv</span></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># logprobs = probs.log()</span></span>
<span id="cb16-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss = -logprobs[range(n), Yb].mean()</span></span>
<span id="cb16-16"></span>
<span id="cb16-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now:</span></span>
<span id="cb16-18">loss_fast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Yb)</span>
<span id="cb16-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss_fast.item(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'diff:'</span>, (loss_fast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> loss).item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>3.33457088470459 diff: 4.76837158203125e-07</code></pre>
</div>
</div>
<p>Mathematically given the Cross-Entropy loss formula:</p>
<p><img src="https://latex.codecogs.com/png.latex?L%20=%20-%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Csum_%7Bj=1%7D%5E%7Bk%7D%20Y_%7Bij%7D%20%5Clog(%5Chat%7BY%7D_%7Bij%7D)"></p>
<p>with <img src="https://latex.codecogs.com/png.latex?%5Chat%7BY%7D%7Bij%7D"> is calculated by the softmax transformation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Chat%7BY%7D%7Bij%7D%20=%20%5Cfrac%7B%5Cexp(%5Ctext%7Blogits%7D%7Bij%7D)%7D%7B%5Csum_%7Bc=1%7D%5E%7Bk%7D%20%5Cexp(%5Ctext%7Blogits%7D_%7Bic%7D)%7D"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?n">: batch size, in this case is 32 - <code>n</code>;</li>
<li><img src="https://latex.codecogs.com/png.latex?k">: vocab size or number of classes, in this case is 27 - <code>vocab_size</code>;</li>
<li><img src="https://latex.codecogs.com/png.latex?Y%20%5Cin%20%7B0,1%7D%5E%7Bn%20%5Ctimes%20k%7D">: one-hot encoding maxtrix (ground truth) - <code>Y</code>;</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctext%7Blogits%7D%20%5Cin%20%5Cmathbb%7BR%7D%5E%7Bn%20%5Ctimes%20k%7D">: raw logits, input of softmax layer - <code>logits</code>;</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Chat%7BY%7D%20%5Cin%20%5B0,1%5D%5E%7Bn%20%5Ctimes%20k%7D">: probabilities after softmax layer - <code>probs</code>.</li>
</ul>
<p>I actually can not do this exercise so AK’s solution here:</p>
<div id="6c755cc3" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb18-2"></span>
<span id="cb18-3">dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-4">dlogits[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n), Yb] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb18-5">dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logits'</span>, dlogits, logits) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I can only get approximate to be true, my maxdiff is 6e-9</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>logits          | exact: False | approximate: True  | maxdiff: 6.05359673500061e-09</code></pre>
</div>
</div>
<p>I will comeback with another post on thisss: the backward for cross entropy loss.</p>
<section id="what-is-dlogits-intuitively" class="level3">
<h3 class="anchored" data-anchor-id="what-is-dlogits-intuitively">what is <code>dlogits</code> intuitively?</h3>
<p>Now let’s look how <code>dlogits</code> look like.</p>
<p>This is the first row of <code>logits</code> through softmax layer, it’s probabilities of every possible character in vocab size 27, they are all small and sum of them is 1.</p>
<div id="67e98363" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">F.softmax(logits, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>tensor([0.0719, 0.0864, 0.0205, 0.0490, 0.0184, 0.0803, 0.0237, 0.0359, 0.0185,
        0.0280, 0.0357, 0.0370, 0.0396, 0.0285, 0.0359, 0.0141, 0.0091, 0.0196,
        0.0163, 0.0567, 0.0552, 0.0223, 0.0230, 0.0678, 0.0564, 0.0262, 0.0240],
       grad_fn=&lt;SelectBackward0&gt;)</code></pre>
</div>
</div>
<p>And this is the first row of <code>dlogits</code> multiplied by <code>n</code> for comparision, it’s all identical excep the 8th probability (<code>Xb[0] = 8</code>). <strong>And sum of them is 0!</strong></p>
<div id="584e0126" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1">dlogits[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>tensor([ 0.0719,  0.0864,  0.0205,  0.0490,  0.0184,  0.0803,  0.0237,  0.0359,
        -0.9815,  0.0280,  0.0357,  0.0370,  0.0396,  0.0285,  0.0359,  0.0141,
         0.0091,  0.0196,  0.0163,  0.0567,  0.0552,  0.0223,  0.0230,  0.0678,
         0.0564,  0.0262,  0.0240], grad_fn=&lt;MulBackward0&gt;)</code></pre>
</div>
</div>
<p>So for each data point in the batch of 32, we pushnish super hard the correct character, making the magnitude of it’s grad is so high (negative number), then the prob of that predict-character can change toward to correct one. This push and pull is somehow the way that network learn.</p>
<div id="03abe0ec" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb24-2">plt.imshow(dlogits.detach(), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/index_files/figure-html/cell-16-output-1.png" width="544" height="633" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>When the network perfectly predict, softmax will have a full row vector except the 8th prob, which is 1. Then the <code>dlogits</code> will be full of 0, the network stop learning.</p>
</section>
</section>
<section id="exercise-3-batch-norm-layer-backward-pass" class="level1">
<h1>exercise 3: batch norm layer backward pass</h1>
<div id="68004f2d" class="cell" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exercise 3: backprop through batchnorm but all in one go</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to complete this challenge look at the mathematical expression of the output of batchnorm,</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take the derivative w.r.t. its input, simplify the expression, and just write it out</span></span>
<span id="cb25-4"></span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb25-6"></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># before:</span></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bnmeani = 1/n*hprebn.sum(0, keepdim=True)</span></span>
<span id="cb25-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bndiff = hprebn - bnmeani</span></span>
<span id="cb25-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bndiff2 = bndiff**2</span></span>
<span id="cb25-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bnvar = 1/(n-1)*(bndiff2).sum(0, keepdim=True) # note: Bessel's correction (dividing by n-1, not n)</span></span>
<span id="cb25-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bnvar_inv = (bnvar + 1e-5)**-0.5</span></span>
<span id="cb25-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bnraw = bndiff * bnvar_inv</span></span>
<span id="cb25-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hpreact = bngain * bnraw + bnbias</span></span>
<span id="cb25-15"></span>
<span id="cb25-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now:</span></span>
<span id="cb25-17">hpreact_fast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (hprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> hprebn.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.sqrt(hprebn.var(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, unbiased<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias</span>
<span id="cb25-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max diff:'</span>, (hpreact_fast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> hpreact).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>max diff: tensor(4.7684e-07, grad_fn=&lt;MaxBackward1&gt;)</code></pre>
</div>
</div>
<p>Below is the image of Batch Norm algorithm:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/bn_algo.png" class="img-fluid figure-img"></p>
<figcaption>Batch Normalization algo, <a href="https://arxiv.org/abs/1502.03167">source</a></figcaption>
</figure>
</div>
<p>And this is flowchart</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR

Input(...) --&gt; X(x)
X(x) -- "(4) dL/dx" --&gt; Mu(mu)
X(x) -- "(4) dL/dx" --&gt; Si("sigma (square)")
X(x) -- "(4) dL/dx" --&gt; Xh(x_hat)
Si("sigma (square)") -- "(2) dL/dsigma" --&gt; Xh(x_hat)
Mu(mu) -- "(3.1) dL/dmu" --&gt; Xh(x_hat)
Mu(mu) -- "(3.2) dL/dmu" --&gt; Si("sigma (square)")
Xh(x_hat) -- "(1) dL/dx_hat" --&gt; Y(y)

G(gamma) --&gt; Y(y)
B(beta) --&gt; Y(y)
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>We will need to calculate <code>dL/dx</code> given <code>dL/dy</code>, we will calculate by hand reversely:</p>
<ol type="1">
<li>scale and shift: <code>dL/dx_hat = gamma * dL/dy</code> easy enough;</li>
<li>normalize: <code>dL/dsigma = -1/2 * gamma * SUM[dL/dy * (x - mu) * (sigma^2 + eps)^(-3/2)]</code>;</li>
<li>normalize &amp; mini-batch variance: <code>dL/dmu = - SUM[dL/dy * gamma * (sigma^2 + eps)^(-1/2)]</code>, this is path (3.1), we can prove that path (3.2) equal to zero - since <code>mu</code> is average of <code>x</code>, we can think of change in <code>mu</code> will be eliminated by <code>x</code> itself w.r.t. <code>L</code>;</li>
<li>given all the gradients above, we just write the expressions down and do some transformation, this is the final: <code>dL/dx = gamma * (sigma^2 + eps)^(-1/2) / m { [m * dL/dy] - SUMj[dL/dy] - m/(m-1) * x_hat * SUMj[dL/dy * x_hat]}</code>, where <code>m</code> is mini-batch size (in our data is <code>n</code>)</li>
</ol>
<div id="0a3509b6" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb27-2"></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># before we had:</span></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbnraw = bngain * dhpreact</span></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbndiff = bnvar_inv * dbnraw</span></span>
<span id="cb27-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbnvar_inv = (bndiff * dbnraw).sum(0, keepdim=True)</span></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbnvar = (-0.5*(bnvar + 1e-5)**-1.5) * dbnvar_inv</span></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbndiff2 = (1.0/(n-1))*torch.ones_like(bndiff2) * dbnvar</span></span>
<span id="cb27-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbndiff += (2*bndiff) * dbndiff2</span></span>
<span id="cb27-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dhprebn = dbndiff.clone()</span></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbnmeani = (-dbndiff).sum(0)</span></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dhprebn += 1.0/n * (torch.ones_like(hprebn) * dbnmeani)</span></span>
<span id="cb27-13"></span>
<span id="cb27-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate dhprebn given dhpreact (i.e. backprop through the batchnorm)</span></span>
<span id="cb27-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (you'll also need to use some of the variables from the forward pass up above)</span></span>
<span id="cb27-16"></span>
<span id="cb27-17">dhprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnvar_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ( n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dhpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dhpreact.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (dhpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnraw).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb27-18"></span>
<span id="cb27-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hprebn'</span>, dhprebn, hprebn) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I can only get approximate to be true, my maxdiff is 9e-10</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>hprebn          | exact: False | approximate: True  | maxdiff: 9.313225746154785e-10</code></pre>
</div>
</div>
</section>
<section id="exercise-4-putting-it-all-together" class="level1">
<h1>exercise 4: putting it all together</h1>
<div id="5205783c" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exercise 4: putting it all together!</span></span>
<span id="cb29-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train the MLP neural net with your own backward pass</span></span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># init</span></span>
<span id="cb29-5">n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the dimensionality of the character embedding vectors</span></span>
<span id="cb29-6">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of neurons in the hidden layer of the MLP</span></span>
<span id="cb29-7"></span>
<span id="cb29-8">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproducibility</span></span>
<span id="cb29-9">C  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_embd),            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb29-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1</span></span>
<span id="cb29-11">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>((n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb29-12">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_hidden,                        generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2</span></span>
<span id="cb29-14">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_hidden, vocab_size),          generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb29-15">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(vocab_size,                      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb29-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BatchNorm parameters</span></span>
<span id="cb29-17">bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb29-18">bnbias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb29-19"></span>
<span id="cb29-20">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2, bngain, bnbias]</span>
<span id="cb29-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of parameters in total</span></span>
<span id="cb29-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb29-23">  p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb29-24"></span>
<span id="cb29-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same optimization as last time</span></span>
<span id="cb29-26">max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200000</span></span>
<span id="cb29-27">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb29-28">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convenience</span></span>
<span id="cb29-29">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb29-30"></span>
<span id="cb29-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use this context manager for efficiency once your backward pass is written (</span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb29-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb29-33"></span>
<span id="cb29-34">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kick off optimization</span></span>
<span id="cb29-35">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_steps):</span>
<span id="cb29-36"></span>
<span id="cb29-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct</span></span>
<span id="cb29-38">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb29-39">    Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X,Y</span></span>
<span id="cb29-40"></span>
<span id="cb29-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb29-42">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors</span></span>
<span id="cb29-43">    embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb29-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linear layer</span></span>
<span id="cb29-45">    hprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer pre-activation</span></span>
<span id="cb29-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BatchNorm layer</span></span>
<span id="cb29-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -------------------------------------------------------------</span></span>
<span id="cb29-48">    bnmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprebn.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-49">    bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hprebn.var(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, unbiased<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-50">    bnvar_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb29-51">    bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (hprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bnmean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnvar_inv</span>
<span id="cb29-52">    hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias</span>
<span id="cb29-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -------------------------------------------------------------</span></span>
<span id="cb29-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non-linearity</span></span>
<span id="cb29-55">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(hpreact) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer</span></span>
<span id="cb29-56">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output layer</span></span>
<span id="cb29-57">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Yb) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb29-58"></span>
<span id="cb29-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb29-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb29-61">      p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb29-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss.backward() # use this for correctness comparisons, delete it later!</span></span>
<span id="cb29-63"></span>
<span id="cb29-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># manual backprop! #swole_doge_meme</span></span>
<span id="cb29-65">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------</span></span>
<span id="cb29-66">    dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-67">    dlogits[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n), Yb] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb29-68">    dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> n</span>
<span id="cb29-69">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2nd layer backprop</span></span>
<span id="cb29-70">    dh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dlogits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2.T</span>
<span id="cb29-71">    dW2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dlogits</span>
<span id="cb29-72">    db2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dlogits.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb29-73">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tanh</span></span>
<span id="cb29-74">    dhpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dh</span>
<span id="cb29-75">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batchnorm backprop</span></span>
<span id="cb29-76">    dbngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (bnraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dhpreact).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-77">    dbnbias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dhpreact.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-78">    dhprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>bnvar_inv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dhpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dhpreact.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>bnraw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(dhpreact<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>bnraw).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb29-79">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1st layer</span></span>
<span id="cb29-80">    dembcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dhprebn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1.T</span>
<span id="cb29-81">    dW1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dhprebn</span>
<span id="cb29-82">    db1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dhprebn.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb29-83">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embedding</span></span>
<span id="cb29-84">    demb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dembcat.view(emb.shape)</span>
<span id="cb29-85">    dC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(C)</span>
<span id="cb29-86">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(Xb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb29-87">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(Xb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb29-88">        ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xb[k,j]</span>
<span id="cb29-89">        dC[ix] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> demb[k,j]</span>
<span id="cb29-90">    grads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [dC, dW1, db1, dW2, db2, dbngain, dbnbias]</span>
<span id="cb29-91">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------</span></span>
<span id="cb29-92"></span>
<span id="cb29-93">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb29-94">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step learning rate decay</span></span>
<span id="cb29-95">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p, grad <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(parameters, grads):</span>
<span id="cb29-96">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#p.data += -lr * p.grad # old way of cheems doge (using PyTorch grad from .backward())</span></span>
<span id="cb29-97">      p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grad <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new way of swole doge </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: enable</span></span>
<span id="cb29-98"></span>
<span id="cb29-99">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb29-100">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print every once in a while</span></span>
<span id="cb29-101">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb29-102">    lossi.append(loss.log10().item())</span>
<span id="cb29-103"></span>
<span id="cb29-104">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if i &gt;= 100: # </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: delete early breaking when you're ready to train the full net</span></span>
<span id="cb29-105">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   break</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>12297
      0/ 200000: 3.7959
  10000/ 200000: 2.1641
  20000/ 200000: 2.3908
  30000/ 200000: 2.4310
  40000/ 200000: 1.9961
  50000/ 200000: 2.3553
  60000/ 200000: 2.3787
  70000/ 200000: 2.0649
  80000/ 200000: 2.3581
  90000/ 200000: 2.1765
 100000/ 200000: 1.9523
 110000/ 200000: 2.3412
 120000/ 200000: 2.0101
 130000/ 200000: 2.4326
 140000/ 200000: 2.3346
 150000/ 200000: 2.1766
 160000/ 200000: 1.8989
 170000/ 200000: 1.8285
 180000/ 200000: 2.0047
 190000/ 200000: 1.9046</code></pre>
</div>
</div>
<p>We can check gradients using this:</p>
<div id="5379a4f5" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># useful for checking your gradients</span></span>
<span id="cb31-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p,g <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(parameters, grads):</span>
<span id="cb31-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># g.requires_grad = True</span></span>
<span id="cb31-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># g.retain_grad()</span></span>
<span id="cb31-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cmp</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p.shape)), g, p)</span></code></pre></div>
</details>
</div>
<p>Calibrate the batch norm at the end of training:</p>
<div id="285668b3" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb32-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pass the training set through</span></span>
<span id="cb32-3">  emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xtr]</span>
<span id="cb32-4">  embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb32-5">  hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb32-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># measure the mean/std over the entire training set</span></span>
<span id="cb32-7">  bnmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hpreact.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb32-8">  bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hpreact.var(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, unbiased<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<p>Evaluate train and val loss:</p>
<div id="75b3a332" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this decorator disables gradient tracking</span></span>
<span id="cb33-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> split_loss(split):</span>
<span id="cb33-3">  x,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb33-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>: (Xtr, Ytr),</span>
<span id="cb33-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: (Xdev, Ydev),</span>
<span id="cb33-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: (Xte, Yte),</span>
<span id="cb33-7">  }[split]</span>
<span id="cb33-8">  emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[x] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, block_size, n_embd)</span></span>
<span id="cb33-9">  embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concat into (N, block_size * n_embd)</span></span>
<span id="cb33-10">  hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb33-11">  hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bnmean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias</span>
<span id="cb33-12">  h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(hpreact) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, n_hidden)</span></span>
<span id="cb33-13">  logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, vocab_size)</span></span>
<span id="cb33-14">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, y)</span>
<span id="cb33-15">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(split, loss.item())</span>
<span id="cb33-16"></span>
<span id="cb33-17">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span>
<span id="cb33-18">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>train 2.0687625408172607
val 2.1033427715301514</code></pre>
</div>
</div>
<p>Similar to what we achieved before!</p>
<p>Sample from model:</p>
<div id="9f68abd6" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample from the model</span></span>
<span id="cb35-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb35-5">    </span>
<span id="cb35-6">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb35-7">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize with all ...</span></span>
<span id="cb35-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb35-9">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ------------</span></span>
<span id="cb35-10">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb35-11">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Embedding</span></span>
<span id="cb35-12">      emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[torch.tensor([context])] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1,block_size,d)      </span></span>
<span id="cb35-13">      embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concat into (N, block_size * n_embd)</span></span>
<span id="cb35-14">      hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb35-15">      hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bnmean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (bnvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias</span>
<span id="cb35-16">      h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(hpreact) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, n_hidden)</span></span>
<span id="cb35-17">      logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, vocab_size)</span></span>
<span id="cb35-18">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ------------</span></span>
<span id="cb35-19">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample</span></span>
<span id="cb35-20">      probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb35-21">      ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(probs, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb35-22">      context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb35-23">      out.append(ix)</span>
<span id="cb35-24">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb35-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb35-26">    </span>
<span id="cb35-27">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(itos[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> out))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>mona.
mayah.
see.
mad.
ryla.
reisha.
endraegan.
chedielin.
shi.
jen.
eden.
sana.
arleigh.
malara.
noshubvrishiriel.
kindreelynn.
novana.
ubrence.
ryyah.
faeha.</code></pre>
</div>
</div>
</section>
<section id="outro" class="level1">
<h1>outro</h1>
<p>We have gone through and learnt how can we manually do the gradients in our networks, it’s just some line of code for eact step and pretty simple (but not for Batch Norm formula). And I’ll also back with another post to calculate how the grad of cross entropy is coming.</p>
<p>In next lesson we will build RNN, LSTM, GRU, etc. Interesting and happly leanring!</p>
</section>
<section id="resources" class="level1">
<h1>resources</h1>
<ol type="1">
<li>Notebook: <a href="https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part4_backprop.ipynb" class="uri">https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part4_backprop.ipynb</a>;</li>
<li>Colab notebook: <a href="https://colab.research.google.com/drive/1WV2oi2fh9XXyldh02wupFQX0wh5ZC-z-?usp=sharing" class="uri">https://colab.research.google.com/drive/1WV2oi2fh9XXyldh02wupFQX0wh5ZC-z-?usp=sharing</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>til</category>
  <category>python</category>
  <category>andrej karpathy</category>
  <category>nn-z2h</category>
  <category>neural networks</category>
  <category>backpropagation</category>
  <guid>https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/</guid>
  <pubDate>Sun, 01 Dec 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-12-02-nn-z2h-p5/backprop_ninja.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>NN-Z2H Lesson 4: Building makemore part 3 - Activations &amp; Gradients, BatchNorm</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important callout-titled" title="This is not orginal content!">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This is not orginal content!
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is my study notes / codes along with Andrej Karpathy’s “<a href="https://www.youtube.com/watch?v=VMj-3S1tku0&amp;list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ">Neural Networks: Zero to Hero</a>” series.</p>
</div>
</div>
<p>We want to stay a bit longer with the MLPs, to have more concrete intuitive of the <strong>activations</strong> in the neural nets and <strong>gradients</strong> that flowing backwards. It’s good to learn about the development history of these architectures. Since Recurrent Neural Network (RNN), they are although very <em>expressive</em> but not easily <em>optimizable</em> with current gradient techniques we have so far. Let’s get started!</p>
<section id="part-1-intro" class="level1">
<h1>Part 1: intro</h1>
<section id="starter-code" class="level2">
<h2 class="anchored" data-anchor-id="starter-code">starter code</h2>
<div id="f6295a0d" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</details>
</div>
<div id="6a7b0c93" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"></span>
<span id="cb2-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/karpathy/makemore/refs/heads/master/names.txt"</span></span>
<span id="cb2-4">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>).iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tolist()</span>
<span id="cb2-5">words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>['emma', 'olivia', 'ava', 'isabella', 'sophia', 'charlotte', 'mia', 'amelia']</code></pre>
</div>
</div>
<div id="dd12464f" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>32033</code></pre>
</div>
</div>
<div id="af3a3136" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the vocabulary of characters and mapping to/from integer</span></span>
<span id="cb6-2">chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(words))))</span>
<span id="cb6-3">stoi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {s:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chars)}</span>
<span id="cb6-4">stoi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-5">itos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i: s <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s, i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> stoi.items()}</span>
<span id="cb6-6">vocab_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(itos)</span>
<span id="cb6-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(itos)</span>
<span id="cb6-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(vocab_size)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 0: '.'}
27</code></pre>
</div>
</div>
<div id="82d11d90" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the dataset</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> buid_dataset(words):</span>
<span id="cb8-4">    X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb8-5"></span>
<span id="cb8-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words:</span>
<span id="cb8-7">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size</span>
<span id="cb8-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb8-9">            ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb8-10">            X.append(context)</span>
<span id="cb8-11">            Y.append(ix)</span>
<span id="cb8-12">            context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb8-13"></span>
<span id="cb8-14">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb8-15">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span>
<span id="cb8-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.shape, Y.shape)</span>
<span id="cb8-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> X, Y</span>
<span id="cb8-18"></span>
<span id="cb8-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb8-20">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb8-21">random.shuffle(words)</span>
<span id="cb8-22">n1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb8-23">n2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb8-24"></span>
<span id="cb8-25">Xtr, Ytr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[:n1])        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 80#</span></span>
<span id="cb8-26">Xdev, Ydev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n1:n2])    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 10%</span></span>
<span id="cb8-27">Xte, Yte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n2:])        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 10%</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([182625, 3]) torch.Size([182625])
torch.Size([22655, 3]) torch.Size([22655])
torch.Size([22866, 3]) torch.Size([22866])</code></pre>
</div>
</div>
<div id="3f1d712c" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MLP revisited</span></span>
<span id="cb10-2">n_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no of dimensions of the embedding space.</span></span>
<span id="cb10-3">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size of the hidden - tanh layer</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table - 10 dimensional space</span></span>
<span id="cb10-6">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproductivity</span></span>
<span id="cb10-7">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_emb),                  generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh - 300 neurons</span></span>
<span id="cb10-10">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb, n_hidden),      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb10-11">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_hidden,                            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb10-14">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_hidden, vocab_size),              generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb10-15">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(vocab_size,                          generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params</span></span>
<span id="cb10-18">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span>
<span id="cb10-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of params: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters))</span>
<span id="cb10-20"></span>
<span id="cb10-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb10-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb10-23">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>No of params:  11897</code></pre>
</div>
</div>
<div id="5886285f" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimization</span></span>
<span id="cb12-2">max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50_000</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#200_000</span></span>
<span id="cb12-3">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stats holders</span></span>
<span id="cb12-6">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training on Xtr, Ytr</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_steps):</span>
<span id="cb12-10"></span>
<span id="cb12-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct      </span></span>
<span id="cb12-12">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,)) </span>
<span id="cb12-13">    Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X, Y</span></span>
<span id="cb12-14"></span>
<span id="cb12-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb12-16">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors   </span></span>
<span id="cb12-17">    emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb12-18">    h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer pre-activation</span></span>
<span id="cb12-19">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(h_pre_act) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer</span></span>
<span id="cb12-20">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output layer</span></span>
<span id="cb12-21">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Yb) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb12-22"></span>
<span id="cb12-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb12-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb12-25">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb12-26">    loss.backward()</span>
<span id="cb12-27"></span>
<span id="cb12-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb12-29">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step learning rate decay</span></span>
<span id="cb12-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb12-31">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb12-32"></span>
<span id="cb12-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb12-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print once every while</span></span>
<span id="cb12-35">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-36">    lossi.append(loss.log10().item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>      0/  50000: 26.9583
  10000/  50000: 2.4332
  20000/  50000: 2.7190
  30000/  50000: 2.2316
  40000/  50000: 1.8913</code></pre>
</div>
</div>
<div id="183a0148" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">plt.plot(lossi)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-9-output-1.png" width="571" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="0ffd4501" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># disables gradient tracking</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> split_loss(split: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb15-3">  x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb15-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>: (Xtr, Ytr),</span>
<span id="cb15-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: (Xdev, Ydev),</span>
<span id="cb15-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: (Xte, Yte)</span>
<span id="cb15-7">  }[split]</span>
<span id="cb15-8">  emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[x] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, block_size, n_emb)</span></span>
<span id="cb15-9">  emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate into (N, block_size * n_emb)</span></span>
<span id="cb15-10">  h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, n_hidden)</span></span>
<span id="cb15-11">  logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, vocab_size)</span></span>
<span id="cb15-12">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, y) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb15-13">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(split, loss.item())</span>
<span id="cb15-14"></span>
<span id="cb15-15">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span>
<span id="cb15-16">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>train 2.2419557571411133
val 2.256183624267578</code></pre>
</div>
</div>
<div id="a479b3c1" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample from the model</span></span>
<span id="cb17-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb17-5">    </span>
<span id="cb17-6">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-7">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize with all ...</span></span>
<span id="cb17-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb17-9">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass the neural net</span></span>
<span id="cb17-10">      emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[torch.tensor([context])] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1,block_size,n_embd)</span></span>
<span id="cb17-11">      h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1)</span>
<span id="cb17-12">      logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb17-13">      probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-14">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample from the distribution</span></span>
<span id="cb17-15">      ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(probs, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb17-16">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shift the context window and track the samples</span></span>
<span id="cb17-17">      context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb17-18">      out.append(ix)</span>
<span id="cb17-19">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if we sample the special '.' token, break</span></span>
<span id="cb17-20">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb17-22">    </span>
<span id="cb17-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(itos[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> out)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># decode and print the generated word</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>mora.
mayah.
seel.
nihahal.
rethan.
endraeg.
aderedieliighlison.
reie.
soan.
narah.
teimh.
kamin.
shubergini.
jestin.
josellionnteromiub.
mavde.
kylene.
ehs.
kaysh.
samyan.</code></pre>
</div>
</div>
<p>Okay so now our network has multiple things wrong at the initialization, let’s list down below. The final code will be presented in the end of part 1, with <code># 👈</code> for lines that had been added / modified. The right code cell below re-initializes states at the beginning of network’s parameter (in my notebook, it’s rendered <strong>linearly</strong>!).</p>
<div id="10eed37d" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">n_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no of dimensions of the embedding space.</span></span>
<span id="cb19-2">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size of the hidden - tanh layer</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table - 10 dimensional space</span></span>
<span id="cb19-4">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproductivity</span></span>
<span id="cb19-5">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_emb),                  generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh - 300 neurons</span></span>
<span id="cb19-7">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb, n_hidden),      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb19-8">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_hidden,                            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb19-10">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_hidden, vocab_size),              generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb19-11">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(vocab_size,                          generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb19-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params</span></span>
<span id="cb19-13">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb19-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb19-16">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb19-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimization</span></span>
<span id="cb19-18">max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50_000</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#200_000</span></span>
<span id="cb19-19">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb19-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training on Xtr, Ytr</span></span>
<span id="cb19-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_steps):</span>
<span id="cb19-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct      </span></span>
<span id="cb19-23">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,)) </span>
<span id="cb19-24">    Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X, Y</span></span>
<span id="cb19-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb19-26">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors   </span></span>
<span id="cb19-27">    emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb19-28">    h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer pre-activation</span></span>
<span id="cb19-29">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(h_pre_act) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer</span></span>
<span id="cb19-30">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output layer</span></span>
<span id="cb19-31">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Yb) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb19-32"></span>
<span id="cb19-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span></code></pre></div>
</details>
</div>
</section>
<section id="fixing-the-initial-loss" class="level2">
<h2 class="anchored" data-anchor-id="fixing-the-initial-loss">fixing the initial loss</h2>
<p>We can see at the <code>step = 0</code>, the loss was <code>27</code> and after some <code>k</code>s training loops it decreased to <code>1</code> or <code>2</code>. It extremely high at the begining. In practice, we should give the network somehow the expectation we want when generating a character after some characters (<code>3</code>).</p>
<div id="e90a0817" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">loss.item()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>27.481523513793945</code></pre>
</div>
</div>
<p>In this case, without training yet, we expect all <code>27</code> characters’ possibilities to be equal (<code>1 / 27.0</code>) ~ <strong>uniform distribution</strong>, so the loss ~ negative log likelihood would be:</p>
<div id="e9d27a53" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> torch.tensor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">27.0</span>).log()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>tensor(3.2958)</code></pre>
</div>
</div>
<p>It’s far lower than <code>27</code>, we say that the network is <strong>confidently wrong</strong>. Andrej demonstrated by another simple 5 elements tensor and showed that the loss is lowest when all elements are equal.</p>
<p>We want the <code>logits</code> to be low entropy as possible (but not equal to <code>0</code>, which will be showed later), we added multipliers <code>0.01</code> to <code>W2</code>, and <code>0</code> to <code>b2</code>. We got the loss to be <code>3.xx</code> at the beginning.</p>
<div id="4ae244bb" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb24-2">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_hidden, vocab_size),              generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb24-3">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(vocab_size,                          generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
</details>
</div>
<p>Now re-train the model and we will notice the the <code>lossi</code> will not look like the <em>hookey stick</em> anymore! Morever the final loss on train set and dev set is better!</p>
</section>
<section id="fixing-the-saturated-tanh" class="level2">
<h2 class="anchored" data-anchor-id="fixing-the-saturated-tanh">fixing the saturated <code>tanh</code></h2>
<p>The <code>logits</code> are now okay, the next problem is about the <code>h</code> - the activations of the hidden states! It’s hard to see but in the output of code cell below, there are too many values of <code>1</code> and <code>-1</code> in this tensor.</p>
<div id="38f2ea74" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1">h</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>tensor([[ 0.0297, -0.9999, -1.0000,  ...,  1.0000,  0.3599,  0.9999],
        [-0.9568, -0.0985, -0.9696,  ..., -1.0000,  0.9999,  1.0000],
        [-0.9997,  0.5154, -0.8221,  ..., -1.0000,  1.0000,  1.0000],
        ...,
        [-0.6531, -0.9985, -1.0000,  ..., -0.9600,  0.9853, -1.0000],
        [-1.0000,  0.9604, -0.1418,  ..., -0.1266,  1.0000,  1.0000],
        [-1.0000,  0.9604, -0.1418,  ..., -0.1266,  1.0000,  1.0000]],
       grad_fn=&lt;TanhBackward0&gt;)</code></pre>
</div>
</div>
<p>Recall that <code>tanh</code> is activation function that squashing arbitrary numbers to the range <code>[-1:1]</code>. Let’s visualize the distribution of <code>h</code>.</p>
<div id="17b7902d" class="cell" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">plt.hist(h.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).tolist(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the ";" removes the presenting of data in code-block's output</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-17-output-1.png" width="583" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Most of them were distributed to the extreme values <code>-1</code> and <code>1</code>. Now come to the <code>h_pre_act</code>, we can see a <strong>flat-tails distribution</strong> from <code>-15</code> to <code>15</code>.</p>
<div id="9411440a" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">plt.hist(h_pre_act.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).tolist(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-18-output-1.png" width="575" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Looking back to how we implemented <code>tanh</code> in <code>micrograd</code> (which is mathematically the same with <code>PyTorch</code>), we’re multiplying the forward node’s gradient with <code>(1 - t**2)</code>, which <code>t</code> is local <code>tanh</code>. When <code>tanh</code> is near <code>-1</code> or <code>1</code>, this is close to <code>0</code>, we are <strong>killing the gradients</strong>. We are stopping the backpropagation through this <code>tanh</code> unit.</p>
<div id="425d7cf2" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1">...</span>
<span id="cb29-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tanh(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb29-3">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data</span>
<span id="cb29-4">        t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-5">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(t, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tanh'</span>)</span>
<span id="cb29-6"></span>
<span id="cb29-7">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="cb29-8">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="cb29-9">        out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="cb29-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb29-11">...</span></code></pre></div>
</details>
</div>
<p>When the gradients become zero, the previous nodes’ gradients will be <strong>vanishing</strong>. We call this <strong>saturated <code>tanh</code></strong>, this leads to <strong>dead neurons</strong> ~ always off and because the gradient is zero then they will never be turned on, and happens for other activations as well: <code>sigmoid</code>, <code>ReLU</code>, etc (but less significant on <code>Leaky ReLU</code> or <code>ELU</code>). The network is not learning!</p>
<p>The same with <code>logits</code>, now we want <code>h</code> to be more near zero, we add multipliers to the <code>W1</code> and <code>b1</code>:</p>
<div id="7f47a5a6" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh - 300 neurons</span></span>
<span id="cb30-2">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb, n_hidden),      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb30-3">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(n_hidden,                            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># keep a little bit entropy, </span></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># It's okay to initialize the b1 to zero but AK found emperically this will enhance the optimiaztion</span></span></code></pre></div>
</details>
</div>
<p>We can see now less peak distribution of <code>h</code>:</p>
<div class="columns">
<div class="column" style="width:50%;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/tanh_0.2mult.png" class="img-fluid figure-img"></p>
<figcaption><code>tanh</code></figcaption>
</figure>
</div>
</div><div class="column" style="width:50%;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/pre_act_tanh_0.2mult.png" class="img-fluid figure-img"></p>
<figcaption>pre-activation <code>tanh</code></figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="calculating-the-init-scale-kaiming-init" class="level2">
<h2 class="anchored" data-anchor-id="calculating-the-init-scale-kaiming-init">calculating the init scale: “Kaiming init”</h2>
<p>Now let’s look to the number <code>0.02</code>, in practice no one will set it manually. Let’s look into the example below to see how parameters of Gaussian Distribution of <code>y</code> differ from <code>x</code> when multiplying by <code>W</code>.</p>
<p>The question is how we set the <code>W</code> to preserve the Gaussian Distribution of X. Emperical researches found out that the multiplier to <code>W</code> should be square root of the “fan in”, in this case is <code>10^0.5</code>.</p>
<div id="e1448e58" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb31-2">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb31-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W</span>
<span id="cb31-4"></span>
<span id="cb31-5">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb31-6">y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1</span>
<span id="cb31-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x.mean(), x.std())</span>
<span id="cb31-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y.mean(), y.std())</span>
<span id="cb31-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y1.mean(), y1.std())</span>
<span id="cb31-10">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb31-11">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">131</span>).set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input X"</span>)</span>
<span id="cb31-12">plt.hist(x.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).tolist(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-13">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">132</span>).set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initial output y, expanded by W"</span>)</span>
<span id="cb31-14">plt.hist(y.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).tolist(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-15">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span>).set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y1, preserve the X's Gaussian Dist"</span>)</span>
<span id="cb31-16">plt.hist(y1.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).tolist(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(-0.0100) tensor(0.9977)
tensor(0.0096) tensor(3.2002)
tensor(0.0015) tensor(0.9954)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-21-output-2.png" width="1538" height="431" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Please investigate more here:</p>
<ol type="1">
<li>Kaiming et al.&nbsp;paper: <a href="https://arxiv.org/abs/1502.01852" class="uri">https://arxiv.org/abs/1502.01852</a></li>
<li>Implementation in <code>Pytorch</code>: <a href="https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.kaiming_normal_" class="uri">https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.kaiming_normal_</a></li>
</ol>
<p>It’s recommended in Kaiming paper to use a <strong>gain</strong> multiplier base on nonlinearity/activation function (<a href="https://pytorch.org/docs/stable/nn.init.html#torch.nn.init.calculate_gain">here</a>), for <code>tanh</code> it’s <code>5/3</code>. We endup modified the initialization of <code>W1</code> with:</p>
<div id="91f22219" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb, n_hidden),      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># * 0.2</span></span></code></pre></div>
</details>
</div>
<p>In this case is roughly <code>0.3</code>, re-train and although the loss only improved so insignificant (because previously we set it to be <code>0.2</code> - very close), but we’ve parameterized this hyper-constant.</p>
</section>
<section id="batch-normalization" class="level2">
<h2 class="anchored" data-anchor-id="batch-normalization">batch normalization</h2>
<p>As discussed before, we dont want the <code>h_pre_act</code> to be way too small (~is not doing anything) or too large (~saturated), we want it to just roughly follow the standardized Gaussian Distribution (ie. mean equal to 0, std equal to 1).</p>
<p>We’ve done it at the initialization, <em>why don’t we just normalize the hidden states to be unit Gaussian</em>? in batch normalization, this can be achieved by 4 steps, demonstrated with our case:</p>
<div id="9d520e90" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. mini-batch mean</span></span>
<span id="cb34-2">hpa_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h_pre_act.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb34-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. mini-batch variance / standard deviation</span></span>
<span id="cb34-4">hpa_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h_pre_act.std(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb34-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. normalize</span></span>
<span id="cb34-6">h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> hpa_mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> hpa_std</span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. scale and shift</span></span>
<span id="cb34-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># multiply by a "gain" then "shift" it with a bias</span></span>
<span id="cb34-9">bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))</span>
<span id="cb34-10">bnbias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))</span>
<span id="cb34-11">h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias</span></code></pre></div>
</details>
</div>
<p>We modified our code accordingly and re-run the code, actually this time the model did not improve much. Because actually this is very <strong>simple and shallow</strong> neural network. We also notice that the training loop now is slower than before, because the calculation volumn is bigger. Batch Normalization also unexpectedly comes up with a side effect, the forward and backward pass of any input now also depend on the mini-batch, not just itself (because of <code>mean()</code>/<code>std()</code>). This effect is suprisingly a good thing and acts as a <strong>regularizer</strong>.</p>
<p>There are also non-coupling regularizers such as: Linear Normalization, Layer Normalization, Group Normalization.</p>
<p>One othering to consider is in the deployment/testing phase, we dont want to use the batch norm calculated by a mini-batch. Instead we want to use the mean and standard deviation from the whole training data set:</p>
<div id="fe9f9810" class="cell" data-execution_count="23">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calibrate the batch norm after training</span></span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb35-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pass the training set through</span></span>
<span id="cb35-5">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[x_train]</span>
<span id="cb35-6">    embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb35-7">    hpreact <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embcat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb35-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># measure the mean/std over the entire training set</span></span>
<span id="cb35-9">    bnmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hpreact.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb35-10">    bnstd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hpreact.std(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<p>Rather, we can also use the running mean and standard deviation as implemented below which will give close estimates. Remaining 2 notes on the BN are:</p>
<ol type="1">
<li>Dividing zeros: we add a <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> value to the <strong>variance</strong> to avoid. We do not include this here as it likely not to happen with out example;</li>
<li>The bias <code>b1</code> will be subtracting in BN calculation, we will notice the <code>b1.grad</code> will be zeros as it does not impact any other calculation. Thus when using the BN, for layer before like weight, we should remove the bias. The <code>bnbias</code> now will be incharge for biasing the distributions.</li>
</ol>
</section>
<section id="real-example-resnet50-walkthrough" class="level2">
<h2 class="anchored" data-anchor-id="real-example-resnet50-walkthrough">real example: <code>resnet50</code> walkthrough</h2>
<p>The code AK presented here: <a href="https://github.com/pytorch/vision/blob/main/torchvision/models/resnet.py#L108" class="uri">https://github.com/pytorch/vision/blob/main/torchvision/models/resnet.py#L108</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/resnet50.png" class="img-fluid figure-img"></p>
<figcaption>The architecture of ResNet-50 model.</figcaption>
</figure>
</div>
</section>
<section id="summary-of-the-lecture" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-the-lecture">summary of the lecture</h2>
<p>Understand the activations (non-linearity) and gradients is crucial when training deep / large neural networks, in part 1 we have observed some issue and come up with many solutions:</p>
<ol type="1">
<li>Confidently wrong of network at init leads to hookey stick for loss in training loop: adding multipliers to <code>logits</code>’s weights and biases;</li>
<li>Flat-tails distribution or saturated <code>tanh</code>: Kaiming init;</li>
<li>Normalization of the hidden states: introduction to BN.</li>
</ol>
<p>Our final code in part 1 (un-fold to see), <code># 👈</code> indicates a change:</p>
<div id="a6d1a390" class="cell" data-execution_count="24">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb36-2"></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MLP revisited</span></span>
<span id="cb36-4">n_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no of dimensions of the embedding space.</span></span>
<span id="cb36-5">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size of the hidden - tanh layer</span></span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table - 10 dimensional space</span></span>
<span id="cb36-8">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproductivity</span></span>
<span id="cb36-9">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_emb),                  generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb36-10"></span>
<span id="cb36-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh - 300 neurons</span></span>
<span id="cb36-12">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb, n_hidden),      generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_emb)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># * 0.2       # 👈</span></span>
<span id="cb36-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># b1 = torch.randn(n_hidden,                            generator=g) * 0.01       # 👈</span></span>
<span id="cb36-14"></span>
<span id="cb36-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb36-16">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((n_hidden, vocab_size),              generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-17">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(vocab_size,                          generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-18"></span>
<span id="cb36-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch Normalization gain and bias</span></span>
<span id="cb36-20">bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))                                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-21">bnbias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))                                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-22"></span>
<span id="cb36-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add running mean/std</span></span>
<span id="cb36-24">bnmean_running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-25">bnstd_running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_hidden))                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-26"></span>
<span id="cb36-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params (deleted b1)</span></span>
<span id="cb36-28">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, W2, b2, bngain, bnbias]                                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of params: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters))</span>
<span id="cb36-30"></span>
<span id="cb36-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb36-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb36-33">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb36-34"></span>
<span id="cb36-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimization</span></span>
<span id="cb36-36">max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50_000</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#200_000</span></span>
<span id="cb36-37">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb36-38"></span>
<span id="cb36-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stats holders</span></span>
<span id="cb36-40">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb36-41"></span>
<span id="cb36-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training on Xtr, Ytr</span></span>
<span id="cb36-43"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_steps):</span>
<span id="cb36-44"></span>
<span id="cb36-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct      </span></span>
<span id="cb36-46">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,)) </span>
<span id="cb36-47">    Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X, Y</span></span>
<span id="cb36-48"></span>
<span id="cb36-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb36-50">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors   </span></span>
<span id="cb36-51">    emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb36-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linear layer</span></span>
<span id="cb36-53">    h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># + b1 # hidden layer pre-activation                               # 👈</span></span>
<span id="cb36-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BatchNorm layer</span></span>
<span id="cb36-55">    bnmeani <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h_pre_act.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)                                                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-56">    bnstdi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h_pre_act.std(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)                                                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-57">    h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bnmeani) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> bnstdi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-58">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Updating running mean and std (this runs outside the training loop)</span></span>
<span id="cb36-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():                                                                       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-60">        bnmean_running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.999</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnmean_running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnmeani                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-61">        bnstd_running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.999</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnstd_running <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bnstdi                                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb36-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non-linearity</span></span>
<span id="cb36-63">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(h_pre_act) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden layer</span></span>
<span id="cb36-64">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output layer</span></span>
<span id="cb36-65">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Yb) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb36-66"></span>
<span id="cb36-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb36-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb36-69">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb36-70">    loss.backward()</span>
<span id="cb36-71"></span>
<span id="cb36-72">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb36-73">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step learning rate decay</span></span>
<span id="cb36-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb36-75">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb36-76"></span>
<span id="cb36-77">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb36-78">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print once every while</span></span>
<span id="cb36-79">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb36-80">    lossi.append(loss.log10().item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>No of params:  12097
      0/  50000: 3.2607
  10000/  50000: 1.9642
  20000/  50000: 2.3042
  30000/  50000: 1.9983
  40000/  50000: 2.2092</code></pre>
</div>
</div>
<div id="dbde2ecc" class="cell" data-execution_count="25">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1">plt.plot(lossi)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-26-output-1.png" width="579" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="0bda96af" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># disables gradient tracking</span></span>
<span id="cb39-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> split_loss(split: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb39-3">  x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb39-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>: (Xtr, Ytr),</span>
<span id="cb39-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: (Xdev, Ydev),</span>
<span id="cb39-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: (Xte, Yte)</span>
<span id="cb39-7">  }[split]</span>
<span id="cb39-8">  emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[x]</span>
<span id="cb39-9">  emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb39-10">  h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb_cat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1                                                                                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈 </span></span>
<span id="cb39-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># h_pre_act = bngain * ((h_pre_act - h_pre_act.mean(0, keepdim=True)) / h_pre_act.std(0, keepdim=True)) + bnbias      # 👈</span></span>
<span id="cb39-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># h_pre_act = bngain * ((h_pre_act - bnmean) / bnstd) + bnbias                                                        # 👈</span></span>
<span id="cb39-13">  h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bngain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((h_pre_act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bnmean_running) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> bnstd_running) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bnbias                                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 👈</span></span>
<span id="cb39-14">  h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(h_pre_act) </span>
<span id="cb39-15">  logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb39-16">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, y)</span>
<span id="cb39-17">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(split, loss.item())</span>
<span id="cb39-18"></span>
<span id="cb39-19">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span>
<span id="cb39-20">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>train 2.416299343109131
val 2.4326608180999756</code></pre>
</div>
</div>
<section id="loss-logs" class="level3">
<h3 class="anchored" data-anchor-id="loss-logs">loss logs</h3>
<p>The numbers somehow are approximate, I don’t know why my Thinkpad-E14 gave different results when running codes multiple times 😂.</p>
<table class="table-striped table-hover table">
<caption>Loss logs</caption>
<colgroup>
<col style="width: 10%">
<col style="width: 40%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th>Step</th>
<th>What we did</th>
<th>Loss we got (accum)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>original</td>
<td><p>train 2.1169614791870117</p>
<p>val 2.1623435020446777</p></td>
</tr>
<tr class="even">
<td>2</td>
<td>fixed softmax confidently wrong</td>
<td><p>train 2.0666463375091553</p>
<p>val 2.1468191146850586</p></td>
</tr>
<tr class="odd">
<td>3</td>
<td>fixed <code>tanh</code> layer too saturated at init</td>
<td><p>train 2.033477544784546</p>
<p>val 2.115907907485962</p></td>
</tr>
<tr class="even">
<td>4</td>
<td>used semi principle “kaiming init” instead of hacking init</td>
<td><p>train 2.038902997970581</p>
<p>val 2.1138899326324463</p></td>
</tr>
<tr class="odd">
<td>5</td>
<td>added batch norm layer</td>
<td><p>train 2.0662825107574463</p>
<p>val 2.1201331615448</p></td>
</tr>
</tbody>
</table>
</section>
</section>
</section>
<section id="part-2-pytorch-ifying-the-code-and-train-a-deeper-network" class="level1">
<h1>Part 2: PyTorch-ifying the code, and train a deeper network</h1>
<p>Below is PyTorch-ified code by Andrej, some comments inputted by me:</p>
<div id="b8a7111f" class="cell" data-execution_count="27">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's train a deeper network</span></span>
<span id="cb41-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The classes we create here are the same API as nn.Module in PyTorch</span></span>
<span id="cb41-3"></span>
<span id="cb41-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Linear:</span>
<span id="cb41-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb41-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Simplifying Pytorch Linear Layer: https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear</span></span>
<span id="cb41-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb41-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, fan_in, fan_out, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb41-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((fan_in, fan_out), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> fan_in<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb41-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(fan_out) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> bias <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb41-11"></span>
<span id="cb41-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb41-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight</span>
<span id="cb41-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb41-15">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias</span>
<span id="cb41-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb41-17"></span>
<span id="cb41-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb41-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ([] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias])</span>
<span id="cb41-20"></span>
<span id="cb41-21"></span>
<span id="cb41-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BatchNorm1d:</span>
<span id="cb41-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb41-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Simplifying Pytorch BatchNorm1D: https://pytorch.org/docs/stable/generated/torch.nn.BatchNorm1d.html</span></span>
<span id="cb41-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span> </span>
<span id="cb41-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dim, eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb41-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eps</span>
<span id="cb41-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> momentum</span>
<span id="cb41-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.training <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to differentiate usage of class in training or evaluation (using running mean/std)</span></span>
<span id="cb41-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters (trained with backprop)</span></span>
<span id="cb41-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(dim) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gain</span></span>
<span id="cb41-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(dim) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bias</span></span>
<span id="cb41-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># buffers (trained with a running 'momentum update')</span></span>
<span id="cb41-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(dim)</span>
<span id="cb41-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(dim)</span>
<span id="cb41-36"></span>
<span id="cb41-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb41-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the forward pass</span></span>
<span id="cb41-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.training:</span>
<span id="cb41-40">            xmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch mean</span></span>
<span id="cb41-41">            xvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.var(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch variance, follow the paper exactly</span></span>
<span id="cb41-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb41-43">            xmean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_mean</span>
<span id="cb41-44">            xvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_var</span>
<span id="cb41-45">        xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xmean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.sqrt(xvar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eps) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalize to unit variance</span></span>
<span id="cb41-46">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to tracking and visualizing data later on, PyTorch does not have this</span></span>
<span id="cb41-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the buffers</span></span>
<span id="cb41-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.training:</span>
<span id="cb41-49">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb41-50">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> xmean</span>
<span id="cb41-51">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.running_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.momentum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> xvar</span>
<span id="cb41-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb41-53"></span>
<span id="cb41-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb41-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta]</span>
<span id="cb41-56"></span>
<span id="cb41-57"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Tanh:</span>
<span id="cb41-58">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb41-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Just calculate the Tanh, just PyTorch: https://pytorch.org/docs/stable/generated/torch.nn.Tanh.html</span></span>
<span id="cb41-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb41-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb41-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(x)</span>
<span id="cb41-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb41-64">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb41-65">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> []</span>
<span id="cb41-66"></span>
<span id="cb41-67">n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the dimensionality of the character embedding vectors</span></span>
<span id="cb41-68">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of neurons in the hidden layer of the MLP</span></span>
<span id="cb41-69">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproducibility</span></span>
<span id="cb41-70"></span>
<span id="cb41-71">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_embd),            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb41-72"></span>
<span id="cb41-73">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb41-74">    Linear(n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden), Tanh(),</span>
<span id="cb41-75">    Linear(           n_hidden, n_hidden), Tanh(),</span>
<span id="cb41-76">    Linear(           n_hidden, n_hidden), Tanh(),</span>
<span id="cb41-77">    Linear(           n_hidden, n_hidden), Tanh(),</span>
<span id="cb41-78">    Linear(           n_hidden, n_hidden), Tanh(),</span>
<span id="cb41-79">    Linear(           n_hidden, vocab_size),</span>
<span id="cb41-80">]</span>
<span id="cb41-81"></span>
<span id="cb41-82"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb41-83">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># last layer: make less confident</span></span>
<span id="cb41-84">    layers[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb41-85">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all other layers: apply gain</span></span>
<span id="cb41-86">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layers[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb41-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(layer, Linear):</span>
<span id="cb41-88">            layer.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb41-89"></span>
<span id="cb41-90">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [p <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layers <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layer.parameters()]</span>
<span id="cb41-91"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of parameters in total</span></span>
<span id="cb41-92"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb41-93">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>46497</code></pre>
</div>
</div>
<div id="43820029" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same optimization as last time</span></span>
<span id="cb43-2">max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200000</span></span>
<span id="cb43-3">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb43-4">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb43-5">ud <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb43-6"></span>
<span id="cb43-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_steps):</span>
<span id="cb43-8">  </span>
<span id="cb43-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct</span></span>
<span id="cb43-10">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb43-11">    Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X,Y</span></span>
<span id="cb43-12"></span>
<span id="cb43-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb43-14">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors</span></span>
<span id="cb43-15">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb43-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layers:</span>
<span id="cb43-17">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer(x)</span>
<span id="cb43-18">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(x, Yb) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb43-19"></span>
<span id="cb43-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb43-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layers:</span>
<span id="cb43-22">        layer.out.retain_grad() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AFTER_DEBUG: would take out retain_graph</span></span>
<span id="cb43-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb43-24">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb43-25">    loss.backward()</span>
<span id="cb43-26"></span>
<span id="cb43-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb43-28">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150000</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step learning rate decay</span></span>
<span id="cb43-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb43-30">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb43-31"></span>
<span id="cb43-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb43-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print every once in a while</span></span>
<span id="cb43-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb43-35">    lossi.append(loss.log10().item())</span>
<span id="cb43-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb43-37">        ud.append([((lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p.grad).std() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p.data.std()).log10().item() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters])</span>
<span id="cb43-38"></span>
<span id="cb43-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb43-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if i &gt;= 1000:</span></span>
<span id="cb43-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     break # AFTER_DEBUG: would take out obviously to run full optimization</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>      0/ 200000: 3.2962</code></pre>
</div>
</div>
<section id="viz-1-forward-pass-activations-statistics" class="level2">
<h2 class="anchored" data-anchor-id="viz-1-forward-pass-activations-statistics">viz #1: forward pass activations statistics</h2>
<div id="232a9a18" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualize histograms</span></span>
<span id="cb45-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># width and height of the plot</span></span>
<span id="cb45-3">legends <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb45-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(layers[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note: exclude the output layer</span></span>
<span id="cb45-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(layer, Tanh):</span>
<span id="cb45-6">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer.out</span>
<span id="cb45-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'layer </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%10s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">): mean </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, std </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, saturated: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f%%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (i, layer.__class__.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>, t.mean(), t.std(), (t.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.97</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb45-8">    hy, hx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.histogram(t, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb45-9">    plt.plot(hx[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].detach(), hy.detach())</span>
<span id="cb45-10">    legends.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'layer </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>layer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>__class__<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb45-11">plt.legend(legends)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-12">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'activation distribution'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>layer 1 (      Tanh): mean -0.02, std 0.75, saturated: 20.25%
layer 3 (      Tanh): mean -0.00, std 0.69, saturated: 8.38%
layer 5 (      Tanh): mean +0.00, std 0.67, saturated: 6.62%
layer 7 (      Tanh): mean -0.01, std 0.66, saturated: 5.47%
layer 9 (      Tanh): mean -0.02, std 0.66, saturated: 6.12%</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>Text(0.5, 1.0, 'activation distribution')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-30-output-3.png" width="855" height="283" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>If we set the gain to <code>1</code>, the std is shrinking, and the saturation is coming to zeros, due to the first layer is pretty decent, but the next ones are shrinking to zero because of the <code>tanh()</code> - a squashing function.</p>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb48-1">layer 1 (      Tanh): mean -0.02, std 0.62, saturated: 3.50%</span>
<span id="cb48-2">layer 3 (      Tanh): mean -0.00, std 0.48, saturated: 0.03%</span>
<span id="cb48-3">layer 5 (      Tanh): mean +0.00, std 0.41, saturated: 0.06%</span>
<span id="cb48-4">layer 7 (      Tanh): mean +0.00, std 0.35, saturated: 0.00%</span>
<span id="cb48-5">layer 9 (      Tanh): mean -0.02, std 0.32, saturated: 0.00%</span>
<span id="cb48-6">Text(0.5, 1.0, 'activation distribution')</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz1_gain1.png" class="img-fluid figure-img"></p>
<figcaption>If the gain is 1</figcaption>
</figure>
</div>
<p>But if we set the gain is far too high, let’s say <code>3</code>, we can see the saturation is too high.</p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb49-1">layer 1 (      Tanh): mean -0.03, std 0.85, saturated: 47.66%</span>
<span id="cb49-2">layer 3 (      Tanh): mean +0.00, std 0.84, saturated: 40.47%</span>
<span id="cb49-3">layer 5 (      Tanh): mean -0.01, std 0.84, saturated: 42.38%</span>
<span id="cb49-4">layer 7 (      Tanh): mean -0.01, std 0.84, saturated: 42.00%</span>
<span id="cb49-5">layer 9 (      Tanh): mean -0.03, std 0.84, saturated: 42.41%</span>
<span id="cb49-6">Text(0.5, 1.0, 'activation distribution')</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz1_gain3.png" class="img-fluid figure-img"></p>
<figcaption>If the gain is 3</figcaption>
</figure>
</div>
<p>So <code>5/3</code> is a nice one, balancing the std and saturation.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Why 5/3?">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Why 5/3?
</div>
</div>
<div class="callout-body-container callout-body">
<p>A comment in his video explains why <code>5/3</code> is recommended, it comes from the avg of <img src="https://latex.codecogs.com/png.latex?%5B%5Ctanh(x)%5D%5E2"> where <img src="https://latex.codecogs.com/png.latex?x"> is distributed as a Gaussian:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20%5Cfrac%7B%5B%5Ctanh(x)%5D%5E2%20%5Cexp(-%5Cfrac%7Bx%5E2%7D%7B2%7D)%7D%7B%5Csqrt%7B2%5Cpi%7D%7D%20%5C,%20dx%20%5Capprox%200.39"></p>
<blockquote class="blockquote">
<p>The square root of this value is how much the <code>tanh</code> squeezes the variance of the incoming variable: 0.39 ** .5 ~= 0.63 ~= 3/5 (hence 5/3 is just an approximation of the exact gain).</p>
</blockquote>
</div>
</div>
</section>
<section id="viz-2-backward-pass-gradient-statistics" class="level2">
<h2 class="anchored" data-anchor-id="viz-2-backward-pass-gradient-statistics">viz #2: backward pass gradient statistics</h2>
<p>Similarly, we can do the same thing with gradients. With the setting of gain as <code>5/3</code>, the distribution of gradients through layers quite the same. Layer by layer, the value of gradients will be shrank close to zero, the distributions would be more and more peak, so the gain here will help expanding those distributions.</p>
<div id="04f863cb" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualize histograms</span></span>
<span id="cb50-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># width and height of the plot</span></span>
<span id="cb50-3">legends <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb50-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(layers[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note: exclude the output layer</span></span>
<span id="cb50-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(layer, Tanh):</span>
<span id="cb50-6">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer.out.grad</span>
<span id="cb50-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'layer </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%10s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">): mean </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, std </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (i, layer.__class__.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>, t.mean(), t.std()))</span>
<span id="cb50-8">    hy, hx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.histogram(t, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb50-9">    plt.plot(hx[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].detach(), hy.detach())</span>
<span id="cb50-10">    legends.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'layer </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>layer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>__class__<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb50-11">plt.legend(legends)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb50-12">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gradient distribution'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>layer 1 (      Tanh): mean +0.000010, std 4.205588e-04
layer 3 (      Tanh): mean -0.000003, std 3.991179e-04
layer 5 (      Tanh): mean +0.000003, std 3.743020e-04
layer 7 (      Tanh): mean +0.000015, std 3.290473e-04
layer 9 (      Tanh): mean -0.000014, std 3.054035e-04</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>Text(0.5, 1.0, 'gradient distribution')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-31-output-3.png" width="888" height="283" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="the-fully-linear-case-of-no-non-linearity" class="level2">
<h2 class="anchored" data-anchor-id="the-fully-linear-case-of-no-non-linearity">the fully linear case of no non-linearity</h2>
<p>Now imagine if we remove the <code>tanh</code> from all layers, the recommend gain now for Linear is <code>1</code>.</p>
<div id="8fcbd66f" class="cell" data-execution_count="31">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb53-1">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb53-2">  Linear(n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tanh(),</span></span>
<span id="cb53-3">  Linear(           n_hidden, n_hidden), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tanh(),</span></span>
<span id="cb53-4">  Linear(           n_hidden, n_hidden), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tanh(),</span></span>
<span id="cb53-5">  Linear(           n_hidden, n_hidden), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tanh(),</span></span>
<span id="cb53-6">  Linear(           n_hidden, n_hidden), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tanh(),</span></span>
<span id="cb53-7">  Linear(           n_hidden, vocab_size),</span>
<span id="cb53-8">]</span></code></pre></div>
</details>
</div>
<p>But you’ll end up getting a pure linear network. No matter of how many Linear Layers you stacked up, it just the combination of all layers to a massive linear function <img src="https://latex.codecogs.com/png.latex?y%20=%20xA%5ET%20+%20b">, which will greatly limit the capacity of the neural nets.</p>
</section>
<section id="viz-3-parameter-activation-and-gradient-statistics" class="level2">
<h2 class="anchored" data-anchor-id="viz-3-parameter-activation-and-gradient-statistics">viz #3: parameter activation and gradient statistics</h2>
<p>We can also visualize the distribution of paramaters, here below only weight for simplicity (ignoring gamma, beta, etc…). We observed mean, std, and the grad to data ratio (to see how much the data will be updated).</p>
<p>Problem for the last layer is shown in code output below, the weights on last layer are 10 times bigger than previous ones, and the grad to data ratio is too high.</p>
<p>We can try run 1st 1000 training loops and this can be slight reduced, but since we are using a simple optimizer SGD rather than modern one like Adam, it is still problematic.</p>
<div id="f51d650b" class="cell" data-execution_count="32">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualize histograms</span></span>
<span id="cb54-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># width and height of the plot</span></span>
<span id="cb54-3">legends <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb54-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(parameters):</span>
<span id="cb54-5">  t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.grad</span>
<span id="cb54-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> p.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb54-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weight </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%10s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | mean </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | std </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | grad:data ratio </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p.shape), t.mean(), t.std(), t.std() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p.std()))</span>
<span id="cb54-8">    hy, hx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.histogram(t, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb54-9">    plt.plot(hx[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].detach(), hy.detach())</span>
<span id="cb54-10">    legends.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb54-11">plt.legend(legends)</span>
<span id="cb54-12">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weights gradient distribution'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>weight   (27, 10) | mean -0.000031 | std 1.365078e-03 | grad:data ratio 1.364090e-03
weight  (30, 100) | mean -0.000049 | std 1.207430e-03 | grad:data ratio 3.871660e-03
weight (100, 100) | mean +0.000016 | std 1.096730e-03 | grad:data ratio 6.601988e-03
weight (100, 100) | mean -0.000010 | std 9.893572e-04 | grad:data ratio 5.893091e-03
weight (100, 100) | mean -0.000011 | std 8.623432e-04 | grad:data ratio 5.158123e-03
weight (100, 100) | mean -0.000004 | std 7.388576e-04 | grad:data ratio 4.415211e-03
weight  (100, 27) | mean -0.000000 | std 2.364824e-02 | grad:data ratio 2.328203e+00</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/index_files/figure-html/cell-33-output-2.png" width="881" height="283" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="viz-4-update-data-ratio-over-time" class="level2">
<h2 class="anchored" data-anchor-id="viz-4-update-data-ratio-over-time">viz #4: update data ratio over time</h2>
<p>The grad to data above ratio is at the end not really informative (only at one point in time), what matter is actual amount which we change the data in these tensors (over time). AK introduce a tracking list <code>ud</code> (update to data). This calculates the ratio between (std) of the grad to the data of parameters (and <code>log10()</code> for a nicer viz) <strong>without context of gradient</strong>.</p>
<div id="3f80fcb7" class="cell" data-execution_count="33">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb56-2">legends <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb56-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(parameters):</span>
<span id="cb56-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> p.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb56-5">    plt.plot([ud[j][i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ud))])</span>
<span id="cb56-6">    legends.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> i)</span>
<span id="cb56-7">plt.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ud)], [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># these ratios should be ~1e-3, indicate on plot</span></span>
<span id="cb56-8">plt.legend(legends)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
</div>
<p>Below is the visualization from data collected after 1000 training loops:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz4_1000times.png" class="img-fluid figure-img"></p>
<figcaption>Viz 4 1000</figcaption>
</figure>
</div>
<p>Recall what we did to the last layer, avoiding over confidence, so the pink line looks different among others. In general, the learning process are good, if we change the learning rate to <code>0.0001</code>, the chart looks much worse.</p>
<p>Below are viz 1 after 1000 training loops:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz1_1000times.png" class="img-fluid figure-img"></p>
<figcaption>Viz 1 1000</figcaption>
</figure>
</div>
<p>and viz 2:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz2_1000times.png" class="img-fluid figure-img"></p>
<figcaption>Viz 2 1000</figcaption>
</figure>
</div>
<p>and viz 3:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz3_1000times.png" class="img-fluid figure-img"></p>
<figcaption>Viz 3 1000</figcaption>
</figure>
</div>
<p>Pretty decent till now. Let’s bring the BatchNorm back.</p>
</section>
<section id="bringing-back-batchnorm-looking-at-the-visualizations" class="level2">
<h2 class="anchored" data-anchor-id="bringing-back-batchnorm-looking-at-the-visualizations">bringing back batchnorm, looking at the visualizations</h2>
<p>We re-define the layers, and change <code>gamma</code> in last layer under no gradient instead of <code>weight</code>. We also dont want the “manual normalization” fan-in, and the gain <code>5/3</code> as well:</p>
<div id="aa679c4e" class="cell" data-execution_count="34">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb57-2">  Linear(n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb57-3">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb57-4">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb57-5">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb57-6">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb57-7">  Linear(           n_hidden, vocab_size, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(vocab_size),</span>
<span id="cb57-8">]</span></code></pre></div>
</details>
</div>
</section>
<section id="summary-of-the-lecture-for-real-this-time" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-the-lecture-for-real-this-time">summary of the lecture for real this time</h2>
<ol type="1">
<li>Intruduction of Batch Normalization - the 1st one of modern innovation to stablize Deep NN training;</li>
<li>PyTorch-ifying code;</li>
<li>Introduction to some diagnostic tools that we can use to verify the network is in good state dynamically.</li>
</ol>
<p>What he did not try to improve here is the loss of the network. It’s now somehow bottleneck not by the Optimization, but by the Context Length he suspect.</p>
<blockquote class="blockquote">
<p>Training Neural Network is like balancing a pencil on a finger.</p>
</blockquote>
<p>Final network architecture and training:</p>
<div id="82fe2173" class="cell" data-execution_count="35">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BatchNorm1D and Tanh are the same</span></span>
<span id="cb58-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Linear:</span>
<span id="cb58-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb58-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Simplifying Pytorch Linear Layer: https://pytorch.org/docs/stable/generated/torch.nn.Linear.html#torch.nn.Linear</span></span>
<span id="cb58-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb58-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, fan_in, fan_out, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb58-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((fan_in, fan_out), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># / fan_in**0.5</span></span>
<span id="cb58-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(fan_out) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> bias <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb58-9"></span>
<span id="cb58-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb58-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight</span>
<span id="cb58-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb58-13">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias</span>
<span id="cb58-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb58-15"></span>
<span id="cb58-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb58-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weight] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ([] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bias])</span>
<span id="cb58-18"></span>
<span id="cb58-19">n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the dimensionality of the character embedding vectors</span></span>
<span id="cb58-20">n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of neurons in the hidden layer of the MLP</span></span>
<span id="cb58-21">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproducibility</span></span>
<span id="cb58-22">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((vocab_size, n_embd),            generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb58-23">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb58-24">  Linear(n_embd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb58-25">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb58-26">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb58-27">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb58-28">  Linear(           n_hidden, n_hidden, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(n_hidden), Tanh(),</span>
<span id="cb58-29">  Linear(           n_hidden, vocab_size, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), BatchNorm1d(vocab_size),</span>
<span id="cb58-30">]</span>
<span id="cb58-31"></span>
<span id="cb58-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb58-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># last layer: make less confident</span></span>
<span id="cb58-34">    layers[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb58-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all other layers: apply gain</span></span>
<span id="cb58-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layers[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb58-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(layer, Linear):</span>
<span id="cb58-38">            layer.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#5/3</span></span>
<span id="cb58-39"></span>
<span id="cb58-40">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [p <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layers <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layer.parameters()]</span>
<span id="cb58-41"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of parameters in total</span></span>
<span id="cb58-42"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb58-43">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb58-44"></span>
<span id="cb58-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same optimization as last time</span></span>
<span id="cb58-46">max_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200000</span></span>
<span id="cb58-47">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb58-48">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb58-49">ud <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb58-50"></span>
<span id="cb58-51"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_steps):</span>
<span id="cb58-52">  </span>
<span id="cb58-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct</span></span>
<span id="cb58-54">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb58-55">    Xb, Yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtr[ix], Ytr[ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch X,Y</span></span>
<span id="cb58-56"></span>
<span id="cb58-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb58-58">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xb] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># embed the characters into vectors</span></span>
<span id="cb58-59">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb58-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layers:</span>
<span id="cb58-61">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer(x)</span>
<span id="cb58-62">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(x, Yb) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function</span></span>
<span id="cb58-63"></span>
<span id="cb58-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb58-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layers:</span>
<span id="cb58-66">        layer.out.retain_grad() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AFTER_DEBUG: would take out retain_graph</span></span>
<span id="cb58-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb58-68">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb58-69">    loss.backward()</span>
<span id="cb58-70"></span>
<span id="cb58-71">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb58-72">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150000</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step learning rate decay</span></span>
<span id="cb58-73">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb58-74">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb58-75"></span>
<span id="cb58-76">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb58-77">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print every once in a while</span></span>
<span id="cb58-78">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb58-79">    lossi.append(loss.log10().item())</span>
<span id="cb58-80">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb58-81">        ud.append([((lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p.grad).std() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p.data.std()).log10().item() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters])</span>
<span id="cb58-82"></span>
<span id="cb58-83">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># break</span></span>
<span id="cb58-84">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if i &gt;= 1000:</span></span>
<span id="cb58-85">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     break # AFTER_DEBUG: would take out obviously to run full optimization</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>47024
      0/ 200000: 3.2870
  10000/ 200000: 2.4521
  20000/ 200000: 2.0847
  30000/ 200000: 2.1838
  40000/ 200000: 2.1515
  50000/ 200000: 2.2246
  60000/ 200000: 1.9450
  70000/ 200000: 2.2514
  80000/ 200000: 2.4420
  90000/ 200000: 2.0624
 100000/ 200000: 2.5850
 110000/ 200000: 2.3225
 120000/ 200000: 2.2004
 130000/ 200000: 2.0352
 140000/ 200000: 1.8516
 150000/ 200000: 2.0424
 160000/ 200000: 2.2229
 170000/ 200000: 2.0384
 180000/ 200000: 2.2274
 190000/ 200000: 2.0901</code></pre>
</div>
</div>
<p>Final visualization:</p>
<p>Viz 1:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz1_final.png" class="img-fluid figure-img"></p>
<figcaption>Viz 1 final</figcaption>
</figure>
</div>
<p>Viz 2:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz2_final.png" class="img-fluid figure-img"></p>
<figcaption>Viz 2 final</figcaption>
</figure>
</div>
<p>Viz 3:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz3_final.png" class="img-fluid figure-img"></p>
<figcaption>Viz 3 final</figcaption>
</figure>
</div>
<p>Viz 4:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/viz4_final.png" class="img-fluid figure-img"></p>
<figcaption>Viz 4 final</figcaption>
</figure>
</div>
<p>The final loss on train/val:</p>
<div id="b4230d48" class="cell" data-execution_count="36">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this decorator disables gradient tracking</span></span>
<span id="cb60-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> split_loss(split):</span>
<span id="cb60-3">  x,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb60-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>: (Xtr, Ytr),</span>
<span id="cb60-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: (Xdev, Ydev),</span>
<span id="cb60-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: (Xte, Yte),</span>
<span id="cb60-7">  }[split]</span>
<span id="cb60-8">  emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[x] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, block_size, n_embd)</span></span>
<span id="cb60-9">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concat into (N, block_size * n_embd)</span></span>
<span id="cb60-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layers:</span>
<span id="cb60-11">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer(x)</span>
<span id="cb60-12">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(x, y)</span>
<span id="cb60-13">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(split, loss.item())</span>
<span id="cb60-14"></span>
<span id="cb60-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put layers into eval mode</span></span>
<span id="cb60-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layers:</span>
<span id="cb60-17">  layer.training <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb60-18">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)</span>
<span id="cb60-19">split_loss(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>train 2.103635549545288
val 2.1365904808044434</code></pre>
</div>
</div>
<p>Sample from the model:</p>
<div id="0d3c485d" class="cell" data-execution_count="37">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample from the model</span></span>
<span id="cb62-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb62-3"></span>
<span id="cb62-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb62-5">    </span>
<span id="cb62-6">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb62-7">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize with all ...</span></span>
<span id="cb62-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb62-9">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass the neural net</span></span>
<span id="cb62-10">      emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[torch.tensor([context])] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1,block_size,n_embd)</span></span>
<span id="cb62-11">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(emb.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate the vectors</span></span>
<span id="cb62-12">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layers:</span>
<span id="cb62-13">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer(x)</span>
<span id="cb62-14">      logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb62-15">      probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb62-16">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample from the distribution</span></span>
<span id="cb62-17">      ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(probs, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb62-18">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shift the context window and track the samples</span></span>
<span id="cb62-19">      context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb62-20">      out.append(ix)</span>
<span id="cb62-21">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if we sample the special '.' token, break</span></span>
<span id="cb62-22">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb62-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb62-24">    </span>
<span id="cb62-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(itos[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> out)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># decode and print the generated word</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>mona.
mayannielle.
dhryah.
rethan.
ejdraeg.
adelynnelin.
shi.
jen.
edelisson.
arleigh.
malaia.
nosadbergiaghiel.
kinde.
jennex.
terofius.
kaven.
jamyleyeh.
yuma.
myston.
azhil.</code></pre>
</div>
</div>
<p>Happy learning!</p>
</section>
<section id="exercises" class="level2">
<h2 class="anchored" data-anchor-id="exercises">Exercises:</h2>
<ul>
<li>E01: I did not get around to seeing what happens when you initialize all weights and biases to zero. Try this and train the neural net. You might think either that 1) the network trains just fine or 2) the network doesn’t train at all, but actually it is 3) the network trains but only partially, and achieves a pretty bad final performance. Inspect the gradients and activations to figure out what is happening and why the network is only partially training, and what part is being trained exactly.</li>
<li>E02: BatchNorm, unlike other normalization layers like LayerNorm/GroupNorm etc. has the big advantage that after training, the batchnorm gamma/beta can be “folded into” the weights of the preceeding Linear layers, effectively erasing the need to forward it at test time. Set up a small 3-layer MLP with batchnorms, train the network, then “fold” the batchnorm gamma/beta into the preceeding Linear layer’s W,b by creating a new W2, b2 and erasing the batch norm. Verify that this gives the same forward pass during inference. i.e.&nbsp;we see that the batchnorm is there just for stabilizing the training, and can be thrown out after training is done! pretty cool.</li>
</ul>
</section>
</section>
<section id="resources" class="level1">
<h1>resources:</h1>
<ol type="1">
<li>other people learn from AK like me: <a href="https://bedirtapkan.com/posts/blog_posts/karpathy_3_makemore_activations/" class="uri">https://bedirtapkan.com/posts/blog_posts/karpathy_3_makemore_activations/</a>; <a href="https://skeptric.com/index.html#category=makemore" class="uri">https://skeptric.com/index.html#category=makemore</a> - a replicate (?) with more OOPs on another dataset;</li>
<li>some good papers recommended by Andrej:
<ul>
<li>“Kaiming init” paper: <a href="https://arxiv.org/abs/1502.01852" class="uri">https://arxiv.org/abs/1502.01852</a>;</li>
<li>BatchNorm paper: <a href="https://arxiv.org/abs/1502.03167" class="uri">https://arxiv.org/abs/1502.03167</a>;</li>
<li>Bengio et al.&nbsp;2003 MLP language model paper (pdf): <a href="https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf" class="uri">https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf</a>;</li>
<li>Good paper illustrating some of the problems with batchnorm in practice: <a href="https://arxiv.org/abs/2105.07576" class="uri">https://arxiv.org/abs/2105.07576</a>.</li>
</ul></li>
<li>Notebook: <a href="https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part3_bn.ipynb" class="uri">https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part3_bn.ipynb</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>til</category>
  <category>python</category>
  <category>andrej karpathy</category>
  <category>nn-z2h</category>
  <category>neural networks</category>
  <guid>https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/</guid>
  <pubDate>Mon, 25 Nov 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-11-26-nn-z2h-p4/resnet50.png" medium="image" type="image/png" height="83" width="144"/>
</item>
<item>
  <title>NN-Z2H Lesson 3: Building makemore part 2 - MLP</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important callout-titled" title="This is not orginal content!">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This is not orginal content!
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is my study notes / codes along with Andrej Karpathy’s “<a href="https://www.youtube.com/watch?v=VMj-3S1tku0&amp;list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ">Neural Networks: Zero to Hero</a>” series.</p>
</div>
</div>
<p>In the previous lecture, we built a simple <code>bigram</code> character-level language model, using 2 different approaches that are (1) count, and (2) 1 layer neural network. They produced the same (and both poor - since the context is 1 character only) result but the neural network option offers more flexibility so that we can complexify our model to get better performance.</p>
<p>In this lecture we are going to implement 20-years ago neural probabilistic language model by <em>Bengio et al.&nbsp;(2003)</em>.</p>
<section id="part-1-intro-to-mlp" class="level1">
<h1>PART 1: intro to MLP</h1>
<section id="bengio-et-al.-2003-mlp-language-model-paper-walkthrough" class="level2">
<h2 class="anchored" data-anchor-id="bengio-et-al.-2003-mlp-language-model-paper-walkthrough">Bengio et al.&nbsp;2003 (MLP language model) paper walkthrough</h2>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">Summary</h3>
<p><strong>Problem Statement</strong>:</p>
<ul>
<li>Traditional n-gram language models suffer from the <em>curse of dimensionality</em>: they can’t effectively generalize to word sequences not seen in training data;</li>
<li>The core issue is treating words as atomic units with no <em>inherent similarity</em> to each other;</li>
<li>For example, if we’ve seen “dog is eating” in training but never “cat is eating”, n-gram models can’t leverage the similarity between “dog” and “cat”;</li>
<li>This leads to poor probability estimates for rare or unseen word sequences.</li>
</ul>
<p><strong>Solution</strong>:</p>
<ul>
<li>Learn a <em>distributed representation</em> (embedding) for each word in a continuous vector space where similar words are close to each other;</li>
<li>Use a neural network architecture with:
<ul>
<li>Input layer: concatenated embeddings of n-1 previous words;</li>
<li>Hidden layer: dense neural network with <code>tanh</code> activation;</li>
<li>Output layer: softmax over entire vocabulary to predict next word probability.</li>
</ul></li>
</ul>
<p><strong>The model simultaneously learns</strong>:</p>
<ul>
<li>Word feature vectors (embeddings) that capture <em>semantic/syntactic word similarities</em>;</li>
<li>Neural network parameters that combine these features to estimate probability distributions.</li>
</ul>
<p><strong>Key advantages</strong>:</p>
<ul>
<li>Words with similar meanings get similar feature vectors, enabling better <em>generalization</em>;</li>
<li>The probability function is smooth with respect to word embeddings, so similar words yield <em>similar predictions</em>;</li>
<li>Can generalize to <em>unseen sequences</em> by leveraging learned word similarities.</li>
</ul>
</section>
<section id="methodology" class="level3">
<h3 class="anchored" data-anchor-id="methodology">Methodology:</h3>
<ul>
<li><p>Traditional Problem:</p>
<ul>
<li>In n-gram models, each word sequence of length n is a separate parameter;</li>
<li>For vocabulary size <img src="https://latex.codecogs.com/png.latex?%7CV%7C">, need <img src="https://latex.codecogs.com/png.latex?%7CV%7C%5En"> parameters;</li>
<li>Most sequences never appear in training, leading to poor generalization;</li>
</ul></li>
<li><p>Solution via <strong>Distributed Representation</strong>:</p>
<ul>
<li>Each word mapped to a dense vector in <img src="https://latex.codecogs.com/png.latex?R%5Em"> (typically m=50-100);</li>
<li>Similar words get similar vectors through training;</li>
<li>Probability function is smooth w.r.t these vectors;</li>
<li>Key benefit: If “dog” and “cat” have similar vectors, model can generalize from “dog is eating” to “cat is eating”;</li>
<li>Number of parameters reduces to <img src="https://latex.codecogs.com/png.latex?O(%7CV%7C%C3%97m%20+%20m%C3%97h%20+%20h%C3%97%7CV%7C)">, where <img src="https://latex.codecogs.com/png.latex?h"> is hidden layer size;</li>
<li>This is much smaller than <img src="https://latex.codecogs.com/png.latex?%7CV%7C%5En"> and allows better generalization;</li>
</ul></li>
</ul>
</section>
<section id="neural-architecture" class="level3">
<h3 class="anchored" data-anchor-id="neural-architecture">Neural architecture:</h3>
<p><strong>Input Layer</strong>:</p>
<ul>
<li>Takes <img src="https://latex.codecogs.com/png.latex?n-1"> previous words (context window);</li>
<li>Each word i mapped to vector <img src="https://latex.codecogs.com/png.latex?C(i)%20%E2%88%88%20R%5Em"> via lookup table;</li>
<li>Concatenates these vectors: <img src="https://latex.codecogs.com/png.latex?x%20=%20%5BC(w%E2%82%9C%E2%82%8B%E2%82%99%E2%82%8A%E2%82%81),%20...,%20C(w%E2%82%9C%E2%82%8B%E2%82%81)%5D">;</li>
<li><img src="https://latex.codecogs.com/png.latex?x"> dimension is <img src="https://latex.codecogs.com/png.latex?(n-1)%C3%97m">;</li>
</ul>
<p><strong>Hidden Layer</strong>:</p>
<ul>
<li>Dense layer with tanh activation;</li>
<li>Computation: <img src="https://latex.codecogs.com/png.latex?h%20=%20tanh(d%20+%20Hx)">;</li>
<li><img src="https://latex.codecogs.com/png.latex?H"> is weight matrix, <img src="https://latex.codecogs.com/png.latex?d"> is bias vector;</li>
<li>Maps concatenated context to hidden representation;</li>
</ul>
<p><strong>Output Layer</strong>:</p>
<ul>
<li>Computes probability distribution over all words;</li>
<li><img src="https://latex.codecogs.com/png.latex?y%20=%20b%20+%20Wx%20+%20Uh">;</li>
<li>Softmax activation: <img src="https://latex.codecogs.com/png.latex?P(w%E2%82%9C%7Ccontext)%20=%20exp(y%E1%B5%A2)/%CE%A3%E2%B1%BCexp(y%E2%B1%BC)">;</li>
<li><img src="https://latex.codecogs.com/png.latex?W"> provides “shortcut” connections from input to output;</li>
<li>Direct connection helps learn simpler patterns;</li>
</ul>
<p><strong>Training</strong>:</p>
<ul>
<li>Maximizes log-likelihood of training data;</li>
<li>Uses stochastic gradient descent;</li>
<li>Learns both word vectors <img src="https://latex.codecogs.com/png.latex?C(i)"> and neural network parameters <img src="https://latex.codecogs.com/png.latex?(H,%20d,%20W,%20U,%20b)">;</li>
<li>Word vectors capture similarities as they help predict similar contexts;</li>
<li>Can initialize word vectors randomly or with pretrained vectors.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/NLM_Bengio_etal.png" class="img-fluid figure-img"></p>
<figcaption>Neural Language Model proposed by (Bengio et al., 2003). C(i) is the i th word embedding.</figcaption>
</figure>
</div>
</section>
</section>
<section id="re-building-our-training-dataset" class="level2">
<h2 class="anchored" data-anchor-id="re-building-our-training-dataset">(re-)building our training dataset</h2>
<p>Loading library, reading data, building dictionary:</p>
<div id="e492dcd6" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</details>
</div>
<div id="01121608" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"></span>
<span id="cb2-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/karpathy/makemore/refs/heads/master/names.txt"</span></span>
<span id="cb2-4">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>).iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tolist()</span>
<span id="cb2-5">words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>['emma', 'olivia', 'ava', 'isabella', 'sophia', 'charlotte', 'mia', 'amelia']</code></pre>
</div>
</div>
<div id="c2af0470" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>32033</code></pre>
</div>
</div>
<div id="510583ce" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the vocabulary of characters and mapping to/from integer</span></span>
<span id="cb6-2">chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(words))))</span>
<span id="cb6-3">stoi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {s:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chars)}</span>
<span id="cb6-4">stoi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-5"></span>
<span id="cb6-6">itos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i: s <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s, i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> stoi.items()}</span>
<span id="cb6-7">itos</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>{1: 'a',
 2: 'b',
 3: 'c',
 4: 'd',
 5: 'e',
 6: 'f',
 7: 'g',
 8: 'h',
 9: 'i',
 10: 'j',
 11: 'k',
 12: 'l',
 13: 'm',
 14: 'n',
 15: 'o',
 16: 'p',
 17: 'q',
 18: 'r',
 19: 's',
 20: 't',
 21: 'u',
 22: 'v',
 23: 'w',
 24: 'x',
 25: 'y',
 26: 'z',
 0: '.'}</code></pre>
</div>
</div>
<p>Building the dataset:</p>
<div id="af0815d1" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the context length: how many characters do we take to predict the next one?</span></span>
<span id="cb8-2">X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]:</span>
<span id="cb8-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(w)</span>
<span id="cb8-6">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 so context will be padded by '.'</span></span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb8-8">        ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb8-9">        X.append(context)</span>
<span id="cb8-10">        Y.append(ix)</span>
<span id="cb8-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(itos[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> context), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-----&gt;'</span>, itos[ix] )</span>
<span id="cb8-12">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rolling to the next one</span></span>
<span id="cb8-13"></span>
<span id="cb8-14">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb8-15">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>emma
... -----&gt; e
..e -----&gt; m
.em -----&gt; m
emm -----&gt; a
mma -----&gt; .
olivia
... -----&gt; o
..o -----&gt; l
.ol -----&gt; i
oli -----&gt; v
liv -----&gt; i
ivi -----&gt; a
via -----&gt; .
ava
... -----&gt; a
..a -----&gt; v
.av -----&gt; a
ava -----&gt; .
isabella
... -----&gt; i
..i -----&gt; s
.is -----&gt; a
isa -----&gt; b
sab -----&gt; e
abe -----&gt; l
bel -----&gt; l
ell -----&gt; a
lla -----&gt; .
sophia
... -----&gt; s
..s -----&gt; o
.so -----&gt; p
sop -----&gt; h
oph -----&gt; i
phi -----&gt; a
hia -----&gt; .</code></pre>
</div>
</div>
<div id="bd6807e0" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">X.shape, X.dtype, Y.shape, Y.dtype</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>(torch.Size([32, 3]), torch.int64, torch.Size([32]), torch.int64)</code></pre>
</div>
</div>
</section>
<section id="implementing-the-embedding-lookup-table" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-embedding-lookup-table">implementing the embedding lookup table</h2>
<p>In the paper they cram 17k word into as-low-as-possible 30 dimensions space, for our data, we just cram words into 2D space.</p>
<div id="d8c16f21" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
</details>
</div>
<p>We can access the element of <code>torch.tensor</code> by:</p>
<div id="036a30dd" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># can be integer, list [5, 6, 7], or torch.tensor([5,6,7])</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &gt; tensor([1.0825, 0.2010])</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or</span></span>
<span id="cb13-5"></span>
<span id="cb13-6">F.one_hot(torch.tensor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C</span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># produce identical result, remember torch.tensor() infer long dtype int64, so we need to cast to float</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>tensor([ 0.3055, -0.4069])</code></pre>
</div>
</div>
<p>…but in this lecture accessing by <code>C[5]</code> would be sufficient. We can even access using a more than 1 dimension tensor:</p>
<div id="5afd1cbb" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(C[X].shape)</span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># integer 1 for 13rd index of 2nd dimension</span></span>
<span id="cb15-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(C[X][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will be the embedding of that element</span></span>
<span id="cb15-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># so C[X][13,2] = C[1]</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([32, 3, 2])
tensor(1)
tensor([0.0748, 0.8711])
tensor([0.0748, 0.8711])</code></pre>
</div>
</div>
<p>PyTorch is great for embedding words:</p>
<div id="8fb9db32" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X]</span>
<span id="cb17-2">emb.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>torch.Size([32, 3, 2])</code></pre>
</div>
</div>
<p>We’ve compeleted the first layer with <code>context</code> and lookup table!</p>
</section>
<section id="implementing-the-hidden-layer-internals-of-torch.tensor-storage-views" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-hidden-layer-internals-of-torch.tensor-storage-views">implementing the hidden layer + internals of <code>torch.Tensor</code>: <code>storage</code>, <code>views</code></h2>
<div id="8aa99d10" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input of tanh layer will be 6 (3 words in context x 2 dimensions)</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and the number or neurons is up to us - let's set it 100</span></span>
<span id="cb19-3">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb19-4">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
</details>
</div>
<p>Now we need to do something like <code>emb @ W1 + b1</code>, but <code>emb.shape</code> is <code>[32, 3, 2]</code> and <code>W1.shape</code> is <code>[6, 100]</code>. We need to somehow concatnate/transform:</p>
<div id="a07a406b" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># emb[:, 0, :] is tensor for each input in the 3-words context, shape is [32, 2]</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cat 3 of them using the 2nd dimension (index 1) -&gt; so we set dim = 1</span></span>
<span id="cb20-3">torch.cat([emb[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :], emb[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :], emb[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, :]], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>torch.Size([32, 6])</code></pre>
</div>
</div>
<p>However this code does not change dynamically when we change the block size. We will be using <code>torch.unbind()</code></p>
<div id="23521555" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is good!</span></span>
<span id="cb22-2">torch.cat(torch.unbind(emb, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).shape</span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new memory for storage is created, so it is not efficient</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>torch.Size([32, 6])</code></pre>
</div>
</div>
<p>This works, but we have a better and more efficient way to do this. Since:</p>
<ul>
<li>every <code>torch.Tensor</code> have <code>.storage()</code> which is one-dimensional vector tensor;</li>
<li>when we call <code>.view()</code>, we instruct how this vector tensor is interpreted;</li>
<li>no memory is being changed/copied/moved/or created. the storage is identical.</li>
</ul>
<p>Readmore: <a href="http://blog.ezyang.com/2019/05/pytorch-internals/" class="uri">http://blog.ezyang.com/2019/05/pytorch-internals/</a></p>
<p>So this hidden layer can be declared:</p>
<div id="6f67b25b" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instead or 32 we can write emb.shape[1], or -1 (whatever fitted)</span></span>
<span id="cb24-2">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb24-3">h.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>torch.Size([32, 100])</code></pre>
</div>
</div>
<p>Notice that in the final operation, <code>b1</code> will be broadcasted.</p>
</section>
<section id="implementing-the-output-layer" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-output-layer">implementing the output layer</h2>
<div id="e78eceef" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>))</span>
<span id="cb26-2">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>)</span></code></pre></div>
</details>
</div>
<p>In Deep Learning, people use <code>logits</code> for what raw output that range from negative inf to positive inf.</p>
<div id="f21d0db5" class="cell" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span></code></pre></div>
</details>
</div>
<div id="ab4c6cac" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">logits.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>torch.Size([32, 27])</code></pre>
</div>
</div>
<p>Now we need to exponentiate it and get the probability.</p>
<div id="08609b0d" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp()</span></code></pre></div>
</details>
</div>
<div id="9e545490" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<div id="a0c442b2" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1">probs.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>torch.Size([32, 27])</code></pre>
</div>
</div>
<p>Every row of <code>probs</code> has sum of 1.</p>
<div id="ca70c847" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1">probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>tensor(1.)</code></pre>
</div>
</div>
<p>And this is the <code>probs</code> of each ground true <code>Y</code> in current output of the neural nets:</p>
<div id="e53f2b9d" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">probs[torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>), Y]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>tensor([2.0660e-21, 3.6184e-15, 1.5675e-11, 1.2796e-08, 4.4312e-02, 2.4003e-12,
        3.5811e-13, 1.3876e-18, 3.3465e-14, 2.5158e-22, 8.3230e-35, 3.4999e-08,
        7.5305e-10, 6.8868e-24, 1.8081e-28, 8.6262e-08, 4.0514e-18, 4.2847e-19,
        4.9013e-15, 1.0952e-10, 8.4563e-11, 2.1141e-26, 4.4209e-22, 6.9570e-30,
        3.9779e-10, 3.2419e-13, 2.2802e-07, 6.5380e-23, 3.0035e-37, 0.0000e+00,
        0.0000e+00, 3.2723e-26])</code></pre>
</div>
</div>
<p>Result is not good as we’ve not trained the network yet!</p>
</section>
<section id="implementing-the-negative-log-likelihood-loss" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-negative-log-likelihood-loss">implementing the negative log likelihood loss</h2>
<p>We define the negative log likelihood as:</p>
<div id="4127f2e6" class="cell" data-execution_count="23">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> probs[torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>), Y].log().mean()</span>
<span id="cb38-2">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>tensor(inf)</code></pre>
</div>
</div>
</section>
<section id="summary-of-the-full-network" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-the-full-network">summary of the full network</h2>
<p>Dataset:</p>
<div id="3ddbeeb7" class="cell" data-execution_count="24">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1">X.shape, Y.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>(torch.Size([32, 3]), torch.Size([32]))</code></pre>
</div>
</div>
<p>Neural network layers:</p>
<div id="29fb9ebc" class="cell" data-execution_count="25">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb42-2">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb42-3">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb42-4">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb42-5">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb42-6">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb42-7"></span>
<span id="cb42-8">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span></code></pre></div>
</details>
</div>
<p>Size of the network:</p>
<div id="ee60f1e7" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>3481</code></pre>
</div>
</div>
<p>Constructing forward pass:</p>
<div id="7d9f3566" class="cell" data-execution_count="27">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)</span></span>
<span id="cb45-2">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb45-3">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb45-4">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp()</span>
<span id="cb45-5">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb45-6">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> probs[torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>), Y].log().mean()</span>
<span id="cb45-7">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>tensor(17.7697)</code></pre>
</div>
</div>
</section>
</section>
<section id="part-2-intro-to-many-basics-of-machine-learning" class="level1">
<h1>PART 2: intro to many basics of machine learning</h1>
<section id="introducing-f.cross_entropy-and-why" class="level2">
<h2 class="anchored" data-anchor-id="introducing-f.cross_entropy-and-why">introducing <code>F.cross_entropy</code> and why</h2>
<p>We re-define loss:</p>
<div id="955bff3c" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb47-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y)</span>
<span id="cb47-2">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>tensor(17.7697)</code></pre>
</div>
</div>
<p>Why?</p>
<ul>
<li>Pytorch will create more intermediate tensor for every assignment: <code>counts</code>, <code>probs</code> -&gt; more memory;</li>
<li>Backward pass will be more optimized, because the expressions are much analytically and mathematically interpreted;</li>
<li>Cross entropy can be significantly &amp; numerically well behaved (for eg when we exponentiate a large positive number we got inf, PyTorch cross entropy will calculate the max of set and subtract it - which will not impact the exp result)</li>
</ul>
</section>
<section id="implementing-the-training-loop-overfitting-one-batch" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-training-loop-overfitting-one-batch">implementing the training loop, overfitting one batch</h2>
<p>So the forward pass, backward pass, and update loop will be implemented as below:</p>
<div id="64d4c38a" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb49-2">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</details>
</div>
<div id="b08ab8cb" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb50-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb50-3">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)</span></span>
<span id="cb50-4">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb50-5">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb50-6">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y)</span>
<span id="cb50-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss.item())</span>
<span id="cb50-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb50-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb50-10">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb50-11">    loss.backward()</span>
<span id="cb50-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb50-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb50-14">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb50-15"></span>
<span id="cb50-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss.item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>17.76971435546875
13.656400680541992
11.298768997192383
9.452457427978516
7.984262466430664
6.891321182250977
6.100014686584473
5.452036380767822
4.898152828216553
4.4146647453308105
4.4146647453308105</code></pre>
</div>
</div>
<p>We are fitting 32 examples to a neural nets of 3481 params, so it’s super easy to be overfitting. We got a low final loss, but it would never be 0, because the output can varry for the same input, for eg, <code>...</code>.</p>
<div id="181635eb" class="cell" data-execution_count="31">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1">logits.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>torch.return_types.max(
values=tensor([10.7865, 12.2558, 17.3982, 13.2739, 10.6965, 10.7865,  9.5145,  9.0495,
        14.0280, 11.8378,  9.9038, 15.4187, 10.7865, 10.1476,  9.8372, 11.7660,
        10.7865, 10.0029,  9.2940,  9.6824, 11.4241,  9.4885,  8.1164,  9.5176,
        12.6383, 10.7865, 10.6021, 11.0822,  6.3617, 17.3157, 12.4544,  8.1669],
       grad_fn=&lt;MaxBackward0&gt;),
indices=tensor([ 1,  8,  9,  0, 15,  1, 17,  2,  9,  9,  2,  0,  1, 15,  1,  0,  1, 19,
         1,  1, 16, 10, 26,  9,  0,  1, 15, 16,  3,  9, 19,  1]))</code></pre>
</div>
</div>
</section>
<section id="training-on-the-full-dataset-minibatches" class="level2">
<h2 class="anchored" data-anchor-id="training-on-the-full-dataset-minibatches">training on the full dataset, minibatches</h2>
<p>We can deploy our code to all the dataset, un-fold the below code block to see full code.</p>
<div id="82aa36e9" class="cell" data-execution_count="32">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb54-2">X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb54-3"></span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dataset</span></span>
<span id="cb54-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words:</span>
<span id="cb54-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(w)</span></span>
<span id="cb54-7">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size</span>
<span id="cb54-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb54-9">        ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb54-10">        X.append(context)</span>
<span id="cb54-11">        Y.append(ix)</span>
<span id="cb54-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(''.join(itos[i] for i in context), '-----&gt;', itos[ix] )</span></span>
<span id="cb54-13">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rolling to the next one</span></span>
<span id="cb54-14"></span>
<span id="cb54-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input and ground true</span></span>
<span id="cb54-16">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb54-17">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span>
<span id="cb54-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data size"</span>, X.shape, Y.shape)</span>
<span id="cb54-19"></span>
<span id="cb54-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table</span></span>
<span id="cb54-21">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb54-22">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb54-23">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)</span></span>
<span id="cb54-24"></span>
<span id="cb54-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh</span></span>
<span id="cb54-26">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb54-27">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb54-28">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb54-29"></span>
<span id="cb54-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb54-31">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb54-32">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb54-33">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb54-34">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y)</span>
<span id="cb54-35"></span>
<span id="cb54-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params</span></span>
<span id="cb54-37">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span>
<span id="cb54-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of params: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters))</span>
<span id="cb54-39"></span>
<span id="cb54-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb54-41"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb54-42">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Data size torch.Size([228146, 3]) torch.Size([228146])
No of params:  3481</code></pre>
</div>
</div>
<p>We notice that it takes a bit long time for each training in the loop. In practice, we will perform the forward/backward passes and update parameters for a small batch of the dataset. The minibatch construction is added/modified for lines of code with <code>#👈</code>.</p>
<p>Read more: <a href="https://nttuan8.com/bai-10-cac-ky-thuat-co-ban-trong-deep-learning/" class="uri">https://nttuan8.com/bai-10-cac-ky-thuat-co-ban-trong-deep-learning/</a></p>
<div id="dabcf778" class="cell" data-execution_count="33">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training</span></span>
<span id="cb56-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>):</span>
<span id="cb56-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct                                           #👈</span></span>
<span id="cb56-4">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,))                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#👈</span></span>
<span id="cb56-5"></span>
<span id="cb56-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb56-7">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X[ix]] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)                                     #👈</span></span>
<span id="cb56-8">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb56-9">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb56-10">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y[ix])                           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#👈</span></span>
<span id="cb56-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9990</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"___after running </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> time: "</span>, loss.item())</span>
<span id="cb56-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb56-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb56-14">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb56-15">    loss.backward()</span>
<span id="cb56-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb56-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb56-18">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb56-19"></span>
<span id="cb56-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"final minibatch loss: "</span>, loss.item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>___after running 9990 time:  2.4769816398620605
___after running 9991 time:  2.719482660293579
___after running 9992 time:  2.5886943340301514
___after running 9993 time:  2.2563774585723877
___after running 9994 time:  2.584904432296753
___after running 9995 time:  2.8459784984588623
___after running 9996 time:  2.4365286827087402
___after running 9997 time:  2.2122902870178223
___after running 9998 time:  2.440680742263794
___after running 9999 time:  2.183750867843628
final minibatch loss:  2.183750867843628</code></pre>
</div>
</div>
<p>The <code>loss</code> decrease much much better, although the direction of gradient might be not correct direction. But it is good enough for an approximation. Notice the loss for a minibatch is not the loss of whole dataset.</p>
<div id="abed3dd9" class="cell" data-execution_count="34">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb58-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)                                    </span></span>
<span id="cb58-2">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb58-3">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb58-4">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y)   </span>
<span id="cb58-5">loss.item()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>2.492901086807251</code></pre>
</div>
</div>
<p>We archived 2.39 loss for final minibatch and 2.5 on overall network.</p>
</section>
<section id="finding-a-good-initial-learning-rate" class="level2">
<h2 class="anchored" data-anchor-id="finding-a-good-initial-learning-rate">finding a good initial learning rate</h2>
<p>Now we’re continuing the optimization, let’s focus on how much we update the data from the gradient <code>p.data += -0.1 * p.grad</code>. We do not know if we step too little or too much.</p>
<p>We can create 1000 learning rates to use along with the training loop and see which one offers more stable convergence.</p>
<div id="fa9347fd" class="cell" data-execution_count="35">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1">lre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb60-2">lrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>lre</span></code></pre></div>
</details>
</div>
<p>Reset the code:</p>
<div id="76628b82" class="cell" data-execution_count="36">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb61-1">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb61-2">X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb61-3"></span>
<span id="cb61-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dataset</span></span>
<span id="cb61-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words:</span>
<span id="cb61-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(w)</span></span>
<span id="cb61-7">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size</span>
<span id="cb61-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb61-9">        ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb61-10">        X.append(context)</span>
<span id="cb61-11">        Y.append(ix)</span>
<span id="cb61-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(''.join(itos[i] for i in context), '-----&gt;', itos[ix] )</span></span>
<span id="cb61-13">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rolling to the next one</span></span>
<span id="cb61-14"></span>
<span id="cb61-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input and ground true</span></span>
<span id="cb61-16">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb61-17">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span>
<span id="cb61-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data size"</span>, X.shape, Y.shape)</span>
<span id="cb61-19"></span>
<span id="cb61-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table</span></span>
<span id="cb61-21">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb61-22">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb61-23">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)</span></span>
<span id="cb61-24"></span>
<span id="cb61-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh</span></span>
<span id="cb61-26">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb61-27">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb61-28">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb61-29"></span>
<span id="cb61-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb61-31">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb61-32">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb61-33">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb61-34">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y)</span>
<span id="cb61-35"></span>
<span id="cb61-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params</span></span>
<span id="cb61-37">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span>
<span id="cb61-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of params: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters))</span>
<span id="cb61-39"></span>
<span id="cb61-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb61-41"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb61-42">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Data size torch.Size([228146, 3]) torch.Size([228146])
No of params:  3481</code></pre>
</div>
</div>
<p>Training and tracking stats:</p>
<div id="6ca24afc" class="cell" data-execution_count="37">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb63-1">lri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb63-2">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb63-3"></span>
<span id="cb63-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>):</span>
<span id="cb63-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct                                           </span></span>
<span id="cb63-6">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,))                        </span>
<span id="cb63-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb63-8">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[X[ix]] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)                                    </span></span>
<span id="cb63-9">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb63-10">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb63-11">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Y[ix])                           </span>
<span id="cb63-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb63-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb63-14">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb63-15">    loss.backward()</span>
<span id="cb63-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb63-17">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lrs[i]</span>
<span id="cb63-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb63-19">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb63-20"></span>
<span id="cb63-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb63-22">    lri.append(lre[i])</span>
<span id="cb63-23">    lossi.append(loss.item())</span>
<span id="cb63-24"></span>
<span id="cb63-25">loss.item()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>8.216608047485352</code></pre>
</div>
</div>
<p>Plotting, we see a good exponential element of learning rate turn out to be around <code>-1</code>.</p>
<p><img src="https://latex.codecogs.com/png.latex?10%5E%7B-1%7D"> is <code>0.1</code> so our initial guess seems good.</p>
<div id="640c4dae" class="cell" data-execution_count="38">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb65-1">plt.plot(lri, lossi)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/index_files/figure-html/cell-39-output-1.png" width="579" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="splitting-up-the-dataset-into-trainvaltest-splits-and-why" class="level2">
<h2 class="anchored" data-anchor-id="splitting-up-the-dataset-into-trainvaltest-splits-and-why">splitting up the dataset into train/val/test splits and why</h2>
<p>Now we can keep lengthening the training loop to continue decreasing loss. We can try some techniques like change the learning rate to <code>0.001</code> after 20k, 30k loops of training with <code>0.1</code>.</p>
<p>But it will come to be overfitting when we try to keep training or increase the size of network to achieve a lower loss. The model just memorizing our training set verbatim, so if we try to sample from the model it just gives us the same thing in the dataset. Or if we calculate the loss on another dataset, it might be very high.</p>
<p>So another industry standard is we will split the data set into 3 pieces: (1) training set; (2) dev/validation set; and (3) test set, they can be 80% - 10% - 10% roughly and respectively.</p>
<ol type="1">
<li>Training split: train the parameters;</li>
<li>Dev/validation split: train the hyperparamerters (size of hidden layer, size of embedding, streng of regularization, etc);</li>
<li>Test split: evaluate the performance of the model at the end, we only work on this a very very few times, otherwise we learn from it and repeat overfitting.</li>
</ol>
<p>We are going to implement this train/dev/test splits:</p>
<div id="ed4b4242" class="cell" data-execution_count="39">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the dataset</span></span>
<span id="cb66-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> buid_dataset(words):</span>
<span id="cb66-3">    block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb66-4">    X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb66-5"></span>
<span id="cb66-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words:</span>
<span id="cb66-7">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size</span>
<span id="cb66-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb66-9">            ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb66-10">            X.append(context)</span>
<span id="cb66-11">            Y.append(ix)</span>
<span id="cb66-12">            context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb66-13"></span>
<span id="cb66-14">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb66-15">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span>
<span id="cb66-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.shape, Y.shape)</span>
<span id="cb66-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> X, Y</span>
<span id="cb66-18"></span>
<span id="cb66-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb66-20">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb66-21">random.shuffle(words)</span>
<span id="cb66-22">n1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb66-23">n2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb66-24"></span>
<span id="cb66-25">Xtr, Ytr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[:n1])</span>
<span id="cb66-26">Xdev, Ydev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n1:n2])</span>
<span id="cb66-27">Xte, Yte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n2:])</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([182625, 3]) torch.Size([182625])
torch.Size([22655, 3]) torch.Size([22655])
torch.Size([22866, 3]) torch.Size([22866])</code></pre>
</div>
</div>
<p>Now we’re already to train on splits of the dataset, but let’s hold on as we are talking abount overfitting. As discussed, overfitting also come from using a complex (too many parameters) for a small data set.</p>
<p>Our dataset has roughly 228k records, while the size of network is only 3.4k. So we are still underfitting, let’s continue to complexify our neural networks.</p>
<p>2 things to consider here:</p>
<ul>
<li>the size of tanh - hidden layer; and</li>
<li>dimensions of embedding space.</li>
</ul>
</section>
<section id="visualizing-the-loss-character-embeddings" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-the-loss-character-embeddings">visualizing the loss, character embeddings</h2>
<p>First we want to see: - how the loss decrease with 200k training loop with current network setting, learning rate decay to 0.01 after first 100k; and - how the current character embeddings recognize the similarity between characters in (2D) space.</p>
<p>Training on the <code>Xtr</code>, <code>Ytr</code>:</p>
<div id="5ef3b3e4" class="cell" data-execution_count="40">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table</span></span>
<span id="cb68-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb68-3">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb68-4"></span>
<span id="cb68-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh</span></span>
<span id="cb68-6">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb68-7">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb68-8"></span>
<span id="cb68-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb68-10">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb68-11">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb68-12"></span>
<span id="cb68-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params</span></span>
<span id="cb68-14">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span>
<span id="cb68-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of params: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters))</span>
<span id="cb68-16"></span>
<span id="cb68-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb68-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb68-19">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb68-20"></span>
<span id="cb68-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stats holders</span></span>
<span id="cb68-22">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb68-23">stepi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb68-24"></span>
<span id="cb68-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training on Xtr, Ytr</span></span>
<span id="cb68-26"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200_000</span>):</span>
<span id="cb68-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct                                           </span></span>
<span id="cb68-28">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,))                       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#👈</span></span>
<span id="cb68-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb68-30">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xtr[ix]] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)                                    #👈</span></span>
<span id="cb68-31">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb68-32">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb68-33">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Ytr[ix])                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#👈</span></span>
<span id="cb68-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb68-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb68-36">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb68-37">    loss.backward()</span>
<span id="cb68-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb68-39">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100_000</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>                                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#👈</span></span>
<span id="cb68-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb68-41">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb68-42"></span>
<span id="cb68-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb68-44">    lossi.append(loss.item())</span>
<span id="cb68-45">    stepi.append(i)</span>
<span id="cb68-46"></span>
<span id="cb68-47"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss on minibatch: "</span>, loss.item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>No of params:  3481
Loss on minibatch:  2.1069579124450684</code></pre>
</div>
</div>
<p>Loss on whole training dataset:</p>
<div id="fe5e43a0" class="cell" data-execution_count="41">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb70-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xtr] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)                                    </span></span>
<span id="cb70-2">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb70-3">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb70-4">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Ytr)   </span>
<span id="cb70-5">loss.item()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>2.259035110473633</code></pre>
</div>
</div>
<p>Loss on dev/validation dataset, it’s not much different from loss on training as the model is still underfitting, it still generalizes thing:</p>
<div id="422b9d22" class="cell" data-execution_count="42">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb72-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xdev] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 3, 2)                                    </span></span>
<span id="cb72-2">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 100)</span></span>
<span id="cb72-3">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 27)</span></span>
<span id="cb72-4">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Ydev)   </span>
<span id="cb72-5">loss.item()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>2.257272958755493</code></pre>
</div>
</div>
<p>Visualizing loss, we can see the loss shaking significantly as the batch size still small - 32.</p>
<div id="d86667b8" class="cell" data-execution_count="43">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb74-1">plt.plot(stepi, lossi)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/index_files/figure-html/cell-44-output-1.png" width="581" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Visualizing the character embeddings, we can see the model can cluster for eg. vowels a, e, i, o, u.</p>
<div id="c788851a" class="cell" data-execution_count="44">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb75-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb75-2">plt.scatter(C[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].data, C[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].data, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb75-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(C.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb75-4">    plt.text(C[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].item(),C[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].item(), itos[i], ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span>
<span id="cb75-5">plt.grid(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/index_files/figure-html/cell-45-output-1.png" width="656" height="633" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="experiment-larger-hidden-layer-larger-embedding-size" class="level2">
<h2 class="anchored" data-anchor-id="experiment-larger-hidden-layer-larger-embedding-size">experiment: larger hidden layer, larger embedding size</h2>
<p>Now we can experiment a larger hidden layer (300), and larger embedding_size (10). Below is the whole code:</p>
<div id="c62f8cec" class="cell" data-execution_count="45">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hyper-parameters</span></span>
<span id="cb76-2">block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of chracters / inputs to predict the nextone</span></span>
<span id="cb76-3">no_chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of possible chracters, include '.'</span></span>
<span id="cb76-4">emb_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no of dimensions of the embedding space.</span></span>
<span id="cb76-5">hidden_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size of the hidden - tanh layer</span></span>
<span id="cb76-6">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch size for training, 2, 4, 8, 16, 32, 64, etc</span></span>
<span id="cb76-7"></span>
<span id="cb76-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the dataset</span></span>
<span id="cb76-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> buid_dataset(words):</span>
<span id="cb76-10"></span>
<span id="cb76-11">    X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb76-12"></span>
<span id="cb76-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words:</span>
<span id="cb76-14">        context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size</span>
<span id="cb76-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>:</span>
<span id="cb76-16">            ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch]</span>
<span id="cb76-17">            X.append(context)</span>
<span id="cb76-18">            Y.append(ix)</span>
<span id="cb76-19">            context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb76-20"></span>
<span id="cb76-21">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X)</span>
<span id="cb76-22">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(Y)</span>
<span id="cb76-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.shape, Y.shape)</span>
<span id="cb76-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> X, Y</span>
<span id="cb76-25"></span>
<span id="cb76-26"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb76-27">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb76-28">random.shuffle(words)</span>
<span id="cb76-29">n1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb76-30">n2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span>
<span id="cb76-31"></span>
<span id="cb76-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 80 - 10 - 10 splits</span></span>
<span id="cb76-33">Xtr, Ytr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[:n1])</span>
<span id="cb76-34">Xdev, Ydev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n1:n2])</span>
<span id="cb76-35">Xte, Yte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> buid_dataset(words[n2:])</span>
<span id="cb76-36"></span>
<span id="cb76-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup table - 10 dimensional space</span></span>
<span id="cb76-38">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for reproductivity</span></span>
<span id="cb76-39">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((no_chars, emb_size), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb76-40"></span>
<span id="cb76-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 1 - tanh - 300 neurons</span></span>
<span id="cb76-42">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> emb_size, hidden_size), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb76-43">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(hidden_size, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb76-44"></span>
<span id="cb76-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer 2 - softmax</span></span>
<span id="cb76-46">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((hidden_size, no_chars), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb76-47">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(no_chars, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb76-48"></span>
<span id="cb76-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All params</span></span>
<span id="cb76-50">parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [C, W1, b1, W2, b2]</span>
<span id="cb76-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of params: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.nelement() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters))</span>
<span id="cb76-52"></span>
<span id="cb76-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb76-54"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb76-55">    p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb76-56"></span>
<span id="cb76-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stats holders</span></span>
<span id="cb76-58">lossi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb76-59">stepi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb76-60"></span>
<span id="cb76-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training on Xtr, Ytr</span></span>
<span id="cb76-62"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200_000</span>):</span>
<span id="cb76-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minibatch construct                                           </span></span>
<span id="cb76-64">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Xtr.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], (batch_size,))                      </span>
<span id="cb76-65">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb76-66">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xtr[ix]]                                                </span>
<span id="cb76-67">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> emb_size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1)</span>
<span id="cb76-68">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb76-69">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Ytr[ix]) </span>
<span id="cb76-70">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb76-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb76-72">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb76-73">    loss.backward()</span>
<span id="cb76-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb76-75">    lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100_000</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> </span>
<span id="cb76-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parameters:</span>
<span id="cb76-77">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb76-78"></span>
<span id="cb76-79">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track stats</span></span>
<span id="cb76-80">    lossi.append(loss.item())</span>
<span id="cb76-81">    stepi.append(i)</span>
<span id="cb76-82"></span>
<span id="cb76-83"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss on minibatch: "</span>, loss.item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([182580, 3]) torch.Size([182580])
torch.Size([22767, 3]) torch.Size([22767])
torch.Size([22799, 3]) torch.Size([22799])
No of params:  17697
Loss on minibatch:  2.0859084129333496</code></pre>
</div>
</div>
<div id="9354902a" class="cell" data-execution_count="46">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb78-1">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xtr]                                 </span>
<span id="cb78-2">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> emb_size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1)</span>
<span id="cb78-3">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb78-4">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Ytr)   </span>
<span id="cb78-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss on whole training set: "</span>, loss.item())</span>
<span id="cb78-6"></span>
<span id="cb78-7">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xdev]                                </span>
<span id="cb78-8">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> emb_size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1)</span>
<span id="cb78-9">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb78-10">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Ydev)   </span>
<span id="cb78-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss on dev/validation set: "</span>, loss.item())</span>
<span id="cb78-12"></span>
<span id="cb78-13">emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[Xte]                                </span>
<span id="cb78-14">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, block_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> emb_size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1)</span>
<span id="cb78-15">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb78-16">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, Yte)   </span>
<span id="cb78-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss on test set: "</span>, loss.item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Loss on whole training set:  2.117095947265625
Loss on dev/validation set:  2.1767637729644775
Loss on test set:  2.1748299598693848</code></pre>
</div>
</div>
</section>
<section id="summary-of-our-final-code-conclusion" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-our-final-code-conclusion">summary of our final code, conclusion</h2>
<div id="582cd2a2" class="cell" data-execution_count="47">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb80-1">plt.plot(stepi, lossi)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/index_files/figure-html/cell-48-output-1.png" width="568" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="70b97c29" class="cell" data-execution_count="48">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb81-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb81-2">plt.scatter(C[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].data, C[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].data, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb81-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(C.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb81-4">    plt.text(C[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].item(),C[i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].item(), itos[i], ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span>
<span id="cb81-5">plt.grid(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/index_files/figure-html/cell-49-output-1.png" width="662" height="633" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can see the loss on validation set and test set are quite similar as we are not try different scenarios to calibrate/tune hyperparamters much. So they both have the same suprise to the model training by <code>Xtr</code>.</p>
<p>We still have rooms for improvement!</p>
</section>
<section id="sampling-from-the-model" class="level2">
<h2 class="anchored" data-anchor-id="sampling-from-the-model">sampling from the model</h2>
<p>But our networks now can generate more name-like name!</p>
<div id="b3778f33" class="cell" data-execution_count="49">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb82-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb82-2"></span>
<span id="cb82-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb82-4">    </span>
<span id="cb82-5">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb82-6">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize with all ...</span></span>
<span id="cb82-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb82-8">      emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[torch.tensor([context])] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1,block_size,d)</span></span>
<span id="cb82-9">      h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(emb.view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1)</span>
<span id="cb82-10">      logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2</span>
<span id="cb82-11">      probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.softmax(logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb82-12">      ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(probs, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb82-13">      context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [ix]</span>
<span id="cb82-14">      out.append(ix)</span>
<span id="cb82-15">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb82-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb82-17">    </span>
<span id="cb82-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(itos[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> out))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>eria.
kayanniee.
mad.
rylle.
evers.
endra.
kalie.
kaillie.
shivonna.
keisenna.
araelyzion.
kalin.
shubergenghies.
kindrendy.
pan.
puon.
ubertedir.
yarleyel.
yule.
myshelda.</code></pre>
</div>
</div>
</section>
<section id="google-collab-new-notebook-advertisement" class="level2">
<h2 class="anchored" data-anchor-id="google-collab-new-notebook-advertisement">google collab (new!!) notebook advertisement</h2>
<p>Colab link: <a href="https://colab.research.google.com/drive/1YIfmkftLrz6MPTOO9Vwqrop2Q5llHIGK?usp=sharing" class="uri">https://colab.research.google.com/drive/1YIfmkftLrz6MPTOO9Vwqrop2Q5llHIGK?usp=sharing</a></p>
<p>Thanks Andrej!</p>
</section>
</section>
<section id="resources" class="level1">
<h1>resources</h1>
<ol type="1">
<li><a href="https://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf"><strong>A Neural Probabilistic Language Model</strong>, Bengio et al.&nbsp;(2003)</a></li>
<li><a href="https://www.youtube.com/watch?v=TCH_1BHY58I">Video lecturer</a></li>
<li><a href="https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part2_mlp.ipynb">Notebook</a></li>
<li><a href="https://github.com/karpathy/makemore"><code>makemore</code> on Github</a></li>
<li><a href="https://pytorch.org/docs/main/tensors.html"><code>torch.Tensor()</code> documentation</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>til</category>
  <category>python</category>
  <category>andrej karpathy</category>
  <category>nn-z2h</category>
  <category>neural networks</category>
  <guid>https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/</guid>
  <pubDate>Tue, 19 Nov 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-11-20-nn-z2h-p3/NLM_Bengio_etal.png" medium="image" type="image/png" height="121" width="144"/>
</item>
<item>
  <title>NN-Z2H Lesson 2: The spelled-out intro to language modeling - building makemore</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-11-15-nn-z2h-p2/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important callout-titled" title="This is not orginal content!">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This is not orginal content!
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is my study notes / codes along with Andrej Karpathy’s “<a href="https://www.youtube.com/watch?v=VMj-3S1tku0&amp;list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ">Neural Networks: Zero to Hero</a>” series.</p>
</div>
</div>
<section id="part-1-intro" class="level1">
<h1>PART 1: intro</h1>
<blockquote class="blockquote">
<p><code>makemore</code> takes one text file as input, where each line is assumed to be one training thing, and generates more things like it. Under the hood, it is an autoregressive character-level language model, with a wide choice of models from bigrams all the way to a Transformer (exactly as seen in GPT).</p>
</blockquote>
<section id="reading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="reading-and-exploring-the-dataset">reading and exploring the dataset</h2>
<div id="90420c5c" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"></span>
<span id="cb1-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/karpathy/makemore/refs/heads/master/names.txt"</span></span>
<span id="cb1-4">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>).iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tolist()</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(words))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>['emma', 'olivia', 'ava', 'isabella', 'sophia', 'charlotte', 'mia', 'amelia', 'harper', 'evelyn']
32033</code></pre>
</div>
</div>
<div id="a87bd877" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of chars for the shortest word: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(w) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words))</span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No of chars for the longest word: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(w) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>No of chars for the shortest word:  2
No of chars for the longest word:  15</code></pre>
</div>
</div>
<p>By looking into (1) the order of characters in individual word, and (2) that pattern for the whole dataset of 32k words, we will try to infer which character is likely to follow a character or chain of characters.</p>
<p>We will first building a <code>bigrams</code> languague model - which only works will 2 characters at a time - look at the current character and try to predict the next one. We are just following this local structure!</p>
<p>It’s just a simple (and weak) model but a good way to start.</p>
</section>
<section id="exploring-the-bigrams-in-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="exploring-the-bigrams-in-the-dataset">exploring the <code>bigrams</code> in the dataset</h2>
<div id="4d766908" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]:</span>
<span id="cb5-2">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;S&gt;'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;E&gt;'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># special start and ending token, `list()` will turn all character in word to list</span></span>
<span id="cb5-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb5-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ch1, ch2)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;S&gt; e
e m
m m
m a
a &lt;E&gt;
&lt;S&gt; o
o l
l i
i v
v i
i a
a &lt;E&gt;
&lt;S&gt; a
a v
v a
a &lt;E&gt;</code></pre>
</div>
</div>
</section>
<section id="counting-bigrams-in-a-python-dictionary" class="level2">
<h2 class="anchored" data-anchor-id="counting-bigrams-in-a-python-dictionary">counting <code>bigrams</code> in a python dictionary</h2>
<p>In order to learn statistics about what character is more likely to follow another character, the simplest way is <code>counting</code>.</p>
<div id="ce845d3e" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dict to store all pair of character</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do it for first five words</span></span>
<span id="cb7-3">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;S&gt;'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;E&gt;'</span>]</span>
<span id="cb7-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb7-5">    bigram <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ch1, ch2)</span>
<span id="cb7-6">    b[bigram] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.get(bigram, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(ch1, ch2)</span></span></code></pre></div>
</details>
</div>
<div id="a068ca62" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(b.items(), key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> kv: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>kv[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>[(('a', '&lt;E&gt;'), 5),
 (('i', 'a'), 2),
 (('&lt;S&gt;', 'e'), 1),
 (('e', 'm'), 1),
 (('m', 'm'), 1),
 (('m', 'a'), 1),
 (('&lt;S&gt;', 'o'), 1),
 (('o', 'l'), 1),
 (('l', 'i'), 1),
 (('i', 'v'), 1),
 (('v', 'i'), 1),
 (('&lt;S&gt;', 'a'), 1),
 (('a', 'v'), 1),
 (('v', 'a'), 1),
 (('&lt;S&gt;', 'i'), 1),
 (('i', 's'), 1),
 (('s', 'a'), 1),
 (('a', 'b'), 1),
 (('b', 'e'), 1),
 (('e', 'l'), 1),
 (('l', 'l'), 1),
 (('l', 'a'), 1),
 (('&lt;S&gt;', 's'), 1),
 (('s', 'o'), 1),
 (('o', 'p'), 1),
 (('p', 'h'), 1),
 (('h', 'i'), 1)]</code></pre>
</div>
</div>
</section>
<section id="counting-bigrams-in-a-2d-torch-tensor-training-the-model" class="level2">
<h2 class="anchored" data-anchor-id="counting-bigrams-in-a-2d-torch-tensor-training-the-model">counting <code>bigrams</code> in a 2D <code>torch</code> tensor (“training the model”)</h2>
<p>Instead of using Python dictionary, we will use <code>torch</code> 2D array to store this information.</p>
<div id="d1ef4f1e" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span></code></pre></div>
</details>
</div>
<div id="cf80b73b" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.int32)</span>
<span id="cb11-2">a</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>tensor([[0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0]], dtype=torch.int32)</code></pre>
</div>
</div>
<p>How can we access/assign a value in torch array:</p>
<div id="1b3ba5fd" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb13-2">a</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>tensor([[ 0,  0,  0,  0,  0],
        [10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10]], dtype=torch.int32)</code></pre>
</div>
</div>
<p>Now the english alphabet contain 26 characters, we will need to capture the <code>&lt;S&gt;</code> and <code>&lt;E&gt;</code> also. So it would be 28 x 28 array.</p>
<div id="a7a1c85b" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.int32)</span></code></pre></div>
</details>
</div>
<p>This will collect all the characters used in our dataset (join all words to a massive string and pass it to a <code>set()</code>, which will remove duplicate). With such a large dataset, all the english characters were used.</p>
<div id="98c84379" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1">chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(words))))</span>
<span id="cb16-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(chars) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 26 </span></span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with index</span></span>
<span id="cb16-5">stoi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {s:i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chars)}</span>
<span id="cb16-6">stoi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;S&gt;'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span></span>
<span id="cb16-7">stoi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;E&gt;'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span></span>
<span id="cb16-8">stoi</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>{'a': 0,
 'b': 1,
 'c': 2,
 'd': 3,
 'e': 4,
 'f': 5,
 'g': 6,
 'h': 7,
 'i': 8,
 'j': 9,
 'k': 10,
 'l': 11,
 'm': 12,
 'n': 13,
 'o': 14,
 'p': 15,
 'q': 16,
 'r': 17,
 's': 18,
 't': 19,
 'u': 20,
 'v': 21,
 'w': 22,
 'x': 23,
 'y': 24,
 'z': 25,
 '&lt;S&gt;': 26,
 '&lt;E&gt;': 27}</code></pre>
</div>
</div>
<div id="fa7cba89" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words:</span>
<span id="cb18-2">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;S&gt;'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;E&gt;'</span>]</span>
<span id="cb18-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb18-4">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb18-5">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb18-6">    N[ix1, ix2] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</details>
</div>
</section>
<section id="visualizing-the-bigram-tensor" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-the-bigram-tensor">visualizing the <code>bigram</code> tensor</h2>
<div id="0443fcaf" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">itos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i:s <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s, i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> stoi.items()}</span></code></pre></div>
</details>
</div>
<div id="6770c9cb" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb20-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb20-3"></span>
<span id="cb20-4">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>))</span>
<span id="cb20-5">plt.imshow(N, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blues'</span>)</span>
<span id="cb20-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>):</span>
<span id="cb20-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>):</span>
<span id="cb20-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot character strings with number of time</span></span>
<span id="cb20-9">    chstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itos[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> itos[j]</span>
<span id="cb20-10">    plt.text(j, i, chstr, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)</span>
<span id="cb20-11">    plt.text(j, i, N[i, j].item(), ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)</span>
<span id="cb20-12">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-15-nn-z2h-p2/index_files/figure-html/cell-14-output-1.png" width="1212" height="1202" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="deleting-spurious-s-and-e-tokens-in-favor-of-a-single-.-token" class="level2">
<h2 class="anchored" data-anchor-id="deleting-spurious-s-and-e-tokens-in-favor-of-a-single-.-token">deleting spurious (S) and (E) tokens in favor of a single <code>.</code> token</h2>
<p><code>&lt;S&gt;</code>, and <code>&lt;E&gt;</code> look a bit annoying. let’s replace them by simple <code>.</code>.</p>
<div id="a9aa94c3" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.int32)</span>
<span id="cb21-2">stoi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {s:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chars)}</span>
<span id="cb21-3">stoi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-4">itos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i:s <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s, i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> stoi.items()}</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words:</span>
<span id="cb21-7">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>]</span>
<span id="cb21-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb21-9">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb21-10">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb21-11">    N[ix1, ix2] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</details>
</div>
<div id="91cf4cae" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb22-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb22-3"></span>
<span id="cb22-4">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>))</span>
<span id="cb22-5">plt.imshow(N, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blues'</span>)</span>
<span id="cb22-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>):</span>
<span id="cb22-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>):</span>
<span id="cb22-8">        chstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itos[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> itos[j]</span>
<span id="cb22-9">        plt.text(j, i, chstr, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb22-10">        plt.text(j, i, N[i, j].item(), ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb22-11">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-15-nn-z2h-p2/index_files/figure-html/cell-16-output-1.png" width="1202" height="1202" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="sampling-from-the-model" class="level2">
<h2 class="anchored" data-anchor-id="sampling-from-the-model">sampling from the model</h2>
<p>Taking the first column of the array.</p>
<div id="0c5017d8" class="cell" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">N[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>tensor([   0, 4410, 1306, 1542, 1690, 1531,  417,  669,  874,  591, 2422, 2963,
        1572, 2538, 1146,  394,  515,   92, 1639, 2055, 1308,   78,  376,  307,
         134,  535,  929], dtype=torch.int32)</code></pre>
</div>
</div>
<p>Column-wise probability.</p>
<div id="943a9aff" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb25-2">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb25-3">p</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>tensor([0.0000, 0.1377, 0.0408, 0.0481, 0.0528, 0.0478, 0.0130, 0.0209, 0.0273,
        0.0184, 0.0756, 0.0925, 0.0491, 0.0792, 0.0358, 0.0123, 0.0161, 0.0029,
        0.0512, 0.0642, 0.0408, 0.0024, 0.0117, 0.0096, 0.0042, 0.0167, 0.0290])</code></pre>
</div>
</div>
<p>Creating random number with Pytorch generator at a state.</p>
<div id="7bcac7cb" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb27-2">p_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb27-3">p_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p_test.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
</details>
</div>
<div id="23e1dc99" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">torch.multinomial(p_test, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>tensor([1, 1, 2, 0, 0, 2, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 2, 0, 0,
        1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1,
        0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0,
        0, 1, 1, 1])</code></pre>
</div>
</div>
<p>Now back to our data, generate a tensor with 1 value from the <code>p</code> vector.</p>
<div id="88eebf09" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb30-2">ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(p, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb30-3">itos[ix]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>'j'</code></pre>
</div>
</div>
<p>Let’s automate it:</p>
<div id="83d64434" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb32-2"></span>
<span id="cb32-3">ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb32-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb32-5">  p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N[ix].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb32-6">  p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb32-7">  ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(p, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb32-8">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(itos[ix])</span>
<span id="cb32-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb32-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>j
u
n
i
d
e
.</code></pre>
</div>
</div>
<p>And more, joining the last result to single word, and make new 10 names:</p>
<div id="691ded3f" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb34-4">  </span>
<span id="cb34-5">  out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb34-6">  ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb34-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb34-8">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N[ix].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb34-9">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb34-10"></span>
<span id="cb34-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p = torch.ones(27) / 27.0</span></span>
<span id="cb34-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the result look terrible, but compare to an un-trained model for eg p - uncomment to code above, they are still like names.</span></span>
<span id="cb34-13">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(p, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb34-14">    out.append(itos[ix])</span>
<span id="cb34-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb34-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb34-17">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(out))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>junide.
janasah.
p.
cony.
a.
nn.
kohin.
tolian.
juee.
ksahnaauranilevias.</code></pre>
</div>
</div>
</section>
<section id="efficiency-vectorized-normalization-of-the-rows-tensor-broadcasting" class="level2">
<h2 class="anchored" data-anchor-id="efficiency-vectorized-normalization-of-the-rows-tensor-broadcasting">efficiency! vectorized normalization of the rows, tensor broadcasting</h2>
<p>We just fetching a row of <code>N</code> from the counts matrix, and then always do the same things: converting to float, dividing. That’s not efficient! We now will optimize this:</p>
<div id="a210b0c2" class="cell" data-execution_count="23">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># param 1 helps summing horizontally, by rows</span></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># keepdim keeps the dimension the output is still 2D array with 1 column for each row, not a vertical vector entirely</span></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tensor already support to broadcast the row sum allowing this dividing (keepdim helped not to mess the broadcast)</span></span>
<span id="cb36-5">P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> P.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb36-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inplace operator instead of P = P / P.sum(1, keepdim=True), take care of memory!</span></span></code></pre></div>
</details>
</div>
<div id="93edc4dc" class="cell" data-execution_count="24">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb37-2"></span>
<span id="cb37-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb37-4">  </span>
<span id="cb37-5">  out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb37-6">  ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb37-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb37-8">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P[ix]</span>
<span id="cb37-9">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(p, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb37-10">    out.append(itos[ix])</span>
<span id="cb37-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb37-12">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb37-13">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(out))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>junide.
janasah.
p.
cony.
a.
nn.
kohin.
tolian.
juee.
ksahnaauranilevias.</code></pre>
</div>
</div>
</section>
<section id="loss-function-the-negative-log-likelihood-of-the-data-under-our-model" class="level2">
<h2 class="anchored" data-anchor-id="loss-function-the-negative-log-likelihood-of-the-data-under-our-model">loss function (the negative log likelihood of the data under our model)</h2>
<p>We’ve just trained and sampled from the model, iteratively sampled the next character and fed it in each time and got the next one. Now we need to somehow measure the quality of the model.</p>
<p>How good is it in predicting? Gimme a number!</p>
<div id="53f5307c" class="cell" data-execution_count="25">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># showing bigram for the first 3 words, along with the probability inferred by our model (`P`)</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the higher the prob, the better of prediction</span></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># since a fair (under no data) probability of occuring a character is roughly 1/27 ~ 4%, any prob higher than 4% should be good</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we need to combine all the prob to a single 1 number, measuring how good is our model?</span></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># since multiplying all the prob resulting a very very small number, we will approach by the log likelihood function</span></span>
<span id="cb39-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the log likelihood is just the sum of log of individual multiplier</span></span>
<span id="cb39-7"></span>
<span id="cb39-8">log_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb39-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]:</span>
<span id="cb39-10">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>]</span>
<span id="cb39-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb39-12">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb39-13">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb39-14">    prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P[ix1, ix2]</span>
<span id="cb39-15">    log_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.log(prob)</span>
<span id="cb39-16">    log_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> log_prob</span>
<span id="cb39-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ch1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>ch2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>log_prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb39-18"></span>
<span id="cb39-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>log_likelihood<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print both the variable name and its value, for the first 3 words</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>.e: 0.0478 -3.0408
em: 0.0377 -3.2793
mm: 0.0253 -3.6772
ma: 0.3899 -0.9418
a.: 0.1960 -1.6299
.o: 0.0123 -4.3982
ol: 0.0780 -2.5508
li: 0.1777 -1.7278
iv: 0.0152 -4.1867
vi: 0.3541 -1.0383
ia: 0.1381 -1.9796
a.: 0.1960 -1.6299
.a: 0.1377 -1.9829
av: 0.0246 -3.7045
va: 0.2495 -1.3882
a.: 0.1960 -1.6299
log_likelihood=tensor(-38.7856)</code></pre>
</div>
</div>
<p>If all the probs equal to 1, the logs will be 0. If they close to 0, the logs will be more negative. We want to use this as a loss function, meaning lower the better, so we will invert it:</p>
<div id="02d4b5e7" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1">neg_log_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb41-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb41-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words:</span>
<span id="cb41-4">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>]</span>
<span id="cb41-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb41-6">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb41-7">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb41-8">    prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P[ix1, ix2]</span>
<span id="cb41-9">    log_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.log(prob)</span>
<span id="cb41-10">    neg_log_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>log_prob</span>
<span id="cb41-11">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb41-12"></span>
<span id="cb41-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>neg_log_likelihood<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb41-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>neg_log_likelihood<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>neg_log_likelihood=tensor(559891.7500)
2.454094171524048</code></pre>
</div>
</div>
<p>Finally we insert a count and calculate the “normalized” (or average) negative log likelihood. The lower of this number, the better model we have.</p>
<p>You can test with your name:</p>
<div id="251942d3" class="cell" data-execution_count="27">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1">neg_log_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb43-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb43-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tuan'</span>]:</span>
<span id="cb43-4">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>]</span>
<span id="cb43-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb43-6">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb43-7">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb43-8">    prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P[ix1, ix2]</span>
<span id="cb43-9">    log_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.log(prob)</span>
<span id="cb43-10">    neg_log_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>log_prob</span>
<span id="cb43-11">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb43-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ch1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>ch2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>log_prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb43-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>neg_log_likelihood<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb43-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>neg_log_likelihood<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>.t: 0.0408 -3.1983
tu: 0.0140 -4.2684
ua: 0.0520 -2.9566
an: 0.1605 -1.8296
n.: 0.3690 -0.9969
neg_log_likelihood=tensor(13.2498)
2.649962902069092</code></pre>
</div>
</div>
<p><code>tu</code> is not common in our dataset.</p>
</section>
<section id="model-smoothing-with-fake-counts" class="level2">
<h2 class="anchored" data-anchor-id="model-smoothing-with-fake-counts">model smoothing with fake counts</h2>
<p>For a pair of bigram that does not exist in the dataset, for eg <code>jq</code>, the prob will be zero and log likelihood will be infinity. We can kind of smooth our model by adding constant “fake counts” to the model:</p>
<div id="a6136c3c" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1">P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span></code></pre></div>
</details>
</div>
<p><code>1</code> is decent number, the more you added, you’ll have a more uniformed distribution, the less, the more peaked distribution you have.</p>
</section>
</section>
<section id="part-2-the-neural-network-approach---intro" class="level1">
<h1>PART 2: the neural network approach - intro</h1>
<p>Now we will try to cast the problem of bigram character level of language modeling into the <strong>neural network framework</strong>. We first understand how to feed it in with 1 point dataset - only the first word <code>emma</code>:</p>
<section id="creating-the-bigram-dataset-for-the-neural-net" class="level2">
<h2 class="anchored" data-anchor-id="creating-the-bigram-dataset-for-the-neural-net">creating the <code>bigram</code> dataset for the neural net</h2>
<div id="c0374fa0" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creating training set of bigram(x, y)</span></span>
<span id="cb46-2">xs, ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb46-3"></span>
<span id="cb46-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb46-5">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>]</span>
<span id="cb46-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb46-7">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb46-8">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb46-9">    xs.append(ix1)</span>
<span id="cb46-10">    ys.append(ix2)</span>
<span id="cb46-11"></span>
<span id="cb46-12">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(xs) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># both .tensor() and .Tensor() work!</span></span>
<span id="cb46-13">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(ys)</span>
<span id="cb46-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://stackoverflow.com/questions/51911749/what-is-the-difference-between-torch-tensor-and-torch-tensor</span></span>
<span id="cb46-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .tensor() infers dtype as int64 while .Tensor() infers dtype as float32, in this case</span></span></code></pre></div>
</details>
</div>
<p>The input and output tensor for the first word will be look like this:</p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource {md} number-lines code-with-copy"><code class="sourceCode"><span id="cb47-1">&gt; print(ch1,ch2)</span>
<span id="cb47-2">. e</span>
<span id="cb47-3">e m</span>
<span id="cb47-4">m m</span>
<span id="cb47-5">m a</span>
<span id="cb47-6">a .</span>
<span id="cb47-7">&gt; xs</span>
<span id="cb47-8">tensor([ 0,  5, 13, 13,  1])</span>
<span id="cb47-9">&gt; ys</span>
<span id="cb47-10">tensor([ 5, 13, 13,  1,  0])</span></code></pre></div>
</section>
<section id="feeding-integers-into-neural-nets-one-hot-encodings" class="level2">
<h2 class="anchored" data-anchor-id="feeding-integers-into-neural-nets-one-hot-encodings">feeding integers into neural nets? one-hot encodings</h2>
<div id="6519ea17" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb48-2"></span>
<span id="cb48-3">xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.one_hot(xs, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remember to cast integer to float, which can be fed to neural nets</span></span>
<span id="cb48-4">xenc</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>tensor([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0.]])</code></pre>
</div>
</div>
<div id="107f7c42" class="cell" data-execution_count="31">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1">xenc.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>torch.Size([5, 27])</code></pre>
</div>
</div>
<div id="8444a1f8" class="cell" data-execution_count="32">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1">plt.imshow(xenc, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blues"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-15-nn-z2h-p2/index_files/figure-html/cell-33-output-1.png" width="558" height="138" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="the-neural-net-one-linear-layer-of-neurons-implemented-with-matrix-multiplication" class="level2">
<h2 class="anchored" data-anchor-id="the-neural-net-one-linear-layer-of-neurons-implemented-with-matrix-multiplication">the “neural net”: one linear layer of neurons implemented with matrix multiplication</h2>
<div id="cd8385ee" class="cell" data-execution_count="33">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb53-1">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fulfill a tensor with random number followed normal distribution, 1 is indicating 1 single neuron</span></span>
<span id="cb53-2">xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @ is matrix mult operator in PyTorch</span></span>
<span id="cb53-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (5, 27) @ (27, 1) will result (5, 1) matrix</span></span>
<span id="cb53-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no bias is added for now</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>tensor([[ 0.2084],
        [-0.1912],
        [-0.7102],
        [-0.7102],
        [ 0.5453]])</code></pre>
</div>
</div>
<p>This is 1 neuron only, now we want to evaluate all 27 characters using only 5 inputs from the first word, we’ll make 27 neurons:</p>
<div id="9395ae9a" class="cell" data-execution_count="34">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb55-1">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>))</span>
<span id="cb55-2">xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W </span>
<span id="cb55-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (5, 27) @ (27, 27) will result (5, 27) matrix</span></span>
<span id="cb55-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no bias is added for now</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>tensor([[ 1.1742, -0.1228,  0.3312, -1.7074, -0.5036,  0.5717,  0.5462,  1.2425,
          2.2197,  0.9381, -0.4647, -1.1784, -0.0046,  1.5661,  0.1240, -0.1818,
         -0.1129,  1.1559, -0.2303, -0.2885, -0.8589, -0.6829,  0.6188,  0.6673,
         -0.6109,  1.9768,  0.2832],
        [-1.3979, -1.4019, -3.2251, -0.6767,  0.3323,  0.2407,  0.5753, -0.2401,
          1.0848,  0.1452,  0.1295,  0.4613,  2.3659,  1.4620,  0.3717, -1.1485,
         -0.5063, -0.4455, -0.2564, -0.6005,  1.9493, -0.3160,  0.7859, -1.0101,
          0.3456,  0.9161,  0.5722],
        [-1.2995, -0.2011,  0.0972,  0.1959,  0.5090,  0.0080, -0.8293, -0.9525,
         -1.0965,  0.6003,  0.7801, -1.1612, -0.4070,  2.1902, -0.0264,  0.9155,
          1.4465, -0.3992,  0.0044,  0.0918,  2.1084,  0.7271, -0.5992, -0.1443,
          0.1657, -0.0258, -0.4744],
        [-1.2995, -0.2011,  0.0972,  0.1959,  0.5090,  0.0080, -0.8293, -0.9525,
         -1.0965,  0.6003,  0.7801, -1.1612, -0.4070,  2.1902, -0.0264,  0.9155,
          1.4465, -0.3992,  0.0044,  0.0918,  2.1084,  0.7271, -0.5992, -0.1443,
          0.1657, -0.0258, -0.4744],
        [ 0.4732,  0.0148, -0.4303, -0.3870, -2.1335, -1.9046, -0.8460,  1.0632,
         -0.7406,  1.9063, -0.7375,  0.8191, -1.1415,  0.1678, -0.1831,  0.5425,
         -1.5502, -0.3083,  0.4649, -0.8271,  0.8959,  0.6717,  1.1916,  2.1147,
          0.3208, -1.3000, -1.0078]])</code></pre>
</div>
</div>
</section>
<section id="transforming-neural-net-outputs-into-probabilities-the-softmax" class="level2">
<h2 class="anchored" data-anchor-id="transforming-neural-net-outputs-into-probabilities-the-softmax">transforming neural net outputs into probabilities: the softmax</h2>
<p>So far we have fed 5 inputs to 27 neurons for 27 characters in <strong>the first layer</strong> of the neural net. We notice that the output number ranges from negative to positive while we want “how likely of the next characters”. It would be counts, or probs, hence we exponentiate the logits, then dividing row-wise total to get the prob of each character.</p>
<p>This is call the softmax!</p>
<div id="f8cf4aab" class="cell" data-execution_count="35">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># log-counts</span></span>
<span id="cb57-2">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># equivalent N</span></span>
<span id="cb57-3">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb57-4">probs</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>tensor([[0.0609, 0.0166, 0.0262, 0.0034, 0.0114, 0.0333, 0.0325, 0.0652, 0.1732,
         0.0481, 0.0118, 0.0058, 0.0187, 0.0901, 0.0213, 0.0157, 0.0168, 0.0598,
         0.0149, 0.0141, 0.0080, 0.0095, 0.0349, 0.0367, 0.0102, 0.1359, 0.0250],
        [0.0051, 0.0051, 0.0008, 0.0105, 0.0288, 0.0263, 0.0367, 0.0162, 0.0611,
         0.0239, 0.0235, 0.0328, 0.2201, 0.0891, 0.0300, 0.0066, 0.0125, 0.0132,
         0.0160, 0.0113, 0.1451, 0.0151, 0.0453, 0.0075, 0.0292, 0.0516, 0.0366],
        [0.0059, 0.0177, 0.0239, 0.0264, 0.0361, 0.0218, 0.0095, 0.0084, 0.0072,
         0.0395, 0.0473, 0.0068, 0.0144, 0.1937, 0.0211, 0.0541, 0.0921, 0.0145,
         0.0218, 0.0238, 0.1785, 0.0448, 0.0119, 0.0188, 0.0256, 0.0211, 0.0135],
        [0.0059, 0.0177, 0.0239, 0.0264, 0.0361, 0.0218, 0.0095, 0.0084, 0.0072,
         0.0395, 0.0473, 0.0068, 0.0144, 0.1937, 0.0211, 0.0541, 0.0921, 0.0145,
         0.0218, 0.0238, 0.1785, 0.0448, 0.0119, 0.0188, 0.0256, 0.0211, 0.0135],
        [0.0377, 0.0239, 0.0153, 0.0160, 0.0028, 0.0035, 0.0101, 0.0681, 0.0112,
         0.1582, 0.0112, 0.0533, 0.0075, 0.0278, 0.0196, 0.0405, 0.0050, 0.0173,
         0.0374, 0.0103, 0.0576, 0.0460, 0.0774, 0.1949, 0.0324, 0.0064, 0.0086]])</code></pre>
</div>
</div>
</section>
<section id="summary-preview-to-next-steps-reference-to-micrograd" class="level2">
<h2 class="anchored" data-anchor-id="summary-preview-to-next-steps-reference-to-micrograd">summary, preview to next steps, reference to <code>micrograd</code></h2>
<div id="9126eee2" class="cell" data-execution_count="36">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># randomly initialize 27 neurons' weights. each neuron receives 27 inputs</span></span>
<span id="cb59-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to make sure we all have same random</span></span>
<span id="cb59-3">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g)</span>
<span id="cb59-4">xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.one_hot(xs, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input to the network: one-hot encoding</span></span>
<span id="cb59-5">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict log-counts</span></span>
<span id="cb59-6">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts, equivalent to N</span></span>
<span id="cb59-7">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probabilities for next character</span></span>
<span id="cb59-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># btw: the last 2 lines here are together called a 'softmax'</span></span></code></pre></div>
</details>
</div>
<div id="278bcbaa" class="cell" data-execution_count="37">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1">probs.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>torch.Size([5, 27])</code></pre>
</div>
</div>
<p>Below is detail explaination for each example from our 5-datapoint dataset.</p>
<div id="33c9ae6e" class="cell" data-execution_count="38">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb62-1">nlls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb62-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb62-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i-th bigram:</span></span>
<span id="cb62-4">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xs[i].item() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input character index</span></span>
<span id="cb62-5">  y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ys[i].item() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># label character index</span></span>
<span id="cb62-6">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--------'</span>)</span>
<span id="cb62-7">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'bigram example </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>itos[x]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>itos[y]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (indexes </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb62-8">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input to the neural net:'</span>, x)</span>
<span id="cb62-9">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output probabilities from the neural net:'</span>, probs[i])</span>
<span id="cb62-10">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label (actual next character):'</span>, y)</span>
<span id="cb62-11">  p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probs[i, y]</span>
<span id="cb62-12">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'probability assigned by the net to the the correct character:'</span>, p.item())</span>
<span id="cb62-13">  logp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.log(p)</span>
<span id="cb62-14">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log likelihood:'</span>, logp.item())</span>
<span id="cb62-15">  nll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>logp</span>
<span id="cb62-16">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'negative log likelihood:'</span>, nll.item())</span>
<span id="cb62-17">  nlls[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nll</span>
<span id="cb62-18"></span>
<span id="cb62-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'========='</span>)</span>
<span id="cb62-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'average negative log likelihood, i.e. loss ='</span>, nlls.mean().item())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>--------
bigram example 1: .e (indexes 0,5)
input to the neural net: 0
output probabilities from the neural net: tensor([0.0609, 0.0166, 0.0262, 0.0034, 0.0114, 0.0333, 0.0325, 0.0652, 0.1732,
        0.0481, 0.0118, 0.0058, 0.0187, 0.0901, 0.0213, 0.0157, 0.0168, 0.0598,
        0.0149, 0.0141, 0.0080, 0.0095, 0.0349, 0.0367, 0.0102, 0.1359, 0.0250])
label (actual next character): 5
probability assigned by the net to the the correct character: 0.03332865983247757
log likelihood: -3.4013376235961914
negative log likelihood: 3.4013376235961914
--------
bigram example 2: em (indexes 5,13)
input to the neural net: 5
output probabilities from the neural net: tensor([0.0051, 0.0051, 0.0008, 0.0105, 0.0288, 0.0263, 0.0367, 0.0162, 0.0611,
        0.0239, 0.0235, 0.0328, 0.2201, 0.0891, 0.0300, 0.0066, 0.0125, 0.0132,
        0.0160, 0.0113, 0.1451, 0.0151, 0.0453, 0.0075, 0.0292, 0.0516, 0.0366])
label (actual next character): 13
probability assigned by the net to the the correct character: 0.08912799507379532
log likelihood: -2.4176816940307617
negative log likelihood: 2.4176816940307617
--------
bigram example 3: mm (indexes 13,13)
input to the neural net: 13
output probabilities from the neural net: tensor([0.0059, 0.0177, 0.0239, 0.0264, 0.0361, 0.0218, 0.0095, 0.0084, 0.0072,
        0.0395, 0.0473, 0.0068, 0.0144, 0.1937, 0.0211, 0.0541, 0.0921, 0.0145,
        0.0218, 0.0238, 0.1785, 0.0448, 0.0119, 0.0188, 0.0256, 0.0211, 0.0135])
label (actual next character): 13
probability assigned by the net to the the correct character: 0.19367089867591858
log likelihood: -1.6415950059890747
negative log likelihood: 1.6415950059890747
--------
bigram example 4: ma (indexes 13,1)
input to the neural net: 13
output probabilities from the neural net: tensor([0.0059, 0.0177, 0.0239, 0.0264, 0.0361, 0.0218, 0.0095, 0.0084, 0.0072,
        0.0395, 0.0473, 0.0068, 0.0144, 0.1937, 0.0211, 0.0541, 0.0921, 0.0145,
        0.0218, 0.0238, 0.1785, 0.0448, 0.0119, 0.0188, 0.0256, 0.0211, 0.0135])
label (actual next character): 1
probability assigned by the net to the the correct character: 0.01772291027009487
log likelihood: -4.032896995544434
negative log likelihood: 4.032896995544434
--------
bigram example 5: a. (indexes 1,0)
input to the neural net: 1
output probabilities from the neural net: tensor([0.0377, 0.0239, 0.0153, 0.0160, 0.0028, 0.0035, 0.0101, 0.0681, 0.0112,
        0.1582, 0.0112, 0.0533, 0.0075, 0.0278, 0.0196, 0.0405, 0.0050, 0.0173,
        0.0374, 0.0103, 0.0576, 0.0460, 0.0774, 0.1949, 0.0324, 0.0064, 0.0086])
label (actual next character): 0
probability assigned by the net to the the correct character: 0.0377422496676445
log likelihood: -3.276975154876709
negative log likelihood: 3.276975154876709
=========
average negative log likelihood, i.e. loss = 2.954097270965576</code></pre>
</div>
</div>
</section>
<section id="vectorized-loss" class="level2">
<h2 class="anchored" data-anchor-id="vectorized-loss">vectorized loss</h2>
<div id="190bb55f" class="cell" data-execution_count="39">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb64-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> probs[torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), ys].log().mean()</span>
<span id="cb64-2">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>tensor(2.9541)</code></pre>
</div>
</div>
</section>
<section id="backward-and-update-in-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="backward-and-update-in-pytorch">backward and update, in PyTorch</h2>
<div id="65caaa25" class="cell" data-execution_count="40">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb66-2">W.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set to zero the gradient</span></span>
<span id="cb66-3">loss.backward()</span>
<span id="cb66-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this can not yet run for now, PyTorch require the specification of require_grad</span></span></code></pre></div>
</details>
</div>
<div id="6b94a8b7" class="cell" data-execution_count="41">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb67-1">W.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> W.grad</span></code></pre></div>
</details>
</div>
</section>
<section id="putting-everything-together" class="level2">
<h2 class="anchored" data-anchor-id="putting-everything-together">putting everything together</h2>
<div id="ba5ef5b6" class="cell" data-execution_count="42">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the dataset</span></span>
<span id="cb68-2">xs, ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb68-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words:</span>
<span id="cb68-4">  chs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>]</span>
<span id="cb68-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ch1, ch2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(chs, chs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]):</span>
<span id="cb68-6">    ix1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch1]</span>
<span id="cb68-7">    ix2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stoi[ch2]</span>
<span id="cb68-8">    xs.append(ix1)</span>
<span id="cb68-9">    ys.append(ix2)</span>
<span id="cb68-10">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(xs)</span>
<span id="cb68-11">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(ys)</span>
<span id="cb68-12">num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xs.nelement()</span>
<span id="cb68-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number of examples: '</span>, num)</span>
<span id="cb68-14"></span>
<span id="cb68-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize the 'network'</span></span>
<span id="cb68-16">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb68-17">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>), generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g, requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>number of examples:  228146</code></pre>
</div>
</div>
<div id="526c9aed" class="cell" data-execution_count="43">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gradient descent</span></span>
<span id="cb70-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># after run 100 times, shorten the notebook</span></span>
<span id="cb70-3">  </span>
<span id="cb70-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb70-5">  xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.one_hot(xs, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input to the network: one-hot encoding</span></span>
<span id="cb70-6">  logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict log-counts</span></span>
<span id="cb70-7">  counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts, equivalent to N</span></span>
<span id="cb70-8">  probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probabilities for next character</span></span>
<span id="cb70-9">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>probs[torch.arange(num), ys].log().mean() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(W<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regularization loss</span></span>
<span id="cb70-10">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss.item())</span>
<span id="cb70-11">  </span>
<span id="cb70-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb70-13">  W.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set to zero the gradient</span></span>
<span id="cb70-14">  loss.backward()</span>
<span id="cb70-15">  </span>
<span id="cb70-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb70-17">  W.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> W.grad</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>3.768618583679199</code></pre>
</div>
</div>
<p>Looking back to the backprogation in the <a href="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/#doing-gradient-descent-optimization-manually-training-the-network">lesson 1</a>, everything look similar here:</p>
<table class="table">
<colgroup>
<col style="width: 25%">
<col style="width: 38%">
<col style="width: 36%">
</colgroup>
<thead>
<tr class="header">
<th>Part</th>
<th>This neural nets for bigram language modeling</th>
<th>Neural nets introduced in the lesson 1</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Forward pass</td>
<td><code>probs</code> , use negative log likelihood as loss function, doing classification</td>
<td><code>ypred</code> , use MSE for loss function, doing regression</td>
</tr>
<tr class="even">
<td>Backward pass</td>
<td>Same, offered by Torch.</td>
<td>Set grad of params to be zeros and do backpropagation.</td>
</tr>
<tr class="odd">
<td>Update loss</td>
<td>Same</td>
<td>Update the parameters, change the parameters following opposite direction to reduce the loss.</td>
</tr>
</tbody>
</table>
</section>
<section id="note-1-one-hot-encoding-really-just-selects-a-row-of-the-next-linear-layers-weight-matrix" class="level2">
<h2 class="anchored" data-anchor-id="note-1-one-hot-encoding-really-just-selects-a-row-of-the-next-linear-layers-weight-matrix">note 1: one-hot encoding really just selects a row of the next Linear layer’s weight matrix</h2>
<p>Look at the below code, <code>xenc @ W</code> is (5, 27) @ (27, 27) that will result (5, 27) matrix. Each <code>ix</code> row of that 5-rows result matrix should be the selection of corresponding character rows in the <code>W</code>.</p>
<div id="8e557da2" class="cell" data-execution_count="44">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb72-1">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict log-counts</span></span>
<span id="cb72-2">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts, equivalent to N</span></span>
<span id="cb72-3">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probabilities for next character</span></span></code></pre></div>
</details>
</div>
<p>So in this gradient-based framework, we start with a random array of parameters. By optimizing the loss function we will get the same result with the bigram approach (<code>W</code> and <code>N</code> are almost the same, it’s log count here why is count in bigram). That’s why we obtained the same loss!</p>
<p>The neural networks offer more flexibility!</p>
</section>
<section id="note-2-model-smoothing-as-regularization-loss" class="level2">
<h2 class="anchored" data-anchor-id="note-2-model-smoothing-as-regularization-loss">note 2: model smoothing as regularization loss</h2>
<p>Same with smoothing technique when we’ve doing the bigram model, gradient-based framework have an equivalent way for smoothing. We will try to incentivize <code>W</code> to be near zero. We augment to loss function by adding this: <code>0.01*(W**2).mean()</code>.</p>
<div id="010ac901" class="cell" data-execution_count="45">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb73-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>probs[torch.arange(num), ys].log().mean() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(W<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span></code></pre></div>
</details>
</div>
</section>
<section id="sampling-from-the-neural-net" class="level2">
<h2 class="anchored" data-anchor-id="sampling-from-the-neural-net">sampling from the neural net</h2>
<div id="87363de4" class="cell" data-execution_count="46">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># finally, sample from the 'neural net' model</span></span>
<span id="cb74-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Generator().manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)</span>
<span id="cb74-3"></span>
<span id="cb74-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb74-5">  </span>
<span id="cb74-6">  out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb74-7">  ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb74-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb74-9">    </span>
<span id="cb74-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ----------</span></span>
<span id="cb74-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BEFORE:</span></span>
<span id="cb74-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p = P[ix]</span></span>
<span id="cb74-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ----------</span></span>
<span id="cb74-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NOW:</span></span>
<span id="cb74-15">    xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.one_hot(torch.tensor([ix]), num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb74-16">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xenc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict log-counts</span></span>
<span id="cb74-17">    counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.exp() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counts, equivalent to N</span></span>
<span id="cb74-18">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> counts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probabilities for next character</span></span>
<span id="cb74-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ----------</span></span>
<span id="cb74-20">    </span>
<span id="cb74-21">    ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(p, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, replacement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>g).item()</span>
<span id="cb74-22">    out.append(itos[ix])</span>
<span id="cb74-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb74-24">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb74-25">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(out))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>juwjdjdjancqydjufhqyywecnw.
.
oiin.
toziasz.
twt.</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">conclusion</h2>
<p>What we’ve gone through:</p>
<ul>
<li>introduced bigrams language model? how we can train, sample, and evaluate the model;</li>
<li>we modeled by 2 different ways:
<ul>
<li>1st: counted out the freq of bigram and normalized it;</li>
<li>2nd: used a negative log likelihood loss as a guide to optimizing the counts matrix/array in a gradient-based framework;</li>
<li>we obtained the same result!</li>
</ul></li>
<li>gradient-based framework is more flexible. We’ve just modeled the simplest/dumpiest language model. In next lessons, we will complexify it.</li>
</ul>
<p>We are on the way out to <strong>transformer</strong>!</p>
<p>Thank you, Andrej!</p>
</section>
</section>
<section id="resources" class="level1">
<h1>resources</h1>
<ol type="1">
<li>YouTube video lecture: <a href="https://www.youtube.com/watch?v=PaCmpygFfXo" class="uri">https://www.youtube.com/watch?v=PaCmpygFfXo</a></li>
<li>Jupyter notebook files: <a href="https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part1_bigrams.ipynb" class="uri">https://github.com/karpathy/nn-zero-to-hero/blob/master/lectures/makemore/makemore_part1_bigrams.ipynb</a></li>
<li><code>makemore</code> Github repo: <a href="https://github.com/karpathy/makemore" class="uri">https://github.com/karpathy/makemore</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>til</category>
  <category>python</category>
  <category>andrej karpathy</category>
  <category>nn-z2h</category>
  <category>bigram</category>
  <category>neural networks</category>
  <guid>https://lktuan.github.io/blog/2024-11-15-nn-z2h-p2/</guid>
  <pubDate>Thu, 14 Nov 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-11-15-nn-z2h-p2/andrej_new.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data Science Project with Mamba, Python, and VS Code on Window</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-11-04-intro-to-mamba/</link>
  <description><![CDATA[ 





<section id="vì-sao-mà-mamba" class="level1">
<h1>Vì sao mà Mamba?</h1>
<p>Là một non-tech data coder, mình vẫn loay hoay việc setup một dự án có thể được tái sử dụng và dễ dàng deploy, đặc biệt là với dự án dạng data - khi mà DS/DA sẽ làm việc nhiều với notebook - rất anti production.</p>
<div class="columns">
<div class="column" style="width:60%;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-11-04-intro-to-mamba/meme_top.png" class="img-fluid figure-img"></p>
<figcaption>Arggg! Cơn đau đầu của non-tech làm data, nguồn ảnh <a href="https://www.analyticsvidhya.com/blog/2023/03/choosing-the-right-python-environment-tool-for-your-next-project/">Analytics Vidhya</a></figcaption>
</figure>
</div>
</div><div class="column" style="width:40%;">
<p><img src="https://lktuan.github.io/blog/2024-11-04-intro-to-mamba/meme_bottom.png" class="img-fluid"></p>
</div>
</div>
<p>Mình tìm hiểu một số công cụ và dưới đây là so sánh:</p>
<ol type="1">
<li><code>Mamba</code> ✅</li>
</ol>
<ul>
<li><p>Ưu điểm:</p>
<ul>
<li>Nhanh hơn Conda nhiều lần</li>
<li>Tương thích hoàn toàn với Conda</li>
<li>Quản lý được cả Python và non-Python dependencies</li>
<li>Tích hợp tốt với notebooks</li>
</ul></li>
</ul>
<ol start="2" type="1">
<li><code>Poetry</code></li>
</ol>
<ul>
<li><p>Ưu điểm:</p>
<ul>
<li>Dependency resolution tốt</li>
<li>Lock file chính xác</li>
</ul></li>
<li><p>Nhược điểm:</p>
<ul>
<li>Khó xử lý non-Python dependencies</li>
<li>Cần thêm setup cho notebook kernels</li>
<li>Không phù hợp lắm với data science</li>
</ul></li>
</ul>
<ol type="1">
<li><code>venv</code></li>
</ol>
<ul>
<li>Quá đơn giản cho data science</li>
<li>Không xử lý được dependencies phức tạp</li>
<li>Cần nhiều cấu hình thủ công</li>
</ul>
<ol start="4" type="1">
<li><code>pipenv</code></li>
</ol>
<ul>
<li>Tương tự Poetry nhưng ít tính năng hơn</li>
<li>Không phù hợp với data science</li>
</ul>
<ol start="5" type="1">
<li><code>uv</code></li>
</ol>
<ul>
<li>Mới và nhanh</li>
<li>Chưa đủ chín muồi cho data science</li>
<li>Thiếu nhiều tính năng cần thiết</li>
</ul>
<p>Xem ra <code>mamba</code> có vẻ ổn nhất, hãy đào sâu hơn về ưu điểm của nó:</p>
<ol type="1">
<li>Xử lý dependencies phức tạp</li>
</ol>
<ul>
<li>Data science thường cần nhiều thư viện với dependencies phức tạp (numpy, pandas, scipy, pytorch…)</li>
<li>Mamba giải quyết dependencies nhanh và hiệu quả hơn Conda</li>
<li>Xử lý tốt các thư viện có binary dependencies (như CUDA)</li>
</ul>
<ol start="2" type="1">
<li>Quản lý môi trường kernel cho notebooks</li>
</ol>
<ul>
<li>Tự động tích hợp với Jupyter notebooks</li>
<li>Dễ dàng switch giữa các môi trường trong notebook</li>
<li>Không cần cấu hình thêm cho notebook kernels</li>
</ul>
<p>Oke giờ hãy thử xem làm thế nào để tổ chức phát triển một dự án với mamba - VS Code trên Window.</p>
</section>
<section id="hướng-dẫn-cài-đặt-và-sử-dụng-mamba-với-vs-code-trên-windows" class="level1">
<h1>Hướng dẫn Cài đặt và Sử dụng Mamba với VS Code trên Windows</h1>
<section id="cài-đặt-mamba-trên-windows" class="level2">
<h2 class="anchored" data-anchor-id="cài-đặt-mamba-trên-windows">1. Cài đặt Mamba trên Windows</h2>
<section id="cách-1-tải-trực-tiếp" class="level3">
<h3 class="anchored" data-anchor-id="cách-1-tải-trực-tiếp">Cách 1: Tải trực tiếp</h3>
<ul>
<li>Tải Mambaforge cho Windows từ: <a href="https://github.com/conda-forge/miniforge#mambaforge" class="uri">https://github.com/conda-forge/miniforge#mambaforge</a></li>
<li>Chạy file installer và làm theo hướng dẫn.</li>
</ul>
</section>
<section id="cách-2-dùng-windows-terminalpowershell" class="level3">
<h3 class="anchored" data-anchor-id="cách-2-dùng-windows-terminalpowershell">Cách 2: Dùng Windows Terminal/PowerShell</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Windows-x86_64.exe <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-OutFile</span> mambaforge.exe</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">start</span> /wait <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> mambaforge.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\Mambaforge</span></code></pre></div>
</section>
</section>
<section id="tích-hợp-với-vs-code" class="level2">
<h2 class="anchored" data-anchor-id="tích-hợp-với-vs-code">2. Tích hợp với VS Code</h2>
<section id="cài-đặt-extensions" class="level3">
<h3 class="anchored" data-anchor-id="cài-đặt-extensions">Cài đặt Extensions</h3>
<ol type="1">
<li>Python (Microsoft)</li>
<li>Jupyter (Microsoft)</li>
</ol>
</section>
<section id="tạo-và-cấu-hình-môi-trường" class="level3">
<h3 class="anchored" data-anchor-id="tạo-và-cấu-hình-môi-trường">Tạo và Cấu hình Môi trường</h3>
<p>Tạo file <code>environment.yml</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ds-project</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> conda-forge</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> defaults</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dependencies</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> python=3.10</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ipykernel</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pandas</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> numpy</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> matplotlib</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> scikit-learn</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> jupyter</span></span></code></pre></div>
<p>Tạo môi trường từ file:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> env create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> environment.yml</span></code></pre></div>
</section>
</section>
<section id="cấu-hình-vs-code" class="level2">
<h2 class="anchored" data-anchor-id="cấu-hình-vs-code">3. Cấu hình VS Code</h2>
<section id="chọn-python-interpreter" class="level3">
<h3 class="anchored" data-anchor-id="chọn-python-interpreter">Chọn Python Interpreter</h3>
<ol type="1">
<li>Mở Command Palette (<code>Ctrl + Shift + P</code>)</li>
<li>Tìm “Python: Select Interpreter”</li>
<li>Chọn môi trường Mamba vừa tạo</li>
</ol>
</section>
<section id="cấu-hình-notebooks" class="level3">
<h3 class="anchored" data-anchor-id="cấu-hình-notebooks">Cấu hình Notebooks</h3>
<ul>
<li>VS Code tự động nhận diện kernel từ môi trường Mamba</li>
<li>Kernel có thể được chọn ở góc phải trên của notebook</li>
</ul>
</section>
</section>
<section id="cấu-trúc-project-đề-xuất" class="level2">
<h2 class="anchored" data-anchor-id="cấu-trúc-project-đề-xuất">4. Cấu trúc Project Đề Xuất</h2>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">project/</span>
<span id="cb4-2">│</span>
<span id="cb4-3">├── .vscode/                      # VS Code settings</span>
<span id="cb4-4">│   ├── settings.json</span>
<span id="cb4-5">│   └── launch.json</span>
<span id="cb4-6">│</span>
<span id="cb4-7">├── data/</span>
<span id="cb4-8">│   ├── raw/</span>
<span id="cb4-9">│   └── processed/</span>
<span id="cb4-10">│</span>
<span id="cb4-11">├── notebooks/</span>
<span id="cb4-12">│   ├── 01_exploration.ipynb</span>
<span id="cb4-13">│   └── 02_analysis.ipynb</span>
<span id="cb4-14">│</span>
<span id="cb4-15">├── src/</span>
<span id="cb4-16">│   └── processing/</span>
<span id="cb4-17">│       ├── __init__.py</span>
<span id="cb4-18">│       └── data_processing.py</span>
<span id="cb4-19">│</span>
<span id="cb4-20">├── environment.yml</span>
<span id="cb4-21">├── .gitignore</span>
<span id="cb4-22">└── README.md</span></code></pre></div>
</section>
<section id="cấu-hình-vs-code-settings" class="level2">
<h2 class="anchored" data-anchor-id="cấu-hình-vs-code-settings">5. Cấu hình VS Code Settings</h2>
<p>Tạo file <code>.vscode/settings.json</code>:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"python.defaultInterpreterPath"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"${env:USERPROFILE}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Mambaforge</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">envs</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ds-project</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">python.exe"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"jupyter.notebookFileRoot"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"${workspaceFolder}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"python.analysis.extraPaths"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"${workspaceFolder}/src"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"python.formatting.provider"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"editor.formatOnSave"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"ruff.enable"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"ruff.format.args"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--config=pyproject.toml"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"ruff.lint.args"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--config=pyproject.toml"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"mypy.enabled"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"mypy.configFile"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pyproject.toml"</span></span>
<span id="cb5-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="cấu-hình-development-tools" class="level2">
<h2 class="anchored" data-anchor-id="cấu-hình-development-tools">6. Cấu hình Development Tools</h2>
<section id="cài-đặt-development-dependencies" class="level3">
<h3 class="anchored" data-anchor-id="cài-đặt-development-dependencies">6.1 Cài đặt Development Dependencies</h3>
<p>Cập nhật <code>environment.yml</code>:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ds-project</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">channels</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> conda-forge</span></span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> defaults</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dependencies</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> python=3.10</span></span>
<span id="cb6-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ipykernel</span></span>
<span id="cb6-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pandas</span></span>
<span id="cb6-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> numpy</span></span>
<span id="cb6-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> matplotlib</span></span>
<span id="cb6-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> scikit-learn</span></span>
<span id="cb6-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> jupyter</span></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # Dev dependencies</span></span>
<span id="cb6-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> black</span></span>
<span id="cb6-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ruff</span></span>
<span id="cb6-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mypy</span></span>
<span id="cb6-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pre-commit</span></span>
<span id="cb6-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nbqa</span></span>
<span id="cb6-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> jupytext</span></span></code></pre></div>
</section>
<section id="cấu-hình-pyproject.toml" class="level3">
<h3 class="anchored" data-anchor-id="cấu-hình-pyproject.toml">6.2 Cấu hình pyproject.toml</h3>
<p>Tạo file <code>pyproject.toml</code>:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource toml number-lines code-with-copy"><code class="sourceCode toml"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[tool.black]</span></span>
<span id="cb7-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">line-length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span></span>
<span id="cb7-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">target-version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"py310"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">include</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">\.pyi?$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[tool.ruff]</span></span>
<span id="cb7-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">line-length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span></span>
<span id="cb7-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">target-version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"py310"</span></span>
<span id="cb7-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb7-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pycodestyle</span></span>
<span id="cb7-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyflakes</span></span>
<span id="cb7-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># isort</span></span>
<span id="cb7-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UP"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyupgrade</span></span>
<span id="cb7-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ignore</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb7-16"></span>
<span id="cb7-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[tool.ruff.isort]</span></span>
<span id="cb7-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">known-first-party</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[tool.mypy]</span></span>
<span id="cb7-21"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">python_version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3.10"</span></span>
<span id="cb7-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">warn_return_any</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb7-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">warn_unused_configs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb7-24"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">disallow_untyped_defs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb7-25"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">check_untyped_defs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb7-26"></span>
<span id="cb7-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[[tool.mypy.overrides]]</span></span>
<span id="cb7-28"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">module</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb7-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas.*"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numpy.*"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matplotlib.*"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seaborn.*"</span></span>
<span id="cb7-33"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-34"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ignore_missing_imports</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</section>
<section id="cấu-hình-pre-commit" class="level3">
<h3 class="anchored" data-anchor-id="cấu-hình-pre-commit">6.3 Cấu hình Pre-commit</h3>
<p>Tạo file <code>.pre-commit-config.yaml</code>:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repos</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/pre-commit/pre-commit-hooks</span></span>
<span id="cb8-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v4.5.0</span></span>
<span id="cb8-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hooks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> trailing-whitespace</span></span>
<span id="cb8-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> end-of-file-fixer</span></span>
<span id="cb8-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> check-yaml</span></span>
<span id="cb8-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> check-json</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> check-added-large-files</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--maxkb=5000'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/psf/black</span></span>
<span id="cb8-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.1.1</span></span>
<span id="cb8-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hooks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> black</span></span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/astral-sh/ruff-pre-commit</span></span>
<span id="cb8-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v0.2.1</span></span>
<span id="cb8-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hooks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ruff</span></span>
<span id="cb8-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--fix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ruff-format</span></span>
<span id="cb8-23"></span>
<span id="cb8-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/pre-commit/mirrors-mypy</span></span>
<span id="cb8-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v1.8.0</span></span>
<span id="cb8-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hooks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mypy</span></span>
<span id="cb8-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">additional_dependencies</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">types-all</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-29"></span>
<span id="cb8-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/nbQA-dev/nbQA</span></span>
<span id="cb8-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7.1</span></span>
<span id="cb8-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hooks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nbqa-black</span></span>
<span id="cb8-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">additional_dependencies</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">black==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.1.1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> nbqa-ruff</span></span>
<span id="cb8-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">additional_dependencies</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ruff==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2.1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</section>
<section id="cấu-hình-git-ignore" class="level3">
<h3 class="anchored" data-anchor-id="cấu-hình-git-ignore">6.4 Cấu hình Git Ignore</h3>
<p>Tạo file <code>.gitignore</code>:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource gitignore number-lines code-with-copy"><code class="sourceCode"><span id="cb9-1"># Python</span>
<span id="cb9-2">__pycache__/</span>
<span id="cb9-3">*.py[cod]</span>
<span id="cb9-4">*$py.class</span>
<span id="cb9-5">*.so</span>
<span id="cb9-6">.Python</span>
<span id="cb9-7">build/</span>
<span id="cb9-8">develop-eggs/</span>
<span id="cb9-9">dist/</span>
<span id="cb9-10">downloads/</span>
<span id="cb9-11">eggs/</span>
<span id="cb9-12">.eggs/</span>
<span id="cb9-13">lib/</span>
<span id="cb9-14">lib64/</span>
<span id="cb9-15">parts/</span>
<span id="cb9-16">sdist/</span>
<span id="cb9-17">var/</span>
<span id="cb9-18">wheels/</span>
<span id="cb9-19">*.egg-info/</span>
<span id="cb9-20">.installed.cfg</span>
<span id="cb9-21">*.egg</span>
<span id="cb9-22"></span>
<span id="cb9-23"># Jupyter Notebook</span>
<span id="cb9-24">.ipynb_checkpoints</span>
<span id="cb9-25">*/.ipynb_checkpoints/*</span>
<span id="cb9-26">profile_default/</span>
<span id="cb9-27">ipython_config.py</span>
<span id="cb9-28"></span>
<span id="cb9-29"># VS Code</span>
<span id="cb9-30">.vscode/*</span>
<span id="cb9-31">!.vscode/settings.json</span>
<span id="cb9-32">!.vscode/tasks.json</span>
<span id="cb9-33">!.vscode/launch.json</span>
<span id="cb9-34">!.vscode/extensions.json</span>
<span id="cb9-35"></span>
<span id="cb9-36"># Environment</span>
<span id="cb9-37">.env</span>
<span id="cb9-38">.venv</span>
<span id="cb9-39">env/</span>
<span id="cb9-40">venv/</span>
<span id="cb9-41">ENV/</span>
<span id="cb9-42">env.bak/</span>
<span id="cb9-43">venv.bak/</span>
<span id="cb9-44">.conda/</span>
<span id="cb9-45">conda-env/</span>
<span id="cb9-46"></span>
<span id="cb9-47"># Data</span>
<span id="cb9-48">data/raw/*</span>
<span id="cb9-49">!data/raw/.gitkeep</span>
<span id="cb9-50">data/processed/*</span>
<span id="cb9-51">!data/processed/.gitkeep</span>
<span id="cb9-52">*.csv</span>
<span id="cb9-53">*.xlsx</span>
<span id="cb9-54">*.xls</span>
<span id="cb9-55">*.db</span>
<span id="cb9-56">*.sqlite</span>
<span id="cb9-57">*.h5</span>
<span id="cb9-58"></span>
<span id="cb9-59"># Logs</span>
<span id="cb9-60">logs/</span>
<span id="cb9-61">*.log</span>
<span id="cb9-62">.hypothesis/</span>
<span id="cb9-63">.pytest_cache/</span>
<span id="cb9-64">.coverage</span>
<span id="cb9-65">htmlcov/</span>
<span id="cb9-66"></span>
<span id="cb9-67"># OS specific</span>
<span id="cb9-68">.DS_Store</span>
<span id="cb9-69">.DS_Store?</span>
<span id="cb9-70">._*</span>
<span id="cb9-71">.Spotlight-V100</span>
<span id="cb9-72">.Trashes</span>
<span id="cb9-73">ehthumbs.db</span>
<span id="cb9-74">Thumbs.db</span></code></pre></div>
</section>
<section id="khởi-tạo-pre-commit" class="level3">
<h3 class="anchored" data-anchor-id="khởi-tạo-pre-commit">6.5 Khởi tạo Pre-commit</h3>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate môi trường</span></span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate ds-project</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cài đặt pre-commit hooks</span></span>
<span id="cb10-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pre-commit</span> install</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Tùy chọn) Chạy pre-commit trên tất cả files</span></span>
<span id="cb10-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pre-commit</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--all-files</span></span></code></pre></div>
</section>
<section id="extensions-vs-code-cho-notebooks" class="level3">
<h3 class="anchored" data-anchor-id="extensions-vs-code-cho-notebooks">6.6 Extensions VS Code cho Notebooks</h3>
<p>Cài thêm các extensions sau:</p>
<ol type="1">
<li>“Jupyter Notebook Renderers”</li>
<li>“Jupytext for Notebooks”</li>
<li>“Black Formatter”</li>
<li>“Ruff”</li>
<li>“Mypy Type Checker”</li>
</ol>
</section>
<section id="cấu-hình-jupytext" class="level3">
<h3 class="anchored" data-anchor-id="cấu-hình-jupytext">6.7 Cấu hình Jupytext</h3>
<p>Tạo file <code>.jupytext.toml</code>:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource toml number-lines code-with-copy"><code class="sourceCode toml"><span id="cb11-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">formats</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ipynb,qmd"</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[formats]</span></span>
<span id="cb11-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ipynb</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb11-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">qmd</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span></code></pre></div>
</section>
</section>
<section id="pro-tips-cho-windows" class="level2">
<h2 class="anchored" data-anchor-id="pro-tips-cho-windows">7. Pro Tips cho Windows</h2>
<section id="path-management" class="level3">
<h3 class="anchored" data-anchor-id="path-management">Path Management</h3>
<p>Sử dụng <code>pathlib</code> để xử lý đường dẫn:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb12-2">data_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"raw"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file.csv"</span></span></code></pre></div>
</section>
<section id="git-configuration" class="level3">
<h3 class="anchored" data-anchor-id="git-configuration">Git Configuration</h3>
<p>Tạo file <code>.gitignore</code>:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource gitignore number-lines code-with-copy"><code class="sourceCode"><span id="cb13-1"># .gitignore</span>
<span id="cb13-2">data/raw/*</span>
<span id="cb13-3">data/processed/*</span>
<span id="cb13-4">.ipynb_checkpoints/</span>
<span id="cb13-5">__pycache__/</span>
<span id="cb13-6">*.pyc</span></code></pre></div>
</section>
<section id="jupyter-trong-vs-code" class="level3">
<h3 class="anchored" data-anchor-id="jupyter-trong-vs-code">Jupyter trong VS Code</h3>
<ul>
<li>Chạy cell: <code>Shift + Enter</code></li>
<li>Variable explorer có sẵn</li>
<li>Plot viewer tích hợp</li>
<li>Intellisense hoạt động tốt</li>
</ul>
</section>
<section id="debugging" class="level3">
<h3 class="anchored" data-anchor-id="debugging">Debugging</h3>
<ul>
<li>Debugger tích hợp cho cả <code>.py</code> và <code>.ipynb</code></li>
<li>Có thể đặt breakpoints trong notebooks</li>
</ul>
</section>
</section>
<section id="xử-lý-lỗi-thường-gặp" class="level2">
<h2 class="anchored" data-anchor-id="xử-lý-lỗi-thường-gặp">8. Xử lý Lỗi Thường Gặp</h2>
<ol type="1">
<li><p><strong>Path quá dài trên Windows</strong></p>
<ul>
<li>Sử dụng đường dẫn ngắn hơn</li>
<li>Kích hoạt hỗ trợ đường dẫn dài trong Windows</li>
</ul></li>
<li><p><strong>Conflict với môi trường Python khác</strong></p>
<ul>
<li>Đảm bảo PATH được cập nhật đúng</li>
<li>Kiểm tra <code>where python</code> trong terminal</li>
</ul></li>
<li><p><strong>Jupyter Kernel không hiển thị</strong></p>
<ul>
<li>Cài lại <code>ipykernel</code></li>
<li>Kiểm tra jupyter kernelspec list</li>
</ul></li>
</ol>
</section>
<section id="resources-hữu-ích" class="level2">
<h2 class="anchored" data-anchor-id="resources-hữu-ích">9. Resources Hữu ích</h2>
<ul>
<li><a href="https://mamba.readthedocs.io/">Mamba Documentation</a></li>
<li><a href="https://code.visualstudio.com/docs/python/python-tutorial">VS Code Python Documentation</a></li>
<li><a href="https://code.visualstudio.com/docs/datascience/jupyter-notebooks">Jupyter in VS Code</a></li>
</ul>
</section>
<section id="workflow-đề-xuất" class="level2">
<h2 class="anchored" data-anchor-id="workflow-đề-xuất">10. Workflow Đề Xuất</h2>
<ol type="1">
<li><strong>Khởi tạo project mới</strong>:</li>
</ol>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tạo và activate môi trường</span></span>
<span id="cb14-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> env create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> environment.yml</span>
<span id="cb14-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate ds-project</span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cài đặt pre-commit hooks</span></span>
<span id="cb14-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pre-commit</span> install</span></code></pre></div>
<ol start="2" type="1">
<li><strong>Phát triển</strong>:</li>
</ol>
<ul>
<li>Code trong VS Code với các extensions đã cài</li>
<li>Notebooks sẽ tự động được format bởi nbQA</li>
<li>Pre-commit sẽ kiểm tra code trước mỗi commit</li>
</ul>
<ol start="3" type="1">
<li><strong>Commit Changes</strong>:</li>
</ol>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your message"</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-commit sẽ tự động chạy các checks</span></span></code></pre></div>
<ol start="4" type="1">
<li><strong>Update Dependencies</strong>:</li>
</ol>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Thêm package mới</span></span>
<span id="cb16-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install package-name</span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export environment</span></span>
<span id="cb16-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> env export <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> environment.yml</span></code></pre></div>
</section>
<section id="bonus-nếu-muốn-import-một-module-từ-src-trong-notebook.ipynb-thì-làm-thế-nào" class="level2">
<h2 class="anchored" data-anchor-id="bonus-nếu-muốn-import-một-module-từ-src-trong-notebook.ipynb-thì-làm-thế-nào">Bonus: nếu muốn import một module từ <code>src</code> trong <code>notebook.ipynb</code> thì làm thế nào?</h2>
<div id="c9cc4dfd" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Trong notebook của bạn (ví dụ notebooks/analysis.ipynb)</span></span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Setup path</span></span>
<span id="cb17-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb17-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb17-6">project_root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(Path.cwd().parent)</span>
<span id="cb17-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> project_root <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sys.path:</span>
<span id="cb17-8">    sys.path.append(project_root)</span>
<span id="cb17-9"></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Import function</span></span>
<span id="cb17-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.processing.data_preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> process_data, clean_data</span>
<span id="cb17-12"></span>
<span id="cb17-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Sử dụng function</span></span>
<span id="cb17-14">df_processed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_data(df_raw)</span></code></pre></div>
</details>
</div>
<p>Với lưu ý:</p>
<ul>
<li>Đảm bảo có file <code>__init__.py</code> trong mỗi thư mục Python</li>
<li>Không nên dùng relative imports (<code>from ...src.processing</code>) vì dễ gây lỗi</li>
<li>Nên đặt tên module và function theo PEP 8</li>
<li>Trong <code>data_preprocessing.py</code> nên có docstring mô tả function</li>
</ul>
<div id="05d43597" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># src/processing/data_preprocessing.py</span></span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> process_data(df):</span>
<span id="cb18-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Process the input dataframe.</span></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        df (pd.DataFrame): Input dataframe</span></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb18-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pd.DataFrame: Processed dataframe</span></span>
<span id="cb18-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb18-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your code here</span></span>
<span id="cb18-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> processed_df</span></code></pre></div>
</details>
</div>


<!-- -->

</section>
</section>

 ]]></description>
  <category>python</category>
  <guid>https://lktuan.github.io/blog/2024-11-04-intro-to-mamba/</guid>
  <pubDate>Sun, 03 Nov 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-11-04-intro-to-mamba/mamba.png" medium="image" type="image/png" height="92" width="144"/>
</item>
<item>
  <title>Keynote on: Causal Effect Estimation in Practice - lessons learned from E-commerce &amp; Banking</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/</link>
  <description><![CDATA[ 





<p>Link: <a href="https://www.youtube.com/watch?v=pz7QD2GPBlE" class="uri">https://www.youtube.com/watch?v=pz7QD2GPBlE</a></p>
<p><a href="https://github.com/Senejohnny">Danial</a> focuses on the practical challenges and solutions in implementing causal effect estimation in business settings, particularly in finance and banking. The speaker emphasizes the gap between <strong>theoretical frameworks</strong> and <strong>real-world applications</strong>, sharing lessons learned from actual implementations.</p>
<section id="intro" class="level1">
<h1>0. Intro</h1>
<p>The author aim to shed some light on the practical setting and challenges of <strong>causal inference</strong>. Causal analysis goes further than predicting an outcome, all the way to influence it.</p>
</section>
<section id="practical-use-cases" class="level1">
<h1>1. Practical Use Cases</h1>
<ul>
<li>Effect estimation:
<ul>
<li>Marketing campaign effectiveness evaluation (on client/product acquisition and retention);</li>
<li>Assessment of free financial consultation services’ value (on revenue/NPS);</li>
</ul></li>
<li>Other applications [Out of scope]:
<ul>
<li>Root Cause Analysis: To what factor(s) the estimated effect can be attributed;</li>
<li>What if analysis: What is the result of a counterfactual scenario.</li>
</ul></li>
</ul>
<p>Eg.: the impact measurement of credit lines on customer retention. The primary challenge is moving from <strong>theoretical frameworks</strong> to <strong>practical business applications</strong>.</p>
</section>
<section id="the-gold-standard-vs.-reality" class="level1">
<h1>2. The Gold Standard vs.&nbsp;Reality</h1>
<ul>
<li>While A/B testing (randomized experiments) is considered the gold standard, it’s often impractical or impossible in real business settings;</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/1_ab_testing.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>golden standard</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Common obstacles include:
<ul>
<li>Marketers forgetting to implement proper randomization;</li>
<li>Cost and business constraints;</li>
<li>Ethical considerations;</li>
<li>Client non-compliance;</li>
<li>Limited data availability.</li>
</ul></li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/2_limitations.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>limitations</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="practical-challenges" class="level1">
<h1>3. Practical Challenges</h1>
<ul>
<li>Non-simultaneous contact: In reality, campaigns often target different groups at different times;</li>
<li>Lack of proper control groups: When targeting specific customer segments, finding comparable control groups is difficult;</li>
<li>No randomization: Business rules often determine who receives treatment, leading to selection bias.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/3_differences.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>differences</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="solutions-and-approaches" class="level1">
<h1>4. Solutions and Approaches</h1>
<section id="handling-non-randomization" class="level2">
<h2 class="anchored" data-anchor-id="handling-non-randomization">4.1. Handling Non-randomization</h2>
<ul>
<li>Use propensity score modeling to mimic randomization;</li>
<li>Account for confounding variables (like age, sex) that affect both treatment assignment and outcomes;</li>
<li>Apply inverse probability weighting to correct for selection bias.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/4_sol_1.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>minic randomization</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="control-group-selection" class="level2">
<h2 class="anchored" data-anchor-id="control-group-selection">4.2. Control Group Selection</h2>
<ul>
<li>Use rule-based methods to create comparable control groups;</li>
<li>Apply the same filters used in campaign targeting;</li>
<li>Consider similar products within the same category;</li>
<li>Implement exclusion criteria to maintain non-interference and consistency;</li>
<li>Ensure basic criteria matching (e.g., valid email addresses, opt-in status).</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/10_good_control.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>good control</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="kpi-consideration" class="level2">
<h2 class="anchored" data-anchor-id="kpi-consideration">4.3. KPI Consideration</h2>
<ul>
<li>Understand the propagation of effects through time:
<ul>
<li>Short-term metrics (email opens, clicks);</li>
<li>Mid-term metrics (product adoption);</li>
<li>Long-term metrics (revenue generation);</li>
</ul></li>
<li>Consider data availability and measurement timing;</li>
<li>Account for different variables affecting each level of metrics.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/9_effect_propagation_kpi.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>KPIs consideration</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="theoretical-frameworks" class="level1">
<h1>5. Theoretical Frameworks</h1>
<p>The speaker discusses two main schools of thought:</p>
<section id="potential-outcomes-framework" class="level2">
<h2 class="anchored" data-anchor-id="potential-outcomes-framework">5.1. Potential Outcomes Framework</h2>
<ul>
<li>Focuses on treatment assignment mechanisms;</li>
<li>Uses propensity scoring and inverse probability weighting;</li>
<li>Simpler to implement in practice.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/5_potantial_outcome.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>potential outcome</figcaption>
</figure>
</div>
</div>
</div>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/6_potential_outcome_assumption.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>potential outcome assumptions</figcaption>
</figure>
</div>
</div>
</div>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/7_when_association_is_causation.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>when association is causation?</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="structural-causal-models" class="level2">
<h2 class="anchored" data-anchor-id="structural-causal-models">5.2. Structural Causal Models</h2>
<ul>
<li>Based on causal graphs;</li>
<li>Provides a more complete picture of relationships;</li>
<li>Requires careful consideration of mediators, confounders, and colliders.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/8_SCM.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>structural causal models</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="practical-implementation-tips" class="level1">
<h1>6. Practical Implementation Tips</h1>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/11_practice_example.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>pratical example</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Start with simple rule-based approaches before applying sophisticated models;</li>
<li>Validate assumptions with domain experts;</li>
<li>Consider multiple time horizons for effect measurement;</li>
<li>Use survival analysis for handling time-varying outcomes;</li>
<li>Apply multiple methods to validate results;</li>
<li>Focus on business relevance rather than theoretical perfection.</li>
</ul>
</section>
<section id="key-considerations-for-success" class="level1">
<h1>7. Key Considerations for Success</h1>
<ul>
<li>Ensure exchangeability between treatment and control groups;</li>
<li>Maintain positivity (overlap in covariate distributions);</li>
<li>Avoid interference between groups;</li>
<li>Maintain consistency in treatment application;</li>
<li>Consider both direct and indirect effects;</li>
<li>Account for time-varying effects.</li>
</ul>
</section>
<section id="evaluation-challenges" class="level1">
<h1>8. Evaluation Challenges</h1>
<ul>
<li>Unlike simulated data, real-world applications lack known true effects;</li>
<li>Recommend using multiple methods and comparing results;</li>
<li>Validate findings with domain experts;</li>
<li>Consider business context and practical significance.</li>
</ul>
</section>
<section id="outtro" class="level1">
<h1>9. Outtro</h1>
<p>The speaker emphasizes that successful causal inference in practice requires:</p>
<ul>
<li>Balance between theoretical rigor and practical constraints;</li>
<li>Understanding of business context and limitations;</li>
<li>Use of simple, interpretable methods where appropriate;</li>
<li>Careful consideration of data quality and availability;</li>
<li>Collaboration with domain experts;</li>
<li>Focus on business-relevant metrics and timeframes.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/12_take_aways.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>take aways</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>The speech concludes by highlighting that while causal inference in practice may not always match theoretical ideals, careful application of basic principles, combined with practical business understanding, can still provide valuable insights for decision-making.</p>
<p>Summary with the help of <a href="https://claude.ai/"><strong>Claude 3.5 Sonnet</strong></a>. Happy exploring!</p>


<!-- -->

</section>

 ]]></description>
  <category>causal inference</category>
  <guid>https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/</guid>
  <pubDate>Thu, 24 Oct 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-10-25-CEE-in-practice/causal_inf.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Note on Mathematics as the Universal Language of Nature</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-08-08-note-muln/</link>
  <description><![CDATA[ 





<p>mình nghe bài nói chuyện “Mathematics as the Universal Language of Nature” của R. Seiringer, tổ chức tại Trường Đại học Sư phạm Huế, ngày 8 tháng 8 năm 2024. Dưới đây là note của mình.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-08-08-note-muln/talk_cover.png" class="img-fluid figure-img"></p>
<figcaption>talk cover</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Robert là 1 giáo sư chuyên, đầu ngành về Toán và Vật lý, từng giảng dạy tại Princeton, hiện nay công tác tại Viện Kỹ Thuật và Khoa học của Áo. Bài giảng này của giáo sư nhằm nêu bật vẻ đẹp của Toán và Vật lý, dùng Toán để giải thích tự nhiên.</p>
<section id="history" class="level1">
<h1>History</h1>
<ul>
<li>Newton: calculus, motion of earth around the sun, theory of gravity;</li>
<li>Fourier: Fourier series to understand hear transfer &amp; conduction (also green house effect!);</li>
<li>Rieman: thuyết tương đối tổng quát, lý thuyết trường lượng tử, lý thuyết dây.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
green house effect
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Jean-Baptiste Joseph Fourier, nhà toán học và vật lý học người Pháp, là người đầu tiên mô tả hiệu ứng nhà kính (greenhouse effect) vào năm 1824. Hãy giải thích về khái niệm này:</p>
<ol type="1">
<li><p><strong>Định nghĩa:</strong> Hiệu ứng nhà kính của Fourier đề cập đến quá trình mà khí quyển của Trái Đất giữ nhiệt, làm cho bề mặt hành tinh ấm hơn so với trường hợp không có khí quyển.</p></li>
<li><p><strong>Cơ chế cơ bản:</strong></p></li>
</ol>
<ol type="a">
<li><p>Bức xạ mặt trời đi qua khí quyển và được hấp thụ bởi bề mặt Trái Đất.</p></li>
<li><p>Trái Đất phát ra bức xạ hồng ngoại (nhiệt).</p></li>
<li><p>Một phần bức xạ này bị các khí nhà kính trong khí quyển hấp thụ và tái phát ra theo mọi hướng.</p></li>
<li><p>Quá trình này giữ nhiệt trong khí quyển, làm tăng nhiệt độ trung bình của Trái Đất.</p></li>
</ol>
<ol start="3" type="1">
<li><strong>Đóng góp của Fourier:</strong></li>
</ol>
<ul>
<li>Fourier nhận ra rằng khí quyển đóng vai trò như một “tấm chăn”, giữ nhiệt cho Trái Đất.</li>
<li>Ông so sánh quá trình này với cách hoạt động của nhà kính trồng cây.</li>
</ul>
<ol start="4" type="1">
<li><strong>Tầm quan trọng:</strong></li>
</ol>
<ul>
<li>Hiệu ứng nhà kính tự nhiên làm cho Trái Đất có thể ở được, duy trì nhiệt độ trung bình khoảng 15°C thay vì -18°C nếu không có nó.</li>
<li>Hiểu biết này đặt nền móng cho nghiên cứu về biến đổi khí hậu hiện đại.</li>
</ul>
<ol start="5" type="1">
<li><strong>Phát triển sau này:</strong></li>
</ol>
<ul>
<li>John Tyndall (1859) xác định các khí cụ thể gây ra hiệu ứng nhà kính.</li>
<li>Svante Arrhenius (1896) tính toán định lượng ảnh hưởng của CO2 đối với nhiệt độ Trái Đất.</li>
</ul>
<ol start="6" type="1">
<li><strong>Khác biệt với hiểu biết hiện đại:</strong></li>
</ol>
<ul>
<li>Fourier chưa biết về các khí nhà kính cụ thể hoặc cơ chế phân tử của quá trình này.</li>
<li>Hiểu biết hiện đại về hiệu ứng nhà kính phức tạp hơn nhiều, bao gồm các phản hồi và tương tác khí hậu.</li>
</ul>
<ol start="7" type="1">
<li><strong>Ý nghĩa lịch sử:</strong></li>
</ol>
<ul>
<li>Công trình của Fourier đặt nền móng cho khoa học khí hậu hiện đại và hiểu biết của chúng ta về cách Trái Đất duy trì nhiệt độ.</li>
</ul>
<p>Hiệu ứng nhà kính của Fourier là một ví dụ tuyệt vời về cách một khái niệm khoa học cơ bản có thể dẫn đến những hiểu biết sâu sắc về hệ thống Trái Đất và cuối cùng ảnh hưởng đến chính sách toàn cầu về biến đổi khí hậu.</p>
</div>
</div>
</div>
</section>
<section id="math-desc.-of-laws-of-nature" class="level1">
<h1>Math Desc. of Laws of Nature</h1>
<p>the unreasonable effectiveness of math in the natural sciences (Eugene P. Wigner), formulation of the basic laws of nature in mathematically precise terms.</p>
<p>ví dụ: Phương trình Schrodinger -&gt; áp dụng từ atomic nuclei to neutron stars.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Phương Trình Schrödinger: Cánh Cửa Vào Thế Giới Lượng Tử
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Phương trình Schrödinger là một phương trình vi phân từng phần cơ bản trong cơ học lượng tử, được đặt tên theo nhà vật lý Erwin Schrödinger. Nó mô tả sự biến đổi theo thời gian của hàm sóng của một hệ lượng tử. Hàm sóng này chứa đựng tất cả thông tin về trạng thái của hệ thống, bao gồm cả vị trí, động lượng và các tính chất khác.</p>
<p><strong>Ý nghĩa Vật lý</strong></p>
<ul>
<li>Mô tả sự chuyển động của các hạt ở cấp độ lượng tử: Nếu trong cơ học cổ điển, chúng ta sử dụng các phương trình Newton để mô tả chuyển động của các vật thể, thì trong cơ học lượng tử, phương trình Schrödinger đóng vai trò tương tự. Nó cho phép chúng ta tính toán xác suất tìm thấy một hạt tại một vị trí nào đó tại một thời điểm nhất định.</li>
<li>Hàm sóng: Hàm sóng không phải là một đại lượng vật lý có thể đo trực tiếp, mà là một hàm toán học phức. Bình phương mô đun của hàm sóng tại một điểm trong không gian cho ta xác suất tìm thấy hạt tại điểm đó.</li>
</ul>
<p><strong>Ứng dụng của Phương Trình Schrödinger</strong>. Phương trình Schrödinger có ứng dụng rộng rãi trong nhiều lĩnh vực của vật lý, bao gồm:</p>
<ul>
<li>Vật lý nguyên tử: Dùng để mô tả cấu trúc của nguyên tử, phân tử và tính toán các mức năng lượng của chúng.</li>
<li>Vật lý hạt nhân: Áp dụng để nghiên cứu cấu trúc của hạt nhân nguyên tử và các quá trình tương tác hạt nhân.</li>
<li>Vật lý chất rắn: Được sử dụng để mô tả các tính chất điện, từ, và quang học của vật liệu.</li>
<li>Vật lý thiên văn: Áp dụng để nghiên cứu các vật thể thiên văn như sao, tinh vân và lỗ đen.</li>
</ul>
<p><strong>Tại Sao Phương Trình Schrödinger Áp Dụng Rộng Rãi?</strong></p>
<ul>
<li>Tính phổ quát: Phương trình Schrödinger là một phương trình cơ bản, áp dụng cho mọi hệ lượng tử, từ các hạt đơn lẻ đến các hệ phức tạp như nguyên tử, phân tử và vật liệu rắn.</li>
<li>Độ chính xác cao: Các kết quả tính toán dựa trên phương trình Schrödinger đã được kiểm nghiệm thực nghiệm một cách chính xác cao, khẳng định tính đúng đắn của lý thuyết lượng tử.</li>
<li>Khả năng dự đoán: Phương trình Schrödinger cho phép chúng ta dự đoán kết quả của các thí nghiệm lượng tử, từ đó mở ra nhiều ứng dụng trong công nghệ hiện đại.</li>
</ul>
<p><strong>Từ Nguyên Tử đến Sao Neutron</strong></p>
<ul>
<li>Nguyên tử: Phương trình Schrödinger được sử dụng để mô tả sự chuyển động của electron xung quanh hạt nhân, từ đó giải thích quang phổ nguyên tử và các tính chất hóa học của các nguyên tố.</li>
<li>Hạt nhân: Phương trình Schrödinger (ở dạng tương đối tính) được sử dụng để mô tả cấu trúc của hạt nhân nguyên tử, các tương tác giữa các nucleon (proton và neutron) bên trong hạt nhân.</li>
<li>Sao neutron: Sao neutron là những ngôi sao đã chết, cực kỳ đặc, chủ yếu gồm các neutron. Mặc dù cấu trúc bên trong của sao neutron rất phức tạp, nhưng các nhà vật lý vẫn sử dụng các phiên bản mở rộng của phương trình Schrödinger để mô tả hành vi của vật chất trong điều kiện cực đoan bên trong sao neutron.</li>
</ul>
<p><strong>Tóm lại</strong>, phương trình Schrödinger là một công cụ toán học mạnh mẽ, cho phép chúng ta hiểu sâu sắc về thế giới lượng tử. Sự thành công của phương trình này trong việc giải thích các hiện tượng từ cấp độ nguyên tử đến cấp độ vũ trụ đã khẳng định vị trí trung tâm của nó trong nền tảng của vật lý hiện đại.</p>
</div>
</div>
</div>
</section>
<section id="technology-development" class="level1">
<h1>Technology Development</h1>
<p>How quantum mechanic works, it’s understanding from human lies at the heart of technological advances in the past century</p>
<ul>
<li>phone</li>
<li>computer</li>
<li>satellite</li>
<li>…</li>
</ul>
</section>
<section id="complexity" class="level1">
<h1>Complexity</h1>
<p>the more basic physical laws are stated, the more complex be allowed for calculating their solution.</p>
<p>eg: description of the air in this lecture room, there will me rought ly 10^30 parameters</p>
<p>eg: phase transitions -&gt; one small change in system’s params lead to a masive change of its behaviour.</p>
<p>read more: “More is Different - broken symertry and the nature of hierarchical structure of science” – P. W. Anderson – (<a href="https://inters.org/files/more-is-different.pdf">link</a>).</p>
</section>
<section id="aims-of-mathematical-physics" class="level1">
<h1>Aims of Mathematical Physics</h1>
<ul>
<li>dev new math tools, allowing deduction of …</li>
<li>improve understanding of physical systems, dưới nhiều góc nhìn hơn.</li>
</ul>
<p>eg: <strong>fruitful interaction</strong>, Toán là nền tảng, Lý thể hiện các câu hỏi một cách tự nhiên để mang lại sự phát triển cho sự khám phá Toán học.</p>
</section>
<section id="stability-of-atoms" class="level1">
<h1>Stability of Atoms</h1>
<p>Tại sao electron không spiral vào nguyên tử, giải phóng một năng lượng vô hạn.</p>
<ul>
<li>Heisenberg uncertainty principle</li>
<li>In math, non-commutativity implies…</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-08-08-note-muln/stability_of_atoms.png" class="img-fluid figure-img"></p>
<figcaption>stability of atoms</figcaption>
</figure>
</div>
<p>? electromagtic radiation</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
electromagtic radiation
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Bức xạ điện từ là một dạng năng lượng truyền đi dưới dạng sóng điện từ. Sóng điện từ này bao gồm cả trường điện từ và trường từ trường dao động vuông góc với nhau và vuông góc với phương truyền sóng.</p>
<p><strong>Đặc điểm chính của bức xạ điện từ:</strong></p>
<ul>
<li>Tốc độ: Tất cả các sóng điện từ đều truyền đi với tốc độ ánh sáng trong chân không (khoảng 3 x 10^8 m/s).</li>
<li>Tần số và bước sóng: Các sóng điện từ khác nhau bởi tần số (số lần dao động trong một giây) và bước sóng (khoảng cách giữa hai đỉnh sóng liên tiếp).</li>
<li>Phổ điện từ: Phổ điện từ là một dải liên tục các loại bức xạ điện từ, từ sóng vô tuyến có bước sóng dài đến tia gamma có bước sóng ngắn.</li>
<li>Tính chất sóng-hạt lưỡng tính: Bức xạ điện từ thể hiện cả tính chất sóng (giao thoa, nhiễu xạ) và tính chất hạt (hiệu ứng quang điện).</li>
</ul>
<p><strong>Các loại bức xạ điện từ phổ biến:</strong></p>
<ul>
<li>Sóng vô tuyến: Sử dụng trong truyền thông, radio, truyền hình.</li>
<li>Vi sóng: Sử dụng trong lò vi sóng, radar.</li>
<li>Tia hồng ngoại: Tạo ra nhiệt, được sử dụng trong điều khiển từ xa, thiết bị nhìn đêm.</li>
<li>Ánh sáng khả kiến: Ánh sáng mà mắt người có thể nhìn thấy.</li>
<li>Tia tử ngoại: Sử dụng trong khử trùng, sản xuất vitamin D.</li>
<li>Tia X: Sử dụng trong y tế để chụp X-quang.</li>
<li>Tia gamma: Có năng lượng rất cao, được sử dụng trong điều trị ung thư.</li>
</ul>
<p><strong>Ứng dụng của bức xạ điện từ:</strong> Bức xạ điện từ có rất nhiều ứng dụng trong cuộc sống hàng ngày và trong các lĩnh vực khoa học, công nghệ. Ví dụ:</p>
<ul>
<li>Truyền thông: Điện thoại, truyền hình, internet.</li>
<li>Y tế: Chụp X-quang, điều trị ung thư.</li>
<li>Công nghiệp: Hàn, cắt kim loại.</li>
<li>Quân sự: Radar, sóng âm.</li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tính Không Giao Hoán (Non-Commutativity) trong Toán học
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Tính không giao hoán là một khái niệm quan trọng trong toán học, đặc biệt trong đại số trừu tượng. Nó mô tả một tính chất của các phép toán, khi mà việc đổi chỗ các đối tượng trong phép toán đó lại cho kết quả khác nhau.</p>
<p><strong>Ví dụ minh họa:</strong></p>
<ul>
<li>Phép nhân số: Phép nhân số là một phép toán giao hoán. Ví dụ: <code>2 x 3 = 3 x 2</code>.</li>
<li>Phép trừ số: Phép trừ số không phải là phép toán giao hoán. Ví dụ: <code>5 - 3 ≠ 3 - 5</code>.</li>
<li>Phép nhân ma trận: Phép nhân ma trận nói chung không giao hoán. Tức là, nếu A và B là hai ma trận, thì thường <code>AB ≠ BA</code>.</li>
</ul>
<p><strong>Ứng dụng của tính không giao hoán:</strong></p>
<ul>
<li>Đại số trừu tượng: Tính không giao hoán xuất hiện trong nhiều cấu trúc đại số như nhóm, vành, trường.</li>
<li>Vật lý lượng tử: Trong cơ học lượng tử, các toán tử đại diện cho các đại lượng vật lý thường không giao hoán. Điều này dẫn đến nguyên lý bất định Heisenberg, một trong những nguyên lý cơ bản của vật lý lượng tử.</li>
<li>Khoa học máy tính: Tính không giao hoán xuất hiện trong các cấu trúc dữ liệu như hàng đợi, ngăn xếp, và trong các ngôn ngữ lập trình.</li>
</ul>
<p><strong>Ý nghĩa của tính không giao hoán:</strong></p>
<ul>
<li>Thứ tự quan trọng: Khi thực hiện các phép toán không giao hoán, thứ tự các đối tượng đóng vai trò quyết định trong việc xác định kết quả.</li>
<li>Mô hình hóa các hệ thống phức tạp: Tính không giao hoán cho phép mô hình hóa các hệ thống phức tạp trong đó các yếu tố tương tác với nhau theo một cách không đối xứng.</li>
</ul>
<p>Ví dụ cụ thể trong vật lý lượng tử:</p>
<p>Trong cơ học lượng tử, vị trí (x) và động lượng (p) của một hạt là hai đại lượng vật lý không giao hoán. Quan hệ không giao hoán này được biểu diễn bởi công thức:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Bx,%20p%5D%20=%20xp%20-%20px%20=%20i%C4%A7"></p>
<p>Trong đó:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?x"> là toán tử vị trí</li>
<li><img src="https://latex.codecogs.com/png.latex?p"> là toán tử động lượng</li>
<li><img src="https://latex.codecogs.com/png.latex?%C4%A7"> là hằng số Planck rút gọn</li>
<li><img src="https://latex.codecogs.com/png.latex?i"> là đơn vị ảo</li>
</ul>
<p>Công thức trên cho thấy, việc đo vị trí và động lượng của một hạt cùng một lúc sẽ có độ chính xác bị giới hạn. Đây chính là nội dung của nguyên lý bất định Heisenberg.</p>
<p><strong>Tóm lại</strong>, tính không giao hoán là một khái niệm quan trọng trong toán học và vật lý, giúp chúng ta hiểu rõ hơn về sự tương tác giữa các đối tượng và các hệ thống phức tạp.</p>
</div>
</div>
</div>
</section>
<section id="stability-of-matter" class="level1">
<h1>Stability of Matter</h1>
<p>nếu nguyên tử là ổn định, điều gì xảy ra nếu chúng ta assemble chúng lại với nhau, như 10^30 nguyên tử trong 1 viên gạch. việc 1 viên gạch tại sao lớn như vậy, chứ không thể đặc hơn, khó có thể coi là hiển nhiên, và uncertainty principle ko thể tự mình giải thích.</p>
<p>extensitivity: electrons là fermions, thỏa Pauli exclusion principle.</p>
<p>why a brick is a brick?</p>
<p>book recommendation: “Stability of Matter in Quantum Mechanics”</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Fermions and Bosons
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>These are two fundamental types of particles in physics. They differ in their quantum properties.</p>
<ul>
<li><strong>Fermions</strong>: These particles obey the Pauli Exclusion Principle, which means that no two identical fermions can occupy the same quantum state simultaneously. Examples of fermions include electrons, protons, and neutrons. &nbsp;</li>
<li><strong>Bosons</strong>: Unlike fermions, multiple bosons can occupy the same quantum state. This property is essential for phenomena like superconductivity and laser light. Examples of bosons include photons (particles of light) and the Higgs boson.</li>
</ul>
</div>
</div>
</div>
</section>
<section id="gravitational-in-stability-of-stars" class="level1">
<h1>Gravitational (In) Stability of Stars</h1>
<p>scale up to Stars, where the gravitation becomes a major factor -&gt; can be taken in to account.</p>
<p>Chandrasekhar limit - for the maximun mass of stable white dwarf (amounts roughly 1.4 solar masses)</p>
<p>Schrodinger equation can be applied to a huge range of scalces, from atoms to stars!</p>
</section>
<section id="phase-transitions" class="level1">
<h1>Phase Transitions</h1>
<p>phương trình cơ bản có dạng đơn giản, nhưng lời giải có thể ở rất nhiều dạng do có rất nhiều biến và tham số.</p>
<p>ví dụ như nước, có thể khí, lỏng và rắn - phase transitions.</p>
</section>
<section id="more-phase-transitions" class="level1">
<h1>More Phase Transitions</h1>
<ul>
<li>magnetism;</li>
<li>traffic jams: hociminh city, tiny change can make huge effect?;</li>
<li>superfluidity (siêu chảy, một trạng thái “kỳ lạ” - exotic của vật chất);</li>
<li>superconductivity (siêu dẫn).</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
superfluidity
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p><strong>Định nghĩa siêu chảy</strong>: Siêu chảy là trạng thái của vật chất, trong đó chất lỏng có độ nhớt bằng không và chảy mà không có ma sát. Điều này xảy ra ở nhiệt độ cực thấp, gần bằng không tuyệt đối.</p></li>
<li><p><strong>Đặc điểm chính</strong>:</p></li>
</ol>
<ul>
<li>Không có ma sát nội: Chất lỏng siêu chảy có thể chảy mà không mất năng lượng.</li>
<li>Hiệu ứng phun tia: Có thể leo lên thành bình chứa.</li>
<li>Dẫn nhiệt vô hạn: Truyền nhiệt cực kỳ hiệu quả.</li>
<li>Xoáy lượng tử: Tạo ra các xoáy với động lượng góc lượng tử hóa.</li>
</ul>
<ol start="3" type="1">
<li><strong>Ví dụ về chất siêu chảy</strong>:</li>
</ol>
<ul>
<li>Helium-4 lỏng dưới 2.17 K (điểm lambda).</li>
<li>Helium-3 lỏng dưới khoảng 0.0025 K.</li>
</ul>
<p><strong>Tại sao gọi là “exotic” (kỳ lạ):</strong></p>
<ol type="a">
<li><strong>Hiếm gặp trong tự nhiên</strong>:</li>
</ol>
<ul>
<li>Chỉ xuất hiện ở nhiệt độ cực thấp, hiếm khi gặp trong điều kiện tự nhiên.</li>
</ul>
<ol start="2" type="a">
<li><strong>Vi phạm trực giác thông thường</strong>:</li>
</ol>
<ul>
<li>Chảy mà không có ma sát, trái ngược với hầu hết các chất lỏng thông thường.</li>
<li>Có thể “leo” ra khỏi bình chứa, dường như vi phạm trọng lực.</li>
</ul>
<ol start="3" type="a">
<li><strong>Hành vi lượng tử vĩ mô</strong>:</li>
</ol>
<ul>
<li>Hiển thị các hiệu ứng lượng tử ở quy mô có thể quan sát được.</li>
<li>Thể hiện tính chất sóng-hạt của vật chất ở mức độ lớn.</li>
</ul>
<ol start="4" type="a">
<li><strong>Liên quan đến vật lý cơ bản</strong>:</li>
</ol>
<ul>
<li>Nghiên cứu siêu chảy giúp hiểu sâu hơn về cơ học lượng tử và vật lý trạng thái ngưng tụ.</li>
</ul>
<ol start="5" type="a">
<li><strong>Ứng dụng tiềm năng độc đáo</strong>:</li>
</ol>
<ul>
<li>Có thể được sử dụng trong các thiết bị làm lạnh siêu dẫn và các ứng dụng công nghệ cao khác.</li>
</ul>
<p>Tóm lại, siêu chảy được coi là “exotic” vì nó thể hiện các tính chất kỳ lạ, hiếm gặp và vi phạm trực giác thông thường về cách chất lỏng hoạt động. Nó là một ví dụ về cách các hiệu ứng lượng tử có thể biểu hiện ở quy mô vĩ mô, làm cho nó trở thành một chủ đề thú vị và quan trọng trong vật lý hiện đại.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
superconductivity
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p><strong>Định nghĩa</strong>: Siêu dẫn là trạng thái của vật chất trong đó điện trở suất của vật liệu giảm xuống bằng không và từ trường bị đẩy ra khỏi vật liệu (hiệu ứng Meissner) khi nhiệt độ giảm xuống dưới một nhiệt độ tới hạn nhất định.</p></li>
<li><p>Đặc điểm chính:</p></li>
</ol>
<ol type="a">
<li><p><strong>Điện trở bằng không</strong>: Dòng điện có thể chảy mà không mất năng lượng.</p></li>
<li><p><strong>Hiệu ứng Meissner</strong>: Từ trường bị đẩy ra khỏi vật liệu siêu dẫn.</p></li>
<li><p><strong>Nhiệt độ tới hạn (Tc)</strong>: Nhiệt độ mà dưới đó vật liệu trở thành siêu dẫn.</p></li>
</ol>
<ol start="3" type="1">
<li><strong>Loại siêu dẫn</strong>:</li>
</ol>
<ol type="a">
<li><p>Siêu dẫn loại I: Thường là kim loại nguyên chất, chuyển đột ngột sang trạng thái siêu dẫn.</p></li>
<li><p>Siêu dẫn loại II: Thường là hợp kim hoặc hợp chất phức tạp, có hai nhiệt độ tới hạn và có thể duy trì trạng thái siêu dẫn trong từ trường mạnh hơn.</p></li>
</ol>
<ol start="4" type="1">
<li><strong>Cơ chế</strong>:</li>
</ol>
<ul>
<li>Lý thuyết BCS (Bardeen-Cooper-Schrieffer): Giải thích siêu dẫn thông qua sự hình thành các cặp Cooper (electron ghép đôi).</li>
<li>Siêu dẫn nhiệt độ cao: Cơ chế chưa được hiểu đầy đủ, là một lĩnh vực nghiên cứu đang phát triển.</li>
</ul>
<ol start="5" type="1">
<li><strong>Ứng dụng</strong>:</li>
</ol>
<ul>
<li>Nam châm siêu dẫn mạnh cho MRI và máy gia tốc hạt.</li>
<li>Máy dò SQUID (Superconducting Quantum Interference Device) để đo từ trường cực nhỏ.</li>
<li>Tiềm năng trong máy tính lượng tử và truyền tải điện không tổn thất.</li>
</ul>
<ol start="6" type="1">
<li><strong>Thách thức</strong>:</li>
</ol>
<ul>
<li>Tìm kiếm vật liệu siêu dẫn ở nhiệt độ cao hơn, lý tưởng là ở nhiệt độ phòng.</li>
<li>Hiểu rõ hơn về cơ chế của siêu dẫn nhiệt độ cao.</li>
</ul>
<ol start="7" type="1">
<li><strong>Lịch sử và phát triển</strong>:</li>
</ol>
<ul>
<li>Phát hiện năm 1911 bởi Heike Kamerlingh Onnes trong thủy ngân ở 4.2K.</li>
<li>Lý thuyết BCS được đề xuất năm 1957.</li>
<li>Siêu dẫn nhiệt độ cao được phát hiện năm 1986 bởi Bednorz và Müller.</li>
</ul>
<p>Siêu dẫn là một lĩnh vực nghiên cứu đang phát triển mạnh mẽ trong vật lý hiện đại, với tiềm năng ứng dụng rộng rãi trong công nghệ và kỹ thuật.</p>
</div>
</div>
</div>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<ul>
<li>toán không phải là ngôn ngữ vũ trụ, nhưng rất mạnh mẽ để giải thích tự nhiên;</li>
<li>các luật vật lý cơ bản được diễn giải bằng ngôn ngữ toán, rất thú ví là nhiều định luật vật lý cơ bản lại giải thích được rất nhiều hiện tượng khác nhau, như chuyển thể;</li>
<li>việc hiểu các định luật vật lý tạo ra các tiến bộ công nghệ;</li>
<li>mục tiêu của toán vật lý là phát triển các công cụ toán để hiểu các hệ quả của các định luật vật lý cơ bản và khai phá các cơ chế cũng như nguyên lý đằng sau các hiện tượng quan sát được;</li>
<li>một trong các thành tựu của toán vật lý chính là nghiên cứu về tính ổn định của vật chất.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-08-08-note-muln/summary.png" class="img-fluid figure-img"></p>
<figcaption>summary</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="qa-and-outro" class="level1">
<h1>q&amp;a and outro</h1>
<ol type="1">
<li>hamiltonian mechanics;</li>
<li>non-commutativity;</li>
<li>fermions, fundamental particle, bosons, 4-dimensions space;</li>
<li>schrodinger equation, lagrangian;</li>
<li>phase transitions, is this similar to the butterfly effect (notion of chaos)? eg double pendulum;</li>
<li>when was quantum mechanics been cared;</li>
<li>in classical physics, can predict trajectory; but why in quantum mechanics, we can not. (electron does not have definite position, read more on bell inequalities);</li>
<li>given the particles moving very fast, will they exchange the energy (read more on kinetic energy);</li>
<li>standing wave.</li>
</ol>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-08-08-note-muln/my_brain_is_full.png" class="img-fluid figure-img"></p>
<figcaption>bye bye</figcaption>
</figure>
</div>
</div>
</div>
</div>


<!-- -->

</section>

 ]]></description>
  <category>math</category>
  <guid>https://lktuan.github.io/blog/2024-08-08-note-muln/</guid>
  <pubDate>Wed, 07 Aug 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-08-08-note-muln/rs_portrait.png" medium="image" type="image/png" height="101" width="144"/>
</item>
<item>
  <title>Một số khuôn mẫu tư duy trong Brazilian Jiu-jitsu</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-08-06-bjj-mental-models/</link>
  <description><![CDATA[ 





<p><strong>lược dịch</strong> và/hoặc <strong>tóm tắt</strong> cho khóa học cũng “Mechanic Models of BJJ: A Crash Course” của Steve Kwan.</p>
<section id="theory-of-alignment" class="level1">
<h1>1. <a href="https://www.bjjmentalmodels.com/theory-of-alignment/">theory of alignment</a></h1>
<p>là lý thuyết tối cao của Jiu-jitsu, bao gồm ba yếu tố:</p>
<ol type="1">
<li><strong>posture</strong> - tư thế: position một cách hiệu quả cổ (neck) và cột sống (spine);</li>
<li><strong>structure</strong> - cấu trúc: position một cách hiệu quả tay (arms) và chân (legs);</li>
<li><strong>base</strong> - cở sở: khả năng hấp thụ (absorb) hoặc tạo ra lực liên quan để đạt được mục tiêu.</li>
</ol>
<p>để đạt được alignment hiệu quả, luôn ghi nhớ hai mục tiêu sau:</p>
<ol type="1">
<li>maintain your alignment;</li>
<li>break your opponent’s alignment;</li>
<li>do not proceed 2. if you are failing at 1.</li>
</ol>
<p>trong đào tạo, với trọng số của ba yếu tố như nhau, có thể “chấm điểm” (alignment scorecard) với thang từ 0-3 cho mỗi người chơi. điểm càng cao hơn sẽ là dấu hiệu cho việc bạn có một cơ hội tốt để phá vỡ alignment của đối thủ. ví dụ, trong closed guard, bạn ở dưới, và không ai đang khống chế đối phương bằng một hand grip:</p>
<p>bạn sẽ có 3 điểm nếu:</p>
<ul>
<li><strong>posture</strong>: cổ (neck) và cột sống (spine) ở vị trí tự nhiên, thẳng, không bị kiểm soát. hông (hip) được tự do di chuyển;</li>
<li><strong>structure</strong>: tay (hands) và chân (legs) tự do tạo ra các grips và khung - frames;</li>
<li><strong>base</strong>: bạn có thể tạo (gen) hoặc hấp thụ lực (absorb) nhờ vai và vị trí đặt chân.</li>
</ul>
<p>đối thủ sẽ có 3 điểm nếu, tương ứng:</p>
<ul>
<li>cổ và cột sống thẳng, nằm chính diện (vertical, centre) giữa cơ thể bạn;</li>
<li>tay của họ không bị kiểm soát một cách chủ động;</li>
<li>họ có thể chống lại lực từ bạn với cột sống thẳng, vai mở. họ có khả năng break guard khi ngồi - dùng tay, hoặc đứng lên.</li>
</ul>
<p>cả hai đều không có lợi thế đáng kể và nỗ lực submission sẽ dẫn đến escape hoặc reversal.</p>
</section>
<section id="core-mechanics" class="level1 page-columns page-full">
<h1>2. <a href="https://www.bjjmentalmodels.com/core-mechanics/">core mechanics</a></h1>
<p>nếu tiếp cận BJJ theo technique approach, sẽ có rất nhiều kỹ thuật cũng các biến thể (variations) mà bạn không thể khi nhớ hết. <em>may mắn là</em>, các kỹ thuật của BJJ đều là sự kết hợp của 6 cơ chế cốt lõi (core mechanics) sau đây:</p>
<ol type="1">
<li><strong>frame (khung)</strong>:</li>
</ol>
<ul>
<li>là concept phòng thủ quan trọng nhất trong BJJ, nó tạo ra một khung bảo vệ (shield) sử dụng những phần cơ thể cứng (hard) hoặc nhiều xương (bony), thường được sử dụng cho người ở vị trí dưới (bottom);</li>
<li>frame không phụ thuộc vào cơ bắp, mà là sự căn chỉnh hệ xương. bạn không muốn dùng áp lực đẩy đối thủ ra xa, mà là dùng cấu trúc xương để giữ đối thủ tại một khoảng cách nhất định, tạo không gian để bản thân di chuyển. frame tốt thì phải chắc chắn và không sử dụng quá nhiều sức lực ;</li>
<li>không nên frame với các khớp (joints) dễ bị đối phương khai thác: ví dụ dùng hai tay để đẩy đối thủ, phần cổ (wrist) và khuỷu tay yếu và rất dễ bị counter. tương tự, khi frame bằng chân, bạn nên sử dụng gối (knees) và ống chân (shins) nhờ diện tích lớn, dùng bàn chân (feet) có lợi thế về khoảng cách tạo được tuy nhiên rất dễ bị khai thác.</li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">đọc thêm về <a href="https://bjjmentalmodels.com/solid-frames/">solid frame</a></span></div><ol start="2" type="1">
<li><strong>levers (đòn bẩy)</strong>:</li>
</ol>
<ul>
<li>đòn bẩy là phép bội lực rất hiệu quả để tạo sơ hở (openings) và tấn công và kiểm soát đối thủ;</li>
<li>theo thứ tự từ khỏe đến yếu nhất, 3 công cụ đòn bẩy trên cơ thể bạn chính là <em>chân, tay, và đầu</em>; </li>
<li>đầu (head) thường được sử dụng để break tư thế (posture) của đối thủ, trong khi tay (arms) và chân (legs) thường được sử dụng để tấn công cấu trúc (structure);</li>
<li>mỗi chi bạn đều có 3 khớp (joints) chính: với tay là vai (shoulders), khuỷu tay (elbows), cổ tay (wrists), với chân là hông (hips), đầu gối (knees), và cổ chân (ankles);</li>
<li>để kiểm soát tốt tay hoặc chân đối phương bạn cần kiểm soát được ít nhất 2/3 khớp; trên trục tay, chân, khớp tạo ra hiệu ứng đòn bẩy tốt nhất là khớp ngoài cùng; </li>
<li>lúc bạn tấn công, đòn bẩy cho phép bạn tiến tới các vị trí kiểm soát và submission, suy cho cùng thì trong mọi submission hợp lệ, bạn luôn phải tận dụng, kiểm soát được ít nhất một đòn bẩy của đối phương; </li>
<li>khi không ai có ưu thế, người đầu tiên kiểm soát được lever của đối phương sẽ kiểm soát trận đấu; </li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">đây chính là <a href="https://www.bjjmentalmodels.com/anatomic-hierarchy/">anatomic hierarchy</a></span><span class="margin-aside">đọc thêm về <a href="https://bjjmentalmodels.com/3-joint-rule/">3-joint rule</a></span><span class="margin-aside">đọc thêm về <a href="https://bjjmentalmodels.com/isolate-a-single-target/">isolate a single target</a></span><span class="margin-aside">đọc thêm về <a href="https://bjjmentalmodels.com/grips-dictate-position/">grips dictate position</a></span></div><ol start="3" type="1">
<li><strong>wedges (nêm/chêm)</strong>:</li>
</ol>
<p>có hai kiểu nêm:</p>
<ul>
<li>nêm chặn (blocking wedges): cố định một phần cơ thể đối thủ;</li>
<li>nêm cạy (prying wedge): giúp mở khung (frame) của đối thủ.</li>
</ul>
<p>một số ví dụ:</p>
<ul>
<li>cho tay vào hông (hip) của đối phương để pass guard, không cho đối thủ re-guard chính là ví dụ của nêm chặn;</li>
<li>đòn cắt gối để pass guard (knee cut pass), khi bạn cố đưa gối vào mở hai chân đối thủ, chính là ví dụ của nêm cạy.</li>
</ul>
<p>nêm và đòn bẩy thường đi với nhau, bạn cần dùng nêm để sử dụng đòn bẩy hiệu quả hơn: <strong>nêm một đầu, đòn bẩy một đầu</strong> giúp cố định tốt hơn. gồm hai schemes:</p>
<ul>
<li>hai đánh một: two-on-one (two limbs controlling one lever);</li>
<li>bốn đánh một: four-on-one (four limbs controlling one lever).</li>
</ul>
<ol start="4" type="1">
<li><strong>clamps (kẹp)</strong>:</li>
</ol>
<div class="page-columns page-full"><p>kẹp thường được sử dụng khi bạn đã khóa (lock) được một phần cơ thể của đối thủ trong một vòng khép kín (<strong>closed circuit</strong>), siết chặt hai tay và hai chân để tạo ra một chuỗi động lực học. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://bjjmentalmodels.com/kinetic-chains/">kinetic chains</a></span></div></div>
<p>cơ chế kiểm soát này như một chiếc neo làm chậm đối thủ, kết dính cơ thể bạn với họ.</p>
<ol start="5" type="1">
<li><strong>hooks (móc)</strong>:</li>
</ol>
<div class="page-columns page-full"><p>các móc được tạo ra từ phần cuối mỗi chi (ND: bàn chân, bàn tay). tuy nhiên người ta thường chỉ hook với phần mu bàn chân (instep ~ shoelace area), nó được gọi là butterfly hook. móc tạo ra các chuyển động, lực kéo từ vị trí dưới, yêu cầu bạn phải kiểm soát được không gian phía trong giữa bạn và đối thủ. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://bjjmentalmodels.com/inside-channel-control/">inside channel</a></span></div></div>
<p>hook nhìn chung cũng yếu, bởi vì bạn kiểm soát từ bên trong (không phải bên ngoài và tạo một vòng <strong>khép kín</strong>). nó sẽ bị vô hiệu hóa nếu đối phương luồn tay thoát vị trí (pummels) hoặc thoát ly, gỡ khóa (disengages) ~ thường thì họ cũng không mất nhiều sức và thời gian cho chuyện này.</p>
<ol start="6" type="1">
<li><strong>posts (trụ)</strong>:</li>
</ol>
<p>post (trụ) được dùng để duy trì base (cơ sở). mindset về giữ vững trụ cho phép sự linh hoạt và chuyển động hông (hip) khi ở vị trí dưới, hay chống bị quét, lật (sweep) khi ở vị trí trên/đứng.</p>
<div class="page-columns page-full"><p>khí sử dụng post ở vị trí dưới, điều quan trọng là trụ phải cùng phương với vector lực tới, nếu không post của bạn sẽ support cho trọng lượng của đối thủ. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thên <a href="https://www.bjjmentalmodels.com/force-vectors/">force vectors</a></span></div></div>
</section>
<section id="anatomic-hierarchy" class="level1 page-columns page-full">
<h1>3. <a href="https://bjjmentalmodels.com/anatomic-hierarchy/">anatomic hierarchy</a></h1>
<p>cơ thể con người có 6 cơ quan vũ khí, trong đó core (gòm <em>ngực - chest, bụng - midsection, hông - hips</em>) là phần mạnh nhất.</p>
<ol type="1">
<li>core;</li>
<li>2 legs;</li>
<li>2 arms;</li>
<li>head.</li>
</ol>
<p>với bạn, 6 bộ phận này là vũ khí chống lại đối thủ. ở chiều ngược lại - với họ, 6 bộ phận này là mục tiêu để họ tấn công, khống chế, và submits.</p>
<div class="page-columns page-full"><p>hãy luôn nhớ rằng, bạn phải tận dụng tối đa phần cơ thể khỏe nhất của bạn. vì core là phần mạnh nhất, nếu khai thác được đó, xác xuất là rất cao bạn sử dụng được các kỹ thuật một cách hiệu quả. một sai lầm phổ biến của người mới là sử dụng quá mức năng lượng vào tay và chân. ngoài việc ưu tiên core, bạn cũng cần có tư duy sử dụng mọi bộ phận cơ thể nhiều nhất có thể. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://www.bjjmentalmodels.com/overwhelming-force/">overwhelming force</a></span></div></div>
<p>ngược lại, nên hạn chế tấn công vào core của đối thủ. sẽ dễ dàng hơn khi tấn công vào 4 góc phần tư của cơ thể (torso) họ - là 4 chi (limbs) và tất nhiên bao gồm hai bên hông và hai vai. kiểm soát levers tạo ra leverages, sẽ dễ phá vỡ được alignment của đối thủ hơn.</p>
</section>
<section id="type-of-guards" class="level1">
<h1>4. <a href="https://bjjmentalmodels.com/types-of-guard/">type of guards</a></h1>
<p>có hàng chục, thậm chí là hàng trăm các loại guards, chúng cũng đang được thêm mới mỗi ngày. do đó rất cần thiết để hiểu, phân loại các guards dựa trên đặc điểm cơ chế (mechanical characteristics) của chúng. chúng ta sẽ hiểu sâu hơn và dễ dàng áp dụng được hơn.</p>
<ol type="1">
<li><strong>hook-based</strong>;</li>
</ol>
<p>bạn theo và bám (track and check) chuyển động của đối thủ bằng cách “móc” (hooking) sử dụng tay (bàn tay) và chân (mu bàn chân). tuy chúng lỏng lẻo (shallow), và thường không có tác dụng cố định đối thủ (immobilizing), nhưng là cách rất tốt để cảm nhận vị trí cơ thể và phản ứng lại. hooks thường được dùng để nâng đối thủ lên một cách linh hoạt.</p>
<p>ví dụ:</p>
<ul>
<li>butterfly guard;</li>
<li>instep/shin-to-shin guard.</li>
</ul>
<ol start="2" type="1">
<li><strong>clamp-based</strong>;</li>
</ol>
<p>bạn sẽ trói (tethering) cơ thể của mình vào cơ thể đối thủ, ngăn cản (hindering) họ chuyển động. nhiều traditional guard là dựa vào việc kẹp, chúng bẫy, làm chậm đối thủ và đưa họ vào tình thế không thi đấu, triển khai được phương án. đối với người thực hiện, chúng cũng nguy hiểm khi cho phép đối thủ nâng bạn lên hoặc tạo áp lực bằng trọng lượng.</p>
<p>ví dụ:</p>
<ul>
<li>closed guard;</li>
<li>half guard.</li>
</ul>
<ol start="3" type="1">
<li><strong>frame-based</strong>;</li>
</ol>
<p>sử dụng frame tạo thành từ các chi (limbs) để giữ cho đối thủ ở một khoảng cách an toàn. rất hiệu quả đối với các đối thủ aggressive hoặc khỏe hơn, cũng rất hiệu quả trong MMA và chiến đấu thực tế khi giảm hiểu quả các đòn đánh/đấm của đối phương.</p>
<p>ví dụ:</p>
<ul>
<li>spider guard;</li>
<li>knee shield guard.</li>
</ul>
<ol start="4" type="1">
<li><strong>hybrid</strong>.</li>
</ol>
<p>các guard hiện đại thường là sự kết hợp giữa các thể loại đề cập ở trên.</p>
<p>ví dụ:</p>
<ul>
<li>de la Riva guard và các biến thể;</li>
<li>X guard và các biến thể.</li>
</ul>
</section>
<section id="breaking-mechanics" class="level1 page-columns page-full">
<h1>5. <a href="https://bjjmentalmodels.com/breaking-mechanics/">breaking mechanics</a></h1>
<p>có 4 kiểu khóa gãy (breaks):</p>
<ol type="1">
<li><strong>linear</strong> locks: như kneebars hoặc armbars;</li>
<li><strong>rotational</strong> locks: như heel hooks hoặc Kimuras;</li>
<li><strong>compression</strong> locks: như calf slicer;</li>
<li><strong>hybrid</strong> locks: kết hợp các kiểu hình trên.</li>
</ol>
<div class="page-columns page-full"><p>tương tự như choke, nên kết hợp các cơ chế khóa gãy bằng cách sử dụng hybrid locks. ví dụ: khi thực hiện kneebar ~ linear, nên sử dụng thêm rotation để nó thêm hiệu quả. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://www.bjjmentalmodels.com/choking-mechanics/">chokes</a></span></div></div>
<p>các bước để khóa gãy đối phương:</p>
<ol type="1">
<li><strong>isolate a lever</strong>: cô lập một chi, như chân hoặc tay;</li>
<li><strong>prevent predictable defenses</strong>: dự đoán các cách phòng thủ của đối thủ và đưa ra biện pháp phòng ngừa, cũng nên tập cải thiện alignment của bản thân trước khi phá vỡ alignment của họ;</li>
<li><strong>maximize leverage</strong>:</li>
</ol>
<ul>
<li>triệt để cố định khớp mà bạn có ý định tấn công, sử dụng 1 cái nêm cho khớp đó và khống chế các khớp lân cận.</li>
<li>các khớp lân cận nếu còn có thể di chuyển sẽ giảm bớt áp lực và làm suy yếu đòn tấn công của bạn.<br>
</li>
<li>đảm bảo là grip là chắc chắn và kéo dài “cánh tay đòn” nhất có thể (maximizing leverage), bạn phải từ từ đào bới “digging” để ra được vị trí đó.</li>
<li>trước khi siết lực, hãy đảm bảo mình đang có vị trí tốt nhất. sau khi siết cần hạn chế chuyển động.</li>
<li>các chuyển động của hông nên được sử dụng sau cùng;</li>
</ul>
<ol start="4" type="1">
<li><strong>apply overwhelming force</strong>.</li>
</ol>
<p>chỉ khi bạn cô lập được levers, ngăn chặn các rủi ro bị phòng ngự, tối ưu cánh tay đòn bạn mới nên bung sức.</p>
<div class="page-columns page-full"><p>khi bung sức, cần sử dụng cả core và sức mạnh từ nhiều chi nhất có thể, hãy nhớ chỉ <strong>sau khi</strong> tận dụng tối đa các ưu thế kĩ thuật (technical leverages), bạn mới bung sức. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://www.bjjmentalmodels.com/overwhelming-force/">overwhelming force</a></span></div></div>
</section>
<section id="choking-mechanics" class="level1 page-columns page-full">
<h1>6. <a href="https://bjjmentalmodels.com/choking-mechanics/">choking mechanics</a></h1>
<p>có năm loại siết nghẹt:</p>
<ol type="1">
<li><strong>air chokes</strong>: tạo áp lực lên khí quản (trachea/windpipe) để ngăn cản đối phương hô hấp, thở. nó cũng có thể được hiệu chỉnh để tạo ra phản xạ hầu / phản xạ họng (gax reflex),  tạo ra hiệu ứng như blood choke;</li>
<li><strong>blood chokes</strong>:</li>
</ol>
<div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://en.wikipedia.org/wiki/Pharyngeal_reflex">pharyngeal reflex</a></span></div><ul>
<li>tạo áp lực lên động mạnh cảnh (carotid arteries) ở hai bên cổ, ngặn chặn máu lưu thông lên não và làm mất ý thức đối thủ. vì ảnh hưởng rất nhanh, blood chokes thường được coi là hiệu quả hơn air chokes, đa số các đòn chokes trong Jiu-jitsu thuộc loại này.</li>
<li>mục tiêu của mọi blood choke đều là tìm cách siết chặn động mạnh cảnh, dùng một cái nêm (wedge) để đẩy từ sau đầu (ND: trong trường hợp của RNC là cẳng tay) vào choke.</li>
<li>hãy hình dung RNC như một tam giác bao quanh đầu đối thủ (hai khuỷu tay và 1 vai), trong đó một góc tam giác - khuỷu tay ở vị trí dưới cằm (chin). công việc của bạn là tăng áp lực lên mỗi “cạnh” của tam giác đó đồng thời ghìm cái góc tam giác đó xuống;</li>
</ul>
<ol start="3" type="1">
<li><strong>cranks</strong>: giữ và tạo một lực xoắn/ ngẫu lực (torque) tới cổ (neck) và cột sống (spine), ví dụ đẩy hàm (jaw) vào phía trong sọ, hoặc vặn cổ bằng cách sử dụng hàm như một điểm móc. bạn không nhất thiết phải luồn được tay vào dưới cằm (chin) để thực hiện neck crank. crank thường tạo ra các chấn thương nghiêm trọng và thường hạn chế trong luyện tập, nó cũng bị cấm trong một số giải đấu;</li>
<li><strong>compression chokes</strong>: ép phổi làm đối phương khó chịu vì không đưa không khí vào phổi được, ví dụ như body triangle hay <a href="https://www.youtube.com/watch?v=baiTE16e5xE">Bas Rutten body crush</a>. nó cũng có thể làm gãy xương sườn và có thể không hợp lệ trong một số giải đấu;</li>
<li><strong>hybrid chokes</strong>: nên kết hợp nhiều kĩ thuật choke khác nhau, ví dụ blook choke kết hợp với một yếu tố crank.</li>
</ol>
</section>
<section id="ratchet-control" class="level1">
<h1>7. <a href="https://bjjmentalmodels.com/ratchet-control/">ratchet control</a></h1>
<p>kiểm soát đầu hoặc một chi sẽ đơn giản hơn rất nhiều nếu chúng ta xoay trục (rotation) một chút, và tốt nhất chính là để phương tạo lực của chúng ta vuông góc với phương chịu lực của đối thủ (ND: người dịch confused về bản dịch này). phương pháp này gọi là kiểm soát bánh cóc (ratchet control). có 2 loại:</p>
<ol type="1">
<li><strong>internal ratchet control</strong>: khi bạn xoay một chi <em>ngược lại với chuyển động tự nhiên</em> của nó. ví dụ Kimuras (ngoặt tay đối thủ ra sau lưng) hay heel hooks (trục chân bị xoay với hướng gót ra ngoài);</li>
<li><strong>external ratchet control</strong>: khi bạn xoay một chi <em>theo hướng chuyển động tự nhiên</em> của nó, cho tới khi đối thủ không chịu đựng được. ví dụ Americana hay knee flares.</li>
</ol>
<p>dù external ratchet control rất hữu ích nhưng nó thường mang lại sự thoải mái cho đối thủ trong lúc bạn tấn công (khi chưa tới ngưỡng chịu đựng). nên internal ratchet control thường được lựa chọn hơn khi bắt đối thủ phải quay đi và để hở lưng, ví dụ Kimuras hay backside 50-50.</p>
<p>một số ví dụ:</p>
<ul>
<li>khi dùng đòn armbar, hãy xoắn (twist) tay đối phương song song với việc duỗi ra (hyper-extending);</li>
<li>khi dùng đòn kneebar, hãy kéo gót chân gần về phía bạn để tăng lực xoay;</li>
<li>khi kéo đầu đối phương xuống, hãy kéo và vặn/xoắn cổ.</li>
</ul>
<p>chúng rất hữu dụng vì phá đi posture và structure của đối thủ. khi hệ xương của đối phương không còn ngay hàng thẳng lối, sức mạnh cơ bắp (musculature) cũng sẽ bị hạn chế đi nhiều.</p>
</section>
<section id="controlled-breathing" class="level1 page-columns page-full">
<h1>8. <a href="https://bjjmentalmodels.com/controlled-breathing/">controlled breathing</a></h1>
<p>hãy chú ý đế nhịp thở của bạn, hãy duy trí một nhịp thở thoải mái (relaxed cadence) có chủ ý (deliberate).</p>
<div class="page-columns page-full"><p>chúng ta thường nghĩ tâm trí (mind) sẽ dẫn dắt cơ thể (body), tuy nhiên trên thực tế chúng có mối quan hệ chặt chẽ và đôi khi cơ chế là ngược lại.  ví dụ khi bạn cươi, tâm lý của bạn sẽ vui vẻ hơn. tương tự, kiểm soát hơi thở sẽ giúp bạn thoải mái và tiết kiệm (conserve) năng lượng.</p><div class="no-row-height column-margin column-container"><span class="margin-aside">ref <a href="https://www.scientificamerican.com/article/smile-it-could-make-you-happier/">Smile! It Could Make You Happier</a></span></div></div>
<p>kiểm soát hơi thở là rất quan trọng khi bạn đối đầu với những người to hoặc nhiều kinh nghiệm hơn. bên cạnh việc bảo toàn được sức lực, nó còn giúp bạn bình tĩnh lại. sự bình tĩnh là tối quan trọng để ngăn sự hoàng loạn (panicking) khi bạn chịu thử thách thực sự.</p>
<p>đối thủ có kinh nghiệm cũng sẽ cảm nhận (sensing) được sự hoảng loạn nếu có trong nhịp thở của bạn. thở không kiểm soát có thể báo hiệu sự hoảng loạn đó cho đối thủ, khiến anh ta bắt đầu tấn công chớp nhoáng (blitz attacking) hoặc tăng nhịp độ (tempo).</p>
<p>nó cũng giúp tim phân phối lượng oxy tới cơ bắp đồng đều hơn, rất quan trọng trong việc giữ nhịp tim và tránh mệt mỏi quá mức.</p>
</section>
<section id="staying-loose" class="level1 page-columns page-full">
<h1>9. <a href="https://bjjmentalmodels.com/staying-loose/">staying loose</a></h1>
<p>hãy luôn chú ý một cách có ý thức (conscious attention) tới việc thả lỏng cơ bắp (relaxed &amp; fluid), chỉ gồng/căng (tense) chúng khi mọi thứ đã sẵn sàng. nhưng khi nào thì được gọi là “sẵn sàng”?:</p>
<ul>
<li>chiếm được một góc đánh ưu thế; </li>
<li>phá vỡ, gián đoạn một cách có hiệu quả vị trí căn chính của đối phương; </li>
<li>hoặc bạn đưa đối thủ vào một tình huống tiến thoái lưỡng nan. </li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://www.bjjmentalmodels.com/dominant-angles/">dominant angles</a></span><span class="margin-aside">xem thêm về <a href="https://bjjmentalmodels.com/theory-of-alignment/">alignment</a></span><span class="margin-aside">xem thêm về <a href="https://www.bjjmentalmodels.com/dilemma/">dilema</a></span></div><p>gồng cứng cơ bắp khi không cần thiết sẽ:</p>
<ul>
<li>làm chúng mệt mỏi (fatigues);</li>
<li>làm lộ ý định của bạn;</li>
<li>tay hoặc chân gồng quá cứng sẽ dễ dàng cho đối phương kiểm soát và khống chế.</li>
</ul>
<p>nó cũng là hiện tượng dễ hiểu khi cơ chế phản ứng của con người thường là sẽ gồng lại khi cảm thấy bị đe dọa, đó là lý do mà người mới tập thường gồng cứng khi roll. cần tập luyện và kỷ luật để có thể thả lỏng được trước áp lực - calm under fire!</p>
<p>nếu đa số các kỹ năng / kỹ thuật mà bạn tập trung vào đều phụ thuộc vào sức mạnh cơ bắp, và bạn thường xuyên cảm thấy đuối, mệt mỏi, đó chính là dấu hiệu của việc bạn không thực hiện đúng kỹ năng / kỹ thật đó. cần đánh giá và luyện tập lại.</p>
<p>chỉ có một tính huống duy nhất mà bạn nên bung sức mạnh cơ bắp, đó là lúc bạn đảm bảo được việc thực hiện thành công một kĩ thuật, đối phương không thể phòng thủ và bạn đã ở tư thế hiệu quả nhất có thể. lúc đó sức mạnh cơ bắp sẽ khuếch đại cao nhất lợi thế bạn đang có.</p>
<p>tóm lại: chỉ bung cơ bắp khi đã ở trong tính huống hiệu quả nhất trong một đòn thế, còn lại, <strong>đừng</strong>.</p>
<blockquote class="blockquote">
<p>“Notice that the stiffest tree is most easily cracked, while the bamboo or willow survives by bending with the wind.” <strong>—- Bruce Lee</strong></p>
</blockquote>
</section>
<section id="limb-coiling" class="level1">
<h1>10. <a href="https://bjjmentalmodels.com/limb-coiling/">limb coiling</a></h1>
<p>giữ tứ chi của bạn cuộn sát vào cơ thể, sẵn sáng tấn công. cụ thể:</p>
<ul>
<li>giữ cằm của bạn khom xuống, hai vai cũng gù, khom vào để hạn chế việc đối thủ tấn công vào cổ;</li>
<li>khuỷu tay luôn khép chặt vào hông, sườn (core, hips);</li>
<li>giữ đầu gối gập lại.</li>
</ul>
</section>
<section id="elbow-knee-connection" class="level1">
<h1>11. <a href="https://bjjmentalmodels.com/elbow-knee-connection/">elbow-knee connection</a></h1>
</section>
<section id="solid-frames" class="level1">
<h1>12. <a href="https://bjjmentalmodels.com/solid-frames/">solid frames</a></h1>
</section>
<section id="kinetic-chains" class="level1">
<h1>13. <a href="https://bjjmentalmodels.com/kinetic-chains/">kinetic chains</a></h1>
</section>
<section id="body-tethering" class="level1">
<h1>14. <a href="https://bjjmentalmodels.com/body-tethering/">body tethering</a></h1>
</section>
<section id="inside-channel-control" class="level1">
<h1>15. <a href="https://bjjmentalmodels.com/inside-channel-control/">inside channel control</a></h1>
</section>
<section id="single-vs.-double-level-control" class="level1">
<h1>16. <a href="https://bjjmentalmodels.com/single-vs-double-lever-control/">single vs.&nbsp;double level control</a></h1>
</section>
<section id="overwhelming-force" class="level1">
<h1>17. <a href="https://bjjmentalmodels.com/overwhelming-force/">overwhelming force</a></h1>
</section>
<section id="surface-area" class="level1">
<h1>18. <a href="https://bjjmentalmodels.com/surface-area/">surface area</a></h1>
</section>
<section id="joint-rule" class="level1">
<h1>19. 3-joint rule</h1>
</section>
<section id="center-of-gravity" class="level1">
<h1>20. center of gravity</h1>
</section>
<section id="critical-control-points" class="level1">
<h1>21. critical control points</h1>
</section>
<section id="direct-vs.-proxy-control" class="level1">
<h1>22. direct vs.&nbsp;proxy control</h1>
</section>
<section id="force-compression" class="level1">
<h1>23. force compression</h1>
</section>
<section id="force-vectors" class="level1">
<h1>24. force vectors</h1>
</section>
<section id="head-position" class="level1">
<h1>25. head position</h1>
</section>
<section id="inertia" class="level1">
<h1>26. inertia</h1>
</section>
<section id="leading-edges" class="level1">
<h1>27. leading edges</h1>
</section>
<section id="mirrored-stances" class="level1">
<h1>28. mirrored stances</h1>
</section>
<section id="momentum" class="level1">
<h1>29. momentum</h1>
</section>
<section id="priits-45-rule" class="level1">
<h1>30. priit’s 45° rule</h1>
</section>
<section id="redundancies" class="level1">
<h1>31. redundancies</h1>
</section>
<section id="seated-vs.-supine-guards" class="level1">
<h1>32. seated vs.&nbsp;supine guards</h1>
</section>
<section id="stress-and-recovery" class="level1">
<h1>33. stress and recovery</h1>
<p><a href="https://www.youtube.com/watch?v=XGZ-0ZoFqKk" class="uri">https://www.youtube.com/watch?v=XGZ-0ZoFqKk</a></p>


<!-- -->

</section>

 ]]></description>
  <category>bjj</category>
  <guid>https://lktuan.github.io/blog/2024-08-06-bjj-mental-models/</guid>
  <pubDate>Mon, 05 Aug 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-08-06-bjj-mental-models/bjj_mental_models.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Now I know docker init is a thing</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-30-docker-init/</link>
  <description><![CDATA[ 





<p>TIL that Docker has an <a href="https://docs.docker.com/language/python/containerize/">example</a> for containerizing Python apps. It uses a simple <a href="https://fastapi.tiangolo.com/">FastAPI</a> example for demonstration. We can download the project as below:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/estebanx64/python-docker-example</span></code></pre></div>
<p>After navigating to our project, we can easily set up our project for containerization with <code>docker init</code>. This will create:</p>
<ul>
<li><code>.dockerignore</code></li>
<li><code>Dockerfile</code></li>
<li><code>compose.yaml</code></li>
<li><code>README.Docker.md</code></li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> init</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Welcome</span> to the Docker Init CLI!</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">This</span> utility will walk you through creating the following files with sensible defaults for your project:</span>
<span id="cb2-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> .dockerignore</span>
<span id="cb2-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Dockerfile</span>
<span id="cb2-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> compose.yaml</span>
<span id="cb2-9">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> README.Docker.md</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Let</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s get started!</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What application platform does your project use? Python</span></span>
<span id="cb2-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What version of Python do you want to use? (3.11.4)</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What version of Python do you want to use? 3.11.4</span></span>
<span id="cb2-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What port do you want your app to listen on? (8000)</span></span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What port do you want your app to listen on? 8000</span></span>
<span id="cb2-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What is the command you use to run your app? (uvicorn '</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">app:app</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' --host=0.0.0.0 --port=8000)</span></span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What is the command you use to run your app? uvicorn '</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">app:app</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' --host=0.0.0.0 --port=8000</span></span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✔ Created → .dockerignore</span></span>
<span id="cb2-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✔ Created → Dockerfile</span></span>
<span id="cb2-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✔ Created → compose.yaml</span></span>
<span id="cb2-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✔ Created → README.Docker.md</span></span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">→ Your Docker files are ready!</span></span>
<span id="cb2-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Review your Docker files and tailor them to your application.</span></span>
<span id="cb2-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Consult README.Docker.md for information about using the generated files.</span></span>
<span id="cb2-32"></span>
<span id="cb2-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">! Warning → Make sure your requirements.txt contains an entry for the uvicorn package, which is required to run your application.</span></span>
<span id="cb2-34"></span>
<span id="cb2-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">What'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">s</span> next<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span>
<span id="cb2-36">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Start</span> your application by running → docker compose up <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build</span></span>
<span id="cb2-37">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Your</span> application will be available at http://localhost:8000</span></code></pre></div>
<p>I can access the application right after running <code>docker compose up --build</code>. The image buidling process was fast, and image size was only <code>203.21MB</code>.</p>
<p>Let’s take a look at the <code>Dockerfile</code>. IMHO, this is not yet a optimal Dockerized Python project:</p>
<ul>
<li>Lack off a dependency management tool (for e.g, <code>pipenv</code>, <code>poetry</code> both are good, production-ready);</li>
<li>This is single-step builder. Should we split it to <code>dependencies</code> and <code>runtime</code> steps, which will limit the objects in the <code>runtime</code> image to only those needed to run the application? </li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">further reading, <a href="https://sourcery.ai/blog/python-docker/">“A perfect way to Dockerize your Pipenv Python application”</a></span></div><p>I do see some good practices here that we should run our apps in a non-privileged user rather than root as well as <em>mount cache and bind</em>, using Docker’s BuildKit feature, which allows more advanced mounting capabilities during build time:</p>
<ol type="1">
<li>first <code>--mount=type=cache,target=/root/.cache/pip</code> option:</li>
</ol>
<ul>
<li>This creates a cache mount for pip’s cache directory;</li>
<li>It speeds up subsequent builds by reusing cached pip packages;</li>
<li>The cache persists between builds, saving time and bandwidth.</li>
</ul>
<ol start="2" type="1">
<li>second <code>--mount=type=bind,source=requirements.txt,target=requirements.txt</code> option:</li>
</ol>
<ul>
<li>This creates a bind mount for the <code>requirements.txt</code> file;</li>
<li>It allows access to the <code>requirements.txt</code> file without copying it into the image layer;</li>
<li>This is useful for keeping the image size smaller and allowing changes to <code>requirements.txt</code> without rebuilding all layers.</li>
</ul>
<p>In conclusion, benefits are:</p>
<ol type="1">
<li><strong>Faster builds</strong>: By using a cache mount for pip, subsequent builds can reuse cached packages, significantly speeding up the process.</li>
<li><strong>Smaller image size</strong>: The bind mount for <code>requirements.txt</code> means the file doesn’t need to be copied into the image, keeping the image size smaller.</li>
<li><strong>Better caching</strong>: Changes to <code>requirements.txt</code> don’t invalidate the entire layer cache, only the parts that have changed.</li>
<li><strong>Separation of concerns</strong>: Downloading dependencies is done as a separate step, which can be beneficial for Docker’s layer caching mechanism.</li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># syntax=docker/dockerfile:1</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Comments are provided throughout this file to help you get started.</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you need more help, visit the Dockerfile reference guide at</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://docs.docker.com/go/dockerfile-reference/</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ARG</span> PYTHON_VERSION=3.11.4</span>
<span id="cb3-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FROM</span> python:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${PYTHON_VERSION}</span>-slim as base</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prevents Python from writing pyc files.</span></span>
<span id="cb3-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ENV</span> PYTHONDONTWRITEBYTECODE=1</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keeps Python from buffering stdout and stderr to avoid situations where</span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the application crashes without emitting any logs due to buffering.</span></span>
<span id="cb3-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ENV</span> PYTHONUNBUFFERED=1</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a non-privileged user that the app will run under.</span></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># See https://docs.docker.com/go/dockerfile-user-best-practices/</span></span>
<span id="cb3-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ARG</span> UID=10001</span>
<span id="cb3-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> adduser <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--disabled-password</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--gecos</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--home</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/nonexistent"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--shell</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/sbin/nologin"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-create-home</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--uid</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${UID}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-31">    appuser</span>
<span id="cb3-32"></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download dependencies as a separate step to take advantage of Docker's caching.</span></span>
<span id="cb3-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.</span></span>
<span id="cb3-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Leverage a bind mount to requirements.txt to avoid having to copy them into</span></span>
<span id="cb3-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># into this layer.</span></span>
<span id="cb3-37"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mount</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>type=cache,target=/root/.cache/pip <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mount</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>type=bind,source=requirements.txt,target=requirements.txt <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-39">    python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span>
<span id="cb3-40"></span>
<span id="cb3-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Switch to the non-privileged user to run the application.</span></span>
<span id="cb3-42"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">USER</span> appuser</span>
<span id="cb3-43"></span>
<span id="cb3-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy the source code into the container.</span></span>
<span id="cb3-45"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">COPY</span> . .</span>
<span id="cb3-46"></span>
<span id="cb3-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Expose the port that the application listens on.</span></span>
<span id="cb3-48"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">EXPOSE</span> 8000</span>
<span id="cb3-49"></span>
<span id="cb3-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the application.</span></span>
<span id="cb3-51"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CMD</span> uvicorn <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'app:app'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--host</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>0.0.0.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--port</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>8000</span></code></pre></div>
<p>Happy coding!</p>


<!-- -->


 ]]></description>
  <category>docker</category>
  <category>python</category>
  <guid>https://lktuan.github.io/blog/2024-07-30-docker-init/</guid>
  <pubDate>Mon, 29 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-30-docker-init/python_docker.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>BJJ Beginners Guide</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/</link>
  <description><![CDATA[ 





<p>Đây là bài (lược) dịch từ beginners guide của Reddit community <code>r/bjj</code>. Link gốc bài viết: <a href="https://www.reddit.com/r/bjj/wiki/beginners-guide/" class="uri">https://www.reddit.com/r/bjj/wiki/beginners-guide/</a>. Một số thuật ngữ mình có thể sẽ để nguyên bản Tiếng Anh, hoặc để kèm trong ngoặc tròn <code>()</code>, chú thích (nếu có) sẽ được đặt trong dấu ngoặc tròn sau “ND”.</p>
<p>Mục đích đánh giá lại những gì mình đạt được sau 6 tháng theo đuổi BJJ.</p>
<section id="hướng-dẫn-jiu-jitsu-cho-người-mới-bắt-đầu" class="level1">
<h1>Hướng dẫn Jiu-jitsu cho người mới bắt đầu</h1>
<p>Chào mừng đến với Brazil Jiujitsu và chào mừng đến với <code>r/bjj</code>! Đây là hướng dẫn tổng hợp dành cho người mới để bắt đầu hành trình Jiu-jitsu của bạn.</p>
<p>Chúc may mắn, và hãy tử tế!</p>
<p>Bạn có đề xuất, cải tiến hoặc nhận xét cho bài viết này? Để nó ở <a href="https://docs.google.com/forms/d/e/1FAIpQLSclF8d-uXVmPVQ3EoV3K-SexnoWbefI5y6lofkSUNI68RpDCQ/viewform">đây</a>.</p>
</section>
<section id="bjj-là-gì" class="level1">
<h1>BJJ là gì?</h1>
<p>Brazilian Jiu-jitsu, đôi lúc gọi là Jiu-jitsu (ND: 八四柔术 Nhu thuật Brazin) là một môn võ kế thừa từ Judo (ND: 柔道 Nhu đạo Nhật bản). Nó:</p>
<ul>
<li>Đối kháng (contact), nghĩa là bạn cần tranh giành ưu thế, chiến thắng với người khác;</li>
<li>Tay không (bare-handed), nghĩa là không vũ khí nào được chấp nhận;</li>
<li>Dựa vào vật lộn (grappling-based), phương thức chiến đấu là vật (grappling, wrestling), đấm (punching) và đá (kicking) là không được phép;</li>
<li>Submission-based (ND: chưa thể dịch từ này), nghĩa là mục tiêu cần đạt được là bắt đối thủ đầu hàng (submission) thông qua một đòn siết nghẹt (choke) hoặc đe dọa tổn thương tới các khớp của họ, hơn là chỉ đơn thuần là chiếm vị trí ưu thế (positioning) hoặc ghim chặt đối thủ (pinning).</li>
</ul>
<p>BJJ khác với Judo ở chỗ nó thiên về vật lộn / địa chiến (ground grappling), trong khi Judo nhấn mạnh về quăng (throws) và quật ngã (takedowns) từ vị trí đứng.</p>
</section>
<section id="tôi-có-thực-sự-thích-jiu-jitsu-không" class="level1">
<h1>Tôi có (thực sự) thích Jiu-jitsu không?</h1>
<p>Bạn sẽ thích Jiu-jitsu nếu:</p>
<ul>
<li>Đang tìm kiếm một bài thể thao rèn luyện (workout), nhưng ghét tập các môn thể dục như chạy bộ, nâng tạ;</li>
<li>Tìm kiếm một cộng đồng sôi động;</li>
<li>Cần tìm cảm giác có mục đích và tiến bộ;</li>
<li>Thích các hoạt động thể thao kết hợp thể chất và trí não (cerebral), như leo núi;</li>
<li>Đã từng đào tạo các môn thể thao đối kháng (combat) khác;</li>
<li>Muốn thử gì đó mới mẻ?.</li>
</ul>
</section>
<section id="jiu-jitsu-có-phù-hợp-với-tôi-không" class="level1">
<h1>Jiu-jitsu có phù hợp với tôi không?</h1>
<p>Nó phù hợp với tất cả bất kể tuổi, thể trạng, giới tính, hoàn cảnh, kinh nghiệm. Tuy nhiên, có thể tập và không cần coi nó là sở thích của bạn, và bạn cũng không cần xuất sắc trong môn này. Mục tiêu không phải là hơn thua với người khác, mà là trở nên <em>tốt nhất có thể</em>.</p>
</section>
<section id="làm-sao-để-thử-và-bắt-đầu" class="level1">
<h1>Làm sao để thử và bắt đầu</h1>
<ol type="1">
<li>Tìm một phòng tập, nên là các phòng có đánh giá tốt;</li>
<li>Tìm hiểu lịch tập, chính sách, giá cả;</li>
<li>Mặc quần áo thoải mái, không đeo trang sức, mang nước, thời điểm này bạn chưa cần trang bị nào khác;</li>
<li>Tập thử;</li>
<li>Lớp thông thường sẽ bao gồm: khởi động (warmups), dạy kĩ thuật và tập luyện (teaching &amp; drilling), sau đó là đối kháng (sparring, rolling, open mat). Tập nhẹ nhàng và không nên kì vọng quá nhiều;</li>
<li>(&amp; 7) Xin tập thử thêm, hoặc tìm một CLB khác, hãy mạnh dạn, cho tới khi ưng ý.</li>
</ol>
</section>
<section id="lựa-chọn-clbphòng-tập" class="level1">
<h1>Lựa chọn CLB/Phòng tập</h1>
<p>Nếu thấy thích BJJ thì bạn nên commit tới một phòng tập. Dưới đây là các tiêu chí:</p>
<ul>
<li>Không khí (Vibe): Thấy hợp không (jibe with the vibe), các thành viên có thân thiện không. Trang thiết bị có sơ sài, có mùi hay không?;</li>
<li>Chất lượng (Quality): Có năng lực tổ chức tốt hay không? Họ focus vào Jiu-jitsu hay các môn khác nữa? Người chủ có đai đen hay không? Họ đào tạo BJJ bao lâu rồi?;</li>
<li>Địa điểm (Location): Thuận tiện cho bạn hay không?;</li>
<li>Chi phí (Cost): Có phù hợp với bạn hay không?.</li>
</ul>
</section>
<section id="các-quy-tắc-lịch-sự" class="level1">
<h1>Các quy tắc lịch sự</h1>
<section id="tổng-quan" class="level2">
<h2 class="anchored" data-anchor-id="tổng-quan">Tổng quan</h2>
<p>Hãy lịch sử và tuân thủ các quy tắc. Bạn đang tham gia một cộng đồng đang cố gắng cải thiện kỹ năng của họ, chứ không phải chiến đấu để đứng đầu theo kiểu của bạn.</p>
</section>
<section id="vệ-sinh-và-sức-khỏe" class="level2">
<h2 class="anchored" data-anchor-id="vệ-sinh-và-sức-khỏe">Vệ sinh và sức khỏe</h2>
<ul>
<li>Đừng đến phòng tập nếu bạn ốm hoặc có virus hoặc bệnh truyền nhiễm khác;</li>
<li>Mang dép hoặc giày ngoài thảm, đi chân đất trên thảm;</li>
<li>Giặt, vệ sinh đồ tập sau mỗi buổi học;</li>
<li>Cắt gọn ngón chân / tay để tránh làm bị thương bạn tập;</li>
<li>Sử dụng xịt khử mùi, nước súc miệng nếu cần;</li>
<li>Trước buổi tập nếu có mồ hôi hoặc mùi, hãy tắm trước;</li>
<li>Tắm càng sớm càng tốt sau buổi tập để tránh nhiễm trùng da;</li>
<li>Chú ý đến da, nếu có vấn đề hãy ngừng tập và gặp bác sĩ.</li>
</ul>
</section>
<section id="tập-luyện-kĩ-thuật-drilling" class="level2">
<h2 class="anchored" data-anchor-id="tập-luyện-kĩ-thuật-drilling">Tập luyện kĩ thuật (Drilling)</h2>
<ul>
<li>Chia đều thời gian của bạn và bạn tập;</li>
<li>Chỉ nên đưa ra lời khuyên khi bạn thực sự tự tin, nếu không thì nghe coach (ND: Biết thì thưa thốt, không biết dựa cột mà nghe);</li>
<li>Mục tiêu là tập luyện các động tác trong điều kiện không có áp lực từ đối thủ. Nên đừng tạo áp lực quá nhiều cho bạn tập, cũng không nên quá thoải mái như một người nộm;</li>
<li>Tập trung vào các chuyện động (movement) hơn là đạt được kết quả của động tác.</li>
</ul>
</section>
<section id="tập-luyện-đối-kháng-rolling" class="level2">
<h2 class="anchored" data-anchor-id="tập-luyện-đối-kháng-rolling">Tập luyện đối kháng (Rolling)</h2>
<ul>
<li>Bạn có quyền từ chối việc roll với bất cứ ai, trong bất cứ thời điểm nào, hoặc bất kì lí do nào. Họ có thể không thích hoặc cho rằng nó thiếu lịch sự, nhưng, bạn có quyền;</li>
<li>Người ta thường đập và cụng ta (hand slap and dump) để đánh dấu cho một ca roll bắt đầu;</li>
<li>Cảm ơn bạn tập sau mỗi lần roll, bất kể nó kết thúc như thế nào;</li>
<li>Mục tiêu của roll là học hỏi chứ không phải chiến thắng, để dành cái ham muốn đó cho các trận đánh thực sự;</li>
<li>Điều tệ nhất bạn có thể làm là gây ra chấn thương cho bạn tập;</li>
<li>Một số thế submission có thể chuyển từ không đau cho tới tạo ra chấn thương nghiêm trọng nhất nhanh. Trong các trường hợp đó, hãy siết lực chậm lại để tạo thời gian cho bạn tập tap-out;</li>
<li>Khi roll với một bạn tập nhỏ hơn mình nhiều, đừng cố gắng dùng trọng lượng để đè họ xuống. Mục tiêu là học hỏi, và 5 phút đè như vậy và chả ai học được gì cả. Hãy cố linh hoạt nhiều tư thế;</li>
<li>Các va chạm tình cờ vào các vùng nhạy cảm là điều bình thường trong các môn vật. Cứ tiếp tục roll hoặc nói “Sorry” nếu bạn muốn, không nên giải thích dài dòng và nên tập trung vào tập luyện.</li>
</ul>
</section>
</section>
<section id="tổng-quan-các-vị-trí-trong-bjj" class="level1">
<h1>Tổng quan các vị trí trong BJJ</h1>
<p>Jiu-jitsu có phong phú các thế, tư thế chiến đấu (configurations and positions). Mỗi tư thế, đối với cả bạn và bạn tập đều sẽ có các chiến lược, kỹ thuật khác nhau.</p>
<p>Mỗi thế sẽ tương ưng là sự chiếm ưu thế cho một cá nhân, và sự thất thế cho một bên còn lại. Đối với người chiếm ưu thế, bạn đang tấn công, ngược lại, bạn đang trong vai trò phòng thủ. (ND) Sự chênh lệch giữa ưu / thất thế cũng sẽ khác nhau cho các thế đánh khác nhau. Mỗi người đều sẽ cố gắng dùng các chiến lược và kĩ thuật để tạo lợi thế cho bản thân.</p>
<p>Dưới đây là một số thế như vậy, bạn không cần ghi nhớ, bạn sẽ được dạy theo thời gian:</p>
<p><em>All photos below credit to orginal post.</em></p>
<section id="closed-guard" class="level2">
<h2 class="anchored" data-anchor-id="closed-guard">Closed Guard</h2>
<p>Closed Guard là tư thế phố biến nhất cho người mới bắt đầu, hai chân bạn sẽ vòng qua hông (waist) đối thủ và dùng mắt cá chân khóa (ankles) lại. Lợi thế thuộc về người ở trên (bạn tập của bạn).</p>
<p>Trong Jiu-jitsu, “guard” mang nghĩa tương tự như “chân”, tư thế này được gọi như vậy vì bạn dùng chân khóa kín đối thủ.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/closed_guard.png" class="img-fluid figure-img"></p>
<figcaption>Closed Guard</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="open-guard" class="level2">
<h2 class="anchored" data-anchor-id="open-guard">Open Guard</h2>
<p>Khi người ở trên có thể thoát, gỡ được móc nối giữa hai mắt cá chân, sẽ hình thành nên tư thế Open Guard. Lúc này “guard” đã được “open”, tư thế này rất linh động và có nhiều biến thể / tên gọi cho từng vị trí cụ thể, như <em>Spider Guard</em> hay <em>Lasso Guard</em>. Nhìn chung tư thế này không có lợi cho cả hai người.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/open_guard.png" class="img-fluid figure-img"></p>
<figcaption>Open Guard</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="side-control" class="level2">
<h2 class="anchored" data-anchor-id="side-control">Side Control</h2>
<p>Khi một người có thể vòng qua chân của người phía dưới và kiểm soát thân mình (torso) thì người đó được xem là đã “passed the guard”, động tác này kết thúc bằng từ thế Side Control. Lợi thế thuộc về người đó - người ở trên.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/side_control.png" class="img-fluid figure-img"></p>
<figcaption>Side Control</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="mount" class="level2">
<h2 class="anchored" data-anchor-id="mount">Mount</h2>
<p>Nếu người ở trên có thể giành được nhiều quyền kiểm soát hơn, họ có thể ngồi lên phần bụng (hips) hoặc ngực (chest), tư thế này được gọi là Mount và nó <em>cực kì</em> có lợi cho người ở trên.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/mount.png" class="img-fluid figure-img"></p>
<figcaption>Mount</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="back" class="level2">
<h2 class="anchored" data-anchor-id="back">Back</h2>
<p>Con người giỏi chiến đấu với các mối đe dọa đến trước mặt mình hơn là từ đằng sau. Vì thế lấy lưng là một tư thế tốt cho việc tấn công, và bị lấy lưng sẽ tạo ra sự thất thế cực lớn cho việc phòng ngự.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/back.png" class="img-fluid figure-img"></p>
<figcaption>Back</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="turtle" class="level2">
<h2 class="anchored" data-anchor-id="turtle">Turtle</h2>
<p>Tư thế con rùa mang lại một chút lợi thế cho người ở trên. Gọi là con rùa bởi vì tư thế của người ở dưới.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/turtle.png" class="img-fluid figure-img"></p>
<figcaption>Turtle</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="half-guard" class="level2">
<h2 class="anchored" data-anchor-id="half-guard">Half Guard</h2>
<p>Khi một người có thể dùng chân khống chế được một chân (thay vì từ phần hông và hai chân) của đối thủ, từ phía dưới, ta gọi đó là Half Guard. Ai có lợi thế còn tùy thuộc vào từng trường hợp cụ thể</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/half_guard.png" class="img-fluid figure-img"></p>
<figcaption>Half Guard</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="làm-sao-để-tiến-bộ" class="level1">
<h1>Làm sao để tiến bộ</h1>
<section id="chấp-nhận-thất-bại-nhất-là-khi-chỉ-mới-bắt-đầu" class="level2">
<h2 class="anchored" data-anchor-id="chấp-nhận-thất-bại-nhất-là-khi-chỉ-mới-bắt-đầu">Chấp nhận thất bại, nhất là khi chỉ mới bắt đầu</h2>
<ul>
<li>Rất là bình thường nếu bạn cảm thấy mình tệ. Bạn đang đào sâu vào một lĩnh vực sâu và phức tạp, ngay cả đai đen cũng có lúc nhận thấy nhiều thứ họ chưa thể hiểu được;</li>
<li>Nếu bạn không có kinh nghiệp vật (grappling) trước đó, 12 tháng đầu tiên bạn sẽ học 108 các phong cách tap-out khác nhau. Vậy nên đừng đo lường mức độ tiến bộ của bạn bằng các chiến thắng, mà nên là cách bạn cải thiện việc phòng thủ;</li>
<li>Hãy khiêm tốn và học cách trân trọng từng sự tiến bộ, tập trung vào học hỏi thay vì kết quả cuối cùng. Tất cả những gì bạn có thể đạt được là một chút tiến bộ mỗi ngày, ai cũng thế, ngay cả khi bạn không chứng kiến.</li>
</ul>
</section>
<section id="việc-khai-triển-kĩ-thuật-khó-hơn-rất-nhiều-khi-roll" class="level2">
<h2 class="anchored" data-anchor-id="việc-khai-triển-kĩ-thuật-khó-hơn-rất-nhiều-khi-roll">Việc khai triển kĩ thuật khó hơn rất nhiều khi Roll</h2>
<ul>
<li>Bạn có thể học được một kĩ thuật và thực hành nó một cách mượt mà khi đối thủ gần như không kháng cự khi tập luyện;</li>
<li>Nhưng khi vào live roll thì khác, khi đối thủ biết bạn muốn làm gì, bạn sẽ thậm chí không thế thực hiện được bước đầu tiên và mọi thứ đều đi chệch khỏi hướng. Hoặc, bạn cũng cảm thấy đầu óc bạn hoàn toàn trống rỗng (ND: hành động theo bản năng);</li>
<li>Điều này là hoàn toàn bình thường, học các bước cơ bản là khởi đầu cho hành trình dài để trở nên thành thạo. Hãy kiên nhẫn nghiên cứu xem mình đã làm chưa đúng ở bước nào, và tiếp tục thực hành.</li>
</ul>
</section>
<section id="làm-sao-tiến-bộ-một-cách-có-hiệu-quả" class="level2">
<h2 class="anchored" data-anchor-id="làm-sao-tiến-bộ-một-cách-có-hiệu-quả">Làm sao tiến bộ một cách có hiệu quả</h2>
<ul>
<li>Hãy đặt câu hỏi cho coach;</li>
<li>Hãy hỏi các tiền bối đi trước, nhớ rằng cần phải tôn trọng thời gian của họ;</li>
<li>Hãy xem các video hướng dẫn, tài nguyên rất phong phú trên Youtube. Cẩn thận với click-bait và video-brain - hãy xem có chọn lọc:</li>
<li>Click-bait: nhờ thuật toán của Youtube mà các video với tiêu đề ‘learn this unstoppable sweep’ hoặc ‘never get submitted again ever’ sẽ xuất hiện rất nhiều. Những thứ này không chính xác, hãy học những thứ basic. Những thứ trông fancy sẽ không phù hợp với mức độ kĩ năng của bạn đâu;</li>
<li>Video-brain: rất dễ để xem hết hai ba chục video youtube về các kỹ thuật submissions, escapes. Nhưng não bộ bạn sẽ không thể hấp thu hết được chừng đấy các kỹ thuật một cách chi tiết. Nếu bạn muốn áp dụng trong rolling, bạn sẽ thấy đầu ong ong và nhức nhức khi cố nhớ về kỹ thuật nào đó đã xem trong video nào đó trong hàng chục cái video khác. Hãy đi sâu thay vì đi rộng (recommended to go deep rather than broad). Xem nhiều video cho cùng một kĩ thuật, hoặc xem một video lặp lại nhiều lần và cố gắng tiếp thu trước khi move on.</li>
<li>Yêu cầu các bạn tập open mat học một kĩ thuật cụ thể hơn là rolling. Rolling mang lại cho bạn kinh nghiệm, nhưng nó sẽ rất loãng. Nếu bạn tập một tư thế guard hoặc một kỹ thuật với nhiều bạn tập khác nhau trong một thời gian ngắn, bạn sẽ thấy sự cải thiện rõ rệt. Hãy bắt đầu với tư thế mà bạn chưa thành thạo và reset nếu một trong hai thoát được khỏi đó. Tất nhiên cũng nên hỏi bạn tập xem họ muốn tập kĩ thuật nào;</li>
<li>Sau mỗi buổi tập, hãy nghĩ về những thứ mình chưa làm được khi roll. Hãy chọn 1, 2 chủ đề trong đó để tự học qua video, buổi sau bạn có thể thực hành cho tới khi thấy có cải thiện. Cứ thế tiếp tục một chu trình như vậy.</li>
</ul>
</section>
</section>
<section id="trang-bị-phụ-kiện" class="level1">
<h1>Trang bị, phụ kiện</h1>
<section id="gi" class="level2">
<h2 class="anchored" data-anchor-id="gi">Gi</h2>
<p>Bạn có thể mua Gi online hoặc ở ngay phòng tập. Tuy nhiên mua online sẽ rẻ hơn. Có một số phòng tập sẽ yêu cầu mua Gi hoặc patch.</p>
<p>Hãy kiểm tra kĩ size chart, nhất là nên hỏi những <em>bạn tập có cùng kích thước với mình</em>. Cũng nên nhớ rằng size chart có thể khác nhau cho các brand khác nhau.</p>
</section>
<section id="rashguard-for-no-gi" class="level2">
<h2 class="anchored" data-anchor-id="rashguard-for-no-gi">Rashguard (for No Gi)</h2>
<p>TODO</p>
</section>
<section id="quần-áo-lót-underclothes" class="level2">
<h2 class="anchored" data-anchor-id="quần-áo-lót-underclothes">Quần áo lót (Underclothes)</h2>
<p>Đối với Gi, bạn có thể mặc đồ lót dưới Gi (ND: vì áo Gi có thể bị kéo bung trong lúc tập luyện và bạn không muốn để ngực trần). Bạn có thể dễ dàng tìm các elastic/compression shirts và pants (spat) online. Hãy nhớ rằng chúng có thể bị nắm/kéo (ND: như là một phần của các kĩ thuật luyện tập với Gi), và có thể làm bạn nóng nực.</p>
<p>Trong thi đấu, nam <em>không được</em> mặc gì dưới áo Gi (Gi top). Còn nữ thì <em>phải mặc</em> compression shirt, gymnast top, hoặc one-piece swimsuit.</p>
</section>
<section id="bảo-vệ-hàm-mounthguard" class="level2">
<h2 class="anchored" data-anchor-id="bảo-vệ-hàm-mounthguard">Bảo vệ hàm (Mounthguard)</h2>
<p>Mặc dù không phải là môn về đấm / đá (striking), sẽ vẫn có khả năng đối thủ, bạn tập của bạn đánh trúng mặt hoặc siết vào hàm của bạn. Do đó, việc đeo bảo vệ hàm sẽ giúp hạn chế các tổn thương tới hàm, răng, môi, lưỡi - những tổn thương rất đau và khó hồi phục.</p>
</section>
<section id="cup" class="level2">
<h2 class="anchored" data-anchor-id="cup">… Cup</h2>
<p>Một số người dùng cup để vào vệ háng / bẹn (crotch), nhưng nó thực sự không cần thiết. Cup có thể làm tổn thương bạn tập, và bị cấm trong hầu hết các tour đấu.</p>
</section>
<section id="bảo-vệ-đầu-headgear" class="level2">
<h2 class="anchored" data-anchor-id="bảo-vệ-đầu-headgear">Bảo vệ đầu (Headgear)</h2>
<p>Bảo về đầu sẽ giúp bạn hạn chế các tổn thương tai - thường dẫn đến “tai súp lơ” (cauliflower ear). Tuy nhiên nó không phổ biến và việc dùng headgear bị cấm trong các tour đấu. Bạn chỉ nên dùng khi đã có các chấn thương và muốn chúng không nặng thêm cho tới khi lành lại.</p>
</section>
</section>
<section id="các-tài-liệu-khác" class="level1">
<h1>Các tài liệu khác</h1>
<p><a href="http://www.artemisbjj.com/FAQ/" class="uri">http://www.artemisbjj.com/FAQ/</a></p>


<!-- -->

</section>

 ]]></description>
  <category>bjj</category>
  <guid>https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/</guid>
  <pubDate>Sun, 28 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/sloth_bjj.png" medium="image" type="image/png" height="141" width="144"/>
</item>
<item>
  <title>Another James Powell’s impromptu talk, summary by Clauder 3.5 Sonnet</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-18-claude-summary/</link>
  <description><![CDATA[ 





<p>source: <a href="https://www.youtube.com/watch?v=-z2eqLwVmzw">James Powell - Whatever I Can do to Entertain You in 30 Minutes | PyData London 2022</a></p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-18-claude-summary/James Powell - Whatever I Can do to Entertain You in 30 Minutes _ PyData London 2022 0-35 screenshot.png" class="img-fluid figure-img"></p>
<figcaption>Whatever I Can do to Entertain You in 30 Minutes</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>i was using this extension <a href="https://chromewebstore.google.com/detail/language-reactor/hoombieeljmmljlkjmnheibnpciblicm">Language Reactor</a> to export transcript into Excel and convert it to json. here is data in short:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span>   </span>
<span id="cb1-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"5s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"okay let me get started i'll give you the"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"7s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"premise the premise is the issues are not av related the issues are that my"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"12s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"laptop where i was up until 4am last night writing this talk"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"16s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"did not boot at all and as a consequence of that my notes that i spent quite a"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"21s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bit of time putting together are not available to you but i am still on the"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"24s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hook to keep you entertained for 30 minutes so we're going to see what i can"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"..."</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"..."</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"25:55"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"that makes it possible for us to write code that"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"25:58"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"put some structuring around the core computation now with that said i hope i"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"26:03"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"was able to entertain you i think we're just at the time that we have"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"26:07"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"thank you everybody i'm james powell hopefully i'll give the real talk"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>and this is summary by Clauder AI:</p>
<p>James Powell’s impromptu talk at PyData London 2022 covers several key points about Python programming, particularly aimed at data scientists. Here are the main points he’s trying to convey:</p>
<ol type="1">
<li><strong>Python is more than just APIs and function calls</strong>: Many data scientists focus solely on memorizing APIs (like Pandas or NumPy) without truly understanding the language’s depth and richness.</li>
<li><strong>Generators are underutilized</strong>: Generators can be powerful tools, especially for simulations or non-closed form operations where each incremental step is computationally expensive.</li>
<li><strong>Lazy vs.&nbsp;Eager computation</strong>: Understanding when to use lazy or eager computation can significantly impact performance, especially in data science tasks.</li>
<li><strong>Functions should not be overused</strong>: There’s a tendency to create functions for any repeated code, but this isn’t always the best approach. Powell distinguishes between intentional and coincidental repetition.</li>
<li><strong>Avoid premature abstraction</strong>: Creating functions deep in libraries, especially for data loading, can lead to issues with testing and maintenance. Sometimes, ad-hoc behavior is preferable.</li>
<li><strong>Iteration helpers and intentionality</strong>: Tools like <code>enumerate</code>, <code>zip</code>, and custom iteration helpers can make code more expressive and reveal the programmer’s intentions more clearly.</li>
<li><strong>Understanding Python conventions</strong>: Looking beyond the surface-level functionality of Python’s standard library (e.g., <code>itertools</code>) can reveal patterns and conventions that lead to better code.</li>
<li><strong>Code should express human intention</strong>: Loops in data science code often represent human-level processes rather than low-level computations. The code structure should reflect this.</li>
<li><strong>Flexibility in code structure</strong>: Allowing code to diverge when necessary, rather than forcing premature unification, can lead to more maintainable and adaptable codebases.</li>
<li><strong>Critical thinking about basic tools</strong>: Even when using basic Python constructs, data scientists should think deeply about why they’re using them and what alternatives might exist.</li>
</ol>
<p>Overall, Powell encourages data scientists to look beyond superficial knowledge of Python and its libraries, urging them to understand the language more deeply and use its features more thoughtfully to write more intentional, maintainable, and expressive code.</p>


<!-- -->


 ]]></description>
  <category>python</category>
  <category>pydata</category>
  <guid>https://lktuan.github.io/blog/2024-07-18-claude-summary/</guid>
  <pubDate>Wed, 17 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-18-claude-summary/claude.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A Prefect Workshop</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-17-prefect-workshop/</link>
  <description><![CDATA[ 





<p>🎞 Video source: <a href="https://www.youtube.com/watch?v=yIDBsHwTaa8&amp;list=PLGVZCDnMOq0rrhYTNedKKuJ9716fEaAdK&amp;index=4">Dr.&nbsp;Adam Hill - Empower Your Projects with Prefect’s Pipeline Magic | PyData London 2024</a></p>
<p>⛏ Github repo: <a href="https://github.com/Cadarn/PyData-Prefect-Workshop" class="uri">https://github.com/Cadarn/PyData-Prefect-Workshop</a></p>
<section id="goals" class="level1">
<h1>goals</h1>
<p>by end of this session you will:</p>
<ul>
<li>understand what Prefect is;</li>
<li>build and execute tasks and flows;</li>
<li>have schedules flow using deployment;</li>
<li>have a grasp what else can be done;</li>
<li>have some fun.</li>
</ul>
</section>
<section id="prefect-overview" class="level1">
<h1>prefect overview</h1>
<p>just simple as using jupyter notebook, you only need to use decorators (<code>@task</code> and <code>@flow</code>) to designate functions as <strong>task</strong> for <strong>flow</strong>. you need to breakdown your “notebook” into “code chunks” and organize to get them done.</p>
<div id="3aa32d45" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> prefect <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> task, flow</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> my_task():</span>
<span id="cb1-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello, i am a task!"</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@flow</span></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> my_flow():</span>
<span id="cb1-9">  my_task()</span></code></pre></div>
</details>
</div>
</section>
<section id="jump-to-the-workshop" class="level1">
<h1>jump to the workshop</h1>
<p>clone the repo, have docker compose up and running. then explore <code>http://localhost:8000/get_tweet</code>, this is shown which i have yet no idea:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tweet_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">570306133677760500</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"airline_sentiment"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"neutral"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"airline_sentiment_confidence"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"airline"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Virgin America"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cairdin"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-7">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"text"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@VirginAmerica What @dhepburn said."</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"retweet_count"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tweet_timestamp"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2015-02-24T11:35:52-08:00"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tweet_coord"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loop"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>the first thing you need to do is telling where the Prefect API is gonna live. currently it runs on free tier of the their cloud server (?) and now we config it to run in the localhost (?):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> config set PREFECT_API_URL=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://127.0.0.1:4200/api"</span></span></code></pre></div>
<p>then we gonna reset the database, do some config then can start the server. please note that if you are using window, you need to add <code>Scripts</code> variable to environment variables also, the value of the path can be found when you install Prefect by <code>pip</code>:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> server database reset <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> config set PREFECT_API_DATABASE_CONNECTION_URL=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postgresql+asyncpg://postgres:password@localhost:5432/prefect_server"</span></span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> config view <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--show-sources</span></span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> server start</span></code></pre></div>
<p>below is my initial dashboard, there is nothing!</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-17-prefect-workshop/initial_prefect_server.png" class="img-fluid figure-img"></p>
<figcaption>Prefect Dashboard</figcaption>
</figure>
</div>
</div>
</div>
</div>
<section id="e01-my-first-flow" class="level2">
<h2 class="anchored" data-anchor-id="e01-my-first-flow">e01 my first flow</h2>
<p>the basic component of prefect is <code>task</code> and <code>flow</code>. these are decorators to funtions we want to run. we can name and log easily:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>e01.py</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="e01.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example of processing some data</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> prefect <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> task, flow</span>
<span id="cb5-3"></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task</span>(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Addition operator"</span>)</span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(a, b):</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb5-8"></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task</span>(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Squaring operator"</span>)</span>
<span id="cb5-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> square_num(num):</span>
<span id="cb5-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb5-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span></span>
<span id="cb5-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-15"></span>
<span id="cb5-16"></span>
<span id="cb5-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@flow</span>(log_prints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My first simple flow"</span>)</span>
<span id="cb5-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add_and_square(a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb5-19">    add_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> add(a, b)</span>
<span id="cb5-20">    square_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> square_num(add_result)</span>
<span id="cb5-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) squared = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>square_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-22"></span>
<span id="cb5-23"></span>
<span id="cb5-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb5-25">    add_and_square(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
</div>
</section>
<section id="e02a-sentiment-pipeline-v1" class="level2">
<h2 class="anchored" data-anchor-id="e02a-sentiment-pipeline-v1">e02a sentiment pipeline v1</h2>
</section>
<section id="e02b-sentiment-pipeline-v2" class="level2">
<h2 class="anchored" data-anchor-id="e02b-sentiment-pipeline-v2">e02b sentiment pipeline v2</h2>
</section>
<section id="e03a-kafka-tweet-publisher" class="level2">
<h2 class="anchored" data-anchor-id="e03a-kafka-tweet-publisher">e03a kafka tweet publisher</h2>
</section>
<section id="e03b-kafka-tweet-deployment" class="level2">
<h2 class="anchored" data-anchor-id="e03b-kafka-tweet-deployment">e03b kafka tweet deployment</h2>
</section>
<section id="e04-sentiment-pipeline-v3" class="level2">
<h2 class="anchored" data-anchor-id="e04-sentiment-pipeline-v3">e04 sentiment pipeline v3</h2>
</section>
</section>
<section id="further-reading" class="level1">
<h1>further reading</h1>
<ol type="1">
<li><a href="https://www.reddit.com/r/dataengineering/comments/oqbiiu/airflow_vs_prefect/">Prefect vs Airflow on Reddit</a></li>
</ol>
<p>Bình luận bởi <strong>u/alexisprince</strong>:</p>
<blockquote class="blockquote">
<p>Tôi đang sử dụng song song Airflow và Prefect (A cho scheduling, P cho execution), P được sử dụng khi yêu cầu về hiệu năng tính toán và phần scheduler của A vẫn chưa thể bị thay thế.</p>
<p>Lợi thế của A là đã quá phổ biến, dễ tìm hướng dẫn, dễ tuyển người cho chuyên môn. Yếu điểm là A đã quá cũ, không còn phù hợp cho dynamic workflow và modern data env. Hơn nữa A luôn best fit khi sử dụng chung với Astronomer, ngoài ra khá khó dùng.</p>
<p>P hiện đại hơn, cung cấp nhiều modern execution models, DAG được xác định tại runtime do đó dynamic hơn.</p>
<p>Prefer P hơn, better modularization of code.</p>
</blockquote>
<p>Bình luận bởi <strong>u/ChrisHC05</strong>:</p>
<blockquote class="blockquote">
<p>Tao đã đánh giá Airflow, Dagster, Argo và Prefect mấy tháng nay.</p>
<p>Airflow thì đã già, tuy nhiên tài liệu, hướng dẫn rất phong phú.</p>
<p>Dagster có vẻ gặp nhiều vấn đề với Production.</p>
<p>Prefect có cộng đồng phát triển, support, sửa lỗi active.</p>
<p>Vậy nên tôi chỉ đánh giá cao hai thằng Argo và Prefect. Argo khác biệt một cách mạnh mẽ, config được viết dưới dạng YAML, chạy trên cụm Kubernetes, và việc viết DAG không phụ thuộc vào một ngôn ngữ lập trình nào. Argo (tại thời điểm đó) cũng đang phát triển một module kiểu event listening, from outside, như Sensor của Airflow, thứ mà Prefect thiếu (workaround là call Prefect GraphQL-API).</p>
<p>Nếu đã có sẵn infra là K8S, khuyến nghị Argo, không chỉ là orchestration mà còn là một hệ sinh thái support từ event responding tới CI/CD. Nhưng learning curve thì steep nhé. Nó có nhiều tiềm năng vì giờ thì phần mềm nào cũng cần dockerized cả, tính trừu tượng cao hơn. “And IT in general is all about abstraction to make complicated things easier.”</p>
<p>Vậy nên:</p>
<ul>
<li>Nếu có sẵn cụm K8S: dùng Argo</li>
<li>Nếu không: dùng Prefect</li>
</ul>
</blockquote>
<ol start="2" type="1">
<li><a href="https://www.youtube.com/watch?v=XrZegcm1ftw">Airflow Vs. Prefect: Full Breakdown! by The Data Guy</a></li>
<li><a href="https://www.horsewithapointyhat.com/posts/being-a-data-scientist-in-a-post-truth-world/">Adam Hill’s blog</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>pydata</category>
  <category>prefect</category>
  <guid>https://lktuan.github.io/blog/2024-07-17-prefect-workshop/</guid>
  <pubDate>Tue, 16 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-17-prefect-workshop/adam_hill.png" medium="image" type="image/png" height="179" width="144"/>
</item>
<item>
  <title>Vim 101</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-12-vim/</link>
  <description><![CDATA[ 





<p>source: <a href="https://www.youtube.com/watch?v=RZ4p-saaQkc">Vim tutorial for Beginners</a> by freeCodeCamp.</p>
<p>in an effort not to give Vim up from the very first day. inspired by James Powell’s Vim skill in his every Python lecture.</p>
<p>after a few days of rolling with neovim i already have a somewhat calls sense of how to install, make the <code>nvim</code> config folder, do some <code>git clone</code> stuffs to download a bunch of i have no idea what they are to use vim in my damn window machine. can do <code>nvim file1</code>, <code>:qw</code>, <code>:below terminal</code>, <code>:vsplit</code>, but in general lots of actions i am not yet familiar with so actually could not stick with this editor.</p>
<p>now back to basics, i am spending Friyay night starting from scratch. Florian Dedov uses vim while i use nvim expecting both to be the same.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-12-vim/programmerhumor-io-linux_meme.jpg" class="img-fluid figure-img"></p>
<figcaption>source <a href="https://programmerhumor.io/memes/vim/">programmerhumor</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<section id="intro-why-vim" class="level1">
<h1>intro &amp; why vim?</h1>
<ul>
<li>less stick with your mouse, speed up your coding speed;</li>
<li>all settings are customizable;</li>
<li>dont need to stick with your terminal, you can use Vim keybindings in any IDE or text editor: Jupyter Notebook, VS Code, etc</li>
</ul>
</section>
<section id="installation" class="level1 page-columns page-full">
<h1>installation</h1>
<ul>
<li>i use window, i dont want to install more package manager like <code>scoop</code>, i dont like to use WSL, so just simply run <code>winget install Neovim.Neovim</code>; </li>
<li>this neovim version will not include <em>Neovim QT</em>, alright, i will use my terminal <code>pwsh</code>;</li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">neovim installation <a href="https://github.com/neovim/neovim/blob/master/INSTALL.md">page</a></span></div></section>
<section id="basics" class="level1">
<h1>basics</h1>
<ul>
<li><code>nvim file_name</code> will open a file or create a file if it did not exist (but the file will not be actually created if we dont write <code>:w</code> ~ this is just <strong>buffer</strong>);</li>
</ul>
</section>
<section id="exit" class="level1">
<h1>exit</h1>
<ul>
<li>now if we create a file (e.g.&nbsp;<code>client.py</code>), when we press <code>:q</code> in will return this message:</li>
</ul>
<pre><code>E37: No write since last change
E162: No write since last change for buffer "client.py"   </code></pre>
<ul>
<li>what you need to do is <code>:q!</code> (exclamation mark ~ saying you quite and dismiss any change you’ve made);</li>
<li>notice that <code>q</code> first and <code>!</code> after. <code>:!</code> will open the terminal, so <code>:!q</code> will pass the command <code>q</code> to the terminal (window CMD), which returns “<em>‘q’ is not recognized as an internal or external command, operable program or batch file.</em>”</li>
</ul>
</section>
<section id="insert-and-normal-modes" class="level1">
<h1>insert and normal modes</h1>
<ul>
<li>when we enter vim, we are in <strong>NORMAL</strong> mode. press the <code>i</code> or <code>I</code> will get you into the <strong>INSERT</strong> mode, press <code>esc</code> to enter the <strong>NORMAL</strong> mode;</li>
<li><strong>INSERT</strong> mode: any thing we press does not have functionality, just text;</li>
<li><strong>NORMAL</strong> mode: execute a command;</li>
<li>in normal mode, press <code>:w</code> to save/write file;</li>
<li><code>:wq</code> write and quit;</li>
<li>in <strong>INSERT</strong> mode, cursor points between 2 characters; in <strong>NORMAL</strong> mode cursor points a character;</li>
<li>from <strong>INSERT</strong> mode, press <code>esc</code> and cursor will point to the <strong>up-front</strong> character, press <code>i</code> in the cursor will point to <strong>before</strong> that character, press <code>a</code> and for cursor <strong>after</strong> character;</li>
<li><code>I = shift + i</code> will let you get into insert mode with cursor at the <strong>begin</strong> of the line;</li>
<li><code>A = shift + a</code> for the <strong>end</strong> of the line;</li>
<li>from normal mode, <code>o</code> let you create a new line below and cursor at that line;</li>
<li><code>O = shift + o</code> for creating line above.</li>
</ul>
</section>
<section id="line-numbers" class="level1">
<h1>line numbers</h1>
<ul>
<li>in normal mode, <code>:set number</code> will activate line number;</li>
<li><code>:set nonumber</code> to turn off the line number;</li>
<li>now this is important pattern: “an action can be repeated x times” ~ in normal mode we can move cursor up and down using up and down arrow -&gt; if we press <code>5 + down arrow</code> we will move to the 5th line below;</li>
<li><code>10 + right arrow</code> will move the cursor to 10th character to the right, in the same line (?, or in the end of the line);</li>
<li>you can also use <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code> instead of the arrow keys, they stand for <code>⬅</code>, <code>⬇</code>, <code>⬆</code>, <code>➡</code>, respectively (extremely usefull if you can type with 10 fingers);</li>
</ul>
</section>
<section id="relative-line-numbers" class="level1">
<h1>relative line numbers</h1>
<ul>
<li>certainly you can use <em>number</em> with <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code>. now if you <code>:set relativenumber</code>, you can have your current line indexed as <code>0</code> and easily know the number to move up &amp; down-ward;</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-12-vim/relative_line_number.png" class="img-fluid figure-img"></p>
<figcaption>now if i type <code>14 + k</code> i will move to the 3rd line</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>easy to know that <code>:set norelativenumber</code> will turn this option off.</li>
</ul>
</section>
<section id="various-options" class="level1 page-columns page-full">
<h1>various options</h1>
<ul>
<li><code>:set mouse=a</code> activate the mouse, you can scroll or select text;</li>
<li><code>:set mouse-=a</code> to inactivate, the pattern <code>-=</code> is to inactivate any option;</li>
<li><code>:set tabstop=4</code> set tab as 4 spaces</li>
<li><code>:set shiftwidth=4</code> set shift width as 4 spaces </li>
<li><code>:colorscheme slate</code> to set the color scheme, before type “state” you can tab to select the scheme too (remember the space);</li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">this is <a href="https://stackoverflow.com/questions/1878974/redefine-tab-as-4-spaces">recommended</a></span></div><div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-12-vim/choosing_colorscheme.png" class="img-fluid figure-img"></p>
<figcaption><code>:colorscheme</code> and <code>tab</code> to select color scheme</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>every single time you close and re-open vim, these settings is by far - all gone.</li>
</ul>
</section>
<section id="vimrc" class="level1 page-columns page-full">
<h1><code>.vimrc</code></h1>
<ul>
<li>so you need a configuration file and every time vim or nvim is opened your config will be loaded;</li>
<li>neovim will lookfor <code>init.vim</code> or <code>init.lua</code> when start; </li>
<li>in terminal (pwsn in user folder window), input:</li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">refer <a href="https://vi.stackexchange.com/questions/13505/where-do-i-put-my-vimrc-file-for-neovim-on-windows">here</a></span></div><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bass number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">cd %AppData%</span>
<span id="cb2-2">cd .. # to get out of Roaming folder</span>
<span id="cb2-3">cd .\Local\</span>
<span id="cb2-4">mkdir nvim</span>
<span id="cb2-5">cd nvim</span>
<span id="cb2-6">nvim init.vim</span></code></pre></div>
<ul>
<li>then i set these config in my <code>init.vim</code> file:</li>
</ul>
<div class="sourceCode" id="cb3" data-filname="init.vim" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> number</span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> relativenumber</span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> tabstop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb3-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> shiftwidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> autoindent</span>
<span id="cb3-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> mouse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>a</span>
<span id="cb3-7">colorscheme slate</span></code></pre></div>
<ul>
<li>then <code>:wq</code>. now we’ve already have some handy settings when go into nvim.</li>
</ul>
</section>
<section id="keybindings" class="level1">
<h1>keybindings</h1>
<table class="table-striped table-hover table">
<caption>helpful keybindings</caption>
<colgroup>
<col style="width: 24%">
<col style="width: 75%">
</colgroup>
<thead>
<tr class="header">
<th>Keybindings</th>
<th>Actions</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>u</code></td>
<td>undid the actions, vim show “… change; before #x xx seconds ago”</td>
</tr>
<tr class="even">
<td><code>Ctrl + R</code></td>
<td>redo</td>
</tr>
<tr class="odd">
<td><p><code>ntimes u</code></p>
<p><code>ntimes Ctrl + R</code></p></td>
<td>repeat to press <code>u</code> for multiple undo, or you can <code>3 + u</code> for 3 times undo. same for redo</td>
</tr>
<tr class="even">
<td><code>i</code>, <code>I</code>, <code>a</code>, <code>A</code>, <code>o</code>, <code>O</code></td>
<td>back to insert mode in different ways</td>
</tr>
<tr class="odd">
<td><code>v</code></td>
<td>enter VISUAL mode</td>
</tr>
<tr class="even">
<td><code>V</code></td>
<td>enter VISUAL model and select the whole line</td>
</tr>
<tr class="odd">
<td><code>d</code></td>
<td>deleting</td>
</tr>
<tr class="even">
<td><code>y</code></td>
<td>yanking ~ equivalent to copying</td>
</tr>
<tr class="odd">
<td><code>p</code></td>
<td>pasting what we yank before (<strong>after or below</strong> the cursor)</td>
</tr>
<tr class="even">
<td><code>dd</code></td>
<td>delete the whole line</td>
</tr>
<tr class="odd">
<td><code>5dd</code></td>
<td>delete the next whole 5 lines</td>
</tr>
<tr class="even">
<td><code>D</code></td>
<td>delete from the cursor to the end of line</td>
</tr>
<tr class="odd">
<td><code>yy</code></td>
<td>yank the full line in NORMAL mode, same with <code>V</code> then <code>y</code> ~ select the whole line and yank</td>
</tr>
<tr class="even">
<td><code>Y</code></td>
<td>same at <code>yy</code></td>
</tr>
<tr class="odd">
<td><code>P</code></td>
<td><p>pasting what we yank before (<strong>before or above</strong> the cursor)</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>again remember the pattern of <strong>lowercase</strong> and <strong>uppercase</strong></p>
</div>
</div></td>
</tr>
<tr class="even">
<td><code>c</code></td>
<td>delete the selection (from VISUAL mode) and enter to INSERT mode</td>
</tr>
<tr class="odd">
<td><code>cc</code></td>
<td>delete the whole text in the line (the line was kept) enter to INSERT mode</td>
</tr>
<tr class="even">
<td><code>C</code></td>
<td>delete from cursor to end of line (what <code>c</code> does is change, what <code>d</code> does is delete)</td>
</tr>
<tr class="odd">
<td><code>r</code></td>
<td><p>replacing the current cursor in NORMAL mode with 1 character press after <code>r</code></p>
<p>replacing all selection (include cursor) in VISUAL mode</p></td>
</tr>
<tr class="even">
<td><code>w</code></td>
<td>Jump to the next word (split by space or “-”)</td>
</tr>
<tr class="odd">
<td><code>W</code></td>
<td>Jump to the next word (accept only space at delimiter)</td>
</tr>
<tr class="even">
<td><code>b</code>, <code>B</code></td>
<td>The same thing for <em>backward</em></td>
</tr>
<tr class="odd">
<td><code>dw</code></td>
<td>delete a word</td>
</tr>
<tr class="even">
<td><code>2dw</code> , <code>d2w</code></td>
<td>delete 2 words (forward, current cursor and the next one)</td>
</tr>
<tr class="odd">
<td><code>2db</code>, <code>d2b</code></td>
<td>delete 2 words (backward, <strong>before</strong> the cursor)</td>
</tr>
<tr class="even">
<td><code>diw</code></td>
<td>delete in a words</td>
</tr>
<tr class="odd">
<td><code>ciw</code> , <code>cw</code>, <code>cb</code></td>
<td>change in a words, next word, previous word and go into INSERT mode</td>
</tr>
<tr class="even">
<td><code>e</code></td>
<td>Jump to the end of the word (<code>E</code> will be more strictly, only accept space as delimiter)</td>
</tr>
<tr class="odd">
<td><code>0</code>, <code>$</code></td>
<td>Jump to the begin / and the end of the line respectively</td>
</tr>
<tr class="even">
<td><code>d0</code>, <code>d$</code></td>
<td><p>delete everything from cursor to the begin / end of the line, respectively</p>
<p>-&gt; think of <code>c0</code>, and <code>c$</code> for aha</p></td>
</tr>
<tr class="odd">
<td><code>:h ...</code></td>
<td>seek help, <code>:q</code> to quite the help window</td>
</tr>
</tbody>
</table>
</section>
<section id="intermediate-stuff" class="level1">
<h1>intermediate stuff</h1>
<p><strong>go and cook your meal:</strong></p>
<ul>
<li><p><code>i</code> - <strong>before</strong> and <code>I</code> - <strong>beginning</strong>, <code>a</code> - <strong>after</strong> and <code>A</code> - <strong>ending</strong> for navigating to INSERT mode;</p></li>
<li><p><code>o</code> - <strong>below</strong>, <code>O</code> - <strong>above</strong> to insert line;</p></li>
<li><p><code>u</code> - <strong>undo</strong>, <code>Ctrl + R</code> - <strong>redo</strong>;</p></li>
<li><p><code>v</code> - <strong>individual</strong> visual, <code>V</code> - visual the <strong>whole</strong> line;</p></li>
<li><p><code>y</code> - yanking <strong>current</strong>, <code>Y</code>, <code>yy</code> - yanking <strong>whole</strong> line;</p></li>
<li><p><code>p</code> - pasting <strong>after</strong> or <strong>below</strong>, <code>P</code> - pasting <strong>before</strong> or <strong>above</strong>;</p></li>
<li><p><code>d</code> - deleting <strong>current</strong>, <code>dd</code> - deleting <strong>whole</strong> line, <code>D</code> - deleting to the <strong>end</strong> of line;</p></li>
<li><p><code>c</code> - same with <code>d</code> but for <strong>changing</strong>;</p></li>
<li><p><code>r</code> - replacing <strong>current</strong> with 1 character, <code>R</code> - enter the REPLACE mode and replace with <strong>multiple</strong> characters;</p></li>
<li><p><code>w</code>, <code>W</code> - jump word <strong>forward</strong>, <code>b</code>, <code>B</code> - jump word <strong>backward</strong>;</p></li>
<li><p><code>i</code> - <strong>inside</strong> the word, <code>e</code> - <strong>end</strong> of the word;</p></li>
<li><p><code>0</code> - <strong>begin</strong>, <code>$</code> - <strong>end</strong> of the line;</p></li>
<li><p>repeat by press key <strong>multiple</strong> times or <code>n</code> - number before command;</p></li>
<li><p><code>%</code> - jump to the <strong>closing</strong> bracket if you are on the opening one;</p></li>
<li><p><code>t</code> follow by a character will let you jump cursor to <strong>before</strong> the next nearest one;</p></li>
<li><p><code>f</code> same with <code>t</code>, but to the <strong>character’s position</strong>;</p></li>
<li><p><code>T</code> and <code>F</code> for the <strong>backward</strong>;</p></li>
<li><p><code>gg</code> - go to the <strong>begin</strong> of the line, <code>G</code> for the <strong>end</strong> of the file;</p></li>
<li><p><code>123G</code> or <code>:123</code> will bring you to the line 123; ….</p></li>
</ul>
<p><strong>now:</strong></p>
<ul>
<li><p><code>ciw</code> - changing the whole word; but</p></li>
<li><p><code>cib</code> , <code>ciB</code> - changing the text inside the current set of parenthesis () or braces {}, respectively, you can also <code>ci(</code> , <code>ci{</code> , <code>ci&lt;</code> for the specific.</p></li>
<li><p><code>ci"</code> - changing the text inside double quote;</p></li>
<li><p>if you want delete <code>d</code>, or yank <code>y</code> - replace the <code>c</code>;</p></li>
<li><p><code>5dw</code> will delete 5 words, <code>5d5w</code> will delete 5 words 5 times!;</p></li>
<li><p><code>5yy</code> copying 5 lines;</p></li>
<li><p><code>dt(</code> deleting everything up till the opening bracket, <code>df(</code> will delete the bracket also; …</p></li>
</ul>
<p><strong>even more advanced stuff:</strong></p>
<ul>
<li>indentation: <code>&gt;&gt;</code> to the right, <code>&lt;&lt;</code> to the left;</li>
<li><code>V</code> for Visual Line mode, which will automatically select entire lines;</li>
<li><code>Ctrl + v</code> for Block Visual mode, which will select rectangular regions of the text;</li>
<li><code>=</code> for auto indentation;</li>
<li><code>gg=G</code> will start at the begin of the file, auto indentation till the end of file (and end of at the end of file);</li>
<li><code>/</code> and word follow to search the word, then <code>n</code> to jump to the next found, <code>N</code> to jump to the previous one;</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Re-note about the search:</p>
<ul>
<li><code>/pattern</code> - search for pattern;</li>
<li><code>?pattern</code> - search backward for pattern;</li>
<li><code>\vpattern</code> - ‘very magic’ pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed);</li>
<li><code>n</code> - repeat search in same direction;</li>
<li><code>N</code> - repeat search in opposite direction;</li>
<li><code>#</code> go up, <code>*</code> go down.</li>
</ul>
</div>
</div>
<ul>
<li><code>ma</code>: mark A -&gt; to explore later;</li>
<li><code>zz</code>: centre the screen;</li>
<li><code>:%s/old/new/g</code> - replace all old with new throughout file;</li>
<li><code>:%s/old/new/gc</code> - replace all old with new throughout file with confirmations (without <code>c</code> is without confirmation);</li>
<li><code>.</code> repeat the last command;</li>
<li><code>"+</code> and <code>"*</code> are the special registers, which you copied in the system</li>
</ul>
</section>
<section id="registers-and-macros" class="level1">
<h1>registers and macros</h1>
<ul>
<li><code>d</code> deleting is also copying ~ cutting, so if you <code>y</code> then <code>d</code> you will lost the current clipboard</li>
<li><code>:reg</code> to see the history of the clipboard;</li>
<li><code>"7p</code> will paste the 7th register;</li>
<li><code>"7yy</code> yanks the whole line into 7th register;</li>
<li><code>"0p</code> the last thing that i actually yanked, not <code>d</code>;</li>
<li><code>qa</code> recording macro <span class="citation" data-cites="a">@a</span>, <code>q</code> quits recording;</li>
<li>you can see the macro in <code>:reg</code>, <code>@a</code> to use the macro; …</li>
</ul>
</section>
<section id="neovim-plugins" class="level1">
<h1>neovim &amp; plugins</h1>
<ul>
<li>better, have more pluggins supported;</li>
<li>config in <code>./nvim</code> using <code>init.vim</code> or <code>init.lua</code>;</li>
</ul>
</section>
<section id="vim-support" class="level1">
<h1>vim support</h1>
<ul>
<li>can use vim bindings in VS Code, Pycharm</li>
</ul>
</section>
<section id="outro" class="level1">
<h1>outro</h1>
<ul>
<li>it is recommended to use vim bindings while coding, even if you dont like the command line.</li>
</ul>
</section>
<section id="other-resources" class="level1">
<h1>other resources</h1>
<ol type="1">
<li><a href="https://vim.rtorr.com/">Vim cheat sheet</a></li>
<li><a href="https://github.com/junegunn/vim-plug">Vim plug</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>vim</category>
  <guid>https://lktuan.github.io/blog/2024-07-12-vim/</guid>
  <pubDate>Thu, 11 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-12-vim/vim.png" medium="image" type="image/png" height="127" width="144"/>
</item>
<item>
  <title>Recap: So you want to be a Python expert?</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-10-expert-in-python/</link>
  <description><![CDATA[ 





<p>🔥 source: <a href="https://www.youtube.com/watch?v=cKPlPJyQrt4"><strong>James Powell: So you want to be a Python expert? | PyData Seattle 2017</strong></a></p>
<section id="what-is-he-gonna-present" class="level1">
<h1>what is he gonna present?</h1>
<ul>
<li>something deeply behind the Zen of Python;</li>
<li>metaphors and programming in Python;</li>
<li>python is not only scripting language, he will be introducing 4 features of Python and the way experts would think about these features;</li>
<li>a lot of fundamental details of how these feature work but very little talk about we can conceptualize these features in the broader sense of what they mean for modeling core problem. so 4 features you might have heared before and couple of the core mental models how you can think about, an how you can think about python as a whole, wrapping everything together;</li>
<li>you will see me stumble to understand that in case you dont utd or dont have docs memorized, it’s alright, the target is to know what they are and what they mean;</li>
<li>the talk presumes you to have a baseline of Python, but in case you a new to Python he believes there are cores you can take away.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/James Powell_ So you want to be a Python expert_ _ PyData Seattle 2017 5-37 screenshot.png" class="img-fluid figure-img"></p>
<figcaption>James Powell on PyData Seattle 2017</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="data-model-protocol-or-dunder-method" class="level1">
<h1>data model protocol (or dunder method)</h1>
<p>assume we have a data model with Polynomial object intitially do nothing, why I need 4 lines (instead of 2 lines) to create 2 Polynominals. How can I create and assign coefficients together.</p>
<div id="935bce05" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Polynomial:</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb1-3">p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Polynomial()</span>
<span id="cb1-4">p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Polynomial()</span>
<span id="cb1-5">p1.coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  x^2 + 2x + 3</span></span>
<span id="cb1-6">p2.coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3x^2 + 4x + 3</span></span></code></pre></div>
</details>
</div>
<p>the answer is using a constructor <code>__init__</code>, then we can compact our code like this:</p>
<div id="c80a8e25" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Polynomial:</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>coeffs):</span>
<span id="cb2-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coeffs</span>
<span id="cb2-4"></span>
<span id="cb2-5">p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Polynomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> ) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  x^2 + 2x + 3</span></span>
<span id="cb2-6">p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Polynomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> ) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3x^2 + 4x + 3</span></span></code></pre></div>
</details>
</div>
<p>but if we print our objects in the terminal, they look so ugly. We miss the method that actually call <code>repr(obj)</code> when we run <code>obj</code>:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/1_repr.png" class="img-fluid figure-img"></p>
<figcaption>The need of <code>__repr__</code></figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>that’s what <code>__repr__</code> for, a printable representation of the class:</p>
<div id="2f115390" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Polynomial:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>coeffs):</span>
<span id="cb3-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coeffs</span>
<span id="cb3-4"></span>
<span id="cb3-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polynomial(*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{!r}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coeffs)</span>
<span id="cb3-7"></span>
<span id="cb3-8"></span>
<span id="cb3-9">p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Polynomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  x^2 + 2x + 3</span></span>
<span id="cb3-10">p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Polynomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3x^2 + 4x + 3</span></span></code></pre></div>
</details>
</div>
<p>the next thing we wanna do is to add Polinimials together <code>p1 + p2</code>.</p>
<div id="ee94fb92" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__add__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb4-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Polynomial(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x, y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coeffs, other.coeffs)))</span></code></pre></div>
</details>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is pattern here? I have some behaviours that I want to implement, and I write some <strong>underscore</strong> (<code>__x__</code>) funtions. We call them dunder or underscore methods.</p>
<p>Try google “data model” and we’ll a bunch of documents that list all method to implement the principle behaviours of our objects. There are top-level functions of top-level syntaxes that corresponding to <code>__</code>.</p>
<p>But there are smthg more fundamental here, when I want to:</p>
<ul>
<li>x + y -&gt; <code>__add__</code>;</li>
<li>initialize x -&gt; <code>__init__</code>;</li>
<li>repr(x) -&gt; <code>__repr__</code>.</li>
</ul>
<p>Then what if we want to implement the <code>len()</code> (return the length, which is popular know Python function) -&gt; naturally we’ll be thinking of <code>__len__</code>.</p>
<div id="705b098f" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coeffs)</span></code></pre></div>
</details>
</div>
</div>
</div>
<p>The Python data model is a means by which you can protocols. Thos protocols have abstract meaning depending on the object itself. We tight the behaviours to top-level <strong>syntaxes</strong> and <strong>functions</strong>.</p>
<p>Similarly, if we do see the object Polynomial a executable, callable thing, we can implement a <code>__call__</code> which will turn our class to function, in this case we cant imagine such thing, so pass.</p>
<p>✍ There are 3 core patterns we want to understand and remember in Python to really understand object orientation in Python:</p>
<ol type="1">
<li>The protocol view of Python;</li>
<li>The buil-in inheritance protocol;</li>
<li>Some caveats around how OOP in Python works.</li>
</ol>
<p>Which will be continue to present in this video is jumping into a very tricky metaphor a feature we may have heard of.</p>
</section>
<section id="meta-class" class="level1 page-columns page-full">
<h1>meta class</h1>
<p>imagine there are 2 groups working on some piece of software. one is core infrastructure of the group and they write <code>library</code> code, the other group is devloper group, they write <code>user</code> code. the developer use <code>library</code> code to accomplish actual business objectives. the core team less cares about business problem, they focus on technical stuffs.</p>
<p>you are in the dev team and there is no way to change to code of <code>library.py</code>. in what circumstance the code of <code>user</code> can break -&gt; there is no <code>foo</code> method! To avoid that, we could simply write a test that call <code>bar()</code>, then we could know if it fails before production environment’s runtime.</p>
<p>is there anything simpler to know the ability to fail before hit run time in production env? -&gt; use <code>assert</code> to check existence of the attribute. we will have an early warning right before the class was initiated.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/2_assert.png" class="img-fluid figure-img"></p>
<figcaption>we can know if the core team change the function name to “food”</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>by this way we are enforcing constraints on the base class from the derived class.</p>
<p>now we move to a reverse situation, you are the core structure writer and have to deal with the meathead in the business unit that actually using/abusing/missusing your code ~ you have no idea what are they doing. you write the <code>Base</code> class with the assumption and some responsible developer in the BU will go and implement the <code>bar</code> method.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/3_reverse_sit.png" class="img-fluid figure-img"></p>
<figcaption>what if you stand on the left side pane</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>you have no ability to change and even have no idea where the code on the right pane sit. we can not use <code>hasattr()</code> for this particular situation. the first method is to use <code>try ... catch ...</code>, but it only catches in runtime and we will miss catching it before it goes to production env.</p>
<div class="{callout-note}">
<p>The reason that we could call Python a <strong>protocol orientated language</strong> is not just because the Python data model the object model is protocol orientated but that the entire Python language itself has a notion of hooks and protocols and safety valves within it.</p>
<p>Python is much much simpler language, the code run linearly from top to bottom. And the class statement in Python is actually an executable code. We can write this:</p>
<div id="459c7412" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb6-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or the same thing in other way</span></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base:</span>
<span id="cb6-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb6-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> bar(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-9">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span></span></code></pre></div>
</details>
</div>
<p>Only the last one will survive. Python accepts this syntax because it’s class is <strong>fundamentally executable</strong>.</p>
</div>
<p>Let’s get into something more interesting! create a class inside a function and use a function in a module in standard libbrary in Python called <code>dis</code>.</p>
<div id="e9bb28e0" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a class inside a function</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _():</span>
<span id="cb7-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base:</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dis stands for disassemble</span></span>
<span id="cb7-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dis <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dis</span></code></pre></div>
</details>
</div>
<p>let’s ‘dis’ - stands for disassemble - to see what happen in the bytecode. there are actually things in Python bytecode call <code>LOAD_BUILD_CLASS</code>, it’s actual executable runtime instruction in the Python interpreter for create a class.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/4_dis.png" class="img-fluid figure-img"></p>
<figcaption>disassemble</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>at the first section of this lecture, we saw some <strong>correspondence</strong> between top-level syntac or function AND some underscore method that implements that syntax or function. there should be also top-level mechanism, not explicitly syntax or function, with the process of building a class. there is a build-ins function called <code>__build_class__</code>.</p>
<div id="0f955f2e" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">old_bc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> __build_class__</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> my_bc(func, name, base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kw):</span>
<span id="cb8-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> Base:</span>
<span id="cb8-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'check if the bar method is defined'</span>)</span>
<span id="cb8-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> old_bc(func, name, base, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kw)</span>
<span id="cb8-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> old_bc(func, name, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kw)</span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> builtins</span>
<span id="cb8-11">builtins.__build_class__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> my_bc</span></code></pre></div>
</details>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/5_build_class.png" class="img-fluid figure-img"></p>
<figcaption><code>__build_class__</code>, we can check if the <code>bar</code> method is implemented, Python is <strong>protocal oriented language</strong>!</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>It’s actually quite a common pattern and quite a fundamental piece of Python almost everything that a Python language does in an execution context like building classes, creating functions, importing modules you can find a way to <strong>hook</strong> into that. once you can find a way to hook into that you can start doing things that you want to do like check is my user code going to break from the perspective the library author.</p>
<p>The most important thing here is <strong>understanding existence of this pattern</strong>, knowing that there are options solving such problem, and there are even better approachs.</p>
<section id="there-are-2-fundamental-ways-that-people-ussually-use-to-solve-this" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="there-are-2-fundamental-ways-that-people-ussually-use-to-solve-this">There are 2 fundamental ways that people ussually use to solve this</h2>
<section id="meta-class-1" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="meta-class-1">1. meta class</h3>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside"><a href="https://stackoverflow.com/questions/395982/metaclass-new-cls-and-super-what-is-the-mechanism-exactly">futher discussion</a></span></div></div>
<div id="38e91bf5" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># meta classes are merely derived from `type`</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BaseMeta(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>):</span>
<span id="cb9-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__new__</span>(cls, name, bases, namespace):</span>
<span id="cb9-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BaseMeta.__new__'</span>, cls, name, bases, namespace)</span>
<span id="cb9-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Base'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> namespace:</span>
<span id="cb9-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bad User class, 'bar' is not defined"</span>)</span>
<span id="cb9-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__new__</span>(cls, name, bases, namespace)</span>
<span id="cb9-8"></span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then our Base should be derived from BaseMeta</span></span>
<span id="cb9-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base(metaclass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BaseMeta):</span>
<span id="cb9-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bar()</span></code></pre></div>
</details>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/6_meta_class.png" class="img-fluid figure-img"></p>
<figcaption>metaclass</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>That’s it! you can control, constraint the derived class from the base class in class hierachy.</p>
</section>
<section id="init_subclass__" class="level3">
<h3 class="anchored" data-anchor-id="init_subclass__">2. <code>__init_subclass__</code></h3>
<p>We can implement <code>Base</code> like this:</p>
<div id="090bfa24" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base():</span>
<span id="cb10-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bar()</span>
<span id="cb10-4"></span>
<span id="cb10-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init_subclass__</span>(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb10-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"init subclass"</span>, cls.__dict__, kwargs)</span>
<span id="cb10-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cls.__dict__:</span>
<span id="cb10-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bad sub class"</span>)</span>
<span id="cb10-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init_subclass__</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span></code></pre></div>
</details>
</div>
</section>
</section>
</section>
<section id="decorator" class="level1">
<h1>decorator</h1>
<p>We would have met pattern like this, that’s is decorator:</p>
<div id="1b733668" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dec</span> </span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f():</span>
<span id="cb11-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
</details>
</div>
<p>Python is a live language, there is no separate step that turns function definitions into bags of a set bits tagged and some elf binary or some <a href="https://en.wikipedia.org/wiki/Portable_Executable">PE</a> binary somewhere. That a function definition is actually a live thing, it actually runs at runtime, there’s actually executable code associated with this def <code>f()</code>.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/7_interact_with_object.png" class="img-fluid figure-img"></p>
<figcaption>we can interact with our object as Python is a live language, the function itself is a runtime object</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>That every Python structure that you interact with whether it’s an object or a function or a generator has some <strong>runtime life</strong>, has some <strong>runtime existence</strong> you can see it in memory, you can ask it questions like what module UI were you defined in. you can even ask it very useful questions like if you use the inspect module you can say what’s your source code.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> decorators  python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> .<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\d</span>eco.py</span>
<span id="cb12-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> from <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">inspect</span> import getsource</span>
<span id="cb12-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> getsource<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">add</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'def add(a, b=10):\n    return a + b\n'</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> print<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">getsource</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">add</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb12-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">def</span> add<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">a,</span> b=10<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">a</span> + b </span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> </span></code></pre></div>
<p>now let’s say I want to calculate how much time does it take to perform the <code>add</code>. simply we would thinking about <code>time</code>, like this:</p>
<div id="17be65b1" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb13-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb13-5"> </span>
<span id="cb13-6">before <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb13-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add(10)'</span>, add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb13-8">after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb13-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time_taken'</span>, after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> before)</span>
<span id="cb13-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add(20, 30)'</span>, add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span>
<span id="cb13-11">after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb13-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time_taken'</span>, after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> before)</span>
<span id="cb13-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add("a", "b")'</span>, add(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>))</span>
<span id="cb13-14">after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb13-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time_taken'</span>, after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> before)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>add(10) 20
time_taken 0.0
add(20, 30) 50
time_taken 0.0
add("a", "b") ab
time_taken 0.0</code></pre>
</div>
</div>
<p>there is something wrong here because we need to add code to everywhere we want to calculate. we see another important pattern in Python, decorator, the Python developers want you to write the simplest, stupidest, quickest thing to get the job done and get the rest of your day with your family.</p>
<p>we will see alot of scenarios where of cases where you can write the simple and stupidest thing to get the job done and when the task at hand becomes harder or more complex or the requirements change you can change your code in a very simple fashion to linearly extend its functionality without have to re-write it from scratch.</p>
<p>in Python we’ll see a number of different features are orientated around how do we write the simplest thing today and then when the problem gets a little bit harder we have an avenue for making our code a little bit more complex.</p>
<p>we can modified a <code>add</code> alittle bit</p>
<div id="9ee3649c" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb15-4">    before <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb15-5">    rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb15-6">    after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb15-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elapsed:'</span>, after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> before)</span>
<span id="cb15-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span></code></pre></div>
</details>
</div>
<p>But if we have more functions, let say <code>sub</code>? We need to modify and make our code complicated. <strong>Python is live language</strong> that everything has some runtime representaion. We can create <code>timer()</code> which take <code>func</code>, <code>x</code>, and <code>y</code> as arguments (<code>x</code> and <code>y</code> will be forwarded to calculation function)</p>
<div id="3aca1fe5" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> timer(func, x, y):</span>
<span id="cb16-4">    before <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb16-5">    rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(x,y)</span>
<span id="cb16-6">    after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb16-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elapsed:'</span>, after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> before)</span>
<span id="cb16-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and </span></span>
<span id="cb16-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add(20, 30)'</span>, timer(add, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span></code></pre></div>
</details>
</div>
<p>we can also wrapping like this, <code>timer()</code> will return a function <code>f</code>:</p>
<div id="19af8894" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> timer(func):</span>
<span id="cb17-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb17-5">      before <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb17-6">      rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(x,y)</span>
<span id="cb17-7">      after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb17-8">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elapsed:'</span>, after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> before)</span>
<span id="cb17-9">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb17-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> f</span>
<span id="cb17-11"></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and </span></span>
<span id="cb17-13">add <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer(add)</span>
<span id="cb17-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add(20, 30)'</span>, add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span></code></pre></div>
</details>
</div>
<p>Python provides a syntax for easily implement every behaviours of <code>timer()</code> to every function:</p>
<div id="7447cf77" class="cell" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@timer</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb18-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add(20, 30)'</span>, add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span></code></pre></div>
</details>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Fundamentally it’s about allowing you to take this wrapping behavior for functions and to wrap wide swathes of functions in one fashion without having to rewrite a lot of user code or having to even perform a lot of turn on your library code.</p>
</div>
</div>
<p>another example when we want a function to run n-times:</p>
<div id="827cb88c" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's say 2 times</span></span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ntimes(f):</span>
<span id="cb19-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb19-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb19-6">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'running {.__name__}'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(f))</span>
<span id="cb19-7">      rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb19-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb19-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper</span>
<span id="cb19-10">    </span>
<span id="cb19-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@ntimes</span></span>
<span id="cb19-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb19-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb19-14"></span>
<span id="cb19-15">add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>running add
running add</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>30</code></pre>
</div>
</div>
<p>wrapp <code>n</code> in to the function so <code>ntimes()</code> takes <code>n</code> instead of <code>f</code> as arg:</p>
<div id="5f7c8852" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># high order decorators</span></span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ntimes(n):</span>
<span id="cb22-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> inner(f):</span>
<span id="cb22-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb22-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb22-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'running {.__name__}'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(f))</span>
<span id="cb22-7">        rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb22-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb22-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper</span>
<span id="cb22-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inner</span>
<span id="cb22-11">    </span>
<span id="cb22-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@ntimes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb22-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb22-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb22-15"></span>
<span id="cb22-16">add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>running add
running add
running add</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>30</code></pre>
</div>
</div>
<p>There is a very important core concept that is hidden in here which is what you might call the <strong>closure object duality</strong>. it’s not something that we have time to look at in this session.</p>
</section>
<section id="generator" class="level1 page-columns page-full">
<h1>generator</h1>
<p>recall what we’ve learned in previous section:</p>
<ul>
<li>there are top-level syntax or function &lt;–&gt; and some underscore methods that implemented it.</li>
<li>if you have parentheses after something x() &lt;–&gt; implies <code>__call__</code> protocol implemented.</li>
</ul>
<p>what is different between these 2:</p>
<div id="0698ed3a" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add1(x, y):</span>
<span id="cb25-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y</span>
<span id="cb25-3"></span>
<span id="cb25-4"></span>
<span id="cb25-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Adder:</span>
<span id="cb25-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb25-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y </span>
<span id="cb25-8">add2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Adder()</span>
<span id="cb25-9"></span>
<span id="cb25-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(add1(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 30</span></span>
<span id="cb25-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(add2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 20</span></span>
<span id="cb25-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(add1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;class 'function'&gt;</span></span>
<span id="cb25-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(add2) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;class '__main__.Adder'&gt;</span></span></code></pre></div>
</details>
</div>
<p>functionally there is not distinguish between <code>add1</code> and <code>add2</code>. <code>add1</code> is syntaxtically whole hell more easy to write. another diffence is if you want to add some <em>statefull behaviors</em>, we can easily modified the class:</p>
<div id="a5a98768" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Adder:</span>
<span id="cb26-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb26-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb26-4"></span>
<span id="cb26-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb26-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb26-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.z</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">Đọc thêm về <a href="https://magz.techover.io/2021/12/04/python-deep-dive-hieu-closures-decorators-va-cac-ung-dung-cua-chung-phan-1/">chuỗi bài này</a> nếu thấy confuse</span></div></div>
<p>there is one what to do with the Adder, another way to do with the function, what he hinted at this object <strong>closure duality</strong>.</p>
<p>let’s think about a function that take a lot of time to do something, like loading the data from the database. we demo by a simple function <code>compute()</code>, which sleep 0.5 sec for each loop. the function only gives us the result once it completelt complete the loop, it will give us the entire result all at once. what if we care about the first? the first 3 values?</p>
<p>this is undesirable. this is wasteful both from the perspective of time &amp; memory. let’s think about it with the object model and rewrite under <code>Compute</code> class:</p>
<div id="583238e2" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep</span>
<span id="cb27-2"></span>
<span id="cb27-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute()</span>
<span id="cb27-4">  rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb27-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb27-6">    sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span>
<span id="cb27-7">    rv.append(i)</span>
<span id="cb27-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb27-9"></span>
<span id="cb27-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Compute:</span>
<span id="cb27-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb27-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb27-13"></span>
<span id="cb27-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb27-15">    rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb27-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb27-17">      sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span>
<span id="cb27-18">      rv.append(i)</span>
<span id="cb27-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb27-20">compute2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Compute()</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full"><p>the 2nd method: </p><div class="no-row-height column-margin column-container"><span class="margin-aside"><a href="https://realpython.com/python-callable-instances">read more</a></span></div></div>
<ul>
<li>Retain state between calls (<strong>stateful callables</strong>)</li>
<li>Cache values that result from previous computations</li>
<li>Implement straightforward and convenient APIs</li>
</ul>
<p>if you want to access data during computaion, think of:</p>
<pre><code>for x in xs:
  pass

x1 = iter(xs)   ---&gt; __iter__
while True:
  x = next(x1)  ---&gt; __next__</code></pre>
<p>and re-write the <code>Compute</code> like this:</p>
<div id="630e83a0" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Compute:</span>
<span id="cb29-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__iter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb29-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb29-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> </span>
<span id="cb29-5">  </span>
<span id="cb29-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__next__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb29-7">    rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.last</span>
<span id="cb29-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb29-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb29-10">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">StopIteration</span>()</span>
<span id="cb29-11">    sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span>
<span id="cb29-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb29-13"></span>
<span id="cb29-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> Compute():</span>
<span id="cb29-15">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(val)</span></code></pre></div>
</details>
</div>
<p>now, it:</p>
<ul>
<li>takes 1 iteration to let you start using it;</li>
<li>takes no storage;</li>
<li>but looks ugly.</li>
</ul>
<p>and there is much simpler way to write a function that operate in such fashion, the <strong>generator</strong> syntax, it merely:</p>
<div id="8ff097c6" class="cell" data-execution_count="23">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute()</span>
<span id="cb30-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb30-3">    sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span>
<span id="cb30-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> i</span></code></pre></div>
</details>
</div>
<p>its state is maintained internally. instead of eagerly computing the values, you give them to the user as the ask. let’s look in the last example:</p>
<div id="cf92bb02" class="cell" data-execution_count="24">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Api:</span>
<span id="cb31-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_this_first():</span>
<span id="cb31-3">    first()</span>
<span id="cb31-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_this_second():</span>
<span id="cb31-5">    second()</span>
<span id="cb31-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_this_last():</span>
<span id="cb31-7">    lass()</span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in documentation you ask user to use those functions in order but no physically constraint you to not run like this:</span></span>
<span id="cb31-9">Api.run_this_last()</span>
<span id="cb31-10">Api.run_this_second()</span>
<span id="cb31-11">Api.run_this_first()</span></code></pre></div>
</details>
</div>
<p>the generator not only yield the result back, but also the control back to the caller. we can interleave our code with library code, controling them to run in order, that is conceptualization of how generators are built upon - co-routines.</p>
<p>we can either define execution function inside the class or use generator to control the sequence:</p>
<div id="2a98e5f2" class="cell" data-execution_count="25">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1">...</span>
<span id="cb32-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> doit():</span>
<span id="cb32-3">    first()</span>
<span id="cb32-4">    second()</span>
<span id="cb32-5">    last()</span>
<span id="cb32-6">... </span>
<span id="cb32-7"></span>
<span id="cb32-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or</span></span>
<span id="cb32-9"></span>
<span id="cb32-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> api()</span>
<span id="cb32-11">  first()</span>
<span id="cb32-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb32-13">  second()</span>
<span id="cb32-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb32-15">  last()</span></code></pre></div>
</details>
</div>
</section>
<section id="context-manager" class="level1">
<h1>context manager</h1>
<p>setup &amp; teardown ~ initial action and final action. we would often see pattern like:</p>
<div id="38b78af3" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ctx.py'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb33-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
</details>
</div>
<p>beyond the file, it can be also sqllite</p>
<div id="3576f9c0" class="cell" data-execution_count="27">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span></span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># control the execution is executed when connection is open</span></span>
<span id="cb34-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.db'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb34-5">  cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb34-6">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create table points(x int, y int)'</span>)</span>
<span id="cb34-7">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 1)'</span>)</span>
<span id="cb34-8">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (2, 1)'</span>)</span>
<span id="cb34-9">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 2)'</span>)</span>
<span id="cb34-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select sum(x * y) from points'</span>):</span>
<span id="cb34-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb34-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select x, y from points'</span>):</span>
<span id="cb34-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb34-14">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop table points'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>(5,)
(1, 1)
(2, 1)
(1, 2)</code></pre>
</div>
</div>
<p>now we already control if connection is live to do something, we’ve not yet controlled inside the connection, the entry point and the exit point. now behind the scence</p>
<pre><code>with ctx() as x:
  pass</code></pre>
<p>will look like the following:</p>
<pre><code>x = ctx().__enter__
try
  pass
finally:
  x.__exit__</code></pre>
<p>we’ll try to emplement this to our connection, we’ll wrap it to a <strong>temporary table behaviour</strong>:</p>
<div id="2b7f6312" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span></span>
<span id="cb38-2"></span>
<span id="cb38-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Temporarytable:</span>
<span id="cb38-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, cur):</span>
<span id="cb38-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cur</span>
<span id="cb38-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__enter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb38-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__enter__'</span>)</span>
<span id="cb38-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create table points(x int, y int)'</span>)</span>
<span id="cb38-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__exit__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>arg): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># why need *arg</span></span>
<span id="cb38-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__exit__'</span>)</span>
<span id="cb38-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop table points'</span>)</span>
<span id="cb38-12"></span>
<span id="cb38-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.db'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb38-14">  cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb38-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> Temporarytable(cur<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cur):</span>
<span id="cb38-16">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 1)'</span>)</span>
<span id="cb38-17">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (2, 1)'</span>)</span>
<span id="cb38-18">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 2)'</span>)</span>
<span id="cb38-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select sum(x * y) from points'</span>):</span>
<span id="cb38-20">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb38-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select x, y from points'</span>):</span>
<span id="cb38-22">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>__enter__
(5,)
(1, 1)
(2, 1)
(1, 2)
__exit__</code></pre>
</div>
</div>
<p>now can the exit run before the enter, no! they need to be run sequencely. it remind us about the <strong>generator</strong> to improve this:</p>
<div id="749b00d4" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span></span>
<span id="cb40-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> temporarytable(cur):</span>
<span id="cb40-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'created table'</span>)</span>
<span id="cb40-4">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create table points(x int, y int)'</span>)</span>
<span id="cb40-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb40-6">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop table points'</span>)</span>
<span id="cb40-7">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dropped table'</span>)</span>
<span id="cb40-8"></span>
<span id="cb40-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Temporarytable:</span>
<span id="cb40-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, cur):</span>
<span id="cb40-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cur</span>
<span id="cb40-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__enter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb40-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temporarytable(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur)</span>
<span id="cb40-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen)</span>
<span id="cb40-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__exit__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>arg):</span>
<span id="cb40-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb40-17"></span>
<span id="cb40-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.db'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb40-19">  cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb40-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> Temporarytable(cur<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cur):</span>
<span id="cb40-21">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 1)'</span>)</span>
<span id="cb40-22">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (2, 1)'</span>)</span>
<span id="cb40-23">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 2)'</span>)</span>
<span id="cb40-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select sum(x * y) from points'</span>):</span>
<span id="cb40-25">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb40-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select x, y from points'</span>):</span>
<span id="cb40-27">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>created table
(5,)
(1, 1)
(2, 1)
(1, 2)
dropped table</code></pre>
</div>
</div>
<p>enter and exit are already implemented in function <code>temporarytable</code> and cursor is implemented in the <code>connect()</code> call. now i would rewrite like this</p>
<div id="3007e670" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span></span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Temporarytable:</span>
<span id="cb42-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, gen):</span>
<span id="cb42-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen</span>
<span id="cb42-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb42-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.args, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> args, kwargs</span>
<span id="cb42-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span>
<span id="cb42-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__enter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb42-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.kwargs)</span>
<span id="cb42-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_instance)</span>
<span id="cb42-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__exit__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>arg):</span>
<span id="cb42-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_instance, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb42-14"></span>
<span id="cb42-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@Temporarytable</span></span>
<span id="cb42-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> temporarytable(cur):</span>
<span id="cb42-17">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create table points(x int, y int)'</span>)</span>
<span id="cb42-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb42-19">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop table points'</span>)</span>
<span id="cb42-20"></span>
<span id="cb42-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># temporarytable = Temporarytable(temporarytable)</span></span>
<span id="cb42-22"></span>
<span id="cb42-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.db'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb42-24">  cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb42-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> temporarytable(cur):</span>
<span id="cb42-26">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 1)'</span>)</span>
<span id="cb42-27">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (2, 1)'</span>)</span>
<span id="cb42-28">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 2)'</span>)</span>
<span id="cb42-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select sum(x * y) from points'</span>):</span>
<span id="cb42-30">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb42-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select x, y from points'</span>):</span>
<span id="cb42-32">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>(5,)
(1, 1)
(2, 1)
(1, 2)</code></pre>
</div>
</div>
<p>all the stuff context manager above we do not need to write:</p>
<div id="f0ded331" class="cell" data-execution_count="31">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span></span>
<span id="cb44-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> contextlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> contextmanager</span>
<span id="cb44-3"></span>
<span id="cb44-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@contextmanager</span></span>
<span id="cb44-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> temporarytable(cur):</span>
<span id="cb44-6">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create table points(x int, y int)'</span>)</span>
<span id="cb44-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb44-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb44-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">finally</span>:</span>
<span id="cb44-10">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop table points'</span>)</span>
<span id="cb44-11"></span>
<span id="cb44-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># temporarytable = Temporarytable(temporarytable)</span></span>
<span id="cb44-13"></span>
<span id="cb44-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.db'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb44-15">  cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb44-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> temporarytable(cur):</span>
<span id="cb44-17">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 1)'</span>)</span>
<span id="cb44-18">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (2, 1)'</span>)</span>
<span id="cb44-19">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 2)'</span>)</span>
<span id="cb44-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select sum(x * y) from points'</span>):</span>
<span id="cb44-21">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb44-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select x, y from points'</span>):</span>
<span id="cb44-23">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>(5,)
(1, 1)
(2, 1)
(1, 2)</code></pre>
</div>
</div>
</section>
<section id="summary" class="level1">
<h1>summary</h1>
<p>all combination of what we’ve learned in the last example:</p>
<ul>
<li>a <strong>context manager</strong> is merely some piece of code that pairs set up actions and teardown actions. teardown occurs only if set up occurs</li>
<li>a <strong>generator</strong> is merely some form of syntax that allows us to do things like enforce sequencing and interleaving notice the</li>
</ul>
<p>finally we need something to adapt the generator to this data model that we looked at at the very beginning. we have these underscore methods and we have to find some way to take how the generator works and fit it into those underscore methods. one of the things we need to do in order to do that is we need to take this generator object to wrap it in some fashion that wrapping is part of the core of how Python works it’s easy to dynamics and construct functions</p>
<ul>
<li>there does happen to be a feature called <strong>decorators</strong> that allows us a nice convenient syntax for doing that exactly.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>criteria of Python expert code:</p>
<ul>
<li>expert level code is not code that uses every single feature;</li>
<li>it’s in fact not code that even uses that many features of Python;</li>
<li>it’s code that has a certain clarity to where and when a feature should be used;</li>
<li>it’s code that doesn’t waste the time of the person who’s writing it because they say to themselves I have this pattern Python has this mechanism I fit them together and everything just seamlessly and and very smoothly works;</li>
<li>it’s code that doesn’t have a lot of additional mechanisms associated with it it doesn’t have people creating their own protocols it doesn’t have people creating their own frameworks where the language itself provides the core pieces that you need and you merely have to understand what those core pieces are what they need and how to assemble them.</li>
</ul>
</div>
</div>
</section>
<section id="futher-reading" class="level1">
<h1>futher reading</h1>
<ol type="1">
<li><a href="https://docs.python.org/3/reference/datamodel.html">Python data model</a></li>
<li><a href="https://www.geeksforgeeks.org/python-metaclass-__new__-method/">Python metaclass <code>__new__</code></a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>pydata</category>
  <guid>https://lktuan.github.io/blog/2024-07-10-expert-in-python/</guid>
  <pubDate>Tue, 09 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-10-expert-in-python/pydata-logo-final.png" medium="image" type="image/png" height="60" width="144"/>
</item>
<item>
  <title>A lesson of advanced python from Juan Rodríguez</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-08-advanced-python/</link>
  <description><![CDATA[ 





<p>This <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/tree/main">lesson</a> was found on <a href="https://github.com/astrojuanlu">Juan Luis Cano Rodríguez’s</a> github profile when I came across his talk <a href="https://www.youtube.com/watch?v=ffDHdtz_vKc">“Building the composable Python data stack with Kedro &amp; Ibis”</a> (bookmarked for learning later) in <a href="https://www.youtube.com/playlist?list=PLGVZCDnMOq0rrhYTNedKKuJ9716fEaAdK">Pydata London 2024</a>.</p>
<p>This is my notes:</p>
<section id="intro" class="level1">
<h1>00 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/00_intro.ipynb">intro</a></h1>
<section id="learning-objectives" class="level2">
<h2 class="anchored" data-anchor-id="learning-objectives">learning objectives</h2>
<ul>
<li>Learn modern software engineering practices using Python</li>
<li>Understand the value of automation in the software engineering process</li>
<li>Gain insight into how Data Science projects are put in production</li>
<li>Learn better techniques to collaborate in software projects</li>
</ul>
<p>The instructor used Linux / Conda, err I just have Window here so there is no other way but right I will try to make stuffs work in Window. Let’s get started!</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://raw.githubusercontent.com/astrojuanlu/ie-mbd-advanced-python/e2224276f91529280ebfcd42ddc7dc22cf0d2010/img/quote-talk-is-cheap-show-me-the-code-linus-torvalds-273528.jpg" class="img-fluid figure-img"></p>
<figcaption>stolen from the lecture</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="git" class="level1">
<h1>01 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/01_git.ipynb">git</a></h1>
<section id="glossary" class="level2">
<h2 class="anchored" data-anchor-id="glossary">glossary</h2>
<ul>
<li><strong>Repository</strong>: Directory tracked by git, contains a <code>.git</code> folder and it’s created by <code>$ git init</code>;</li>
<li><strong>Commit</strong>: State or snapshot of the repository, they are created by <code>$ git commit</code>;</li>
<li><strong>Branch</strong>: A parallel or separate line of development, the default one is master and they are created by <code>$ git branch</code> or <code>$ git checkout -b</code>.</li>
</ul>
</section>
<section id="git-uses-a-linux-like-cli-so-now-linux-cli-101-and-how-to-do-the-same-on-window-pwsh" class="level2">
<h2 class="anchored" data-anchor-id="git-uses-a-linux-like-cli-so-now-linux-cli-101-and-how-to-do-the-same-on-window-pwsh">git uses a Linux-like cli so now Linux cli 101 (and how to do the same on Window pwsh)</h2>
<ul>
<li><code>whoami</code>: who am i</li>
<li><code>pwd</code>: print working directory</li>
<li><code>ls</code>: list all file in the dir, <code>.</code> for current folder, <code>..</code> for parent one (seems there is no <code>--color</code> or <code>-a</code> in pwsh)</li>
<li><code>cd</code>: change dir</li>
<li><code>touch</code>: create empty file (in pwsh we use <code>echo "" &gt;&gt; file_name</code>)</li>
<li><code>cat</code>: concatenate, print file contents</li>
<li><code>nano</code>: edit a file from the command line (there is a <a href="https://www.hanselman.com/blog/developers-can-run-bash-shell-and-usermode-ubuntu-linux-binaries-on-windows-10">way</a> that allows us to do the same in win10, but ya, nope)</li>
</ul>
</section>
<section id="workflow" class="level2">
<h2 class="anchored" data-anchor-id="workflow">workflow</h2>
<p>I did these in pwsh:</p>
<ol type="1">
<li>Create a directory <code>mkdir test_project</code> and navigate there <code>cd test_project</code>;</li>
<li>Init a git repository <code>git init</code>;</li>
<li>Check status <code>git status</code> (“on branch master, no commits yet, nothing to commit”);</li>
<li>Create some files <code>echo "#Hello, world!" &gt;&gt; readme.md</code>;</li>
<li>Stage the files <code>git add readme.md</code>;</li>
<li>Commit the changes <code>git commit -m "initial commit"</code>;</li>
</ol>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Do not run <code>git init</code> on your home directory, as it can lead to confusion and potential data loss. If <code>git status</code> gives a lot of untracked files unrelated to your project, you might want to <code>rm -rf .git</code> and start in another directory. Notice that this command removes all git history.</p>
</div>
</div>
</section>
<section id="branching" class="level2">
<h2 class="anchored" data-anchor-id="branching">branching</h2>
<ol type="1">
<li>Create and checkout to new branch <code>git switch -c branch1</code> (<code>-c</code> stands for create);</li>
<li>Commit there (see above);</li>
<li>Go back to main branch <code>git switch master</code>;</li>
<li>Merge changes <code>git merge branch1</code>;</li>
<li>Delete branch <code>git branch -d branch1</code> (<code>-d</code> stands for delete, don’t forget this step!).</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Normally, the <code>git merge</code> step happens online using <em>pull requests</em> or <em>merge requests</em>, which are <strong>not</strong> git concepts, but GitHub/GitLab concepts.</li>
<li>If <code>git switch</code> does not work for you, you might have an older version of Git. Consider upgrading, or alternatively replace all <code>git switch -c</code> with <code>git checkout -b</code>.</li>
</ul>
</div>
</div>
<blockquote class="blockquote">
<p>Pull requests (PR) let you tell others about changes you’ve pushed to a branch in a repository on GitHub. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before your changes are merged into the base branch. – GitHub</p>
</blockquote>
<blockquote class="blockquote">
<p>A merge request (MR) is a proposal to incorporate changes from a source branch to a target branch. – GitLab</p>
</blockquote>
<blockquote class="blockquote">
<p>Remember to <strong>never commit to master</strong>. – Git Workflow</p>
</blockquote>
</section>
<section id="merging" class="level2">
<h2 class="anchored" data-anchor-id="merging">merging</h2>
<p>2 types of merging:</p>
<ul>
<li><strong>Fast-forward merge</strong>: There is no diverging history, and git just “advances the pointer” of the current branch. <code>git merge new-branch --ff-only</code> will fail if a fast-forward merge is not possible;</li>
<li><strong>Non fast-forward merge</strong>: The history diverged, and git will create a merge commit (hence ask for a commit message) with two parents that combines the two branches. <code>git merge new-branch --no-ff</code> always creates a merge commit even if a fast-forward merge is possible.</li>
</ul>
<p>GitHub use <code>--no--ff</code> option for pull requests, see <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request">here</a>, and this old-but-gold <a href="https://stackoverflow.com/questions/9069061/what-effect-does-the-no-ff-flag-have-for-git-merge">discussion</a>.</p>
<ul>
<li>Non fast-forward merges can end up in conflicts. In that case, git will halt the merge operation and leave traces in the affected files;</li>
<li>To abort a merge <code>git merge --abort</code> (useful if we are scared and don’t know what to do);</li>
<li>To merge overriding everything with the upcoming branch <code>git merge new-branch --strategy-option theirs</code>;</li>
<li>To merge overriding everything with the current branch <code>git merge new-branch --strategy-option ours</code>.</li>
</ul>
<p><strong>Be careful</strong> while editing files that are in conflict.</p>
</section>
<section id="other" class="level2">
<h2 class="anchored" data-anchor-id="other">other</h2>
<ul>
<li>Ignoring files <code>.gitignore</code>;</li>
<li>Amend the last commit: <code>git commit --amend</code>;</li>
<li>Show pretty history: <code>git log --graph --oneline --decorate --all</code>;</li>
<li>Configuring git aliases: <code>git config --global alias.lg "log --graph --oneline --decorate"</code> (and now you have <code>git lg</code>!).</li>
</ul>
<p>This excellent chart will help you in git workflow decision making.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-08-advanced-python/git_pretty.png" class="img-fluid figure-img"></p>
<figcaption>git flowchart, photo credit to this SO <a href="https://stackoverflow.com/questions/14096721/how-to-add-file-to-a-previous-commit">thread</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="triangular-workflows-in-git" class="level2">
<h2 class="anchored" data-anchor-id="triangular-workflows-in-git">triangular workflows in git</h2>
<p>When collaborating with a project hosted online on GitHub or GitLab, the most common setup is having a central repository, one remote fork per user, and local clones/checkouts:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://github.blog/wp-content/uploads/2015/07/5dcdcae4-354a-11e5-9f82-915914fad4f7.png?resize=2000%2C951" class="img-fluid figure-img"></p>
<figcaption>triangular workflows in git, <a href="https://github.blog/2015-07-29-git-2-5-including-multiple-worktrees-and-triangular-workflows/">source</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Notice the different naming conventions between this website and the first image:</p>
<ul>
<li>Convention 1: upstream/origin/local</li>
<li>Convention 2: origin/<username>/local</username></li>
</ul>
<p>We will be consistent with the Aaron Meurer guide and therefore use Convention 2 all the time.</p>
</section>
<section id="after-creating-a-pr" class="level2">
<h2 class="anchored" data-anchor-id="after-creating-a-pr">after creating a PR</h2>
<p>After your pull request has been merged to <code>master</code>, your local <code>master</code> and <code>&lt;username&gt;/master</code> will be outdated with respect to <code>origin/master</code>. On the other hand, you should <strong>avoid working on this branch anymore in the future</strong>: remember branches should be ephemeral and short-lived.</p>
<p>To put yourself in a clean state again, you have to:</p>
<ol type="1">
<li>Click “remove branch” in the pull request (don’t click “remove fork”!);</li>
<li><code>git checkout master</code> (go back to master);</li>
<li><code>git fetch origin</code> (<strong>never, ever</strong> use <code>git pull</code> unless you know exactly what you’re doing)</li>
<li><code>git merge --ff-only origin master</code> (update your local master with origin/master, and fail if you accidentally made any commit in master)</li>
<li><code>git fetch -p &lt;username&gt;</code> (✨ acknowledge the removal of the remote branch ✨)</li>
<li><code>git branch -d old-branch</code> (remove the old branch)</li>
<li><code>git push &lt;username&gt; master</code> (update your fork with respect to origin)</li>
<li><code>git checkout -b new-branch</code> (start working in the new feature!)</li>
</ol>
<p>This process has to be repeated <strong>after every pull request</strong>.</p>
<p>Some organizations where all the members are trusted do not use forks, and everybody pushes their branches to the same repository instead. While this simplifies some parts of the workflow, it also requires proper checks in place to prevent bad code to be merged - for example, by <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/managing-a-branch-protection-rule">requiring a minimum number of reviews</a> or some <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches">automated status checks</a>.</p>
</section>
</section>
<section id="pythonpath" class="level1">
<h1>02 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/02_pythonpath.ipynb">pythonpath</a></h1>
<section id="how-does-import-work" class="level2">
<h2 class="anchored" data-anchor-id="how-does-import-work">how does <code>import</code> work?</h2>
<p>How do <code>import os, pandas</code> work? If <code>pandas</code> was not installed, what happen?</p>
</section>
<section id="how-can-i-import-my-code" class="level2">
<h2 class="anchored" data-anchor-id="how-can-i-import-my-code">how can I <code>import</code> my code?</h2>
<p>There are three ways to import our own code:</p>
<ul>
<li><strong>Being on the same directory</strong>: This is the quickest, however it scales quite poorly (imagine having all of pandas and scikit-learn in a single directory to do any data analysis project!)</li>
<li><strong>Appending our code location to PYTHONPATH</strong>: This is effective, but we will try to avoid it because it can bring problems in the future.</li>
<li><strong>Making our code installable</strong>: Since any code that’s installed can be imported, this shifts the question to “how to make our code installable”.</li>
</ul>
</section>
<section id="my-first-python-lib" class="level2">
<h2 class="anchored" data-anchor-id="my-first-python-lib">my first python lib</h2>
<p>We will create a new Python library, “IE Titanic utils”, to analyze the <a href="https://www.kaggle.com/c/titanic/data">Titanic dataset</a>. I will create a project <code>ie-titanic-utils</code>, add <code>readme.md</code> and <code>.gitignore</code> files.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> it-titanic-utils</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> init</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# This is utility to help analyze Titanic dataset"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> readme.md</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Invoke-WebRequest</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Uri</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.toptal.com/developers/gitignore/api/python,jupyternotebooks"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Select-Object</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-ExpandProperty</span> Content <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Out-File</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-FilePath</span> .gitignore <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Encoding</span> utf8</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add readme.md .gitignore</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"initial commit"</span></span></code></pre></div>
<p>Now I will create <code>str_utils.py</code> file (using VS code for convenience), with a function called <code>tokenize</code> that takes a str sentence and splits it into a list of words.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>str_utils.py</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="str_utils.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tokenize(sentence: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]:</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sentence.split()</span></code></pre></div>
</div>
<p>In pwsh, I can import and use this function</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Python</span> 3.11.4 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tags/v3.11.4:d2340ef,</span> Jun  7 2023, 05:45:37<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[MSC</span> v.1934 64 bit <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">AMD64</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> on win32</span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Type</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"help"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"copyright"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credits"</span> or <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"license"</span> for more information.</span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> from <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">str_utils</span> import tokenize</span>
<span id="cb3-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> tokenize<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Toi la Le Khac Tuan"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Toi'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'la'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Le'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Khac'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tuan'</span>]</span>
<span id="cb3-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span></span></code></pre></div>
</section>
<section id="the-pythonpath" class="level2">
<h2 class="anchored" data-anchor-id="the-pythonpath">the <code>PYTHONPATH</code></h2>
<p>We saw above that we could easily import our <code>tokenize</code> function. However, this only works if we are in the same directory. Why? Python looks in some predefined locations to know where to find what we want to import, called the “PATH”.</p>
<div id="e4b08fa3" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb4-2">sys.path <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i will not execute this code</span></span></code></pre></div>
</details>
</div>
<p>Therefore, there are two ways of making our code <strong>globally importable</strong>:</p>
<ol type="1">
<li>Modify the “PATH”</li>
<li>Put our code inside a location predefined in the “PATH”</li>
</ol>
<p>The first option can be achieved like this:</p>
<div id="d729e316" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> sys.path.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/username/ie-titanic-utils"</span>)</span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> str_utils  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works!</span></span></code></pre></div>
</details>
</div>
<p>Or, alternatively, from outside of the interpreter: <code>export PYTHONPATH=/home/username/ie-titanic-utils</code>.</p>
<p>However, both are <strong>bad practices and should be avoided</strong>.</p>
</section>
<section id="what-does-import-do" class="level2">
<h2 class="anchored" data-anchor-id="what-does-import-do">what does <code>import</code> do?</h2>
<p>Python code is normally written in <code>.py</code> scripts. These scripts can be imported in the same way that any model or package from the standard library can:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> python3</span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">math</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works, because it's in stdlib</span></span>
<span id="cb6-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">numpy</span> as np  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works if you ran `pip install numpy` in advance</span></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">str_utils</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works if you are in the same directory</span></span>
<span id="cb6-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello,'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'world!'</span>]</span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> </span></code></pre></div>
<p>When the user imports a script, <strong>Python runs the script</strong>. That’s the way all the possible functions and classes inside it are available.</p>
</section>
<section id="how-to-separate-running-code-from-reusable-pieces" class="level2">
<h2 class="anchored" data-anchor-id="how-to-separate-running-code-from-reusable-pieces">how to separate “running code” from reusable pieces</h2>
<p>A Python module (any <code>.py</code> script) might contain code that we want to run, as well as code that we only want to import. To separate these, we use this trick:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  get-content <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Tail</span> 2 .str_utils.py</span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__name__</span> == <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb7-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">print</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tokenize</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello, world!"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  python .str_utils.py <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The `print` runs</span></span>
<span id="cb7-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hello,'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'world!'</span>]</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  python</span>
<span id="cb7-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> from <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">str_utils</span> import tokenize</span>
<span id="cb7-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> tokenize<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hi, world!"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hi,'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'world!'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The `print` doesn't run!</span></span>
<span id="cb7-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span></span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here is what Claude sonnet 3.5 gave me:</p>
<p>To separate code that we want to run directly from code that we only want to import, we should use the if <code>__name__ == "__main__"</code>: idiom in Python. This is a common pattern that allows a Python script to be both importable and executable. Here’s an explanation:</p>
<ol type="1">
<li>When a Python file is run directly, Python sets the special <code>__name__</code> variable to “<code>__main__</code>”.</li>
<li>When a Python file is imported as a module,<code>__name__</code>is set to the name of the module.</li>
</ol>
<p>By using this idiom, we can control which code runs when the script is executed directly versus when it’s imported as a module.</p>
</div>
</div>
</section>
</section>
<section id="pip-vs.-conda" class="level1">
<h1>03&amp;04 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/03-04_pip-vs-conda.ipynb">pip vs.&nbsp;conda</a></h1>
<section id="managing-python-environments" class="level2">
<h2 class="anchored" data-anchor-id="managing-python-environments">managing python environments</h2>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://raw.githubusercontent.com/astrojuanlu/ie-mbd-advanced-python/e2224276f91529280ebfcd42ddc7dc22cf0d2010/img/python_comrades.png" class="img-fluid figure-img"></p>
<figcaption>stolen from the lecture</figcaption>
</figure>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
<p>Simple is better than complex.</p>
<p>Complex is better than complicated.</p>
</blockquote>
<p>How do people install and upgrade Python? -&gt; Most of people choose Python.org, the same for me!</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
</div>
<div class="callout-body-container callout-body">
<p>This way ships a tool to create development environments (<code>venv</code>). However, <code>venv</code> cannot create environments with different Python versions (you’re tied to the one you downloaded) and certain packages will require extra steps to be installed. Therefore, it <strong>is not</strong> for everyone.</p>
</div>
</div>
<p>Juan chose to use <code>conda</code>. As I am learning Docker, I choose Docker for this tutorial.</p>
<p>How do people create isolated development environments? -&gt; The most popular is <code>Virtualenv</code>. But normally when doing an analysis task, I use <code>venv</code> which is built-in python lib. Recently I followed my dev team to use <code>pipenv</code>, I do also see <code>poetry</code> is worth-learning approach.</p>
<blockquote class="blockquote">
<p>“More than a half of the users of Jupyter Notebook and JupyterLab choose Conda”</p>
</blockquote>
<p>As I think a model which is not deployed yet is useless model, I choose VS Code and Docker - more deployment-oriented.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">summary</h2>
<blockquote class="blockquote">
<p>For the user, the most salient distinction is probably this: pip installs python packages within any environment; conda installs any package within conda environments.</p>
<p>—Jake Vanderplas</p>
</blockquote>
<p>However, I will be using <code>pipenv</code> to achieve what Juan done in upcoming sections. I will specify version of each package I used.</p>
</section>
<section id="pip-and-pypi" class="level2">
<h2 class="anchored" data-anchor-id="pip-and-pypi"><code>pip</code> and <code>PyPI</code></h2>
<p><code>pip</code> is the default Python installer. By default, it fetches packages from <a href="https://pypi.org/" class="uri">https://pypi.org/</a>, which is the community repository for Python packages.</p>
</section>
</section>
<section id="layout" class="level1">
<h1>05 layout</h1>
<p>here is my project’s layout:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ie-titanic-utils</span></span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├─</span> src</span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  └─ ie_titanic_utils</span>
<span id="cb8-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>     ├─ __init__.py</span>
<span id="cb8-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>     └─ ...</span>
<span id="cb8-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├─</span> tests</span>
<span id="cb8-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  └─ ...</span>
<span id="cb8-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├─</span> .gitignore</span>
<span id="cb8-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├─</span> README.md</span>
<span id="cb8-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└─</span> pyproject.toml</span></code></pre></div>
<ul>
<li>The <code>src/package_name</code> contains the source code of the library. <code>package_name</code> must be Python identifier. It should contain a <code>__init__.py</code> that can be empty;</li>
<li>The <code>tests</code> directory contains the tests. It must not contain any <code>__init__.py</code> because it’s not meant to be imported as a package. In very specific cases it’s included inside <code>src/package_name</code>;</li>
<li>Every project contains a <code>README.md</code> that at least explains what the project is;</li>
<li><code>pyproject.toml</code> contains the metadata of the project. The absolutely required fields are <code>module</code>, <code>author</code>, and some extra information that tells Python how to install the package.</li>
</ul>
<section id="creating-a-package" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-package">creating a package</h2>
<ol type="1">
<li>run <code>flit init</code> to create the metadata</li>
</ol>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  flit init</span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyproject.toml</span> exists <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> overwrite it<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">y/N</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: y</span>
<span id="cb9-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Module</span> name <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">ie_titanic_utils</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: ie_utils</span>
<span id="cb9-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Author:</span> Tuan Le Khac</span>
<span id="cb9-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Author</span> email: tuan.lekhac0905@gmail.com</span>
<span id="cb9-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Home</span> page: </span>
<span id="cb9-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Choose</span> a license <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">see</span> http://choosealicense.com/ for more info<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1.</span> MIT <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> simple and permissive</span>
<span id="cb9-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2.</span> Apache <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> explicitly grants patent rights</span>
<span id="cb9-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3.</span> GPL <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> ensures that code based on this is shared with the same terms</span>
<span id="cb9-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">4.</span> Skip <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> choose a license later</span>
<span id="cb9-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Enter</span> 1-4: 4</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Written</span> pyproject.toml<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">edit</span> that file to add optional extra info.</span></code></pre></div>
<ol start="2" type="1">
<li>place some code under the source directory. In <code>__init__.py</code> there must be a docstring giving a description of the project and a <code>__version__</code> variable indicating the version:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>__init__.py</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="__init__.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""IE utils (test package)."""</span></span>
<span id="cb10-2"></span>
<span id="cb10-3">__version__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1.0"</span></span></code></pre></div>
</div>
<ol start="3" type="1">
<li>Install the code using <code>pip install</code>! (this did not work for me currently. edit: the project name should match the <code>src/package_name</code> omg)</li>
</ol>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  pip install .</span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Processing</span> .ie-titanic-utils</span>
<span id="cb11-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb11-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Successfully</span> installed ie_titanic_utils-0.1.0</span>
<span id="cb11-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  python</span>
<span id="cb11-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Python</span> 3.11.4 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tags/v3.11.4:d2340ef,</span> Jun  7 2023, 05:45:37<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[MSC</span> v.1934 64 bit <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">AMD64</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> on win32</span>
<span id="cb11-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Type</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"help"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"copyright"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credits"</span> or <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"license"</span> for more information.</span>
<span id="cb11-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ie_titanic_utils</span></span>
<span id="cb11-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> ie_titanic_utils.__version__</span>
<span id="cb11-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0.1.0'</span></span>
<span id="cb11-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span>    </span></code></pre></div>
<ol start="4" type="1">
<li><code>readme.md</code> and a <code>.gitignore</code> files were created.</li>
<li>commit the change</li>
</ol>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> checkout <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-b</span> first_module <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i should be using switch (-c) haha, checkout is old syntax</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> status</span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .</span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"initial very first module"</span></span>
<span id="cb12-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> checkout master</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  git merge <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-ff</span> first_module</span>
<span id="cb12-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Merge</span> made by the <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ort'</span> strategy.</span>
<span id="cb12-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyproject.toml</span>                    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">30</span> ++++++++++++++++++++++++++++++</span>
<span id="cb12-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">src/ie_titanic_utils/__init__.py</span>  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6</span> ++++++</span>
<span id="cb12-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">src/ie_titanic_utils/str_utils.py</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6</span> ++++++</span>
<span id="cb12-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3</span> files changed, 42 insertions<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">create</span> mode 100644 pyproject.toml</span>
<span id="cb12-14"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">create</span> mode 100644 src/ie_titanic_utils/__init__.py</span>
<span id="cb12-15"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">create</span> mode 100644 src/ie_titanic_utils/str_utils.py</span>
<span id="cb12-16"></span>
<span id="cb12-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> branch <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> first_module</span>
<span id="cb12-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># git push origin master</span></span>
<span id="cb12-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as I will not upload this code to GitHub</span></span>
<span id="cb12-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://stackoverflow.com/questions/32238616/git-push-fatal-origin-does-not-appear-to-be-a-git-repository-fatal-could-n</span></span></code></pre></div>
<p>Now if I log the git, I will see this:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  git log <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--graph</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--oneline</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--decorate</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--all</span></span>
<span id="cb13-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*</span>   39105c7 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">HEAD</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> master<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Merge</span> branch <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first_module'</span></span>
<span id="cb13-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*</span> 7a33844 initial very first module</span>
<span id="cb13-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/</span></span>
<span id="cb13-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*</span> 793bd67 initial commit</span></code></pre></div>
<p>Yeah til now I can create a “package” in my computer and install so I can use it <strong>globally</strong>. But I have not use any env management yet.</p>
</section>
<section id="intermezzo-version-numbers" class="level2">
<h2 class="anchored" data-anchor-id="intermezzo-version-numbers">intermezzo: version numbers</h2>
<ul>
<li>Version numbers for Python packages are explained in <a href="https://www.python.org/dev/peps/pep-0440/">PEP 440</a></li>
<li>For libraries, the most widely used convention is <a href="https://semver.org/">semantic versioning</a>: X.Y.Z
<ul>
<li>Z <strong>must</strong> be incremented if only backwards compatible bug fixes are introduced (a bug fix is defined as an internal change that fixes incorrect behavior)</li>
<li>Y <strong>must</strong> be incremented every time there is new, backwards-compatible functionality</li>
<li>X <strong>must</strong> be incremented every time there are backwards-incompatible changes</li>
</ul></li>
<li>Between releases, the version should have the <code>.dev0</code> suffix</li>
<li>Recommendation: start with 0.1.dev0 (development version), then make a <code>0.1.0</code> release, then progress to <code>0.1.1</code> for quick fixes and <code>0.2.0</code> for new functionality, and when you want to make a promise of relative stability jump to <code>1.0.0</code>.</li>
<li>For applications, other conventions are more appropriate, like <a href="https://calver.org/">calendar versioning</a>: <code>[YY]YY.MM.??</code></li>
</ul>
</section>
<section id="project-requirements" class="level2">
<h2 class="anchored" data-anchor-id="project-requirements">project requirements</h2>
<p>Sometimes our project will depend on third-party libraries (pandas, scikit-learn). To make pip install those dependencies automatically, we can add them to our <code>pyproject.toml</code> under the <code>[tool.flit.metadata]</code> section, using the <code>requires</code> option:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">build-system</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb14-2">requires = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"flit_core&gt;=3.4"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb14-3">build-backend = "flit_core.buildapi"</span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">project</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb14-6">name = "ie_titanic_utils"</span>
<span id="cb14-7">authors = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{name = "Tuan Le Khac", email = "tuan.lekhac0905@gmail.com"}</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb14-8">readme = "readme.md"</span>
<span id="cb14-9">requires-python = "&gt;=3.11"</span>
<span id="cb14-10">dynamic = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"version", "description"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb14-11">classifiers = [</span>
<span id="cb14-12">    "Programming Language :: Python :: 3",</span>
<span id="cb14-13">    "License :: OSI Approved :: MIT License",</span>
<span id="cb14-14">    "Operating System :: OS Independent",</span>
<span id="cb14-15">]</span>
<span id="cb14-16">requires = [</span>
<span id="cb14-17">    "pandas",</span>
<span id="cb14-18">    "matplotlib&gt;=2",</span>
<span id="cb14-19">]</span></code></pre></div>
<p>We might want to specify <em>optional</em> dependencies that should only be installed upon request, or for some specific purposes. A typical example will be development dependencies: we will need things like <code>pytest</code> and <code>black</code>, but we don’t want the user to install them as part as our library. To do that, we can specify <em>groups</em> of optional dependencies under the <code>tool.flit.metadata.requires-extra</code> section:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb15-1">In my case, I use <span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">`project.optional-dependencies`</span>: flit_core.config.ConfigError: Use <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">project</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> table for metadata or <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">tool.flit.metadata</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, not both.</span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">project.optional-dependencies</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb15-3">dev = [</span>
<span id="cb15-4">    "pytest&gt;=6.0",</span>
<span id="cb15-5">    "black&gt;=20.8b1",</span>
<span id="cb15-6">]</span></code></pre></div>
<p>That way, they will only get installed when <code>[dev]</code> is added after the name of our library:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  pip install .<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">dev</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Successfully installed black-24.4.2 ie_titanic_utils-0.1.0 iniconfig-2.0.0 pytest-8.2.2</span></span></code></pre></div>
</section>
</section>
<section id="unit-test" class="level1">
<h1>06 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/06_unit-tests.ipynb">unit test</a></h1>
<blockquote class="blockquote">
<p>If you use software that lacks automated tests, you are the tests.</p>
<p>— Jenny Bryan (<span class="citation" data-cites="JennyBryan">@JennyBryan</span>) <a href="https://x.com/JennyBryan/status/1043307291909316609?ref_src=twsrc%5Etfw">September 22, 2018</a></p>
</blockquote>
<p>Testing is <strong>essential</strong>. Computers excel at doing repetitive tasks: they basically never make mistakes (the mistake might be in what we told the computer to do). Humans, on the other hand, fail more often, especially under pressure, or on Friday afternoons and Monday mornings. Therefore, instead of letting the humans be the tests, we will use the computer to <strong>frequently verify that our software works as specified</strong>.</p>
<p>I will be using <code>pytest</code> to achieve this.</p>
<section id="test-driven-development" class="level2">
<h2 class="anchored" data-anchor-id="test-driven-development">test-driven development</h2>
<p>The “test-driven development mantra” is <span style="color:red;font-weight:bold;">Red</span> - <span style="color:green;font-weight:bold;">Green</span> - <span style="color:grey;font-weight:bold;">Refactor</span>:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://raw.githubusercontent.com/astrojuanlu/ie-mbd-advanced-python/e2224276f91529280ebfcd42ddc7dc22cf0d2010/img/red-green-refactor.png" class="img-fluid figure-img"></p>
<figcaption>Make it work. Make it right. Make it fast.</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ol type="1">
<li>Write a test. <span style="color:red;font-weight:bold;">Watch it fail</span>.</li>
<li>Write just enough code to <span style="color:green;font-weight:bold;">pass the test</span>.</li>
<li>Improve the code without breaking the test.</li>
</ol>
<p>Repeat.</p>
</section>
<section id="testing-in-python" class="level2">
<h2 class="anchored" data-anchor-id="testing-in-python">testing in Python</h2>
<p>Summary: use <code>pytest</code>. Everybody does. It rocks.</p>
<p><a href="https://docs.pytest.org/en/8.2.x/">pytest</a> is a testing framework for Python that makes writing tests extremely easy. It is much more powerful than the standard library equivalent, <code>unittest</code>. We can use by install it first <code>pip install pytest</code>.</p>
<p>We can write a function that test the <code>tokenize</code> funtion:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tests/test_tokenize.py</strong></pre>
</div>
<div class="sourceCode" id="cb17" data-filename="tests/test_tokenize.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ie_titanic_utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tokenize  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will fail right away!</span></span>
<span id="cb17-2"></span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_tokenize_returns_expected_list():</span>
<span id="cb17-5">    sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a sentence"</span></span>
<span id="cb17-6">    expected_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>]</span>
<span id="cb17-7"></span>
<span id="cb17-8">    tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenize(sentence)</span>
<span id="cb17-9"></span>
<span id="cb17-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> expected_tokens</span></code></pre></div>
</div>
<p>and we run it from the command line:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  pytest</span>
<span id="cb18-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">============================================================================================</span> test session starts ============================================================================================</span>
<span id="cb18-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">platform</span> win32 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--</span> Python 3.11.4, pytest-8.2.2, pluggy-1.5.0</span>
<span id="cb18-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rootdir:</span> .ie-titanic-utils</span>
<span id="cb18-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configfile:</span> pyproject.toml</span>
<span id="cb18-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">plugins:</span> anyio-3.7.1, time-machine-2.14.0</span>
<span id="cb18-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">collected</span> 1 item</span>
<span id="cb18-8"></span>
<span id="cb18-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">teststest_tokenize.py</span> .                                                                                                                                                                               <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">100%</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> </span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">=============================================================================================</span> 1 passed in 0.02s ============================================================================================= </span></code></pre></div>
<p>The test successed after I fixed the <code>__init__.py</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/./__init__.py</strong></pre>
</div>
<div class="sourceCode" id="cb19" data-filename="src/./__init__.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ie_titanic_utils.str_utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tokenize</span>
<span id="cb19-2">__all__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tokenize"</span>]</span></code></pre></div>
</div>
</section>
</section>
<section id="oop" class="level1 page-columns page-full">
<h1>07&amp;08 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/07-08_object-oriented-programming.ipynb">oop</a></h1>
<section id="what-are-objects-anyway" class="level2">
<h2 class="anchored" data-anchor-id="what-are-objects-anyway">what are “objects” anyway?</h2>
<p>like pandas’s <code>DataFrame</code> or matplotlib’s <code>Figure</code>, an <em>object</em> is sthg that has:</p>
<ul>
<li>object-bound variables: call <strong>properties</strong>;</li>
<li>object-bound functions: call <strong>methods</strong>.</li>
</ul>
<p>if the object’s properties can change, we say they have <strong>states</strong>, in that case they are <strong>mutable</strong>. otherwise, they are <strong>stateless</strong> and <strong>immutable</strong>. a typical example is list (mutable) and tuple (immutable).</p>
<div id="420bf50e" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">my_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb20-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(my_list)</span>
<span id="cb20-3">my_list.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb20-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(my_list)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1, 2, 3]
[1, 2, 3, 4]</code></pre>
</div>
</div>
<div id="3893a277" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The operator that creates tuples is not parentheses:</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is the comma!</span></span>
<span id="cb22-3">my_tuple <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Notice that I don't need parentheses!</span></span>
<span id="cb22-4">my_tuple</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>(1, 2, 3)</code></pre>
</div>
</div>
<div id="62ffbdb1" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(my_tuple))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nothing that allows us to change the state of the tuple</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index']</code></pre>
</div>
</div>
<div id="38108e09" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1">my_tuple[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This wont work, "TypeError: 'tuple' object does not support item assignment"</span></span></code></pre></div>
</details>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Immutable objects have the advantage that they can be <strong>hashed</strong>, that is: they can be transformed, using some cryptographical function, into something that uniquely represents that object. Mutable objects can’t, because the hash would have to change every time the state of the object changed. <strong>Dictionary keys have to be hashable objects</strong>.</p>
</div>
</div>
<div id="12fa6316" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">{</span>
<span id="cb27-2">    my_tuple: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_tuple"</span></span>
<span id="cb27-3">}</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>{(1, 2, 3): 'my_tuple'}</code></pre>
</div>
</div>
<div id="249e2363" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hash</span>(my_tuple)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>529344067295497451</code></pre>
</div>
</div>
<div id="5ef6beee" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this wont work: "TypeError: unhashable type: 'list'"</span></span>
<span id="cb31-2">{</span>
<span id="cb31-3">    my_list: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_list"</span></span>
<span id="cb31-4">}</span></code></pre></div>
</details>
</div>
<div id="0096641b" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this wont work: "TypeError: unhashable type: 'list'"</span></span>
<span id="cb32-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hash</span>(my_list)</span></code></pre></div>
</details>
</div>
</section>
<section id="classes-and-instances" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="classes-and-instances">classes and instances</h2>
<p>objects are defined by <strong>instantiating a class</strong>. a class is a <strong>template</strong> for objects, where we define it’s behaviours, an <strong>instance</strong> is a particular realization of that class.</p>
<section id="example" class="level3">
<h3 class="anchored" data-anchor-id="example">Example</h3>
<p>we want model the <code>User</code> of our company’s product, to later study their behaviours:</p>
<div id="4d14860f" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> User:</span>
<span id="cb33-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb33-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(User)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>type</code></pre>
</div>
</div>
<p><code>User</code> class is of type <code>type</code>, which means that is can be used to created new objects. Let’s create 2 instances:</p>
<div id="30996245" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">user1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User()</span>
<span id="cb35-2">user2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User()</span>
<span id="cb35-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(user1)</span>
<span id="cb35-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(user2)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;__main__.User object at 0x000001B1AD8D4F90&gt;
&lt;__main__.User object at 0x000001B1AD8D4D90&gt;</code></pre>
</div>
</div>
<p>with a slight abuse of notation, we would say we have 2 <code>User</code> objects, or just 2 <code>User</code>s.</p>
</section>
<section id="using-the-instance-self" class="level3">
<h3 class="anchored" data-anchor-id="using-the-instance-self">Using the instance: <code>self</code></h3>
<p>let’s add a very simple <strong>method</strong> to demonstrate <em>explicit</em> <code>self</code>, a very important concept. a method is like a function bounded to the object, an can use it’s properties:</p>
<div id="ba8a0d18" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> User:</span>
<span id="cb37-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> whoami(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb37-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'This is : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
</div>
<div id="2441e1cb" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1">user1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User()</span>
<span id="cb38-2">user1.whoami()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>This is : &lt;__main__.User object at 0x000001B1AD8D4590&gt;</code></pre>
</div>
</div>
<p>why are methods (instead of plain functions) interesting? Because of <strong>duck typing</strong>:</p>
<blockquote class="blockquote">
<p>“If it walks like a duck and it quacks like a duck, then it must be a duck” – <a href="https://en.wikipedia.org/wiki/Duck_typing" class="uri">https://en.wikipedia.org/wiki/Duck_typing</a></p>
</blockquote>
<p>if something has a method that I need, I don’t care about its type.</p>
<div id="5032dcea" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> do_stuff(obj):</span>
<span id="cb40-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> obj.mean()</span></code></pre></div>
</details>
</div>
<div id="e0da8b5a" class="cell" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb41-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb41-3"></span>
<span id="cb41-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(do_stuff(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span>
<span id="cb41-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(do_stuff(pd.Series([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>2.0
2.0</code></pre>
</div>
</div>
<p>notice how we called <code>user1.test()</code> <strong>without passing an extra argument</strong>? This is because Python is automatically passing the instance. It’s the equivalent of doing this (<strong>never do this</strong>):</p>
<div id="8b163d53" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1">User.whoami(user1)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>This is : &lt;__main__.User object at 0x000001B1AD8D4590&gt;</code></pre>
</div>
</div>
<p>in fact, if we define a method without a first parameter, it will fail when we call it:</p>
<div id="5bf4beeb" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> TestClass:</span>
<span id="cb45-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test():</span>
<span id="cb45-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Don't do anything</span></span>
<span id="cb45-4"></span>
<span id="cb45-5">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TestClass()</span>
<span id="cb45-6">t.test()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fails: "TypeError: test() takes 0 positional arguments but 1 was given"</span></span></code></pre></div>
</details>
</div>
<p>this first parameter can be called anything, but <strong>everybody uses <code>self</code></strong>. Remember, conventions are important to minimize surprise and enhance collaboration!</p>
</section>
<section id="intermezzo-f-strings" class="level3">
<h3 class="anchored" data-anchor-id="intermezzo-f-strings">intermezzo: f-strings</h3>
<div id="669cec83" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>user1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Python &gt;= 3.6</span></span>
<span id="cb46-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(user1))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Python &lt; 3.6, equivalent</span></span>
<span id="cb46-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(User.whoami(user1))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DON'T use! (Although it's equivalent)   </span></span>
<span id="cb46-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %timeit User.whoami(user1)  # They have about the same performance </span></span>
<span id="cb46-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %timeit user1.whoami()</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>This is &lt;__main__.User object at 0x000001B1AD8D4590&gt;
This is &lt;__main__.User object at 0x000001B1AD8D4590&gt;
This is : &lt;__main__.User object at 0x000001B1AD8D4590&gt;
None</code></pre>
</div>
</div>
</section>
<section id="initializing-our-instances" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="initializing-our-instances">initializing our instances</h3>
<p>The ellipsis (<code>...</code>) is a built-in constant in Python. It’s an instance of the <code>ellipsis</code> (dấu chấm lửng) class.</p>
<div id="dd7c9d48" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb48-1">...</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>Ellipsis</code></pre>
</div>
</div>
<p>common uses of ellipsis:</p>
<ul>
<li>as a placeholder in function definitions or class bodies</li>
<li>in type hinting (especially for variable-length tuples)</li>
<li>in slicing operations (especially for multidimensional arrays in libraries like NumPy)</li>
</ul>
<div id="9042a8b1" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># As a placeholder</span></span>
<span id="cb50-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> function_to_be_implemented_later():</span>
<span id="cb50-3">    ...</span>
<span id="cb50-4"></span>
<span id="cb50-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In type hinting</span></span>
<span id="cb50-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Tuple</span>
<span id="cb50-7"></span>
<span id="cb50-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> process_points(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>points: Tuple[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, ...]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb50-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> point <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points:</span>
<span id="cb50-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Processing point: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>point<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb50-11"></span>
<span id="cb50-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Usage</span></span>
<span id="cb50-13">process_points((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Processing point: (1, 2)
Processing point: (3, 4, 5)
Processing point: (6,)</code></pre>
</div>
</div>
<div id="82041adf" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1">user1.this_property <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ...  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "99", whatever</span></span>
<span id="cb52-2">user1.this_property</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>Ellipsis</code></pre>
</div>
</div>
<p>however, this is considered a bad practice, and can confuse editors and static analysis tools. These properties should be specified on creation, in a way that I cannot have a user without <code>name</code> and <code>signup_date</code>. Python provides us a special method, <code>__init__</code> (this should not be confused with file <code>__init__.py</code> we put to project to tell Python our code is a package), that <strong>initializes</strong><sup>1</sup> the object:</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;This philosophy used to be summarized by the sentence “we are all consenting adults here”, which is nowadays being less used.</p></div></div><div id="ab86dd9f" class="cell" data-execution_count="23">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> User:</span>
<span id="cb54-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "dunder init" = double underscore init</span></span>
<span id="cb54-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name, signup_date):</span>
<span id="cb54-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name</span>
<span id="cb54-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signup_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> signup_date</span></code></pre></div>
</details>
</div>
<div id="9423fb8d" class="cell" data-execution_count="24">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dt</span>
<span id="cb55-2">user1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Doe"</span>, signup_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dt.datetime.now())</span>
<span id="cb55-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(user1.name, user1.signup_date, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>John Doe
2024-08-01 23:07:08.587740</code></pre>
</div>
</div>
<p>that’s something! However, there are several things we can improve:</p>
<ul>
<li>it can be cumbersome to specify the date every time, and it would be nice to have some default.</li>
<li>the default representation of the instances contains some hexadecimal memory address and nothing else. It would be nice to at least see the user name and the signup date</li>
<li>nothing stops me from changing the name and signup_date of a existing user:</li>
</ul>
</section>
<section id="exercise" class="level3">
<h3 class="anchored" data-anchor-id="exercise">exercise</h3>
<ul>
<li>make <code>signup_date</code> optional by providing a default value;</li>
<li>make the <code>__repr__</code> method return a string containing the <code>name</code> and <code>signup_date</code>, which will override the default.</li>
</ul>
<div id="fd72f5b4" class="cell" data-execution_count="25">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> User:</span>
<span id="cb57-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name, signup_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb57-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> signup_date <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb57-4">            signup_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dt.datetime.now() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Watch out with default parameters! They are created when the function is defined.</span></span>
<span id="cb57-5"></span>
<span id="cb57-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name</span>
<span id="cb57-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signup_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> signup_date</span>
<span id="cb57-8"></span>
<span id="cb57-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb57-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"User(name='</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">', signup_date=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">repr</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signup_date)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span></span></code></pre></div>
</details>
</div>
<div id="bd10d931" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb58-1">user1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Doe"</span>)</span>
<span id="cb58-2">user1</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>User(name='John Doe', signup_date=datetime.datetime(2024, 8, 1, 23, 7, 8, 618751))</code></pre>
</div>
</div>
</section>
<section id="extra-date-formatting" class="level3">
<h3 class="anchored" data-anchor-id="extra-date-formatting">extra: date formatting</h3>
<div id="fc4b84ad" class="cell" data-execution_count="27">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1">dt.datetime.now().isoformat()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ISO 8601</span></span>
<span id="cb60-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you don't like it, there's http://strftime.org/</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>'2024-08-01T23:07:08.625045'</code></pre>
</div>
</div>
<div id="b23b8c74" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb62-1">user1.signup_date.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y ::: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>'2024 ::: 01'</code></pre>
</div>
</div>
</section>
<section id="protecting-properties" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="protecting-properties">protecting properties</h3>
<p>in Python, there are <em>no private attributes</em> (neither properties nor methods), and in fact everything can be accessed <sup>2</sup>. However, we can “hide” them by default in autocomplete and other environments by using a leading underscore <code>_</code>: this is usually called <strong>protected variables</strong>.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;This philosophy used to be summarized by the sentence “we are all consenting adults here”, which is nowadays being less used.</p></div></div><p>there is a common pattern in which, if I want to make some property read-only, we can:</p>
<ul>
<li>make it protected</li>
<li>create a “getter” using the <span class="citation" data-cites="property">@property</span> decorator, which gets the value of the protected property with a public name</li>
</ul>
<div id="b008d693" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> User:</span>
<span id="cb64-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name, signup_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb64-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> signup_date <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb64-4">            signup_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dt.datetime.now()</span>
<span id="cb64-5"></span>
<span id="cb64-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name</span>
<span id="cb64-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._signup_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> signup_date</span>
<span id="cb64-8"></span>
<span id="cb64-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb64-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> name(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb64-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name</span>
<span id="cb64-12"></span>
<span id="cb64-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb64-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> signup_date(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb64-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._signup_date</span>
<span id="cb64-16"></span>
<span id="cb64-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb64-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"User(name='</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">', signup_date='</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>signup_date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">')"</span></span></code></pre></div>
</details>
</div>
<div id="e9a3b5f8" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb65-1">user1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuan Le"</span>)</span>
<span id="cb65-2">user1.name</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>'Tuan Le'</code></pre>
</div>
</div>
<div id="9fb2282d" class="cell" data-execution_count="31">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this wont work: "AttributeError: can't set attribute"</span></span>
<span id="cb67-2">user1.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tan Le"</span></span></code></pre></div>
</details>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you see tutorials mentioning “true private variables”, they are wrong!</p>
</div>
</div>
<div id="88ed0501" class="cell" data-execution_count="32">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Test:</span>
<span id="cb68-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name):</span>
<span id="cb68-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Not what you think!</span></span>
<span id="cb68-4">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Test(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This name"</span>)</span></code></pre></div>
</details>
</div>
<div id="e79d62f4" class="cell" data-execution_count="33">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this wont work</span></span>
<span id="cb69-2">t1.__name</span></code></pre></div>
</details>
</div>
<div id="ed82f250" class="cell" data-execution_count="34">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb70-1">t1._Test__name  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># These are *NOT* "private" properties</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>'This name'</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The behavior you’re experiencing is due to a feature in Python called “name mangling” for private attributes. Let’s break down what’s happening:</p>
<p>Double underscore prefix:</p>
<ul>
<li>When you define an attribute with a double underscore prefix (__) in a class, Python automatically mangles the name to avoid naming conflicts in inherited classes.</li>
<li>Name mangling process: Python changes the name from __name to _ClassName__name. In your case, it becomes _Test__name.</li>
<li>Accessing the attribute: Because of this name mangling, you can’t access t1.__name directly. Instead, you would need to use the mangled name.</li>
</ul>
<div id="950c80df" class="cell" data-execution_count="35">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Test:</span>
<span id="cb72-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name):</span>
<span id="cb72-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This gets mangled</span></span>
<span id="cb72-4"></span>
<span id="cb72-5">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Test(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This name"</span>)</span>
<span id="cb72-6"></span>
<span id="cb72-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will raise an AttributeError</span></span>
<span id="cb72-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb72-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(t1.__name)</span>
<span id="cb72-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">AttributeError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb72-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"AttributeError: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb72-12"></span>
<span id="cb72-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will work</span></span>
<span id="cb72-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(t1._Test__name)</span>
<span id="cb72-15"></span>
<span id="cb72-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You can see all attributes, including mangled ones</span></span>
<span id="cb72-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(t1))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>AttributeError: 'Test' object has no attribute '__name'
This name
['_Test__name', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']</code></pre>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="inheritance" class="level2">
<h2 class="anchored" data-anchor-id="inheritance">inheritance</h2>
<div id="d54bc550" class="cell" data-execution_count="36">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> SpecialUser(User):</span>
<span id="cb74-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name, age, signup_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb74-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initializes self._name and self._signup_date</span></span>
<span id="cb74-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(name, signup_date)</span>
<span id="cb74-5"></span>
<span id="cb74-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> age</span>
<span id="cb74-7"></span>
<span id="cb74-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb74-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> age(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb74-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._age</span>
<span id="cb74-11"></span>
<span id="cb74-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greet(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb74-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Hi! I'm </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
</div>
<div id="dd17b672" class="cell" data-execution_count="37">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb75-1">s_user1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SpecialUser(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Doe"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>)</span>
<span id="cb75-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#s_user1</span></span></code></pre></div>
</details>
</div>
<div id="bb9e12fb" class="cell" data-execution_count="38">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb76-1">s_user1.name</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>'John Doe'</code></pre>
</div>
</div>
<div id="7742acf4" class="cell" data-execution_count="39">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb78-1">s_user1.greet()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Hi! I'm John Doe</code></pre>
</div>
</div>
<ul>
<li>the diamond problem: <a href="https://www.wikiwand.com/en/Multiple_inheritance#/The_diamond_problem" class="uri">https://www.wikiwand.com/en/Multiple_inheritance#/The_diamond_problem</a></li>
<li>???: <a href="https://softwareengineering.stackexchange.com/questions/238176/why-would-square-inheriting-from-rectangle-be-problematic-if-we-override-the-set/238184#238184" class="uri">https://softwareengineering.stackexchange.com/questions/238176/why-would-square-inheriting-from-rectangle-be-problematic-if-we-override-the-set/238184#238184</a></li>
<li>liskov substitution principle: <a href="https://www.wikiwand.com/en/Liskov_substitution_principle" class="uri">https://www.wikiwand.com/en/Liskov_substitution_principle</a></li>
<li>composition and inheritance: <a href="https://www.thedigitalcatonline.com/blog/2014/08/20/python-3-oop-part-3-delegation-composition-and-inheritance/" class="uri">https://www.thedigitalcatonline.com/blog/2014/08/20/python-3-oop-part-3-delegation-composition-and-inheritance/</a></li>
</ul>
<section id="more-special-methods" class="level3">
<h3 class="anchored" data-anchor-id="more-special-methods">more special methods</h3>
<p>go search for python data model</p>
</section>
</section>
</section>
<section id="flask" class="level1">
<h1>09&amp;10 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/09-10_flask.ipynb">flask</a></h1>
<ul>
<li>flask is a “lightweight framework” or a “microframework”. “It is designed to make getting started quick and easy, with the ability to scale up to complex applications”, and therefore requires less context to get started with;</li>
<li>django is a “batteries included” framework that is more focused on good practices and encouraging a “clean, pragmatic design”. It’s more complex and requires more experience to master.</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1><a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/99_conclusion.ipynb">conclusion</a></h1>
<section id="where-do-we-go-from-here" class="level2">
<h2 class="anchored" data-anchor-id="where-do-we-go-from-here">where do we go from here</h2>
<ul>
<li>Keep improving the art of Python packaging</li>
<li>Explore other options for high performance Python</li>
<li>Help “bridging the gap”</li>
<li>Engage with the (open source) Python community</li>
</ul>
</section>
<section id="keep-improving-the-art-of-python-packaging" class="level2">
<h2 class="anchored" data-anchor-id="keep-improving-the-art-of-python-packaging">keep improving the art of python packaging</h2>
<ul>
<li>recommend: <code>pip-tools</code> + <code>requirements.in</code> = <code>requirements.txt</code></li>
<li>Poetry, Pipenv… Yes, they work, but they are way more complex and have “lock-in”</li>
<li>All companies I worked for struggle sooner or later with their code deployment practices. Now, you know better</li>
</ul>
</section>
<section id="explore-other-options-for-high-performance-python" class="level2">
<h2 class="anchored" data-anchor-id="explore-other-options-for-high-performance-python">explore other options for high performance python</h2>
<ul>
<li>Juan mentioned: Numba, Modin, Vaex, Dask, Spark, Coiled, Prefect</li>
<li>Now we have more: polar, pandas 2.0, aiflow, dagster, dbt, etc</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-08-advanced-python/setup_py_br.png" class="img-fluid figure-img"></p>
<figcaption>stolen from the lecture</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="other-resources" class="level1">
<h1>other resources</h1>
<ol type="1">
<li><a href="https://nbviewer.org/github/astrojuanlu/ie-mbd-advanced-python/tree/main/">NBViewer</a> for this lecture;</li>
<li><a href="https://pydata.org/">PyData</a>, a community for developers and users of open source data tools;</li>
<li><a href="https://git-scm.com/book/en/v2/">Pro Git</a>, <code>--distributed-is-the-new-centralized</code>;</li>
<li><a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">Pull Requests</a>;</li>
<li><a href="https://docs.gitlab.com/ee/user/project/merge_requests/index.html">Merge Requests</a>;</li>
<li><a href="https://www.asmeurer.com/git-workflow/">Git Workflow</a>, the git workflow for contributing to open source repositories;</li>
<li><a href="https://www.toptal.com/developers/gitignore">Git Ignore</a> builder;</li>
<li><a href="https://www.atlassian.com/git/tutorials/rewriting-history">Git commit –amend</a>, rewriting history;</li>
<li><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">The right way to distribute Python code</a></li>
<li><a href="https://docs.python.org/3/tutorial/modules.html#packages">Python packaging</a></li>
<li><a href="https://docs.pytest.org/en/8.2.x/">Pytest</a>.</li>
</ol>


<!-- -->

</section>


 ]]></description>
  <category>python</category>
  <category>pydata</category>
  <guid>https://lktuan.github.io/blog/2024-07-08-advanced-python/</guid>
  <pubDate>Sun, 07 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-08-advanced-python/juan_r.png" medium="image" type="image/png" height="193" width="144"/>
</item>
<item>
  <title>Random youtube video: How are memories stored in neural networks?</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-06-26-hopfield-network/</link>
  <description><![CDATA[ 





<p>This video came across in my youtube recommendation, the title is <a href="https://www.youtube.com/watch?v=piF6D6CQxUw">“How are memories stored in neural networks? | The Hopfield Network #SoME2”</a> by <a href="https://www.youtube.com/@layerwiselectures"><strong>Layerwise Lectures</strong></a>.</p>
<p>This channel is interestingly has only 1 video, bio:</p>
<blockquote class="blockquote">
<p>Reality comes in layers - layers of abstraction. This channels tries to uncover them to gain insights on neuroscience and machine learning.</p>
</blockquote>
<p>You’ll find how it interesting, below is my notes.</p>
<section id="where-is-your-memory" class="level1">
<h1>Where is your memory?</h1>
<ul>
<li>The Random Access Memory (RAM) of a nowaday typical computer is 8-32GB. That’s the part directly interact with CPU.</li>
<li>Aside from that, you may have hard disk with terabyte or so memory.</li>
<li>How about you ~ or your brain? Can we mearsure in bytes?</li>
<li>But the question should be asked in the first place is: Where is it?</li>
<li>Because memory in computer have <strong>physical</strong> location, to access a piece of data in RAM you have to know the the binary address associated with that location.</li>
<li>For the CPU, the matter comes down to just turning on the right wires to retreive the bits in desired location.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/Where_is_your_memory.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Where is our memory?</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Imagine another kind of memory. Instead of specifying <strong>where</strong> of a memory, it’s a <em>binary address</em>, how about we could specify <strong>what</strong>, it’s <em>content</em>.</li>
<li>Our memory, if we provide a incomplete version of memory, it’s just sort of autocompletes. With the right software, computer can also do this, but it’s not how computer memory work on the basic level.</li>
<li>The point of this video is to convince you that autocompleting memories, also know as <strong>associative memory</strong>, is kind of natural behaviour of networks of neurons.</li>
<li>It’ll become clear that it doesn’t really make sense to measure memory capacity in networks of neurons in the same way we measure computer memory.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/Associative_networks.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Associative Networks</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>The biggest difference might be: computer memory have fixed location, but as we’ll see, the memories in an associative networks rather have - <strong>a time</strong>.</p>
</section>
<section id="computer-memory-in-a-nutshell" class="level1">
<h1>Computer memory in a nutshell</h1>
<ul>
<li>Computer memory is measured in bits, binary switches of ones and zeros. A string of eight such bits can represent anything from letters to integers.</li>
<li>How do I get to a memory once it’s saved, say in RAM? Because on its own it doesn’t do much.</li>
<li>Broadly speaking, and glossing over tons of technical detail here, every piece of data in RAM is matched to a binary address.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/computer_memory.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Memories are matched to addresses and that’s ultimately the only way to retrieve them</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Each piece of data is in a different physical location and can only be retrieved by knowing its address. How the reading and writing of memories is accomplished, is really the meat of programming and is another story.</li>
</ul>
</section>
<section id="modeling-neural-networks" class="level1">
<h1>Modeling neural networks</h1>
<ul>
<li>The aim of the video is to introduce how humain brain memory work, by introducing Hopefield Network.</li>
<li>More generally this lecture aim to be a modelling itself, a kind of the art of essential.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/hopfield_networks.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Hopfield Network</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>This is a picture depicted neuron,</li>
<li>it integrates electrical signals from other neurons to determine its own activity and then,</li>
<li>it broadcasts that activity back to the network.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/a_neuron.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>A Neuron</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Mathematically the story goes something like this:</li>
<li>there’s electrical signals coming in from other neurons, which we will say are just some numbers.</li>
<li>then the synapses act as multipliers on these signals - another set of numbers,</li>
<li>and then the activity of the neuron is based on the sum of the weighted inputs, and by “based on” I mean that it’s fine to apply some function after computing the sum.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/mathematical_expression_of_neuron.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Mathematical expression of Neuron</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>It gets interesting once we turn this into a network, connecting the outputs of neurons to the inputs of other neurons.</li>
<li>This is a special type of neural network. It’s a <strong>recurrent network</strong>, meaning that there are <em>back and forth</em> connections between the neurons.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/recurrent_network.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Recurrent Network</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="memories-in-dynamical-systems" class="level1">
<h1>Memories in dynamical systems</h1>
<ul>
<li>What does this have to do with memory? Well it needs to be somewhere in here doesn’t it? Where?</li>
<li>Remember the idea of an associative memory, which is the ability of a system to sort of “pattern-autocomplete”.</li>
<li>Let’s try a definition of memory that’s slightly wider than maybe what we’re used to.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/a_state_of_memory.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>A State in memory</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Let a memory system be a system that, after having been in a certain state, a configuration, it has the ability to return to that state later on.</li>
<li>The responsibility for this return in our computer is CPU.</li>
<li>Our network seems different though. So let’s get creative. There’s other things in our everyday lives that fall under our definition of memory.</li>
<li>For example, if below bottle’s crushed, in other words its configuration changed, it can sometimes return to its earlier state, which in that sense could be said to have been memorized.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/a_plastic_bottle_in_our_memory.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>A plastic bottle in our memory</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>A neural network is a system with a pattern of activity that dynamically evolves. If, somehow, we could construct our network such that it would have some <strong>preferred</strong> state and would return to that state over time if it was <strong>perturbed</strong>, then that could reasonably be qualified as a memory.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/perturbed_states.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Perturbed states</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Let’s take a simple example of 8x8 neurons network. The way our system work is to decribe <strong>how the network change over time</strong> # Learning</li>
</ul>
</section>
<section id="memory-capacity-and-conclusion" class="level1">
<h1>Memory capacity and conclusion</h1>
</section>
<section id="resources" class="level1">
<h1>Resources</h1>
<p>This was the submission to the Summer of Math Exposition 2022 (#SoME2). All credit to <a href="https://www.youtube.com/@layerwiselectures">Layerwise Lectures</a>.</p>
<ol type="1">
<li>Orginal paper: Hopfield, J. J. (1982). Neural networks and physical systems with emergent collective computational abilities. Proceedings of the national academy of sciences, 79(8), 2554-2558.</li>
<li>Image: Neuron image by Santiago Ramón y Cajal, The pyramidal neuron of the cerebral cortex, 1904 Ink and pencil on paper, 8 5/8 x 6 7/8 in.</li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>neural networks</category>
  <guid>https://lktuan.github.io/blog/2024-06-26-hopfield-network/</guid>
  <pubDate>Tue, 25 Jun 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-06-26-hopfield-network/neuron.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Hi Docker 🐳</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-06-24-docker/</link>
  <description><![CDATA[ 





<p>Edit: an other great source for Docker - <a href="https://levelup.gitconnected.com/working-with-docker-and-docker-compose-9773295b4d51" class="uri">https://levelup.gitconnected.com/working-with-docker-and-docker-compose-9773295b4d51</a></p>
<div class="columns">
<div class="column" style="width:40%;">
<p>Xuất phát là dân Kinh tế và hiện tại đi theo hướng DS, mình không giỏi làm việc với các công cụ phát triển phần mềm, Docker là một trong số đó. Tuy nhiên trong một dự án Data của team, mình cần sử dụng các công vụ như Airflow, Airbyte hay DBT. Hầu hết các setup đều cần Docker. Do đó thì, phải học thôi!</p>
<p>Mình học tập theo video <a href="https://www.youtube.com/watch?v=Gh1Sgknc6Fg&amp;t=358s">“Hướng dẫn từ A-Z tự xây dựng ứng dụng với Docker”</a> của anh <a href="https://www.youtube.com/@vietnh1009"><strong>Việt Nguyễn AI</strong></a>.</p>
</div><div class="column" style="width:10%;">
<!-- empty column to create gap -->
</div><div class="column" style="width:50%;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-24-docker/vs_cot_song.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>VS Code-song 😪, ảnh nhặt từ J2Team community</figcaption>
</figure>
</div>
</div>
</div>
<section id="introduction-docker-desktop-docker-image-vs-docker-container" class="level1">
<h1>Introduction / Docker Desktop / Docker Image vs Docker Container</h1>
<ul>
<li>Cách cài đặt: trên trang get started, phiên bản Window (rất dễ để mình follow do mình cũng xài Win).</li>
<li>Nhắc lại về Docker Image và Docker Container: giống như Class và Object trong OOP, Image chỉ cho chúng ta biết một cách lý thuyết về thực thể đó, khi dựa vào lý thuyết đó tạo ra một Container thì chũng ta mới có một thực thể dự vào lý thuyết đó.</li>
<li>Trước Docker Image, còn có Dockerfile (giống như công thức nấu ăn) giúp định nghĩa một số phương thức tạo ra Image.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-24-docker/class_vs_object.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Image vs Container ~ Class vs Object</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="docker-tutorial" class="level1">
<h1>Docker tutorial</h1>
<p>Thực hành theo tutorial trên Docker Desktop: “How do I run a container?”</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Xem nội dung của một file thông qua powershell:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> file_name</span></code></pre></div>
<p>Trong trường hợp thực hành của mình là</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> welcome-to-docker</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> .<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\D</span>ockerfile</span></code></pre></div>
</div>
</div>
<p>Nội dung Dockerfile:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Start your image with a node base image</span></span>
<span id="cb3-2">FROM node:18-alpine </span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Mỗi custome docker image đều dựa vào một base image, như một class con kế thừa một class cha. Nơi tìm Docker Image: Docker Hub.</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># The /app directory should act as the main application directory</span></span>
<span id="cb3-6">WORKDIR /app</span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Chúng ta làm việc ở bên trong thư mục nào (nếu không đề cập thì sẽ tạo trong một thư mục mặc định)</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Copy the app package and package-lock.json file</span></span>
<span id="cb3-10">COPY package*.json ./</span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Copy các file trong máy vào bên trong Docker Image - file này chắc là file cấu hình</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Copy local directories to the current local directory of our docker image (/app)</span></span>
<span id="cb3-14">COPY ./src ./src</span>
<span id="cb3-15">COPY ./public ./public</span>
<span id="cb3-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Copy các thư mục source</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Install node packages, install serve, build the app, and remove dependencies at the end</span></span>
<span id="cb3-19">RUN npm install \</span>
<span id="cb3-20">    &amp;&amp; npm install -g serve \</span>
<span id="cb3-21">    &amp;&amp; npm run build \</span>
<span id="cb3-22">    &amp;&amp; rm -fr node_modules</span>
<span id="cb3-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Run, cài đặt các thư viện, package</span></span>
<span id="cb3-24"></span>
<span id="cb3-25">EXPOSE 3000</span>
<span id="cb3-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Mở một cổng ở trong Docker container, sau này chúng ta sẽ kết nối cổng này với một cổng trong máy của chúng ta.</span></span>
<span id="cb3-27"></span>
<span id="cb3-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Start the app using serve command</span></span>
<span id="cb3-29">CMD <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> "serve", "-s", "build" </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-30"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Chúng ta muốn chạy lệnh gì trong CMD, chỉ một lệnh CMD (lệnh cuối cùng) sẽ được sử dụng trong một Dockerfile.</span></span></code></pre></div>
<p>Build fist image:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> welcome-to-docker .</span></code></pre></div>
<p>Breaking down this command:</p>
<blockquote class="blockquote">
<p>The -t flag tags your image with a name. (welcome-to-docker in this case). And the . lets Docker know where it can find the Dockerfile.</p>
</blockquote>
</section>
<section id="tự-xây-dựng-docker-image-để-huấn-luyện-mô-hình-ai" class="level1">
<h1>Tự xây dựng Docker Image để huấn luyện mô hình AI</h1>
<section id="giới-thiệu-về-script-python" class="level2">
<h2 class="anchored" data-anchor-id="giới-thiệu-về-script-python">Giới thiệu về script Python</h2>
<p>Mình có một file python đơn giản, huấn luyện một mô hình <code>ml_project</code> Random forest để nhận diện hoa diễn vĩ từ bộ <code>iris</code> dataset với thư viện <code>sklearn</code> như sau:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>iris_classification.py</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="iris_classification.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing required libraries</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing Scikit-learn library and datasets package</span></span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets</span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Splitting arrays or matrices into random train and test subsets</span></span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing random forest classifier from assemble module</span></span>
<span id="cb5-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing scaler</span></span>
<span id="cb5-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler</span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># metrics are used to find accuracy or error</span></span>
<span id="cb5-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score </span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loading the iris plants dataset (classification)</span></span>
<span id="cb5-15">iris <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.load_iris()</span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dividing the datasets into two parts i.e. training datasets and test datasets</span></span>
<span id="cb5-17">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris.data[:, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span>
<span id="cb5-18">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris.target</span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i.e. 70 % training dataset and 30 % test datasets</span></span>
<span id="cb5-20">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.20</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-21"></span>
<span id="cb5-22"></span>
<span id="cb5-23">scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StandardScaler()</span>
<span id="cb5-24">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.fit_transform(X_train)</span>
<span id="cb5-25">x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.transform(X_test)</span>
<span id="cb5-26"></span>
<span id="cb5-27">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestClassifier()</span>
<span id="cb5-28">model.fit(x_train, y_train)</span>
<span id="cb5-29">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(x_test)</span>
<span id="cb5-30"></span>
<span id="cb5-31"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> pred, label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(y_pred, y_test):</span>
<span id="cb5-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prediction: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">. Label: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(pred, label))</span>
<span id="cb5-33"></span>
<span id="cb5-34"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> accuracy_score(y_test, y_pred))</span></code></pre></div>
</div>
</section>
<section id="tìm-base-image-trên-docker-hub" class="level2">
<h2 class="anchored" data-anchor-id="tìm-base-image-trên-docker-hub">Tìm Base Image trên Docker Hub</h2>
<p>Chúng ta có thể tìm các class cha ~ base image trên <code>hub.docker.com</code>, chúng ta muốn app ml này chạy trên <code>ubuntu</code>, do đó có thể start từ image <code>ubuntu</code>.</p>
<p>Mình xây dựng <code>Dockerfile</code> một cách đơn giản như sau:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Dockerfile</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="Dockerfile" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FROM</span> ubuntu</span></code></pre></div>
</div>
<p>Từ Dockerfile này mình có thể build image thông qua command sau:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> ml_project .</span></code></pre></div>
<p>Run một docker container (container vừa run sẽ lập tức exit):</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run image_name container_name</span></code></pre></div>
<p>Nếu muốn “chui” vào bên trong container:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-it</span> image_name container_name bash</span></code></pre></div>
<p><code>-it</code> nghĩa là chúng ta chạy container dưới <strong>interactive</strong> mode, <code>bash</code> nghĩa là chạy trong <strong>bash</strong> mode, chúng ta có thể thực hiện các câu lệnh bash từ đây.</p>
</section>
<section id="cài-đặt-các-thư-viện-trong-docker-image" class="level2">
<h2 class="anchored" data-anchor-id="cài-đặt-các-thư-viện-trong-docker-image">Cài đặt các thư viện trong Docker Image</h2>
<p>Bây giờ ta mới chỉ có duy nhất hệ điều hành ubuntu trong container, chưa có python để chạy ứng dụng. Trong ubuntu, ta dùng <code>apt-get</code> để cài đặt python. Chúng ta sẽ thực hiện các lệnh trên bash ở container hiện tại trước, sau đó mới đưa vào Dockerfile với lệnh <code>RUN</code>. Dưới đây là Dockerfile cập nhật:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Dockerfile</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="Dockerfile" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FROM</span> ubuntu</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> apt-get update</span>
<span id="cb10-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> apt-get <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> install python3</span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -y tự động điền yes khi có các câu hỏi Y/N</span></span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Sử dụng exit() hoặc Ctrl-D để thoát Python mode hoặc Container trong Powershell.</p>
</div>
</div>
<p>Chúng lại truy cập bash của container đang chạy từ Docker desktop hoặc Powershell:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-24-docker/bash_inside_container.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Bash inside container</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="copy-dữ-liệu-từ-host-vào-docker-image" class="level2">
<h2 class="anchored" data-anchor-id="copy-dữ-liệu-từ-host-vào-docker-image">Copy dữ liệu từ host vào Docker Image</h2>
<p>Bây giờ chúng ta muốn rằng sau khi vào container, chúng ta không ở thư mục <code>root</code> nữa mà ở <code>src</code> ~ ứng chúng của chúng ta, với mục đích dễ làm việc hơn. Chúng ta thêm cú pháp <code>WORKDIR /src</code>. Đồng thời cũng cần cài đặt <code>sklearn</code> để ứng dụng có thể chạy. Đồng thời, sau khi tất cả được cài đặt, mình cũng muốn chạy luôn ứng dụng, sử dụng <code>CMD</code>.</p>
<p>Cập nhật Dockerfile như sau:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Dockerfile</strong></pre>
</div>
<div class="sourceCode" id="cb11" data-filename="Dockerfile" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FROM</span> ubuntu</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">WORKDIR</span> /src</span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Khi ở trong docker container, mặc định chúng ta sẽ ở root, giờ ta muốn khi vào container, chúng ta sẽ vào /src</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> apt-get update</span>
<span id="cb11-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> apt-get <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> install python3</span>
<span id="cb11-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> apt-get <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> install python3-sklearn</span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -y tự động điền yes khi có các câu hỏi Y/N</span></span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">COPY</span> iris_classification.py ./iris_classification.py </span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CMD</span> [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"python3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iris_classification.py"</span> ]</span></code></pre></div>
</div>
</section>
</section>
<section id="end" class="level1">
<h1>End</h1>
<p>Sau khi hoàn thiện, mình không cần chạy containter ở interactive mode và tương tác bằng bash nữa. Lệnh run có thể viết gọn như sau:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run ml_project</span></code></pre></div>
<p>Bài thực hành đến đây kết thúc 🎉.</p>


<!-- -->

</section>

 ]]></description>
  <category>docker</category>
  <category>python</category>
  <guid>https://lktuan.github.io/blog/2024-06-24-docker/</guid>
  <pubDate>Sun, 23 Jun 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-06-24-docker/docker.png" medium="image" type="image/png" height="76" width="144"/>
</item>
<item>
  <title>Observable Framework try-out</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-06-19-observable/</link>
  <description><![CDATA[ 





<p>I’ve heard that Observable released their Framework as open source in April 2024, and Quarto also supported Observable natively since version 1.4 (?), thus decided to give it a try. Could not agree more with their slogan:</p>
<blockquote class="blockquote">
<p>The best dashboards are built with <code>code</code>.</p>
</blockquote>
<p>This is my <a href="https://github.com/lktuan/first-observable-project">repo</a> for the practice.</p>
<p>🚀 <strong>Observable Framwork</strong> <a href="https://observablehq.com/framework/">documentation</a>.</p>
<blockquote class="blockquote">
<p>Observable Framework — or “Framework” for short — is an open-source static-site generator for data apps. By data app we mean an application that is primarily a display of data. Data apps help you derive insights (to understand) and evaluate potential decisions (to take action).</p>
</blockquote>
<p>It can be a set of coordinated <strong>interactive visualizations</strong> for “self-service” analysis, a <strong>live dashboard</strong>, or a <strong>point-in-time report</strong> that combines graphics and prose to present in-depth analysis.</p>
<p>Why use Framework for your data app?</p>
<ul>
<li>The power of code: Empowered by D3 and Observable Plot library, there’s no limit to what you can create.</li>
<li>Polyglot meets the web: Framework is <em>polyglot</em> ~ it brings multiple languages together.</li>
<li>Static-site architecture: Framework’s data architecture practically forces your app to be fast because data is precomputed at build time. Furthermore, data snapshots can be highly-optimized (and aggregated and anonymized), minimizing what you send to the client.</li>
<li>Automatic reactivity: Instead of wrangling hooks or signals, you can write declarative code in vanilla JavaScript that automatically re-runs whenever variables change, like a spreadsheet.</li>
<li>An end-to-end solution: Well-designed tools let developers focus on high-value, creative work and build better apps.</li>
</ul>
<p>Let’s start!</p>
<section id="inititate-a-new-project" class="level1">
<h1>Inititate a new Project</h1>
<p>🚀 <strong>Observable Framwork</strong> <a href="">getting started</a></p>
<p>The prerequisite is we must have <a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"><code>npm</code></a> installed on our machine. Running <code>npm -v</code>, I know that I have version <code>10.5.0</code> installed.</p>
<p>We first create a folder and navigate to it:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: true</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> first-observable-project</span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> first-observable-project</span></code></pre></div>
<p>Then simply run this command to initiate the project:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: true</span></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">npm</span> init <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@observablehq"</span></span></code></pre></div>
<p>We gotta fill some basic params:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: true</span></span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">┌</span>   observable create  v1.5.1</span>
<span id="cb3-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  Where to create your project<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span>
<span id="cb3-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  hi-observable</span>
<span id="cb3-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  What to title your project<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span>
<span id="cb3-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  Hi Observable</span>
<span id="cb3-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  Include sample files to help you get started<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span>
<span id="cb3-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  No</span>
<span id="cb3-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  Install dependencies<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span>
<span id="cb3-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  Yes, via npm</span>
<span id="cb3-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  Initialize git repository<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span>
<span id="cb3-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  No</span>
<span id="cb3-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  Installed! 🎉</span>
<span id="cb3-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  Next steps… ──────╮</span>
<span id="cb3-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>                    │</span>
<span id="cb3-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  cd hi-observable  │</span>
<span id="cb3-25"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  npm run dev       │</span>
<span id="cb3-26"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>                    │</span>
<span id="cb3-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├────────────────────╯</span></span>
<span id="cb3-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-29"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└</span>  Problems<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span> https://observablehq.com/framework/getting-started</span></code></pre></div>
<p>We can now easilly preview the app with <code>npm run dev</code>, and access out dashboard via <code>http://127.0.0.1:3000/</code>. Let’s play a little bit, we can modify the <code>h1</code> tags in <code>docs\index.md</code>, then the dashboard will be updated once we save the file, instantly. Cool!</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-19-observable/ojs_fig_1.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Home page layout</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Here is the structure of my project (after adding those Data Loader, SQL, etc steps below):</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource ini number-lines code-with-copy"><code class="sourceCode ini"></code></pre></div>
<section id="self-hosting" class="level2">
<h2 class="anchored" data-anchor-id="self-hosting">Self hosting</h2>
<p>We don’t have to deploy to Observable — Framework projects are simply static sites, so we can host them anywhere. With <code>npm</code>, we can run <code>npm run build</code>, which will generates the <code>dist</code> directory. We can then copy this directory to your static site server or preferred hosting service, like <a href="https://github.com/http-party/http-server"><code>http-server</code></a>, with command <code>npx http-server dist</code>.</p>
<p>For deployment, see the final section at the bottom of this article.</p>
</section>
</section>
<section id="write-first-data-loader" class="level1">
<h1>Write first Data Loader</h1>
<p>In Observable project we can write Data Loader in JavaScript, Python, R or any other languages. Data Loader helps you to (1) minimize file sizes and (2) reduce client side processing.</p>
<p>A data loader file has the name like: <code>dataloader.data_extension.engine_extension</code>. For example, with the American weather forecast API we can have 2 kinds of Data Loader as below:</p>
<p><strong>Javascript 🟨</strong>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>forecast.json.js</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="forecast.json.js" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> longitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">122.47</span>;</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> latitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">37.8</span>;</span>
<span id="cb5-3"></span>
<span id="cb5-4">async <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">json</span>(url) {</span>
<span id="cb5-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> await <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch</span>(url, {headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"User-Agent"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(observablehq.com, support@observablehq.com)"</span>}});</span>
<span id="cb5-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (!response.ok) throw <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Error</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">`fetch failed: ${response.status}`</span>);</span>
<span id="cb5-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> await response.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">json</span>();</span>
<span id="cb5-8">}</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> station <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> await <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">json</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">`https://api.weather.gov/points/${latitude},${longitude}`</span>);</span>
<span id="cb5-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> forecast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> await <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">json</span>(station.properties.forecastHourly);</span>
<span id="cb5-12"></span>
<span id="cb5-13">process.<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">stdout</span>.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write</span>(JSON.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stringify</span>(forecast));</span></code></pre></div>
</div>
<p><strong>Python 🐍</strong>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>forecast.json.py</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="forecast.json.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb6-4"></span>
<span id="cb6-5">longitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">122.47</span></span>
<span id="cb6-6">latitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">37.80</span></span>
<span id="cb6-7"></span>
<span id="cb6-8">station <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://api.weather.gov/points/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>latitude<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>longitude<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>).json()</span>
<span id="cb6-9">forecast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(station[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"forecastHourly"</span>]).json()</span>
<span id="cb6-10"></span>
<span id="cb6-11">json.dump(forecast, sys.stdout)</span></code></pre></div>
</div>
<p>Run the data loader, testing if it work:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: true</span></span>
<span id="cb7-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">node</span> hi-observable<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\d</span>ocs<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\d</span>ata<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\f</span>orecast.json.js</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or</span></span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> hi-observable<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\d</span>ocs<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\d</span>ata<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\f</span>orecast.json.py</span></code></pre></div>
<p>Now if we refresh the dashboard page, the weather forecasting tab should be there. My first run was failed as I miss a comma in JS file 😂. If we change the data loader, the dashboard will change concurrently.</p>
</section>
<section id="sql-in-observable-framework" class="level1">
<h1>SQL in Observable Framework</h1>
</section>
<section id="grids-cards-and-themes" class="level1">
<h1>Grids, Cards, and Themes</h1>
<p>The <code>Grid</code> class allow us to organize multiple vizualization in a denser format, like a dashboard. The <code>Grid</code> class declares a grid container.</p>
</section>
<section id="deployment-a-project" class="level1">
<h1>Deployment a Project</h1>
</section>
<section id="imports-from-npm-local-files-remote-urls-and-lazy-loading" class="level1">
<h1>Imports: from npm, local files, remote URLs, and lazy loading</h1>


<!-- -->

</section>

 ]]></description>
  <category>Dashboard</category>
  <category>Observable</category>
  <category>til</category>
  <guid>https://lktuan.github.io/blog/2024-06-19-observable/</guid>
  <pubDate>Tue, 18 Jun 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-06-19-observable/ojs_forum.png" medium="image" type="image/png"/>
</item>
<item>
  <title>NN-Z2H Lesson 1: The spelled-out intro to neural networks and backpropagation - building micrograd</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-important callout-titled" title="This is not orginal content!">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This is not orginal content!
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is my study notes / codes along with Andrej Karpathy’s “<a href="https://www.youtube.com/watch?v=VMj-3S1tku0&amp;list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ">Neural Networks: Zero to Hero</a>” series.</p>
</div>
</div>
<p><strong>Upfront-note</strong>: There are also greate resources in Vietnamese for learning Backpropagation, for e.g.:</p>
<ol type="1">
<li>Blog <a href="https://machinelearningcoban.com/2017/02/24/mlp/">machinelearningcoban</a></li>
<li>Blog <a href="https://dominhhai.github.io/vi/2018/04/nn-bp/">dominhhai</a></li>
</ol>
<section id="micrograd-from-scratch-yayy" class="level1 page-columns page-full">
<h1>MicroGrad from scratch Yayy!</h1>
<p><a href="https://github.com/karpathy/micrograd"><strong>🚀 MicroGrad repo</strong></a> <a href="https://www.youtube.com/watch?v=VMj-3S1tku0&amp;list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ"><strong>🔥 Video Lecture</strong></a></p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20240217152156/Frame-13.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Backpropagation in Neural Networks, photo credit to <a href="https://www.geeksforgeeks.org/backpropagation-in-neural-network/">GeekforGeek</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<section id="intro-micrograd-overview---what-does-your-neural-network-training-look-like-under-the-hood" class="level2">
<h2 class="anchored" data-anchor-id="intro-micrograd-overview---what-does-your-neural-network-training-look-like-under-the-hood">intro &amp; <code>micrograd</code> overview - what does your neural network training look like under the hood?</h2>
<p>What is MicroGrad ❓: a tiny <strong>auto-grad</strong> (automatic gradient) engine, implement of <strong>back propagation</strong> ~ iteratively tune the weight of that neural net to minimize the loss function -&gt; improve the accuracy of the neural network. Backpropagation will be the mathematical core of any modern deep neutral network like, say <code>pytorch</code>, or <code>jaxx</code>.</p>
<p>Installation: <code>pip install micrograd</code></p>
<p>Example:</p>
<div id="4719e46e" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> micrograd.engine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Value</span>
<span id="annotated-cell-1-2"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1">1</button><span id="annotated-cell-1-3" class="code-annotation-target">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span>)</span>
<span id="annotated-cell-1-4">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>)</span>
<span id="annotated-cell-1-5">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="annotated-cell-1-6">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="annotated-cell-1-7">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-1-8">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a)</span>
<span id="annotated-cell-1-9">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a).relu()</span>
<span id="annotated-cell-1-10">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a).relu()</span>
<span id="annotated-cell-1-11">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d</span>
<span id="annotated-cell-1-12">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="annotated-cell-1-13">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2">2</button><span id="annotated-cell-1-14" class="code-annotation-target">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> f</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="3">3</button><span id="annotated-cell-1-15" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prints 24.7041, the outcome of this forward pass</span></span>
<span id="annotated-cell-1-16">g.backward()</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="4">4</button><span id="annotated-cell-1-17" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>grad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prints 138.8338, i.e. the numerical value of dg/da</span></span>
<span id="annotated-cell-1-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>grad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prints 645.5773, i.e. the numerical value of dg/db</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="3" data-code-annotation="1">Micrograd allows you to build mathematical expressions, in this case <code>a</code> and <code>b</code> are inputs, wrapped in <code>Value</code> object with value equal to <code>-4.0</code> and <code>2.0</code>, respectively.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="14" data-code-annotation="2"><code>a</code> and <code>b</code> are transformed to <code>c</code>, <code>d</code>, <code>e</code> and eventually <code>f</code>, <code>g</code>. Mathematical operators are implemented, like <code>+</code>, <code>*</code>, <code>**</code>, even <code>relu()</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="15" data-code-annotation="3"><code>Value</code> object contains <code>data</code>, and <code>grad</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="17" data-code-annotation="4">Call <code>backpropagation()</code> process.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>24.7041
138.8338
645.5773</code></pre>
</div>
</div>
</section>
<section id="derivative-of-a-simple-function-with-one-input" class="level2">
<h2 class="anchored" data-anchor-id="derivative-of-a-simple-function-with-one-input">derivative of a simple function with one input</h2>
<p>❓What exactly is derivative❓</p>
<div id="740bfa7b" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</details>
</div>
<p>A simple quadratic function:</p>
<div id="624a15e3" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(x):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
</details>
</div>
<div id="12eaced4" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">f(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>20.0</code></pre>
</div>
</div>
<p>Input also can be an array, we can plot it for visibility.</p>
<div id="bef33b8e" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb6-2">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(xs)</span>
<span id="cb6-3">plt.plot(xs, ys)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-6-output-1.png" width="575" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>If we bump up a little value <code>h</code> of <code>x</code>, how <code>f(x)</code> will response?</p>
<div id="087add63" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><button class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="1">1</button><span id="annotated-cell-6-1" class="code-annotation-target">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.000000000001</span></span>
<span id="annotated-cell-6-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span></span>
<span id="annotated-cell-6-3">( f(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>h) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> f(x) ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> h</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-6" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="1" data-code-annotation="1">Change the value of <code>h</code> from <code>0.0001</code> to be <code>0.00000...0001</code> -&gt; the slope value comes to <code>14</code> (at the value of <code>3.0</code> of <code>x</code>).</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>14.001244608152774</code></pre>
</div>
</div>
<p>Try for <code>x = -3.0</code>, <code>x = 5.0</code>, we get different values of the slope, for <code>x = 2/3</code>, the slope is zero. Let’s get more complex.</p>
</section>
<section id="derivative-of-a-function-with-multiple-inputs" class="level2">
<h2 class="anchored" data-anchor-id="derivative-of-a-function-with-multiple-inputs">derivative of a function with multiple inputs</h2>
<div id="174e9087" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb8-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span></span>
<span id="cb8-3">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span>
<span id="cb8-4">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb8-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>4.0</code></pre>
</div>
</div>
<p>Put our bump-up element to this multi-variables function:</p>
<div id="1c8f67dc" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-8-1">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span></span>
<span id="annotated-cell-8-2"></span>
<span id="annotated-cell-8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input</span></span>
<span id="annotated-cell-8-4">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="annotated-cell-8-5">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span></span>
<span id="annotated-cell-8-6">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span>
<span id="annotated-cell-8-7"></span>
<span id="annotated-cell-8-8">d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="1">1</button><span id="annotated-cell-8-9" class="code-annotation-target">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> h</span>
<span id="annotated-cell-8-10">d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="annotated-cell-8-11"></span>
<span id="annotated-cell-8-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d1: '</span>, d1)</span>
<span id="annotated-cell-8-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d2: '</span>, d2)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="2">2</button><span id="annotated-cell-8-14" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'slope: '</span>, (d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>h)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-8" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="9" data-code-annotation="1">Do the same for <code>b</code>, <code>c</code>, we’ll get different slopes.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="14" data-code-annotation="2">We say given <code>b = -3.0</code> and <code>c = 10.0</code> are constants, the derivative of <code>d</code> at <code>a = 2.0</code> is <code>-3.0</code>. The rate of which <code>d</code> will increase if we scale <code>a</code>!</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>d1:  4.0
d2:  3.997
slope:  -3.0000000000001137</code></pre>
</div>
</div>
</section>
<section id="starting-the-core-value-object-of-micrograd-and-its-visualization" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="starting-the-core-value-object-of-micrograd-and-its-visualization">starting the core <code>Value</code> object of micrograd and its visualization</h2>
<p>So we now have some intuitive sense of what is derivative is telling you about the function. We now move to the Neural Networks, which would be massive mathematical expressions. We need some data structures that maintain these expressions, we first declare an object <code>Value</code> that holds data.</p>
<div id="decbe7c2" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Value:</span>
<span id="annotated-cell-9-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data, </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="3">3</button><span id="annotated-cell-9-3" class="code-annotation-target">                        _children<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(),</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="5">5</button><span id="annotated-cell-9-4" class="code-annotation-target">                        _op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>,</span>
<span id="annotated-cell-9-5">                        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="annotated-cell-9-6">                        ): </span>
<span id="annotated-cell-9-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="6">6</button><span id="annotated-cell-9-8" class="code-annotation-target">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="7">7</button><span id="annotated-cell-9-9" class="code-annotation-target">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="annotated-cell-9-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(_children)</span>
<span id="annotated-cell-9-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _op</span>
<span id="annotated-cell-9-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  label</span>
<span id="annotated-cell-9-13"></span>
<span id="annotated-cell-9-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a nicer looking for class attributes</span></span>
<span id="annotated-cell-9-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Value(data=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span></span>
<span id="annotated-cell-9-16">    </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="4">4</button><span id="annotated-cell-9-17" class="code-annotation-target">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__add__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="annotated-cell-9-18">        other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(other, Value) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> Value(other) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># turn other to Value object before calculation</span></span>
<span id="annotated-cell-9-19">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other.data, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>)</span>
<span id="annotated-cell-9-20"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="8">8</button><span id="annotated-cell-9-21" class="code-annotation-target">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="annotated-cell-9-22">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="annotated-cell-9-23">            other.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="annotated-cell-9-24">        out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="annotated-cell-9-25"></span>
<span id="annotated-cell-9-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="annotated-cell-9-27"></span>
<span id="annotated-cell-9-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__mul__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="annotated-cell-9-29">        other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(other, Value) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> Value(other) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># turn other to Value object before calculation</span></span>
<span id="annotated-cell-9-30">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> other.data, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>)</span>
<span id="annotated-cell-9-31"></span>
<span id="annotated-cell-9-32">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="annotated-cell-9-33">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> other.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="annotated-cell-9-34">            other.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="annotated-cell-9-35">        out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="annotated-cell-9-36"></span>
<span id="annotated-cell-9-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="annotated-cell-9-38"></span>
<span id="annotated-cell-9-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tanh(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-9-40">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data</span>
<span id="annotated-cell-9-41">        t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="annotated-cell-9-42">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(t, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tanh'</span>)</span>
<span id="annotated-cell-9-43"></span>
<span id="annotated-cell-9-44">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="annotated-cell-9-45">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="annotated-cell-9-46">        out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="annotated-cell-9-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="annotated-cell-9-48"></span>
<span id="annotated-cell-9-49">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-9-50">        </span>
<span id="annotated-cell-9-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># topo order for all children in the graph</span></span>
<span id="annotated-cell-9-52">        topo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-9-53">        visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="annotated-cell-9-54">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build_topo(v):</span>
<span id="annotated-cell-9-55">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> visited:</span>
<span id="annotated-cell-9-56">                visited.add(v)</span>
<span id="annotated-cell-9-57">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> child <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> v._prev:</span>
<span id="annotated-cell-9-58">                    build_topo(child) </span>
<span id="annotated-cell-9-59">                topo.append(v)</span>
<span id="annotated-cell-9-60">        build_topo(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="annotated-cell-9-61"></span>
<span id="annotated-cell-9-62">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sequentially apply the chain rules</span></span>
<span id="annotated-cell-9-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="annotated-cell-9-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(topo):</span>
<span id="annotated-cell-9-65">            node._backward()</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-9" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="3" data-code-annotation="3">the connective tissue of this expression. We want to keep these expression graphs, so we need to know and keep pointers about what values produce what other values. <code>_children</code> is by default a empty tuple.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="17" data-code-annotation="4">as we added <code>_children</code>, we also need to point out the father - children relationship in method <code>__add__</code> and <code>__mul__</code> as well.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="4" data-code-annotation="5">we want to know the <strong>operation</strong> between father and child, <code>_op</code> is empty string by default, the value <code>+</code> and <code>-</code> will be added to the operator method respectively.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="8" data-code-annotation="6">initially assume that node has no impact to the output.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="9" data-code-annotation="7">this backward function basically do nothing at the initial.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="21" data-code-annotation="8">implement of backward pass for plus node, <code>+=</code> represent the accumulate action (rather than overwrite it), assign the gradient behavior for each type of operation, call the <code>_backward</code> concurrently with function.</span>
</dd>
</dl>
</div>
</div>
<p>Setting input and expression:</p>
<div id="33601feb" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-10-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="annotated-cell-10-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="annotated-cell-10-3">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="annotated-cell-10-4"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="1">1</button><span id="annotated-cell-10-5" class="code-annotation-target">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="annotated-cell-10-6"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="2">2</button><span id="annotated-cell-10-7" class="code-annotation-target">a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="annotated-cell-10-8"></span>
<span id="annotated-cell-10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># d = a*b + c rewrite the expression</span></span>
<span id="annotated-cell-10-10">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span></span>
<span id="annotated-cell-10-11">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> d.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span></span>
<span id="annotated-cell-10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># d</span></span>
<span id="annotated-cell-10-13">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>)</span>
<span id="annotated-cell-10-14">L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> L.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span></span>
<span id="annotated-cell-10-15">L</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-10" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="5" data-code-annotation="1">which will internally call <code>a.__add__(b)</code></span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="7" data-code-annotation="2">which will internally call <code>(a.__mul__(b)).__add__(c)</code></span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Value(data=-8.0)</code></pre>
</div>
</div>
<p>So that we can know the children:</p>
<div id="f94e9cc2" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">d._prev</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>{Value(data=-6.0), Value(data=10.0)}</code></pre>
</div>
</div>
<p>We can know the operations:</p>
<div id="33d0e92a" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">d._op</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>'+'</code></pre>
</div>
</div>
<p>Now we know exactly how each value came to be by <strong>word</strong> expression and from what other values. These will be quite abit larger, so we need a way to nicely visualize these expressions that we’re building out. Below are a-little-scary codes.</p>
<div id="cbde2108" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="annotated-cell-13-2"></span>
<span id="annotated-cell-13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming the Graphviz bin directory path is 'C:/Program Files (x86)/Graphviz2.xx/bin'</span></span>
<span id="annotated-cell-13-4">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PATH"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> os.pathsep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C:/Program Files (x86)/Graphviz/bin'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add with the code, Gemini instructed me this 😪</span></span>
<span id="annotated-cell-13-5"></span>
<span id="annotated-cell-13-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> graphviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Digraph</span>
<span id="annotated-cell-13-7"></span>
<span id="annotated-cell-13-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> trace(root):</span>
<span id="annotated-cell-13-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build a set of all nodes and edges in a graph</span></span>
<span id="annotated-cell-13-10">    nodes, edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="annotated-cell-13-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build(v):</span>
<span id="annotated-cell-13-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes:</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="1">1</button><span id="annotated-cell-13-13" class="code-annotation-target">            nodes.add(v)</span>
<span id="annotated-cell-13-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> child <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> v._prev:</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="2">2</button><span id="annotated-cell-13-15" class="code-annotation-target">                edges.add((child, v))</span>
<span id="annotated-cell-13-16">                build(child)</span>
<span id="annotated-cell-13-17">    build(root)</span>
<span id="annotated-cell-13-18"></span>
<span id="annotated-cell-13-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nodes, edges</span>
<span id="annotated-cell-13-20"></span>
<span id="annotated-cell-13-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_dot(root):</span>
<span id="annotated-cell-13-22">    dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Digraph(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'svg'</span>, graph_attr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rankdir'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LR'</span>}) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LR = from left to right</span></span>
<span id="annotated-cell-13-23">    nodes, edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trace(root)</span>
<span id="annotated-cell-13-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes:</span>
<span id="annotated-cell-13-25">        uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>(n))</span>
<span id="annotated-cell-13-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for any value in the graph, create a rectangular ('record') node for it</span></span>
<span id="annotated-cell-13-27">        dot.node(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>uid, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{ </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | data </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.4f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | grad </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.4f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (n.label, n.data, n.grad), shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'record'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># why is (n.data, ), but not (n.data) ???</span></span>
<span id="annotated-cell-13-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n._op:</span>
<span id="annotated-cell-13-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if this value is a result of some operations, create an op node for it</span></span>
<span id="annotated-cell-13-30">            dot.node(name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n._op, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n._op)</span>
<span id="annotated-cell-13-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and connect the node to it</span></span>
<span id="annotated-cell-13-32">            dot.edge(uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n._op, uid)</span>
<span id="annotated-cell-13-33"></span>
<span id="annotated-cell-13-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n1, n2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> edges:</span>
<span id="annotated-cell-13-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># connect n1 to the op node of n2</span></span>
<span id="annotated-cell-13-36">        dot.edge(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>(n1)), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>(n2)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n2._op)</span>
<span id="annotated-cell-13-37"></span>
<span id="annotated-cell-13-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dot</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-13" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="13" data-code-annotation="1">This will collect all nodes to the <code>nodes</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="15" data-code-annotation="2">This will iteratively recursively collect all nodes to the <code>nodes</code>, add child and node ralationship information to <code>edges</code>.</span>
</dd>
</dl>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Remember to let <a href="https://graphviz.org/download/">graphviz</a> installed on your machine, not only Python package, I also run this:</p>
<div id="de5bc6da" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb16-2">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PATH"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> os.pathsep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C:\Program Files (x86)\Graphviz</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">in\dot.exe'</span></span></code></pre></div>
</details>
</div>
</div></div><p>Now we can draw 🚀.</p>
<div id="481929d2" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1">draw_dot(d)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-16-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So far we’ve build out mathematical expressions using only plus <code>+</code> and times <code>*</code>, all <code>Value</code>s are only scalar.</p>
<p>Back to the <code>Value</code> object, we will create 1 more attribute call <code>label</code>, make the expression more complicated by adding intermediate value <code>f</code>, <code>d</code>, out final node will be capital <code>L</code>.</p>
</section>
</section>
<section id="backpropagation" class="level1 page-columns page-full">
<h1>Backpropagation</h1>
<p>In backpropagation, we start at the end and are going to reverse and calculate the gradients along all the intermediate values. What we are actually computing for evert single node here is derivative of that node with respect to <code>L</code>.</p>
<p>In neural nets, <code>L</code> represent to a Loss function. And you will be very interested in the derivative of bassically loss function <code>L</code> with respect to the <strong>weights</strong> of the neural networks.</p>
<p>We need to know how are those <strong>leaf nodes</strong> <code>a</code>, <code>b</code>, <code>c</code>, <code>f</code> are impacting to the loss function. We call it <code>grad</code> and add this attribute to the <code>Value</code> object.</p>
<section id="manual-backpropagation-example-1-simple-expression" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="manual-backpropagation-example-1-simple-expression">manual backpropagation example #1: simple expression</h2>
<div class="page-columns page-full">
<div id="64b878ab" class="cell page-columns page-full" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1">draw_dot(L)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="15">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-17-output-1.svg" class="img-fluid figure-img column-page"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Let’s do the back propagation <strong>manually</strong>:</p>
<ol type="1">
<li>First we need to calculate the <code>dL/dL</code>, how <code>L</code> will response if we change <code>L</code> a tiny value <code>h</code>. The response simply is <code>1</code> so <code>L.grad = 1.0</code>.</li>
<li><code>L = d * f</code>, so <code>dL/dd</code> -&gt; <code>(f((x+h)) - f(x))/h = ((d+h)*f - d*f)/h = h*f/h = f = -2.0</code>. Quite straighforward, so <code>d.grad = -2.0</code>.</li>
<li>Similarly, <code>f.grad = d = 4</code>.<br>
</li>
<li>Next, for <code>dL/dc</code>. We first concern <code>dd/dc</code>, we know <code>d = c + e</code>. Same with (2) we will soon know <code>dd/dc = 1.0</code>, by symmetry <code>dd/de = 1.0</code>. Following the <strong>Chain Rules</strong> <img src="https://latex.codecogs.com/png.latex?h'(x)%20=%20f'(g(x))g'(x)">, we have: <code>dL/dc = dL/dd * dd/dc = -2.0 * 1 = -2.0</code>. </li>
<li>By symmetry, <code>dL/de = -2.0</code>.</li>
<li><code>dL/da = dL/de * de/da = -2.0 * b = -2.0 * -3.0 = 6.0</code>.</li>
<li><code>dl/db = dL/de * de/db = -2.0 * a = -2.0 * 2.0 = -4.0</code>.</li>
</ol>
<div class="no-row-height column-margin column-container"><span class="margin-aside"><a href="https://en.wikipedia.org/wiki/Chain_rule">Chain Rules Wiki</a></span></div><p>We can also create a function for playing around / gradient check, and not messing up the global scope.</p>
<div id="82d2bb17" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> lol():</span>
<span id="cb19-2"></span>
<span id="cb19-3">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span></span>
<span id="cb19-4"></span>
<span id="cb19-5">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb19-6">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb19-7">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb19-8">    e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span></span>
<span id="cb19-9">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> d.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span></span>
<span id="cb19-10">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>)</span>
<span id="cb19-11">    L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> L.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span></span>
<span id="cb19-12">    L1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L.data</span>
<span id="cb19-13"></span>
<span id="cb19-14">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb19-15">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb19-16">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb19-17">    c.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> h <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dL/dc = -2.0</span></span>
<span id="cb19-18">    e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span></span>
<span id="cb19-19">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> d.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span></span>
<span id="cb19-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># d.data += h # dL/dd = -2.0</span></span>
<span id="cb19-21">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># + h # dL/df = 4.0</span></span>
<span id="cb19-22">                , label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>) </span>
<span id="cb19-23">    L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> L.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span></span>
<span id="cb19-24">    L2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L.data <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># + h # dL/dL = 1.0</span></span>
<span id="cb19-25"></span>
<span id="cb19-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>((L2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> L1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> h)</span>
<span id="cb19-27"></span>
<span id="cb19-28">lol()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>-1.9999999999953388</code></pre>
</div>
</div>
<p>So that is back propagation ~ just recursively applying the Chain Rules, multiplying local derivatives.</p>
</section>
<section id="preview-of-a-single-optimization-step" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="preview-of-a-single-optimization-step">preview of a single optimization step</h2>
<p>We can change the input that we can control <code>a, b, c, f</code> to see 1 step of the optimization of process.</p>
<div id="26835ba6" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">a.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.0</span></span>
<span id="cb21-2">b.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span></span>
<span id="cb21-3">c.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb21-4">f.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span></span>
<span id="cb21-5"></span>
<span id="cb21-6">a.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a.grad</span>
<span id="cb21-7">b.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b.grad</span>
<span id="cb21-8">c.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c.grad</span>
<span id="cb21-9">f.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f.grad</span>
<span id="cb21-10"></span>
<span id="cb21-11">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span></span>
<span id="cb21-12">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> d.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> d.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span></span>
<span id="cb21-13">L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f</span>
<span id="cb21-14"></span>
<span id="cb21-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(L.data)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>-7.286496</code></pre>
</div>
</div>
<p>We can see the changes, <code>L</code> increased a little bit as expected.</p>
<div class="page-columns page-full">
<div id="7ef6ba24" class="cell page-columns page-full" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">draw_dot(L)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="18">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-20-output-1.svg" class="img-fluid figure-img column-page"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="manual-backpropagation-example-2-a-neuron" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="manual-backpropagation-example-2-a-neuron">manual backpropagation example #2: a neuron</h2>
<p>Anatomy of neurons, we have:</p>
<ul>
<li><code>axon</code> as input <img src="https://latex.codecogs.com/png.latex?x_0">;</li>
<li><code>synapse</code> string as weight <img src="https://latex.codecogs.com/png.latex?w_0">;</li>
<li>information flows into the cell body will be <img src="https://latex.codecogs.com/png.latex?x_0w_0">;</li>
<li>there are multiple inputs <img src="https://latex.codecogs.com/png.latex?x_iw_i"> flow into the cell body;</li>
<li>the cell body has some <em>bias</em> itself <img src="https://latex.codecogs.com/png.latex?b">;</li>
<li>the cell body processes all information, the output will flow through an <em>activation</em> function ~ which is some kind of a squashing function, like <code>sigmoid</code>, <code>tanh</code> or something like that;</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.researchgate.net/publication/364814302/figure/fig5/AS:11431281092677232@1666928276027/Neural-net-Structure-with-an-Activation-Function-Source-CS231n-Stanford-2017.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Neural net Structure with an Activation Function, CS231n Stanford 2017</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>🚀How does the <code>tanh</code> look like? this hyperbolic function will squash the output to the edge values: <code>-1.0</code> or <code>1.0</code>.</p>
<div id="5199f0e4" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1">plt.plot(np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>), np.tanh(np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> plt.grid()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-21-output-1.png" width="590" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>We first implement <a href="https://en.wikipedia.org/wiki/Hyperbolic_functions"><code>tanh</code></a> function to our class <code>Value</code>.</p>
<div id="52b7dd4e" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tanh(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb25-2">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data</span>
<span id="cb25-3">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb25-4">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(t, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tanh'</span>)</span>
<span id="cb25-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb25-6"></span>
<span id="cb25-7">Value.tanh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tanh</span></code></pre></div>
</details>
</div>
</div></div><p>Let’s take a simple example of 2-dimensional neuron with 2 inputs <code>x1</code> and <code>x2</code>:</p>
<div id="3b2ba4bc" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input x1, x2</span></span>
<span id="cb26-2">x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1'</span>)</span>
<span id="cb26-3">x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2'</span>)</span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weights w1,w2</span></span>
<span id="cb26-5">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w1'</span>)</span>
<span id="cb26-6">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w2'</span>)</span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bias of neuron b</span></span>
<span id="cb26-8">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.88137358</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb26-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x1*w1 + x2*w2 + b</span></span>
<span id="cb26-10">x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1w1'</span></span>
<span id="cb26-11">x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2w2'</span></span>
<span id="cb26-12">x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1w1 + x2w2'</span></span>
<span id="cb26-13">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span></span>
<span id="cb26-14"></span>
<span id="cb26-15">o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n.tanh()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> o.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># not define yet</span></span></code></pre></div>
</details>
</div>
<div class="page-columns page-full">
<div id="1ef555bd" class="cell page-columns page-full" data-execution_count="23">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">draw_dot(o)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="21">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-24-output-1.svg" class="img-fluid figure-img column-page"></p>
</figure>
</div>
</div>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<div id="28be8387" class="cell" data-execution_count="24">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">o.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb28-2">n.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> o.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb28-3">b.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n.grad</span>
<span id="cb28-4">x1w1x2w2.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n.grad</span>
<span id="cb28-5">x1w1.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1x2w2.grad</span>
<span id="cb28-6">x2w2.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1x2w2.grad</span>
<span id="cb28-7">x1.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w1.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x1w1.grad</span>
<span id="cb28-8">w1.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x1w1.grad</span>
<span id="cb28-9">x2.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w2.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x2w2.grad</span>
<span id="cb28-10">w2.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x2.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x2w2.grad</span></code></pre></div>
</details>
</div>
</div></div><p>From here we will manually calculate the gradient again:</p>
<ol type="1">
<li><code>do/do = 1</code>, that’s the base case, so <code>o.grad = 1.0</code>.</li>
<li><code>o = tanh(n)</code>, follow that Wiki link (and of course can be easily proof) we have <code>do/dn = 1 - tanh(x)^2 = 1 - o^2</code>.</li>
<li><code>n = x1w1x2w2 + b</code>, this is plus node, which gradient will flow to children equally, <code>do/db = do/dn * dn/db = do/dn * 1</code>.</li>
<li>By symmetry, <code>do/dx1w1x2w2 = do/db</code>.</li>
<li><code>do/dx1w1 = do/dx1w1x2w2</code>.</li>
<li><code>do/dx2w2 = do/dx1w1x2w2</code>.</li>
<li><code>do/dx1 = w1 * do/dx1w1</code>.</li>
<li><code>do/dw1 = x1 * do/dx1w1</code>.</li>
<li><code>do/dx2 = w2 * do/dx2w2</code>.</li>
<li><code>do/dw2 = x2 * do/dx2w2</code>.</li>
</ol>
<div class="page-columns page-full">
<div id="21a143b6" class="cell page-columns page-full" data-execution_count="25">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1">draw_dot(o)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="23">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-26-output-1.svg" class="img-fluid figure-img column-page"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="implementing-the-backward-function-for-each-operation" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="implementing-the-backward-function-for-each-operation">implementing the backward function for each operation</h2>
<p>Doing the back propagation manually is obviously ridiculous and we are now to put an end to this suffering. We will see how we can implement backward pass a bit more automatically.</p>
<p>We create <code>_backward</code> operation for each operator, implement the Chain Rules. Activate the <code>_backward</code> call along with function execution.</p>
<div id="3fa1b586" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1">o.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb30-2"></span>
<span id="cb30-3">o._backward()</span>
<span id="cb30-4">n._backward()</span>
<span id="cb30-5">b._backward()</span>
<span id="cb30-6">x1w1x2w2._backward()</span>
<span id="cb30-7">x1w1._backward()</span>
<span id="cb30-8">x2w2._backward()</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full">
<div id="865f276a" class="cell page-columns page-full" data-execution_count="27">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1">draw_dot(o)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="25">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-28-output-1.svg" class="img-fluid figure-img column-page"></p>
</figure>
</div>
</div>
</div>
</div>
<p>We still need to call the <code>_backward</code> node by node. Now we move to the next step, to implement backward function to whole expression graph.</p>
</section>
<section id="implementing-the-backward-function-for-a-whole-expression-graph" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="implementing-the-backward-function-for-a-whole-expression-graph">implementing the backward function for a whole expression graph</h2>
<p>In short, we need to do everything after each node before we call the backward function itself. For every node, all dependencies, everything that it depends on has to propagate to it before we can continue backpropagation.</p>
<p>This ordering of graph can be archived using something like <a href="https://en.wikipedia.org/wiki/Topological_sorting">topological sort</a>.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/topo_sort.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Topological Sort, photo credit to <a href="https://yuminlee2.medium.com/topological-sort-cf9f8e43af6a">Claire Lee</a></figcaption>
</figure>
</div>
</div>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<div id="e2c01334" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we first reset the Values</span></span>
<span id="cb32-2">x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1'</span>)</span>
<span id="cb32-3">x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2'</span>)</span>
<span id="cb32-4">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w1'</span>)</span>
<span id="cb32-5">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w2'</span>)</span>
<span id="cb32-6">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.88137358</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb32-7">x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1w1'</span></span>
<span id="cb32-8">x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2w2'</span></span>
<span id="cb32-9">x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1w1 + x2w2'</span></span>
<span id="cb32-10">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span></span>
<span id="cb32-11">o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n.tanh()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> o.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span></span></code></pre></div>
</details>
</div>
</div></div><p>Below is the code:</p>
<div id="bc64f1b0" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1">topo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb33-2">visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build_topo(v):</span>
<span id="cb33-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> visited:</span>
<span id="cb33-6">        visited.add(v)</span>
<span id="cb33-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> child <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> v._prev:</span>
<span id="cb33-8">            build_topo(child) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># recursively look up all children for v</span></span>
<span id="cb33-9">        topo.append(v)</span>
<span id="cb33-10"></span>
<span id="cb33-11">build_topo(o)</span>
<span id="cb33-12">topo</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>[Value(data=6.88137358),
 Value(data=-3.0),
 Value(data=2.0),
 Value(data=-6.0),
 Value(data=0.0),
 Value(data=1.0),
 Value(data=0.0),
 Value(data=-6.0),
 Value(data=0.88137358),
 Value(data=0.707106777676776)]</code></pre>
</div>
</div>
<p>We implement the topological sort to <code>backward()</code> (without underscore) function. Now we can trigger the whole process:</p>
<div id="47fcaaca" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">o.backward()</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full">
<div id="5cbc1574" class="cell page-columns page-full" data-execution_count="31">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">draw_dot(o)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="29">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-32-output-1.svg" class="img-fluid figure-img column-page"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="fixing-a-backprop-bug-when-one-node-is-used-multiple-times" class="level2">
<h2 class="anchored" data-anchor-id="fixing-a-backprop-bug-when-one-node-is-used-multiple-times">fixing a backprop bug when one node is used multiple times ⛔</h2>
<p>This <code>a.grad</code> should be <code>2.0</code>.</p>
<div id="c9baf86b" class="cell" data-execution_count="32">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb37-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> b.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this case self and other are both a, we should not overwrite the gradient, we should accumulate it.</span></span>
<span id="cb37-3">b.backward()</span>
<span id="cb37-4">draw_dot(b)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="30">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-33-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="breaking-up-a-tanh-exercising-with-more-operations" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="breaking-up-a-tanh-exercising-with-more-operations">breaking up a <code>tanh</code>, exercising with more operations</h2>
<p>Sometime we do operations between <code>Value</code> and other, like <code>int</code>. We can not do this unless we add below code to <code>__add__</code> and <code>__mul__</code> operations. Now we can <code>Value(1.0) + 1.0</code>, or <code>Value(2.0) * 2</code>.</p>
<div id="631b0aa3" class="cell" data-execution_count="33">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1">other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(other, Value) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> Value(other)</span></code></pre></div>
</details>
</div>
<p>But for <code>2 * Value(2.0)</code>, which will internally call <code>2.__mul__(Value(2.0))</code>, will not work. We add <code>__rmul__</code>:</p>
<div id="4356bf55" class="cell" data-execution_count="34">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__rmul__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># other * self</span></span>
<span id="cb39-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> other</span>
<span id="cb39-3"></span>
<span id="cb39-4">Value.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__rmul__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__rmul__</span></span></code></pre></div>
</details>
</div>
<p>For exponential, we add <code>epx</code>:</p>
<div id="9b01f7a7" class="cell" data-execution_count="35">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> exp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb40-2">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data</span>
<span id="cb40-3">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(math.exp(x), (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exp'</span>)</span>
<span id="cb40-4"></span>
<span id="cb40-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="cb40-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> out.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="cb40-7">    out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="cb40-8"></span>
<span id="cb40-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb40-10"></span>
<span id="cb40-11">Value.exp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exp</span></code></pre></div>
</details>
</div>
<p>For division, we add <code>__truediv__</code>:</p>
<div id="0821b24a" class="cell" data-execution_count="36">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__truediv__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self / other</span></span>
<span id="cb41-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb41-3"></span>
<span id="cb41-4">Value.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__truediv__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__truediv__</span></span></code></pre></div>
</details>
</div>
<p>For power, we add <code>__pow__</code>:</p>
<div id="8f9b819d" class="cell" data-execution_count="37">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__pow__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self ** other</span></span>
<span id="cb42-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(other, (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TypeError: only supporting int/float power for now"</span></span>
<span id="cb42-3">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>other, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ), <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'**</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>other<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb42-4"></span>
<span id="cb42-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="cb42-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ( <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="cb42-7">    out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="cb42-8"></span>
<span id="cb42-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb42-10"></span>
<span id="cb42-11">Value.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__pow__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__pow__</span> </span></code></pre></div>
</details>
</div>
<p>For subtract, we add <code>__neg__</code> and <code>__sub__</code>:</p>
<div id="d6a1fdbc" class="cell" data-execution_count="38">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__neg__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - self</span></span>
<span id="cb43-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span>
<span id="cb43-3"></span>
<span id="cb43-4">Value.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__neg__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__neg__</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self - other</span></span>
<span id="cb43-5"></span>
<span id="cb43-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__sub__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb43-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>other)</span>
<span id="cb43-8"></span>
<span id="cb43-9">Value.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__sub__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__sub__</span></span></code></pre></div>
</details>
</div>
<p>Now we are ready to try <code>tanh</code> in a different way:</p>
<div id="2263cf01" class="cell" data-execution_count="39">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1">x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1'</span>)</span>
<span id="cb44-2">x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2'</span>)</span>
<span id="cb44-3">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w1'</span>)</span>
<span id="cb44-4">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w2'</span>)</span>
<span id="cb44-5">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.88137358</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb44-6">x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1w1'</span></span>
<span id="cb44-7">x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2w2'</span></span>
<span id="cb44-8">x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1w1 + x2w2'</span></span>
<span id="cb44-9">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span></span>
<span id="cb44-10"></span>
<span id="cb44-11">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n).exp()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span></span>
<span id="cb44-12">o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb44-13">o.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span></span>
<span id="cb44-14">o.backward()</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full">
<div id="ba42cfc1" class="cell page-columns page-full" data-execution_count="40">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1">draw_dot(o)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="37">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-41-output-1.svg" class="img-fluid figure-img column-screen"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="pytorch-comparison" class="level1">
<h1>PyTorch comparison</h1>
<section id="doing-the-same-thing-but-in-pytorch-comparison" class="level2">
<h2 class="anchored" data-anchor-id="doing-the-same-thing-but-in-pytorch-comparison">doing the same thing but in PyTorch: comparison</h2>
<div id="6102ffd8" class="cell" data-execution_count="41">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb46-2"></span>
<span id="cb46-3">x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>]).double()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb46-4">x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>]).double()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x2.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb46-5">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>]).double()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> w1.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb46-6">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]).double()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> w2.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb46-7">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.8813735870195432</span>]).double()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> b.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb46-8"></span>
<span id="cb46-9">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb46-10">o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(n)</span>
<span id="cb46-11"></span>
<span id="cb46-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(o.data.item())</span>
<span id="cb46-13">o.backward()</span>
<span id="cb46-14"></span>
<span id="cb46-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'------------------'</span>)</span>
<span id="cb46-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1'</span>, x1.grad.item())</span>
<span id="cb46-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w1'</span>, w1.grad.item())</span>
<span id="cb46-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2'</span>, x2.grad.item())</span>
<span id="cb46-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w2'</span>, w2.grad.item())</span>
<span id="cb46-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'------------------'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>0.7071066904050358
------------------
x1 -1.5000003851533106
w1 1.0000002567688737
x2 0.5000001283844369
w2 0.0
------------------</code></pre>
</div>
</div>
</section>
</section>
<section id="building-the-library" class="level1 page-columns page-full">
<h1>Building the library</h1>
<section id="building-out-a-neural-net-library-multi-layer-perceptron-in-micrograd" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="building-out-a-neural-net-library-multi-layer-perceptron-in-micrograd">building out a neural net library (multi-layer perceptron) in micrograd</h2>
<p>We are going to build out a two-layer perceptron.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cs231n.github.io/assets/nn1/neural_net2.jpeg" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>A 3-layer neural network with three inputs, two hidden layers of 4 neurons each and one output layer. Notice that in both cases there are connections (synapses) between neurons across layers, but not within a layer, photo credit to <a href="https://cs231n.github.io/neural-networks-1/">cs231n</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<div id="772e43b6" class="cell" data-execution_count="42">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Neuron:</span>
<span id="annotated-cell-31-2"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-31" data-target-annotation="1">1</button><span id="annotated-cell-31-3" class="code-annotation-target">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nin):</span>
<span id="annotated-cell-31-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Value(np.random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nin)]</span>
<span id="annotated-cell-31-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(np.random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="annotated-cell-31-6">    </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-31" data-target-annotation="2">2</button><span id="annotated-cell-31-7" class="code-annotation-target">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="annotated-cell-31-8">        activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((wi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>xi <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> wi, xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, x)), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b)</span>
<span id="annotated-cell-31-9">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation.tanh()</span>
<span id="annotated-cell-31-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="annotated-cell-31-11"></span>
<span id="annotated-cell-31-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-31-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list plus list gives you a list</span></span>
<span id="annotated-cell-31-14"></span>
<span id="annotated-cell-31-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Layer:</span>
<span id="annotated-cell-31-16"></span>
<span id="annotated-cell-31-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nin, nout):</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-31" data-target-annotation="3">3</button><span id="annotated-cell-31-18" class="code-annotation-target">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.neurons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Neuron(nin) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nout)]</span>
<span id="annotated-cell-31-19"></span>
<span id="annotated-cell-31-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="annotated-cell-31-21">        outs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [n(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.neurons]</span>
<span id="annotated-cell-31-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> outs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(outs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> outs</span>
<span id="annotated-cell-31-23"></span>
<span id="annotated-cell-31-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-31-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [p <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> neuron <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.neurons <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> neuron.parameters()] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list comprehension</span></span>
<span id="annotated-cell-31-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># params = []</span></span>
<span id="annotated-cell-31-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for neuron in self.neurons:</span></span>
<span id="annotated-cell-31-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     ps = neuron.parameters()</span></span>
<span id="annotated-cell-31-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     params.extend(ps)</span></span>
<span id="annotated-cell-31-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return params</span></span>
<span id="annotated-cell-31-31"></span>
<span id="annotated-cell-31-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MLP:</span>
<span id="annotated-cell-31-33"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-31" data-target-annotation="4">4</button><span id="annotated-cell-31-34" class="code-annotation-target">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nin, nouts):</span>
<span id="annotated-cell-31-35">        sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [nin] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> nouts</span>
<span id="annotated-cell-31-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Layer(sz[i], sz[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nouts))]</span>
<span id="annotated-cell-31-37"></span>
<span id="annotated-cell-31-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="annotated-cell-31-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers:</span>
<span id="annotated-cell-31-40">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer(x)</span>
<span id="annotated-cell-31-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x</span>
<span id="annotated-cell-31-42"></span>
<span id="annotated-cell-31-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-31-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [p <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layer.parameters()] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for neuron in layer.neurons for neuron.parameters()]</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-31" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-31" data-code-lines="3" data-code-annotation="1">Number of <code>input</code> for the Neuron. <code>w</code> is randomly generated for each input, same for <code>b</code> which is the bias that control “the happiness”.</span>
</dd>
<dt data-target-cell="annotated-cell-31" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-31" data-code-lines="7" data-code-annotation="2">Object as a function: define the forward pass of the Neuron <img src="https://latex.codecogs.com/png.latex?%5Csum%5Climits_%7Bi=1%7D%5E%7Bnin%7D%20w_ix_i+b">, then squash the output using <code>tanh</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-31" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-31" data-code-lines="18" data-code-annotation="3">A Layer is a list of Neurons, <code>nout</code> specifies how many Neurons in the Layer. Each neuron has <code>nin</code> inputs ~ nin-D. We just initialize completely independent neurons with this given dimensionality.</span>
</dd>
<dt data-target-cell="annotated-cell-31" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-31" data-code-lines="34" data-code-annotation="4">A MLP is a sequence of Layers, picture above depicts a 3-layers MLP containing 1 input layer and 3 output layers, we say the size is 4. We sequentially create connection from the input layer to the 1st output layer, 1st output layer to 2nd output layer,…</span>
</dd>
</dl>
</div>
</div>
<div id="a1dc0db5" class="cell" data-execution_count="43">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb48-1">nin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb48-2">nouts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]</span>
<span id="cb48-3">[nin] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> nouts</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>[3, 2.0, 3.0, -1.0]</code></pre>
</div>
</div>
<div id="ec849ae6" class="cell" data-execution_count="44">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>]</span>
<span id="cb50-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Neuron(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb50-3">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb50-4">n(x)</span>
<span id="cb50-5">l(x)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>[Value(data=0.4571675859846781),
 Value(data=0.46121991271623297),
 Value(data=0.31739637971854867)]</code></pre>
</div>
</div>
<div id="de701df9" class="cell" data-execution_count="45">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]</span>
<span id="cb52-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MLP(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a MLP with 3-D input, 3 output layers contains 4, 4, 1 neurons in each layer respectively</span></span>
<span id="cb52-3">m(x)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>Value(data=0.8176419339207023)</code></pre>
</div>
</div>
<div class="page-columns page-full">
<div id="848b6d36" class="cell page-columns page-full" data-execution_count="46">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1">draw_dot(m(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="43">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-47-output-1.svg" class="img-fluid figure-img column-screen"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="creating-a-tiny-dataset-writing-the-loss-function" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="creating-a-tiny-dataset-writing-the-loss-function">creating a tiny dataset, writing the loss function</h2>
<p>A simple data set, <code>m()</code> is the MLP we defined above.</p>
<div id="fba7bd5f" class="cell" data-execution_count="47">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb55-1">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb55-2">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb55-3">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>],</span>
<span id="cb55-4">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb55-5">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]</span>
<span id="cb55-6">]</span>
<span id="cb55-7">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># designed targets</span></span></code></pre></div>
</details>
</div>
<div class="page-columns page-full"><p>Writing the loss function. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">I was unable to sum a list of Value, found the solution <a href="https://stackoverflow.com/questions/54153552/unsupported-operand-type-error-when-adding-objects-within-list-using-sum-functio">here</a>; Edit: I used Numpy random instead of random</span></div></div>
<div id="1870adca" class="cell" data-execution_count="48">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [m(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xs]</span>
<span id="cb56-2">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([(yout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ygt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ygt, yout <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ys, ypred)]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb56-3"></span>
<span id="cb56-4">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>Value(data=6.1360262648215365)</code></pre>
</div>
</div>
<p>Backpropagation the <code>loss</code>, some magical here:</p>
<div id="d65a18a7" class="cell" data-execution_count="49">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb58-1">loss.backward()</span></code></pre></div>
</details>
</div>
<p>We can look into the gradient of weight of the first neuron of the first layer (input layer)</p>
<div id="170693c6" class="cell" data-execution_count="50">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value of 1st neuron in 1st layer: '</span>,m.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].neurons[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].w[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].data)</span>
<span id="cb59-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grad of 1st neuron in 1st layer: '</span>,m.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].neurons[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].w[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grad)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>value of 1st neuron in 1st layer:  0.36406436392916586
grad of 1st neuron in 1st layer:  -0.27386490985561496</code></pre>
</div>
</div>
<div class="page-columns page-full">
<div id="cb119f7e" class="cell page-columns page-full" data-execution_count="51">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb61-1">draw_dot(loss)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="48">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-52-output-1.svg" class="img-fluid figure-img column-screen"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="collecting-all-of-the-parameters-of-the-neural-net" class="level2">
<h2 class="anchored" data-anchor-id="collecting-all-of-the-parameters-of-the-neural-net">collecting all of the parameters of the neural net</h2>
<p>We aim to produce the fitness <code>ypred</code>. <code>xs</code> is the data, the input of problem, we can not change it. <code>ys</code> is the ground true, can not changes as well. What we can change is the “parameters” of each neuron, which is weight <code>w</code> and bias <code>b</code>.</p>
<p>We add in to each class a <code>parameters()</code> function to collect those. Finally we can get all the parameters of the MLP:</p>
<div id="2c1ea7ed" class="cell" data-execution_count="52">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(m.parameters())</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>41</code></pre>
</div>
</div>
</section>
<section id="doing-gradient-descent-optimization-manually-training-the-network" class="level2">
<h2 class="anchored" data-anchor-id="doing-gradient-descent-optimization-manually-training-the-network">doing gradient descent optimization manually, training the network</h2>
<p>Now we will try to change the parameters to minimize the loss, which means our prediction will be more close to the ground true.</p>
<p><strong>Forward pass</strong>, calculate the loss:</p>
<div id="ee567bc5" class="cell" data-execution_count="53">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb64-1">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [m(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xs]</span>
<span id="cb64-2">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([(yout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ygt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ygt, yout <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ys, ypred)]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb64-3">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>Value(data=6.1360262648215365)</code></pre>
</div>
</div>
<p><strong>Backward pass</strong>, calculate the parameters:</p>
<div id="2623484b" class="cell" data-execution_count="54">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb66-1">loss.backward()</span></code></pre></div>
</details>
</div>
<p><strong>Update the parameters</strong>, change the parameters following opposite direction to reduce the loss:</p>
<div id="3b3761d9" class="cell" data-execution_count="55">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> m.parameters():</span>
<span id="cb67-2">    p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we want the p.data go on opposite direction of the loss</span></span></code></pre></div>
</details>
</div>
<p><code>0.01</code> is the learning rate!</p>
<p><strong>New loss</strong></p>
<div id="916aec35" class="cell" data-execution_count="56">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb68-1">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [m(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xs]</span>
<span id="cb68-2">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([(yout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ygt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ygt, yout <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ys, ypred)]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb68-3">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>Value(data=5.612219188976071)</code></pre>
</div>
</div>
<p>Yeah the loss decreased. In short, the process is:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">%%{init: {'theme':'dark'}}%%
flowchart LR

P1(Updated parameters) -- Forward Pass --&gt; L(Loss)
L(Loss) -- Backward Pass --&gt; P2(Parameters to update) 
P2(Parameters to update)  -- Update Pamameters --&gt; P1(Updated parameters)
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p><strong>Automate the training loop</strong>:</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>For each process, there remained a subtle bug above that we didn’t flush the grads before back propagation. Because we did not overwrite the gradients (remember the <code>+=</code>), they kept accumulated. The next action of backward and changing parameters using learning rate and grad (which produce a massive step size) become wrong! We must set the grad to zero before backward pass.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/guilty.png" class="img-fluid figure-img"></p>
<figcaption>Common guilties when training the NN</figcaption>
</figure>
</div>
</div>
</div>
<div id="777ba265" class="cell" data-execution_count="57">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb70-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb70-3">    ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [m(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xs]</span>
<span id="cb70-4">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([(yout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ygt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ygt, yout <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ys, ypred)]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb70-5"></span>
<span id="cb70-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb70-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> m.parameters():</span>
<span id="cb70-8">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb70-9">    loss.backward()</span>
<span id="cb70-10"></span>
<span id="cb70-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update params:</span></span>
<span id="cb70-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> m.parameters():</span>
<span id="cb70-13">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb70-14"></span>
<span id="cb70-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(k, loss.data)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>0 5.612219188976071
1 5.278613845948874
2 4.9129568332063895
3 4.537044006468062
4 4.180799762634871
5 3.8702006700199254
6 3.616222344965464
7 3.4152106164961196
8 3.2569360125761557
9 3.130873443715837
10 3.02830948676154
11 2.942452493298952
12 2.8681511892107654
13 2.801606202665259
14 2.740079549787686
15 2.6816125494204854
16 2.624782343570291
17 2.5685127242073627
18 2.5119375724215196
19 2.454307731114357</code></pre>
</div>
</div>
<div id="e5895b81" class="cell" data-execution_count="58">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb72-1">ypred</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>[Value(data=0.4402846840070597),
 Value(data=-0.08395829018731056),
 Value(data=-0.4568465570801474),
 Value(data=-0.0034333159134368398)]</code></pre>
</div>
</div>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<section id="summary-of-what-we-learned-how-to-go-towards-modern-neural-nets" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-what-we-learned-how-to-go-towards-modern-neural-nets">summary of what we learned, how to go towards modern neural nets</h2>
<ol type="1">
<li>What are Neural Nets: they are mathematical expressions, in case of MLP it takes: (1) data as the input, and (2) weights and biases as parameters to build out expression for the forward pass followed by the loss function.</li>
<li>The loss function is kind of measure for the accuracy of predictions. The low loss implies that predicted values are matching our targets and the networks are behaving well.</li>
<li>The process of Gradient Descent is for each step, we calculate the loss (output of the nets), backwarding it to get parameters, then updating data (which we can change - weights and biases) follow the opposite side of the loss (negative grad * learning rate). We’ll get a lower loss, and backwarding again and again. This process will find the local minimum of the loss.</li>
</ol>
</section>
<section id="walk-through-of-the-full-code-of-micrograd-on-github" class="level2">
<h2 class="anchored" data-anchor-id="walk-through-of-the-full-code-of-micrograd-on-github">walk through of the full code of <code>micrograd</code> on github</h2>
<p>Same with which we built today:</p>
<ul>
<li>engine: Value</li>
<li>nn: Neuron, Layer, MLP, and modulize the zero grad process to class Module</li>
<li>test: sanity check - compare the backward with <code>torch</code>, also for the forward pass</li>
<li>demo: a bit complicated example with <code>sklearn</code> dataset, using batch processing when the dataset come large, the loss is slightly different - SVM max-margin loss and using of auto L2 regularization</li>
<li>learning rate decay: is a scaled as a function of number of iterations, high at begin and low at the end</li>
</ul>
</section>
<section id="real-stuff-diving-into-pytorch-finding-their-backward-pass-for-tanh" class="level2">
<h2 class="anchored" data-anchor-id="real-stuff-diving-into-pytorch-finding-their-backward-pass-for-tanh">real stuff: diving into PyTorch, finding their backward pass for <code>tanh</code></h2>
<p>These libraries unfortunately grow in size and <strong>entropy</strong>, if you just search for <code>tanh</code> it’ll give you thousands of results.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">conclusion</h2>
<p>There will be follow up session yeah haha.</p>
</section>
<section id="outtakes" class="level2">
<h2 class="anchored" data-anchor-id="outtakes">outtakes :)</h2>
<p>Pytorch self-defined <code>autograd</code>.</p>
<p>Happly learning! 🤙🚀🔥</p>


<!-- -->

</section>
</section>

 ]]></description>
  <category>til</category>
  <category>python</category>
  <category>andrej karpathy</category>
  <category>nn-z2h</category>
  <category>backpropagation</category>
  <category>neural networks</category>
  <guid>https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/</guid>
  <pubDate>Sat, 15 Jun 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/puppy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Bitcoin tour in Python</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-06-10-python-bitcoin/</link>
  <description><![CDATA[ 





<p>A from-scratch implementation of Bitcoin in Python under tuturial from Andrej Karpathy.</p>
<section id="motivation" class="level1 page-columns page-full">
<h1>Motivation</h1>
<p>Đây là bài thực hành implement Bitcoin sử dụng Python mà tôi học được trên trang blog của Andrej Karpathy, nhà Khoa học máy tính, cựu Director mảng AI của Open AI.</p>
<p><a href="https://karpathy.ai/">Andrej Karpathy</a> cho rằng blockchain đang giúp nới rộng trạng thái của ngành công nghiệp phát triển phần mềm, từ open source thành open source plus. Nghĩa là chúng ta đang không chỉ chia sẻ, công khai mã nguồn, mà còn cả tài nguyên (run time, computing machine). Và với tinh thần:</p>
<blockquote class="blockquote page-columns page-full">
<div class="page-columns page-full"><p>“what I cannot create I do not understand” </p><div class="no-row-height column-margin column-container"><span class="margin-aside">Edit: câu này là của <a href="https://www.quora.com/What-did-Richard-Feynman-mean-when-he-said-What-I-cannot-create-I-do-not-understand">Richard Feynman</a></span></div></div>
</blockquote>
<p>, cách tốt nhất để học nó là thực hiện nó. Tôi cũng cho là thế!</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-10-python-bitcoin/karpathy-podcast.jpg" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Andrej Karpathy trong podcast với Lex Fridman</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Phạm vi bài thực hành này là <strong>tạo, ký số, phát hành các giao dịch Bitcoin thuần Python, từ con số 0, không thư viện phụ thuộc</strong>.</p>
<p>Đây là môi trường Python của mình:</p>
<div id="bf86a4c0" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sys.version)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>3.11.4 (tags/v3.11.4:d2340ef, Jun  7 2023, 05:45:37) [MSC v.1934 64 bit (AMD64)]</code></pre>
</div>
</div>
</section>
<section id="step-1-generating-a-crypto-identity" class="level1 page-columns page-full">
<h1>Step 1: generating a crypto identity</h1>
<p>Một trong những đặc tính quan trọng nhất của Bitcoin nói riêng và Blockchain (chuỗi khối) nói chung là tính bảo mật. Blockchain sử dụng các phương thức bảo mật như: <strong>ECC</strong>, <strong>ECDH</strong> hoặc <strong>ECDSA</strong>, trong đó <code>EC</code> chính là viết tắt của Elliptic Curve. Không chỉ trong lĩnh vực blockchain, <code>EC</code> còn được sử dụng rộng rãi trong bảo mật <a href="https://datatracker.ietf.org/doc/html/rfc4492"><code>TLS</code></a>, <a href="https://datatracker.ietf.org/doc/html/rfc6637"><code>PGP</code></a>, <a href="https://datatracker.ietf.org/doc/html/rfc5656"><code>SSH</code></a>.</p>
<p>Khác với các bảo mật <strong>đối xứng</strong> thông thường, ta có một key duy nhất để mã hóa và giải mã ~ có key là có tất cả, không có key là không có gì, các thuật toán mã hóa EC là <strong>Bất đối xứng</strong>. Trong đó, ta có một cặp <code>private key</code>/<code>public key</code> (khóa bí mật và khóa công khai). Khóa bí mật chỉ là một con số ngẫu nhiên, cần được chủ nhân của nó <strong>giữ bí mật hoàn toàn</strong>, ví nó là thứ duy nhất tạo ra được <strong>chữ kí</strong> cho họ. Khác với khóa bí mật, khóa công khai được công khai cho tất cả mọi người. <code>public key</code> được tạo ra bởi <strong>phép nhân</strong> với <code>private key</code> trong <strong>đường cong Elliptic</strong>. Phép nhân đường cong Elliptic là một phép toán <strong>trap door</strong> (cửa lật), có nghĩa là nó dễ tính theo <strong>một chiều</strong> (phép nhân) và không thể tính được theo chiều ngược lại (phép chia) ~ đó là lý do ta gọi nó là mã hóa bất đối xứng.</p>
<div class="page-columns page-full"><p>Bitcoin sử dụng Hệ mật trên đường cong Elliptic (ECC) để bảo mật giao dịch .</p><div class="no-row-height column-margin column-container"><span class="margin-aside">Xem thêm: 1. <a href="https://viblo.asia/p/gioi-thieu-ve-he-mat-tren-duong-cong-elliptic-ecc-XL6lA2PR5ek">Viblo</a>, 2. <a href="https://en.wikipedia.org/wiki/Elliptic-curve_cryptography">Wiki</a>, 3. <a href="https://mathworld.wolfram.com/EllipticCurve.html">Wolfram</a>, quá khó cho tôi tại thời điểm bây giờ - nên tôi sẽ tạm bỏ qua, dù gì cũng cần phác thảo một khung tranh “mờ mờ” trước, việc vẽ chi tiết để sau.</span></div></div>
<p>Đường cong <img src="https://latex.codecogs.com/png.latex?E:%20y%5E2%20=%20x%5E3%20+%20ax%20+%20b%20%5C:(mod%5C:p)"> trên trường hữu hạn <img src="https://latex.codecogs.com/png.latex?Z_p"> (cũng có người gọi là <img src="https://latex.codecogs.com/png.latex?Z/p">,<img src="https://latex.codecogs.com/png.latex?GF_(p)">,hoặc <img src="https://latex.codecogs.com/png.latex?F_p">, với p là số nguyên tố) được xác định bởi 6 tham số <img src="https://latex.codecogs.com/png.latex?T%20=%20(p,a,b,G,n,h)"> sau:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?p%20=%20FFFFFFFF%20FFFFFFFF%20FFFFFFFF%20FFFFFFFF%20FFFFFFFF%20FFFFFFFF%20FFFFFFFE%20FFFFFC2F"></p>
<p><img src="https://latex.codecogs.com/png.latex?=%202%5E%7B256%7D%20-%202%5E%7B32%7D%20-%202%5E9%20-%202%5E8%20-%202%5E7%20-%202%5E6%20-%202%5E4%20-%201"></p>
<p><img src="https://latex.codecogs.com/png.latex?=%202%5E%7B256%7D%20-%202%5E%7B32%7D%20-%20977"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?a%20=%2000000000%2000000000%2000000000%2000000000%2000000000%2000000000%2000000000%2000000000"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?b%20=%2000000000%2000000000%2000000000%2000000000%2000000000%2000000000%2000000000%2000000007"></p></li>
</ul>
<p>Vì được xác định trên <img src="https://latex.codecogs.com/png.latex?Z_p">, nên trên thực tế nó là một đường không liên lục, và trông sẽ như các điểm ngẫu nhiên trên một biểu đồ phân tán. Để dễ tưởng tượng và min họa, khi xác định trên trường số thực, EC sẽ trông như thế này:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-10-python-bitcoin/what_does_ec_look_like.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption><a href="https://bitcoin.stackexchange.com/questions/21907/what-does-the-curve-used-in-bitcoin-secp256k1-look-like">What does the curve used in Bitcoin, secp256k1, look like?</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Đây là tài liệu mà Andrej gợi ý cho chúng ta đọc về ECC: <a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/">blog post</a> của Andrea Corbellini. Bài viết đầu tiên của ông giới thiệu EC trên <strong>trường số thực và luật nhóm</strong>. Theo đó, với EC được xác định bằng <img src="https://latex.codecogs.com/png.latex?%5C%7B(x,y)%5Cin%20R%5E2%20%7C%20y%5E2%20=%20x%5E3%20+%20ax%20+%20b,%204a%5E3%20+%2027b%5E2%20%5Cneq%200%5C%7D%20%5Ccup%20%5C%7B0%5C%7D">, trong đó (<img src="https://latex.codecogs.com/png.latex?4a%5E3%20+%2027b%5E2%20%5Cneq%200"> là để tránh điểm kỳ dị singular), cùng với các tiên đề về phép toán cộng (<img src="https://latex.codecogs.com/png.latex?+">) được trang bị gồm:</p>
<ol type="1">
<li>Tính đóng (closure): nếu <img src="https://latex.codecogs.com/png.latex?a"> và <img src="https://latex.codecogs.com/png.latex?b"> thuộc <img src="https://latex.codecogs.com/png.latex?G">, thì <img src="https://latex.codecogs.com/png.latex?a+b"> cũng thuộc <img src="https://latex.codecogs.com/png.latex?G">;</li>
<li>Tính kết hợp (associativity): <img src="https://latex.codecogs.com/png.latex?(a+b)+c%20=%20a%20+%20(b+c)">;</li>
<li>Sự tồn tại của phần tử đơn vị (identity element 0): <img src="https://latex.codecogs.com/png.latex?a+0=0+a=a">;</li>
<li>Tính khả nghịch (commutativity): với mọi <img src="https://latex.codecogs.com/png.latex?a">, tồn tại <img src="https://latex.codecogs.com/png.latex?b"> sao cho <img src="https://latex.codecogs.com/png.latex?a+b=0">;</li>
</ol>
<p>Nếu chúng ta có thêm tính chất thứ 5 sau:</p>
<ol start="5" type="1">
<li>Tính giao hoán (commutativity): <img src="https://latex.codecogs.com/png.latex?a+b%20=%20b+a">.</li>
</ol>
<p>Thì nhóm đó được xem là một nhóm Abel (Ví dụ: tập hợp các số nguyên <img src="https://latex.codecogs.com/png.latex?Z"> là một nhóm - Abel).</p>
<p>Tập hợp các điểm trên EC là một nhóm Abel, do đó nó cũng có tính chất trên: có sự tồn tại của <strong>phần tử đơn vị</strong> 0 (cũng là vô hạn); phần tử <strong>nghịch đảo</strong> của <img src="https://latex.codecogs.com/png.latex?P">, ký hiệu <img src="https://latex.codecogs.com/png.latex?-P">, là điểm đối xứng của P qua trục hoành; <strong>phép cộng</strong> được định nghĩa như sau: với ba điểm <img src="https://latex.codecogs.com/png.latex?P">, <img src="https://latex.codecogs.com/png.latex?Q">, <img src="https://latex.codecogs.com/png.latex?R"> khác 0 và thẳng hàng trên EC, thì <img src="https://latex.codecogs.com/png.latex?P%20+%20Q%20+%20R%20=%200">, bất kể thứ tự của các điểm - ta thấy nó thỏa mãn các tính chất kết hợp và giao hoán của một nhóm Abel!.</p>
<p><strong>Phép cộng hình học và đại số</strong> và <strong>phép nhân vô hướng</strong> sẽ được trình bày ở phía sau - trực tiếp trong không gian hữu hạn. Hiện tại ình chỉ cố gắng <strong>hình dung</strong> các tính chất của EC thông qua việc xem xét nó trên <strong>trường số thực</strong>.</p>
<p>Block code dưới đây định nghĩa đường cong EC. Bitcoin (hay Ethereum) sử dụng một đường cong theo tiêu chuẩn <a href="https://en.bitcoin.it/wiki/Secp256k1">secp256k1</a> do <em>Viện Tiêu Chuẩn và Kỹ Thuật Quốc Gia Mỹ (NIST)</em> đặt ra. Với <img src="https://latex.codecogs.com/png.latex?a=0">, <img src="https://latex.codecogs.com/png.latex?b=7">, định nghĩa đường cong trên trường <img src="https://latex.codecogs.com/png.latex?Z_p"> giờ sẽ là:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5C%7B(x,y)%5Cin%20(Z_p)%5E2%20%7C%5C:%20y%5E2%20%5Cequiv%20x%5E3%20+%207%20%5C:%20(mod%20%5C:%20p)%5C%7D%20%5Ccup%20%5C%7B0%5C%7D"></p>
<div id="31b730f8" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from __future__ import annotations # PEP 563: Postponed evaluation of annotations</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># since my python version is 3.11.4 so no need to use future annotation feature </span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># which redefined since python 3.5</span></span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dataclasses <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dataclass <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace constructor __init__, </span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># help us to easily declare class attributes.</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb3-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Curve:</span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Elliptic Curve over the field of integers modulo a prime.</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Points on the curve satisfy y^2 = x^3 + a*x + b (mod p).</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z_p là một TẬP HỢP, khi p là số nguyên tố thì có thể coi nó là một TRƯỜNG </span></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    https://forum.mathscope.org/archive/index.php/t-11835.html</span></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-16">    p: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ta nói secp256k1 có đặc trưng p, được định trong trường Z_p</span></span>
<span id="cb3-17">    a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb3-18">    b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># secp256k1 uses a = 0, b = 7, so we're dealing with the curve y^2 = x^3 + 7 (mod p)</span></span>
<span id="cb3-21">bitcoin_curve <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Curve(</span>
<span id="cb3-22">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F</span>,</span>
<span id="cb3-23">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x0000000000000000000000000000000000000000000000000000000000000000</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a = 0</span></span>
<span id="cb3-24">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x0000000000000000000000000000000000000000000000000000000000000007</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># b = 7</span></span>
<span id="cb3-25">)</span></code></pre></div>
</details>
</div>
<p>Chúng ta chưa thấy phương trình của EC được thể hiện trong class <code>Curve</code>, chúng ta implement nó bằng cách tạo một class <code>Point</code>. Sau khi xác định curve, ta xác định generator - điểm sinh G (là một điểm dùng để khởi tạo quá trình “walk” trên đường cong)</p>
<div id="e9c90434" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Point:</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Số nguyên tọa độ (x,y) trên đường cong """</span></span>
<span id="cb4-4">    curve: Curve</span>
<span id="cb4-5">    x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb4-6">    y: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb4-7"></span>
<span id="cb4-8">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Point(</span>
<span id="cb4-9">    bitcoin_curve,</span>
<span id="cb4-10">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798</span>,</span>
<span id="cb4-11">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8</span>,    </span>
<span id="cb4-12">)</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># xác nhận xem G có nằm trên đường cong hay không, tức là y^2 = x^3 + 7 (mod p)</span></span>
<span id="cb4-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"G is on the curve:"</span>, (G.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> G.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> bitcoin_curve.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># các giá trị bất kỳ khác HẦU NHƯ sẽ không nằm trên đường cong:</span></span>
<span id="cb4-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb4-19">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1337</span>)</span>
<span id="cb4-20">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randrange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, bitcoin_curve.p) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ngẫu nhiên giữa 0 và p</span></span>
<span id="cb4-21">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randrange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, bitcoin_curve.p)</span>
<span id="cb4-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"G is on the curve:"</span>, (y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> bitcoin_curve.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>G is on the curve: True
G is on the curve: False</code></pre>
</div>
</div>
<p>Some notes to be updated here</p>
<div id="af99d5c1" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Generator:</span>
<span id="cb6-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A Generator over a curve: an initial point and pre-declared order.</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-6">    G: Point <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># starting point on the curve</span></span>
<span id="cb6-7">    n: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the order 0*G = n*G = INF (????)</span></span>
<span id="cb6-8"></span>
<span id="cb6-9">bitcoin_gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Generator(</span>
<span id="cb6-10">    G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> G,</span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the order of G is known and can be mathematically derived</span></span>
<span id="cb6-12">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141</span>,</span>
<span id="cb6-13">)</span></code></pre></div>
</details>
</div>
<p>Như vậy đã định nghĩa xong Đường Cong, Điểm sinh (<code>G</code>), và Trình tạo. Giờ ta sẽ tạo <code>private key</code> (hay <code>secret key</code>) - một số nguyên ngẫu nhiên thỏa <code>1&lt;= key &lt; n</code> (n đại diện cho order).</p>
<div id="b9d6501d" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">secret_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>.from_bytes(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'Hi, this is Tuan'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is how I will do it for reproducibility</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> secret_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> bitcoin_gen.n</span>
<span id="cb7-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(secret_key)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>96250501864010348276735010787267273070</code></pre>
</div>
</div>
<p>Giờ chúng ta sẽ tạo <code>public key</code>, chỉnh là cộng <code>G</code> <code>private key</code> lần.</p>
<div id="29cce254" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">INF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Point(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># special point at "infinity", kind of like a zero</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extended_euclidean_algorithm(a, b):</span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns (gcd, x, y) s.t. a * x + b * y == gcd</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function implements the extended Euclidean</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    algorithm and runs in O(log b) in the worst case,</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    taken from Wikipedia.</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb9-10">    old_r, r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a, b</span>
<span id="cb9-11">    old_s, s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-12">    old_t, t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb9-14">        quotient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> old_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> r</span>
<span id="cb9-15">        old_r, r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r, old_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> quotient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r</span>
<span id="cb9-16">        old_s, s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s, old_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> quotient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s</span>
<span id="cb9-17">        old_t, t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t, old_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> quotient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t</span>
<span id="cb9-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> old_r, old_s, old_t</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> inv(n, p):</span>
<span id="cb9-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" returns modular multiplicate inverse m s.t. (n * m) % p == 1 """</span></span>
<span id="cb9-22">    gcd, x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extended_euclidean_algorithm(n, p) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pylint: disable=unused-variable</span></span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> p</span>
<span id="cb9-24"></span>
<span id="cb9-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> elliptic_curve_addition(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other: Point) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Point:</span>
<span id="cb9-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># handle special case of P + 0 = 0 + P = 0</span></span>
<span id="cb9-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> INF:</span>
<span id="cb9-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> other</span>
<span id="cb9-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> INF:</span>
<span id="cb9-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span>
<span id="cb9-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># handle special case of P + (-P) = 0</span></span>
<span id="cb9-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other.x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> other.y:</span>
<span id="cb9-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> INF</span>
<span id="cb9-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute the "slope"</span></span>
<span id="cb9-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other.x: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (self.y = other.y is guaranteed too per above check)</span></span>
<span id="cb9-36">        m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.curve.a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inv(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.curve.p)</span>
<span id="cb9-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb9-38">        m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other.y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inv(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.curve.p)</span>
<span id="cb9-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute the new point</span></span>
<span id="cb9-40">    rx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other.x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.curve.p</span>
<span id="cb9-41">    ry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(rx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.curve.p</span>
<span id="cb9-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Point(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.curve, rx, ry)</span>
<span id="cb9-43"></span>
<span id="cb9-44">Point.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__add__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> elliptic_curve_addition <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># monkey patch addition into the Point class</span></span></code></pre></div>
</details>
</div>
<p>Giờ ta sẽ thử gen một số bộ <code>private key</code>, <code>public key</code>:</p>
<div id="3aef3e9d" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if our secret key was the integer 1, then our public key would just be G:</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use sk for secret key = private key</span></span>
<span id="cb10-3">sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-4">pk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> G</span>
<span id="cb10-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" secret key: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> public key: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(pk.x, pk.y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Verify the public key is on the curve: "</span>, (pk.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pk.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> bitcoin_curve.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if it was 2, the public key is G + G:</span></span>
<span id="cb10-8">sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-9">pk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> G</span>
<span id="cb10-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" secret key: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> public key: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(pk.x, pk.y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Verify the public key is on the curve: "</span>, (pk.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pk.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> bitcoin_curve.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># etc.:</span></span>
<span id="cb10-13">sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb10-14">pk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> G</span>
<span id="cb10-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" secret key: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> public key: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(pk.x, pk.y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Verify the public key is on the curve: "</span>, (pk.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pk.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> bitcoin_curve.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code> secret key: 1
 public key: (55066263022277343669578718895168534326250603453777594175500187360389116729240, 32670510020758816978083085130507043184471273380659243275938904335757337482424)
Verify the public key is on the curve:  True
 secret key: 2
 public key: (89565891926547004231252920425935692360644145829622209833684329913297188986597, 12158399299693830322967808612713398636155367887041628176798871954788371653930)
Verify the public key is on the curve:  True
 secret key: 3
 public key: (112711660439710606056748659173929673102114977341539408544630613555209775888121, 25583027980570883691656905877401976406448868254816295069919888960541586679410)
Verify the public key is on the curve:  True</code></pre>
</div>
</div>
<p>Chúng ta cần tăng tốc việc cộng <code>G</code> với chính nó với số lần cực kì lớn, do đó Andrej sử dụng 1 thuật toán <code>double_and_add</code> như sau:</p>
<div id="7ea37b33" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> double_and_add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, k: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Point:</span>
<span id="cb12-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(k, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-3">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INF</span>
<span id="cb12-4">    append <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span>
<span id="cb12-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> k:</span>
<span id="cb12-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb12-7">            result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> append</span>
<span id="cb12-8">        append <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> append</span>
<span id="cb12-9">        k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># monkey patch double and add into the Point class for convenience</span></span>
<span id="cb12-13">Point.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__rmul__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> double_and_add</span>
<span id="cb12-14"></span>
<span id="cb12-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "verify" correctness</span></span>
<span id="cb12-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>G)</span>
<span id="cb12-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>G)</span>
<span id="cb12-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>G)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>True
True
True</code></pre>
</div>
</div>
<p>Giờ test với <code>private_key</code> mà chúng ta tạo lúc đầu:</p>
<div id="eed4d025" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># efficiently calculate our actual public key!</span></span>
<span id="cb14-2">public_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> secret_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> G</span>
<span id="cb14-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"x: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>public_key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">y: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>public_key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Verify the public key is on the curve: "</span>, (public_key.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> public_key.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> bitcoin_curve.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>x: 95402322600731393781298762734940467224395293762704745012558525900395478371250
y: 53299222514341331201918874000650944949613849271347665849281678080211837503484
Verify the public key is on the curve:  True</code></pre>
</div>
</div>
<p><strong>🚀Đã được modulized ở</strong> <a href=""><code>curves.py</code></a></p>
<p>Với cặp private/public key ta đã implement được khả năng định danh cho Bitcoin. Giờ ta cần liên kết nó với địa chỉ ví. Trước hết ta cần triển khai một số hàm hash.</p>
<p>Có thể sử dụng <code>hashlib</code> của Python tuy nhiên Andrej không muốn sử dụng thư viện phụ thuộc. Andrej đã viết lại hai hàm hash mà Bitcoin sử dụng là <code>SHA-256</code> và <code>RIPEMD-160</code>, lần lượt dưới đây, mình note giải thích của Andrej ở phần code comment.</p>
<p>Có lẽ sẽ cần một dịp khác để hiểu hai hàm băm này, nó nằm ngoài khả năng của mình.</p>
<div id="2ccabec9" class="cell" data-execution_count="10">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> gen_sha256_with_variable_scope_protector_to_not_pollute_global_namespace():</span>
<span id="cb16-2"></span>
<span id="cb16-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    SHA256 implementation.</span></span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Follows the FIPS PUB 180-4 description for calculating SHA-256 hash function</span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf</span></span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Noone in their right mind should use this for any serious reason. This was written</span></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    purely for educational purposes.</span></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb16-12"></span>
<span id="cb16-13">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb16-14">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> count, islice</span>
<span id="cb16-15"></span>
<span id="cb16-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------------------------------------------------------------------</span></span>
<span id="cb16-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SHA-256 Functions, defined in Section 4</span></span>
<span id="cb16-18"></span>
<span id="cb16-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rotr(x, n, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>):</span>
<span id="cb16-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-21"></span>
<span id="cb16-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> shr(x, n):</span>
<span id="cb16-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> n</span>
<span id="cb16-24"></span>
<span id="cb16-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sig0(x):</span>
<span id="cb16-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> shr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb16-27"></span>
<span id="cb16-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sig1(x):</span>
<span id="cb16-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> shr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb16-30"></span>
<span id="cb16-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> capsig0(x):</span>
<span id="cb16-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span>
<span id="cb16-33"></span>
<span id="cb16-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> capsig1(x):</span>
<span id="cb16-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb16-36"></span>
<span id="cb16-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ch(x, y, z):</span>
<span id="cb16-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> z)</span>
<span id="cb16-39"></span>
<span id="cb16-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> maj(x, y, z):</span>
<span id="cb16-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> z) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> z)</span>
<span id="cb16-42"></span>
<span id="cb16-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> b2i(b):</span>
<span id="cb16-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>.from_bytes(b, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>)</span>
<span id="cb16-45"></span>
<span id="cb16-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> i2b(i):</span>
<span id="cb16-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> i.to_bytes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>)</span>
<span id="cb16-48"></span>
<span id="cb16-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------------------------------------------------------------------</span></span>
<span id="cb16-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SHA-256 Constants</span></span>
<span id="cb16-51"></span>
<span id="cb16-52">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_prime(n):</span>
<span id="cb16-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(f <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(math.sqrt(n))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb16-54"></span>
<span id="cb16-55">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> first_n_primes(n):</span>
<span id="cb16-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> islice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(is_prime, count(start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)), n)</span>
<span id="cb16-57"></span>
<span id="cb16-58">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> frac_bin(f, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>):</span>
<span id="cb16-59">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" return the first n bits of fractional part of float f """</span></span>
<span id="cb16-60">        f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> math.floor(f) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get only the fractional part</span></span>
<span id="cb16-61">        f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>n <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shift left</span></span>
<span id="cb16-62">        f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(f) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># truncate the rest of the fractional content</span></span>
<span id="cb16-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> f</span>
<span id="cb16-64"></span>
<span id="cb16-65">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> genK():</span>
<span id="cb16-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Follows Section 4.2.2 to generate K</span></span>
<span id="cb16-68"></span>
<span id="cb16-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The first 32 bits of the fractional parts of the cube roots of the first</span></span>
<span id="cb16-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        64 prime numbers:</span></span>
<span id="cb16-71"></span>
<span id="cb16-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        428a2f98 71374491 b5c0fbcf e9b5dba5 3956c25b 59f111f1 923f82a4 ab1c5ed5</span></span>
<span id="cb16-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        d807aa98 12835b01 243185be 550c7dc3 72be5d74 80deb1fe 9bdc06a7 c19bf174</span></span>
<span id="cb16-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        e49b69c1 efbe4786 0fc19dc6 240ca1cc 2de92c6f 4a7484aa 5cb0a9dc 76f988da</span></span>
<span id="cb16-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        983e5152 a831c66d b00327c8 bf597fc7 c6e00bf3 d5a79147 06ca6351 14292967</span></span>
<span id="cb16-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        27b70a85 2e1b2138 4d2c6dfc 53380d13 650a7354 766a0abb 81c2c92e 92722c85</span></span>
<span id="cb16-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a2bfe8a1 a81a664b c24b8b70 c76c51a3 d192e819 d6990624 f40e3585 106aa070</span></span>
<span id="cb16-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        19a4c116 1e376c08 2748774c 34b0bcb5 391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3</span></span>
<span id="cb16-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        748f82ee 78a5636f 84c87814 8cc70208 90befffa a4506ceb bef9a3f7 c67178f2</span></span>
<span id="cb16-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb16-81">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [frac_bin(p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> first_n_primes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)]</span>
<span id="cb16-82"></span>
<span id="cb16-83">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> genH():</span>
<span id="cb16-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Follows Section 5.3.3 to generate the initial hash value H^0</span></span>
<span id="cb16-86"></span>
<span id="cb16-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The first 32 bits of the fractional parts of the square roots of</span></span>
<span id="cb16-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the first 8 prime numbers.</span></span>
<span id="cb16-89"></span>
<span id="cb16-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        6a09e667 bb67ae85 3c6ef372 a54ff53a 9b05688c 510e527f 1f83d9ab 5be0cd19</span></span>
<span id="cb16-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb16-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [frac_bin(p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> first_n_primes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)]</span>
<span id="cb16-93"></span>
<span id="cb16-94">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------------------------------------------------------------------</span></span>
<span id="cb16-95"></span>
<span id="cb16-96">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pad(b):</span>
<span id="cb16-97">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Follows Section 5.1: Padding the message """</span></span>
<span id="cb16-98">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytearray</span>(b) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to a mutable equivalent</span></span>
<span id="cb16-99">        l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note: len returns number of bytes not bits</span></span>
<span id="cb16-100"></span>
<span id="cb16-101">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># append but "1" to the end of the message</span></span>
<span id="cb16-102">        b.append(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0b10000000</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># appending 10000000 in binary (=128 in decimal)</span></span>
<span id="cb16-103"></span>
<span id="cb16-104">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># follow by k zero bits, where k is the smallest non-negative solution to</span></span>
<span id="cb16-105">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># l + 1 + k = 448 mod 512</span></span>
<span id="cb16-106">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i.e. pad with zeros until we reach 448 (mod 512)</span></span>
<span id="cb16-107">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>:</span>
<span id="cb16-108">            b.append(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x00</span>)</span>
<span id="cb16-109"></span>
<span id="cb16-110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the last 64-bit block is the length l of the original message</span></span>
<span id="cb16-111">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expressed in binary (big endian)</span></span>
<span id="cb16-112">        b.extend(l.to_bytes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>))</span>
<span id="cb16-113"></span>
<span id="cb16-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> b</span>
<span id="cb16-115"></span>
<span id="cb16-116">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sha256(b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>:</span>
<span id="cb16-117"></span>
<span id="cb16-118">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Section 4.2</span></span>
<span id="cb16-119">        K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genK()</span>
<span id="cb16-120"></span>
<span id="cb16-121">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Section 5: Preprocessing</span></span>
<span id="cb16-122">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Section 5.1: Pad the message</span></span>
<span id="cb16-123">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad(b)</span>
<span id="cb16-124">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Section 5.2: Separate the message into blocks of 512 bits (64 bytes)</span></span>
<span id="cb16-125">        blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [b[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)]</span>
<span id="cb16-126"></span>
<span id="cb16-127">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for each message block M^1 ... M^N</span></span>
<span id="cb16-128">        H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genH() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Section 5.3</span></span>
<span id="cb16-129"></span>
<span id="cb16-130">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Section 6</span></span>
<span id="cb16-131">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> M <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> blocks: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each block is a 64-entry array of 8-bit bytes</span></span>
<span id="cb16-132"></span>
<span id="cb16-133">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Prepare the message schedule, a 64-entry array of 32-bit words</span></span>
<span id="cb16-134">            W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb16-135">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>):</span>
<span id="cb16-136">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>:</span>
<span id="cb16-137">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the first 16 words are just a copy of the block</span></span>
<span id="cb16-138">                    W.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>(M[t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]))</span>
<span id="cb16-139">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb16-140">                    term1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sig1(b2i(W[t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]))</span>
<span id="cb16-141">                    term2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2i(W[t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>])</span>
<span id="cb16-142">                    term3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sig0(b2i(W[t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]))</span>
<span id="cb16-143">                    term4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2i(W[t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>])</span>
<span id="cb16-144">                    total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (term1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> term2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> term3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> term4) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb16-145">                    W.append(i2b(total))</span>
<span id="cb16-146"></span>
<span id="cb16-147">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Initialize the 8 working variables a,b,c,d,e,f,g,h with prev hash value</span></span>
<span id="cb16-148">            a, b, c, d, e, f, g, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> H</span>
<span id="cb16-149"></span>
<span id="cb16-150">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3.</span></span>
<span id="cb16-151">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>):</span>
<span id="cb16-152">                T1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> capsig1(e) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ch(e, f, g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> K[t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2i(W[t])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb16-153">                T2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (capsig0(a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> maj(a, b, c)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb16-154">                h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g</span>
<span id="cb16-155">                g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f</span>
<span id="cb16-156">                f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e</span>
<span id="cb16-157">                e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> T1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb16-158">                d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c</span>
<span id="cb16-159">                c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b</span>
<span id="cb16-160">                b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a</span>
<span id="cb16-161">                a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (T1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> T2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb16-162"></span>
<span id="cb16-163">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Compute the i-th intermediate hash value H^i</span></span>
<span id="cb16-164">            delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [a, b, c, d, e, f, g, h]</span>
<span id="cb16-165">            H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(i1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i1, i2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(H, delta)]</span>
<span id="cb16-166"></span>
<span id="cb16-167">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b''</span>.join(i2b(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> H)</span>
<span id="cb16-168"></span>
<span id="cb16-169">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sha256</span>
<span id="cb16-170"></span>
<span id="cb16-171">sha256 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen_sha256_with_variable_scope_protector_to_not_pollute_global_namespace()</span>
<span id="cb16-172"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"verify empty hash:"</span>, sha256(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b''</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># should be e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855</span></span>
<span id="cb16-173"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sha256(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'here is a random bytes message, cool right?'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>())</span>
<span id="cb16-174"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number of bytes in a sha256 digest: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sha256(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b''</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>verify empty hash: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
69b9779edaa573a509999cbae415d3408c30544bad09727a1d64eff353c95b89
number of bytes in a sha256 digest:  32</code></pre>
</div>
</div>
<p>Hàm băm thứ hai là <code>RIPEMD-160</code>:</p>
<div id="b3d4266c" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> gen_ripemd160_with_variable_scope_protector_to_not_pollute_global_namespace():</span>
<span id="cb18-2"></span>
<span id="cb18-3">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb18-4">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> struct</span>
<span id="cb18-5"></span>
<span id="cb18-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------------------------------------------------------------------</span></span>
<span id="cb18-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># public interface</span></span>
<span id="cb18-8"></span>
<span id="cb18-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ripemd160(b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>:</span>
<span id="cb18-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" simple wrapper for a simpler API to this hash function, just bytes to bytes """</span></span>
<span id="cb18-11">        ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RMDContext()</span>
<span id="cb18-12">        RMD160Update(ctx, b, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b))</span>
<span id="cb18-13">        digest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RMD160Final(ctx)</span>
<span id="cb18-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> digest</span>
<span id="cb18-15"></span>
<span id="cb18-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------------------------------------------------------------------</span></span>
<span id="cb18-17"></span>
<span id="cb18-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RMDContext:</span>
<span id="cb18-19">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb18-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x67452301</span>, <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xEFCDAB89</span>, <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x98BADCFE</span>, <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x10325476</span>, <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xC3D2E1F0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># uint32</span></span>
<span id="cb18-21">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># uint64</span></span>
<span id="cb18-22">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># uchar</span></span>
<span id="cb18-23"></span>
<span id="cb18-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> RMD160Update(ctx, inp, inplen):</span>
<span id="cb18-25">        have <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((ctx.count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb18-26">        inplen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(inplen)</span>
<span id="cb18-27">        need <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> have</span>
<span id="cb18-28">        ctx.count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inplen</span>
<span id="cb18-29">        off <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb18-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> inplen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> need:</span>
<span id="cb18-31">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> have:</span>
<span id="cb18-32">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(need):</span>
<span id="cb18-33">                    ctx.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[have<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp[i]</span>
<span id="cb18-34">                RMD160Transform(ctx.state, ctx.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb18-35">                off <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> need</span>
<span id="cb18-36">                have <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb18-37">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> off <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> inplen:</span>
<span id="cb18-38">                RMD160Transform(ctx.state, inp[off:])</span>
<span id="cb18-39">                off <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb18-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> off <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> inplen:</span>
<span id="cb18-41">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(inplen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> off):</span>
<span id="cb18-42">                ctx.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[have<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp[off<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i]</span>
<span id="cb18-43"></span>
<span id="cb18-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> RMD160Final(ctx):</span>
<span id="cb18-45">        size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> struct.pack(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;Q"</span>, ctx.count)</span>
<span id="cb18-46">        padlen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ((ctx.count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb18-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> padlen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>:</span>
<span id="cb18-48">            padlen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb18-49">        RMD160Update(ctx, PADDING, padlen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb18-50">        RMD160Update(ctx, size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb18-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> struct.pack(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;5L"</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ctx.state)</span>
<span id="cb18-52"></span>
<span id="cb18-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------------------------------------------------------------------</span></span>
<span id="cb18-54"></span>
<span id="cb18-55">    K0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x00000000</span></span>
<span id="cb18-56">    K1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x5A827999</span></span>
<span id="cb18-57">    K2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x6ED9EBA1</span></span>
<span id="cb18-58">    K3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x8F1BBCDC</span></span>
<span id="cb18-59">    K4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xA953FD4E</span></span>
<span id="cb18-60">    KK0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x50A28BE6</span></span>
<span id="cb18-61">    KK1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x5C4DD124</span></span>
<span id="cb18-62">    KK2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x6D703EF3</span></span>
<span id="cb18-63">    KK3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x7A6D76E9</span></span>
<span id="cb18-64">    KK4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x00000000</span></span>
<span id="cb18-65"></span>
<span id="cb18-66">    PADDING <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x80</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span></span>
<span id="cb18-67"></span>
<span id="cb18-68">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ROL(n, x):</span>
<span id="cb18-69">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xffffffff</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n))</span>
<span id="cb18-70"></span>
<span id="cb18-71">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> F0(x, y, z):</span>
<span id="cb18-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> z</span>
<span id="cb18-73"></span>
<span id="cb18-74">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> F1(x, y, z):</span>
<span id="cb18-75">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> z)</span>
<span id="cb18-76"></span>
<span id="cb18-77">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> F2(x, y, z):</span>
<span id="cb18-78">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> ((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> z</span>
<span id="cb18-79"></span>
<span id="cb18-80">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> F3(x, y, z):</span>
<span id="cb18-81">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> z) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>z) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> y)</span>
<span id="cb18-82"></span>
<span id="cb18-83">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> F4(x, y, z):</span>
<span id="cb18-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> ((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>z) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span>))</span>
<span id="cb18-85"></span>
<span id="cb18-86">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> R(a, b, c, d, e, Fj, Kj, sj, rj, X):</span>
<span id="cb18-87">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ROL(sj, (a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Fj(b, c, d) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> X[rj] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Kj) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> e</span>
<span id="cb18-88">        c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ROL(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, c)</span>
<span id="cb18-89">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span>, c</span>
<span id="cb18-90"></span>
<span id="cb18-91">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> RMD160Transform(state, block): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#uint32 state[5], uchar block[64]</span></span>
<span id="cb18-92"></span>
<span id="cb18-93">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb18-94">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> sys.byteorder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'little'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Only little endian is supported atm for RIPEMD160"</span></span>
<span id="cb18-95">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> struct.unpack(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;16L'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>(block[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>]))</span>
<span id="cb18-96"></span>
<span id="cb18-97">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb18-98">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-99">        c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb18-100">        d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb18-101">        e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb18-102"></span>
<span id="cb18-103">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Round 1 */</span></span>
<span id="cb18-104">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-105">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-106">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-107">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-108">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-109">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-110">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-111">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-112">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-113">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-114">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-115">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-116">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-117">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-118">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-119">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #15 */</span></span>
<span id="cb18-120">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Round 2 */</span></span>
<span id="cb18-121">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-122">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-123">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-124">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-125">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-126">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-127">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-128">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-129">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-130">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-131">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-132">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-133">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-134">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-135">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-136">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #31 */</span></span>
<span id="cb18-137">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Round 3 */</span></span>
<span id="cb18-138">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-139">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-140">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-141">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-142">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-143">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-144">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-145">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-146">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-147">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-148">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-149">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-150">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-151">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-152">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-153">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #47 */</span></span>
<span id="cb18-154">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Round 4 */</span></span>
<span id="cb18-155">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-156">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-157">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-158">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-159">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-160">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-161">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-162">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-163">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-164">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-165">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-166">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-167">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-168">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-169">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-170">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #63 */</span></span>
<span id="cb18-171">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Round 5 */</span></span>
<span id="cb18-172">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-173">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-174">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-175">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-176">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-177">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-178">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-179">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-180">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-181">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-182">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-183">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-184">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-185">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-186">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-187">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #79 */</span></span>
<span id="cb18-188"></span>
<span id="cb18-189">        aa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a</span>
<span id="cb18-190">        bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b</span>
<span id="cb18-191">        cc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c</span>
<span id="cb18-192">        dd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d</span>
<span id="cb18-193">        ee <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e</span>
<span id="cb18-194"></span>
<span id="cb18-195">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb18-196">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-197">        c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb18-198">        d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb18-199">        e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb18-200"></span>
<span id="cb18-201">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Parallel round 1 */</span></span>
<span id="cb18-202">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-203">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-204">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-205">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-206">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-207">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-208">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-209">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-210">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-211">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-212">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-213">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-214">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-215">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-216">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-217">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #15 */</span></span>
<span id="cb18-218">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Parallel round 2 */</span></span>
<span id="cb18-219">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-220">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-221">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-222">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-223">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-224">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-225">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-226">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-227">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-228">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-229">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-230">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-231">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-232">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-233">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-234">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #31 */</span></span>
<span id="cb18-235">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Parallel round 3 */</span></span>
<span id="cb18-236">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-237">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-238">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-239">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-240">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-241">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-242">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-243">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-244">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-245">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-246">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-247">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-248">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-249">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-250">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-251">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #47 */</span></span>
<span id="cb18-252">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Parallel round 4 */</span></span>
<span id="cb18-253">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-254">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-255">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-256">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-257">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-258">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-259">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-260">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-261">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-262">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-263">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-264">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-265">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-266">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-267">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-268">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #63 */</span></span>
<span id="cb18-269">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Parallel round 5 */</span></span>
<span id="cb18-270">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-271">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-272">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-273">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-274">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-275">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-276">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-277">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-278">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-279">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-280">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-281">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-282">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-283">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-284">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-285">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #79 */</span></span>
<span id="cb18-286"></span>
<span id="cb18-287">        t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span></span>
<span id="cb18-288">        state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> e) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span></span>
<span id="cb18-289">        state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ee <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span></span>
<span id="cb18-290">        state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> aa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span></span>
<span id="cb18-291">        state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span></span>
<span id="cb18-292">        state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span></span>
<span id="cb18-293"></span>
<span id="cb18-294">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ripemd160</span>
<span id="cb18-295"></span>
<span id="cb18-296">ripemd160 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen_ripemd160_with_variable_scope_protector_to_not_pollute_global_namespace()</span>
<span id="cb18-297"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ripemd160(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'hello this is a test'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>())</span>
<span id="cb18-298"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number of bytes in a RIPEMD-160 digest: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ripemd160(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b''</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>f51960af7dd4813a587ab26388ddab3b28d1f7b4
number of bytes in a RIPEMD-160 digest:  20</code></pre>
</div>
</div>
<p>Ok giờ thì có thể làm việc với Bitcoin Address. Chúng ta sẽ tạo một class <code>PublicKet</code>, là con của <code>Point</code>, cũng là một điểm trên <code>Curve</code>.</p>
<div id="504be61c" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PublicKey(Point):</span>
<span id="cb20-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The public key is just a Point on a Curve, but has some additional specific</span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    encoding / decoding functionality that this class implements.</span></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb20-6"></span>
<span id="cb20-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@classmethod</span></span>
<span id="cb20-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> from_point(cls, pt: Point):</span>
<span id="cb20-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" promote a Point to be a PublicKey """</span></span>
<span id="cb20-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cls(pt.curve, pt.x, pt.y)</span>
<span id="cb20-11"></span>
<span id="cb20-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, compressed, hash160<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb20-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" return the SEC bytes encoding of the public key Point """</span></span>
<span id="cb20-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the bytes</span></span>
<span id="cb20-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> compressed:</span>
<span id="cb20-16">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (x,y) is very redundant. Because y^2 = x^3 + 7,</span></span>
<span id="cb20-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we can just encode x, and then y = +/- sqrt(x^3 + 7),</span></span>
<span id="cb20-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># so we need one more bit to encode whether it was the + or the -</span></span>
<span id="cb20-19">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># but because this is modular arithmetic there is no +/-, instead</span></span>
<span id="cb20-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it can be shown that one y will always be even and the other odd.</span></span>
<span id="cb20-21">            prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x02</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x03</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb20-22">            pkb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x.to_bytes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>)</span>
<span id="cb20-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb20-24">            pkb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x04</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x.to_bytes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y.to_bytes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>)</span>
<span id="cb20-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hash if desired</span></span>
<span id="cb20-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ripemd160(sha256(pkb)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> hash160 <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> pkb</span>
<span id="cb20-27"></span>
<span id="cb20-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> address(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, net: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, compressed: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb20-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" return the associated bitcoin address for this public key as string """</span></span>
<span id="cb20-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># encode the public key into bytes and hash to get the payload</span></span>
<span id="cb20-31">        pkb_hash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encode(compressed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>compressed, hash160<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add version byte (0x00 for Main Network, or 0x6f for Test Network)</span></span>
<span id="cb20-33">        version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'main'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x00</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x6f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>}</span>
<span id="cb20-34">        ver_pkb_hash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> version[net] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pkb_hash</span>
<span id="cb20-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the checksum</span></span>
<span id="cb20-36">        checksum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sha256(sha256(ver_pkb_hash))[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb20-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># append to form the full 25-byte binary Bitcoin Address</span></span>
<span id="cb20-38">        byte_address <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ver_pkb_hash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> checksum</span>
<span id="cb20-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># finally b58 encode the result</span></span>
<span id="cb20-40">        b58check_address <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b58encode(byte_address)</span>
<span id="cb20-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> b58check_address</span></code></pre></div>
</details>
</div>
<p>Step 1 not completed yet.</p>
<section id="part-1-summary-so-far" class="level2">
<h2 class="anchored" data-anchor-id="part-1-summary-so-far">Part 1: summary so far</h2>
</section>
</section>
<section id="part-2-obtaining-seed-funds-intro-to-bitcoin-under-the-hood" class="level1">
<h1>Part 2: Obtaining seed funds + intro to Bitcoin under the hood</h1>
</section>
<section id="part-3-crafting-our-transaction" class="level1">
<h1>Part 3: Crafting our transaction</h1>
</section>
<section id="digital-signature" class="level1">
<h1>Digital Signature</h1>
</section>
<section id="putting-it-all-together-one-more-consolidating-transaction" class="level1">
<h1>Putting it all together: One more consolidating transaction</h1>
</section>
<section id="resources" class="level1">
<h1>Resources</h1>
<p>Andrej Karpathy’s <a href="https://karpathy.github.io/2021/06/21/blockchain/">blog post</a></p>


<!-- -->

</section>

 ]]></description>
  <category>til</category>
  <category>crypto</category>
  <category>bitcoin</category>
  <category>python</category>
  <category>andrej karpathy</category>
  <guid>https://lktuan.github.io/blog/2024-06-10-python-bitcoin/</guid>
  <pubDate>Sun, 09 Jun 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-06-10-python-bitcoin/python_bitcoin.png" medium="image" type="image/png" height="81" width="144"/>
</item>
</channel>
</rss>
