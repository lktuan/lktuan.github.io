<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Le Khac Tuan</title>
<link>https://lktuan.github.io/blog.html</link>
<atom:link href="https://lktuan.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description>I am a Risk Modeler 🚀</description>
<generator>quarto-1.4.554</generator>
<lastBuildDate>Wed, 07 Aug 2024 17:00:00 GMT</lastBuildDate>
<item>
  <title>Note on Mathematics as the Universal Language of Nature</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-08-08-note-muln/</link>
  <description><![CDATA[ 





<p>mình nghe bài nói chuyện “Mathematics as the Universal Language of Nature” của R. Seiringer, tổ chức tại Trường Đại học Sư phạm Huế, ngày 8 tháng 8 năm 2024. Dưới đây là note của mình.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-08-08-note-muln/talk_cover.png" class="img-fluid figure-img"></p>
<figcaption>talk cover</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Robert là 1 giáo sư chuyên, đầu ngành về Toán và Vật lý, từng giảng dạy tại Princeton, hiện nay công tác tại Viện Kỹ Thuật và Khoa học của Áo. Bài giảng này của giáo sư nhằm nêu bật vẻ đẹp của Toán và Vật lý, dùng Toán để giải thích tự nhiên.</p>
<section id="history" class="level1">
<h1>History</h1>
<ul>
<li>Newton: calculus, motion of earth around the sun, theory of gravity;</li>
<li>Fourier: Fourier series to understand hear transfer &amp; conduction (also green house effect!);</li>
<li>Rieman: thuyết tương đối tổng quát, lý thuyết trường lượng tử, lý thuyết dây.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
green house effect
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Jean-Baptiste Joseph Fourier, nhà toán học và vật lý học người Pháp, là người đầu tiên mô tả hiệu ứng nhà kính (greenhouse effect) vào năm 1824. Hãy giải thích về khái niệm này:</p>
<ol type="1">
<li><p><strong>Định nghĩa:</strong> Hiệu ứng nhà kính của Fourier đề cập đến quá trình mà khí quyển của Trái Đất giữ nhiệt, làm cho bề mặt hành tinh ấm hơn so với trường hợp không có khí quyển.</p></li>
<li><p><strong>Cơ chế cơ bản:</strong></p></li>
</ol>
<ol type="a">
<li><p>Bức xạ mặt trời đi qua khí quyển và được hấp thụ bởi bề mặt Trái Đất.</p></li>
<li><p>Trái Đất phát ra bức xạ hồng ngoại (nhiệt).</p></li>
<li><p>Một phần bức xạ này bị các khí nhà kính trong khí quyển hấp thụ và tái phát ra theo mọi hướng.</p></li>
<li><p>Quá trình này giữ nhiệt trong khí quyển, làm tăng nhiệt độ trung bình của Trái Đất.</p></li>
</ol>
<ol start="3" type="1">
<li><strong>Đóng góp của Fourier:</strong></li>
</ol>
<ul>
<li>Fourier nhận ra rằng khí quyển đóng vai trò như một “tấm chăn”, giữ nhiệt cho Trái Đất.</li>
<li>Ông so sánh quá trình này với cách hoạt động của nhà kính trồng cây.</li>
</ul>
<ol start="4" type="1">
<li><strong>Tầm quan trọng:</strong></li>
</ol>
<ul>
<li>Hiệu ứng nhà kính tự nhiên làm cho Trái Đất có thể ở được, duy trì nhiệt độ trung bình khoảng 15°C thay vì -18°C nếu không có nó.</li>
<li>Hiểu biết này đặt nền móng cho nghiên cứu về biến đổi khí hậu hiện đại.</li>
</ul>
<ol start="5" type="1">
<li><strong>Phát triển sau này:</strong></li>
</ol>
<ul>
<li>John Tyndall (1859) xác định các khí cụ thể gây ra hiệu ứng nhà kính.</li>
<li>Svante Arrhenius (1896) tính toán định lượng ảnh hưởng của CO2 đối với nhiệt độ Trái Đất.</li>
</ul>
<ol start="6" type="1">
<li><strong>Khác biệt với hiểu biết hiện đại:</strong></li>
</ol>
<ul>
<li>Fourier chưa biết về các khí nhà kính cụ thể hoặc cơ chế phân tử của quá trình này.</li>
<li>Hiểu biết hiện đại về hiệu ứng nhà kính phức tạp hơn nhiều, bao gồm các phản hồi và tương tác khí hậu.</li>
</ul>
<ol start="7" type="1">
<li><strong>Ý nghĩa lịch sử:</strong></li>
</ol>
<ul>
<li>Công trình của Fourier đặt nền móng cho khoa học khí hậu hiện đại và hiểu biết của chúng ta về cách Trái Đất duy trì nhiệt độ.</li>
</ul>
<p>Hiệu ứng nhà kính của Fourier là một ví dụ tuyệt vời về cách một khái niệm khoa học cơ bản có thể dẫn đến những hiểu biết sâu sắc về hệ thống Trái Đất và cuối cùng ảnh hưởng đến chính sách toàn cầu về biến đổi khí hậu.</p>
</div>
</div>
</div>
</section>
<section id="math-desc.-of-laws-of-nature" class="level1">
<h1>Math Desc. of Laws of Nature</h1>
<p>the unreasonable effectiveness of math in the natural sciences (Eugene P. Wigner), formulation of the basic laws of nature in mathematically precise terms.</p>
<p>ví dụ: Phương trình Schrodinger -&gt; áp dụng từ atomic nuclei to neutron stars.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Phương Trình Schrödinger: Cánh Cửa Vào Thế Giới Lượng Tử
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Phương trình Schrödinger là một phương trình vi phân từng phần cơ bản trong cơ học lượng tử, được đặt tên theo nhà vật lý Erwin Schrödinger. Nó mô tả sự biến đổi theo thời gian của hàm sóng của một hệ lượng tử. Hàm sóng này chứa đựng tất cả thông tin về trạng thái của hệ thống, bao gồm cả vị trí, động lượng và các tính chất khác.</p>
<p><strong>Ý nghĩa Vật lý</strong></p>
<ul>
<li>Mô tả sự chuyển động của các hạt ở cấp độ lượng tử: Nếu trong cơ học cổ điển, chúng ta sử dụng các phương trình Newton để mô tả chuyển động của các vật thể, thì trong cơ học lượng tử, phương trình Schrödinger đóng vai trò tương tự. Nó cho phép chúng ta tính toán xác suất tìm thấy một hạt tại một vị trí nào đó tại một thời điểm nhất định.</li>
<li>Hàm sóng: Hàm sóng không phải là một đại lượng vật lý có thể đo trực tiếp, mà là một hàm toán học phức. Bình phương mô đun của hàm sóng tại một điểm trong không gian cho ta xác suất tìm thấy hạt tại điểm đó.</li>
</ul>
<p><strong>Ứng dụng của Phương Trình Schrödinger</strong>. Phương trình Schrödinger có ứng dụng rộng rãi trong nhiều lĩnh vực của vật lý, bao gồm:</p>
<ul>
<li>Vật lý nguyên tử: Dùng để mô tả cấu trúc của nguyên tử, phân tử và tính toán các mức năng lượng của chúng.</li>
<li>Vật lý hạt nhân: Áp dụng để nghiên cứu cấu trúc của hạt nhân nguyên tử và các quá trình tương tác hạt nhân.</li>
<li>Vật lý chất rắn: Được sử dụng để mô tả các tính chất điện, từ, và quang học của vật liệu.</li>
<li>Vật lý thiên văn: Áp dụng để nghiên cứu các vật thể thiên văn như sao, tinh vân và lỗ đen.</li>
</ul>
<p><strong>Tại Sao Phương Trình Schrödinger Áp Dụng Rộng Rãi?</strong></p>
<ul>
<li>Tính phổ quát: Phương trình Schrödinger là một phương trình cơ bản, áp dụng cho mọi hệ lượng tử, từ các hạt đơn lẻ đến các hệ phức tạp như nguyên tử, phân tử và vật liệu rắn.</li>
<li>Độ chính xác cao: Các kết quả tính toán dựa trên phương trình Schrödinger đã được kiểm nghiệm thực nghiệm một cách chính xác cao, khẳng định tính đúng đắn của lý thuyết lượng tử.</li>
<li>Khả năng dự đoán: Phương trình Schrödinger cho phép chúng ta dự đoán kết quả của các thí nghiệm lượng tử, từ đó mở ra nhiều ứng dụng trong công nghệ hiện đại.</li>
</ul>
<p><strong>Từ Nguyên Tử đến Sao Neutron</strong></p>
<ul>
<li>Nguyên tử: Phương trình Schrödinger được sử dụng để mô tả sự chuyển động của electron xung quanh hạt nhân, từ đó giải thích quang phổ nguyên tử và các tính chất hóa học của các nguyên tố.</li>
<li>Hạt nhân: Phương trình Schrödinger (ở dạng tương đối tính) được sử dụng để mô tả cấu trúc của hạt nhân nguyên tử, các tương tác giữa các nucleon (proton và neutron) bên trong hạt nhân.</li>
<li>Sao neutron: Sao neutron là những ngôi sao đã chết, cực kỳ đặc, chủ yếu gồm các neutron. Mặc dù cấu trúc bên trong của sao neutron rất phức tạp, nhưng các nhà vật lý vẫn sử dụng các phiên bản mở rộng của phương trình Schrödinger để mô tả hành vi của vật chất trong điều kiện cực đoan bên trong sao neutron.</li>
</ul>
<p><strong>Tóm lại</strong>, phương trình Schrödinger là một công cụ toán học mạnh mẽ, cho phép chúng ta hiểu sâu sắc về thế giới lượng tử. Sự thành công của phương trình này trong việc giải thích các hiện tượng từ cấp độ nguyên tử đến cấp độ vũ trụ đã khẳng định vị trí trung tâm của nó trong nền tảng của vật lý hiện đại.</p>
</div>
</div>
</div>
</section>
<section id="technology-development" class="level1">
<h1>Technology Development</h1>
<p>How quantum mechanic works, it’s understanding from human lies at the heart of technological advances in the past century</p>
<ul>
<li>phone</li>
<li>computer</li>
<li>satellite</li>
<li>…</li>
</ul>
</section>
<section id="complexity" class="level1">
<h1>Complexity</h1>
<p>the more basic physical laws are stated, the more complex be allowed for calculating their solution.</p>
<p>eg: description of the air in this lecture room, there will me rought ly 10^30 parameters</p>
<p>eg: phase transitions -&gt; one small change in system’s params lead to a masive change of its behaviour.</p>
<p>read more: “More is Different - broken symertry and the nature of hierarchical structure of science” – P. W. Anderson – (<a href="https://inters.org/files/more-is-different.pdf">link</a>).</p>
</section>
<section id="aims-of-mathematical-physics" class="level1">
<h1>Aims of Mathematical Physics</h1>
<ul>
<li>dev new math tools, allowing deduction of …</li>
<li>improve understanding of physical systems, dưới nhiều góc nhìn hơn.</li>
</ul>
<p>eg: <strong>fruitful interaction</strong>, Toán là nền tảng, Lý thể hiện các câu hỏi một cách tự nhiên để mang lại sự phát triển cho sự khám phá Toán học.</p>
</section>
<section id="stability-of-atoms" class="level1">
<h1>Stability of Atoms</h1>
<p>Tại sao electron không spiral vào nguyên tử, giải phóng một năng lượng vô hạn.</p>
<ul>
<li>Heisenberg uncertainty principle</li>
<li>In math, non-commutativity implies…</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-08-08-note-muln/stability_of_atoms.png" class="img-fluid figure-img"></p>
<figcaption>stability of atoms</figcaption>
</figure>
</div>
<p>? electromagtic radiation</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
electromagtic radiation
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Bức xạ điện từ là một dạng năng lượng truyền đi dưới dạng sóng điện từ. Sóng điện từ này bao gồm cả trường điện từ và trường từ trường dao động vuông góc với nhau và vuông góc với phương truyền sóng.</p>
<p><strong>Đặc điểm chính của bức xạ điện từ:</strong></p>
<ul>
<li>Tốc độ: Tất cả các sóng điện từ đều truyền đi với tốc độ ánh sáng trong chân không (khoảng 3 x 10^8 m/s).</li>
<li>Tần số và bước sóng: Các sóng điện từ khác nhau bởi tần số (số lần dao động trong một giây) và bước sóng (khoảng cách giữa hai đỉnh sóng liên tiếp).</li>
<li>Phổ điện từ: Phổ điện từ là một dải liên tục các loại bức xạ điện từ, từ sóng vô tuyến có bước sóng dài đến tia gamma có bước sóng ngắn.</li>
<li>Tính chất sóng-hạt lưỡng tính: Bức xạ điện từ thể hiện cả tính chất sóng (giao thoa, nhiễu xạ) và tính chất hạt (hiệu ứng quang điện).</li>
</ul>
<p><strong>Các loại bức xạ điện từ phổ biến:</strong></p>
<ul>
<li>Sóng vô tuyến: Sử dụng trong truyền thông, radio, truyền hình.</li>
<li>Vi sóng: Sử dụng trong lò vi sóng, radar.</li>
<li>Tia hồng ngoại: Tạo ra nhiệt, được sử dụng trong điều khiển từ xa, thiết bị nhìn đêm.</li>
<li>Ánh sáng khả kiến: Ánh sáng mà mắt người có thể nhìn thấy.</li>
<li>Tia tử ngoại: Sử dụng trong khử trùng, sản xuất vitamin D.</li>
<li>Tia X: Sử dụng trong y tế để chụp X-quang.</li>
<li>Tia gamma: Có năng lượng rất cao, được sử dụng trong điều trị ung thư.</li>
</ul>
<p><strong>Ứng dụng của bức xạ điện từ:</strong> Bức xạ điện từ có rất nhiều ứng dụng trong cuộc sống hàng ngày và trong các lĩnh vực khoa học, công nghệ. Ví dụ:</p>
<ul>
<li>Truyền thông: Điện thoại, truyền hình, internet.</li>
<li>Y tế: Chụp X-quang, điều trị ung thư.</li>
<li>Công nghiệp: Hàn, cắt kim loại.</li>
<li>Quân sự: Radar, sóng âm.</li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tính Không Giao Hoán (Non-Commutativity) trong Toán học
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Tính không giao hoán là một khái niệm quan trọng trong toán học, đặc biệt trong đại số trừu tượng. Nó mô tả một tính chất của các phép toán, khi mà việc đổi chỗ các đối tượng trong phép toán đó lại cho kết quả khác nhau.</p>
<p><strong>Ví dụ minh họa:</strong></p>
<ul>
<li>Phép nhân số: Phép nhân số là một phép toán giao hoán. Ví dụ: <code>2 x 3 = 3 x 2</code>.</li>
<li>Phép trừ số: Phép trừ số không phải là phép toán giao hoán. Ví dụ: <code>5 - 3 ≠ 3 - 5</code>.</li>
<li>Phép nhân ma trận: Phép nhân ma trận nói chung không giao hoán. Tức là, nếu A và B là hai ma trận, thì thường <code>AB ≠ BA</code>.</li>
</ul>
<p><strong>Ứng dụng của tính không giao hoán:</strong></p>
<ul>
<li>Đại số trừu tượng: Tính không giao hoán xuất hiện trong nhiều cấu trúc đại số như nhóm, vành, trường.</li>
<li>Vật lý lượng tử: Trong cơ học lượng tử, các toán tử đại diện cho các đại lượng vật lý thường không giao hoán. Điều này dẫn đến nguyên lý bất định Heisenberg, một trong những nguyên lý cơ bản của vật lý lượng tử.</li>
<li>Khoa học máy tính: Tính không giao hoán xuất hiện trong các cấu trúc dữ liệu như hàng đợi, ngăn xếp, và trong các ngôn ngữ lập trình.</li>
</ul>
<p><strong>Ý nghĩa của tính không giao hoán:</strong></p>
<ul>
<li>Thứ tự quan trọng: Khi thực hiện các phép toán không giao hoán, thứ tự các đối tượng đóng vai trò quyết định trong việc xác định kết quả.</li>
<li>Mô hình hóa các hệ thống phức tạp: Tính không giao hoán cho phép mô hình hóa các hệ thống phức tạp trong đó các yếu tố tương tác với nhau theo một cách không đối xứng.</li>
</ul>
<p>Ví dụ cụ thể trong vật lý lượng tử:</p>
<p>Trong cơ học lượng tử, vị trí (x) và động lượng (p) của một hạt là hai đại lượng vật lý không giao hoán. Quan hệ không giao hoán này được biểu diễn bởi công thức:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Bx,%20p%5D%20=%20xp%20-%20px%20=%20i%C4%A7"></p>
<p>Trong đó:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?x"> là toán tử vị trí</li>
<li><img src="https://latex.codecogs.com/png.latex?p"> là toán tử động lượng</li>
<li><img src="https://latex.codecogs.com/png.latex?%C4%A7"> là hằng số Planck rút gọn</li>
<li><img src="https://latex.codecogs.com/png.latex?i"> là đơn vị ảo</li>
</ul>
<p>Công thức trên cho thấy, việc đo vị trí và động lượng của một hạt cùng một lúc sẽ có độ chính xác bị giới hạn. Đây chính là nội dung của nguyên lý bất định Heisenberg.</p>
<p><strong>Tóm lại</strong>, tính không giao hoán là một khái niệm quan trọng trong toán học và vật lý, giúp chúng ta hiểu rõ hơn về sự tương tác giữa các đối tượng và các hệ thống phức tạp.</p>
</div>
</div>
</div>
</section>
<section id="stability-of-matter" class="level1">
<h1>Stability of Matter</h1>
<p>nếu nguyên tử là ổn định, điều gì xảy ra nếu chúng ta assemble chúng lại với nhau, như 10^30 nguyên tử trong 1 viên gạch. việc 1 viên gạch tại sao lớn như vậy, chứ không thể đặc hơn, khó có thể coi là hiển nhiên, và uncertainty principle ko thể tự mình giải thích.</p>
<p>extensitivity: electrons là fermions, thỏa Pauli exclusion principle.</p>
<p>why a brick is a brick?</p>
<p>book recommendation: “Stability of Matter in Quantum Mechanics”</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Fermions and Bosons
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>These are two fundamental types of particles in physics. They differ in their quantum properties.</p>
<ul>
<li><strong>Fermions</strong>: These particles obey the Pauli Exclusion Principle, which means that no two identical fermions can occupy the same quantum state simultaneously. Examples of fermions include electrons, protons, and neutrons. &nbsp;</li>
<li><strong>Bosons</strong>: Unlike fermions, multiple bosons can occupy the same quantum state. This property is essential for phenomena like superconductivity and laser light. Examples of bosons include photons (particles of light) and the Higgs boson.</li>
</ul>
</div>
</div>
</div>
</section>
<section id="gravitational-in-stability-of-stars" class="level1">
<h1>Gravitational (In) Stability of Stars</h1>
<p>scale up to Stars, where the gravitation becomes a major factor -&gt; can be taken in to account.</p>
<p>Chandrasekhar limit - for the maximun mass of stable white dwarf (amounts roughly 1.4 solar masses)</p>
<p>Schrodinger equation can be applied to a huge range of scalces, from atoms to stars!</p>
</section>
<section id="phase-transitions" class="level1">
<h1>Phase Transitions</h1>
<p>phương trình cơ bản có dạng đơn giản, nhưng lời giải có thể ở rất nhiều dạng do có rất nhiều biến và tham số.</p>
<p>ví dụ như nước, có thể khí, lỏng và rắn - phase transitions.</p>
</section>
<section id="more-phase-transitions" class="level1">
<h1>More Phase Transitions</h1>
<ul>
<li>magnetism;</li>
<li>traffic jams: hociminh city, tiny change can make huge effect?;</li>
<li>superfluidity (siêu chảy, một trạng thái “kỳ lạ” - exotic của vật chất);</li>
<li>superconductivity (siêu dẫn).</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
superfluidity
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p><strong>Định nghĩa siêu chảy</strong>: Siêu chảy là trạng thái của vật chất, trong đó chất lỏng có độ nhớt bằng không và chảy mà không có ma sát. Điều này xảy ra ở nhiệt độ cực thấp, gần bằng không tuyệt đối.</p></li>
<li><p><strong>Đặc điểm chính</strong>:</p></li>
</ol>
<ul>
<li>Không có ma sát nội: Chất lỏng siêu chảy có thể chảy mà không mất năng lượng.</li>
<li>Hiệu ứng phun tia: Có thể leo lên thành bình chứa.</li>
<li>Dẫn nhiệt vô hạn: Truyền nhiệt cực kỳ hiệu quả.</li>
<li>Xoáy lượng tử: Tạo ra các xoáy với động lượng góc lượng tử hóa.</li>
</ul>
<ol start="3" type="1">
<li><strong>Ví dụ về chất siêu chảy</strong>:</li>
</ol>
<ul>
<li>Helium-4 lỏng dưới 2.17 K (điểm lambda).</li>
<li>Helium-3 lỏng dưới khoảng 0.0025 K.</li>
</ul>
<p><strong>Tại sao gọi là “exotic” (kỳ lạ):</strong></p>
<ol type="a">
<li><strong>Hiếm gặp trong tự nhiên</strong>:</li>
</ol>
<ul>
<li>Chỉ xuất hiện ở nhiệt độ cực thấp, hiếm khi gặp trong điều kiện tự nhiên.</li>
</ul>
<ol start="2" type="a">
<li><strong>Vi phạm trực giác thông thường</strong>:</li>
</ol>
<ul>
<li>Chảy mà không có ma sát, trái ngược với hầu hết các chất lỏng thông thường.</li>
<li>Có thể “leo” ra khỏi bình chứa, dường như vi phạm trọng lực.</li>
</ul>
<ol start="3" type="a">
<li><strong>Hành vi lượng tử vĩ mô</strong>:</li>
</ol>
<ul>
<li>Hiển thị các hiệu ứng lượng tử ở quy mô có thể quan sát được.</li>
<li>Thể hiện tính chất sóng-hạt của vật chất ở mức độ lớn.</li>
</ul>
<ol start="4" type="a">
<li><strong>Liên quan đến vật lý cơ bản</strong>:</li>
</ol>
<ul>
<li>Nghiên cứu siêu chảy giúp hiểu sâu hơn về cơ học lượng tử và vật lý trạng thái ngưng tụ.</li>
</ul>
<ol start="5" type="a">
<li><strong>Ứng dụng tiềm năng độc đáo</strong>:</li>
</ol>
<ul>
<li>Có thể được sử dụng trong các thiết bị làm lạnh siêu dẫn và các ứng dụng công nghệ cao khác.</li>
</ul>
<p>Tóm lại, siêu chảy được coi là “exotic” vì nó thể hiện các tính chất kỳ lạ, hiếm gặp và vi phạm trực giác thông thường về cách chất lỏng hoạt động. Nó là một ví dụ về cách các hiệu ứng lượng tử có thể biểu hiện ở quy mô vĩ mô, làm cho nó trở thành một chủ đề thú vị và quan trọng trong vật lý hiện đại.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
superconductivity
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li><p><strong>Định nghĩa</strong>: Siêu dẫn là trạng thái của vật chất trong đó điện trở suất của vật liệu giảm xuống bằng không và từ trường bị đẩy ra khỏi vật liệu (hiệu ứng Meissner) khi nhiệt độ giảm xuống dưới một nhiệt độ tới hạn nhất định.</p></li>
<li><p>Đặc điểm chính:</p></li>
</ol>
<ol type="a">
<li><p><strong>Điện trở bằng không</strong>: Dòng điện có thể chảy mà không mất năng lượng.</p></li>
<li><p><strong>Hiệu ứng Meissner</strong>: Từ trường bị đẩy ra khỏi vật liệu siêu dẫn.</p></li>
<li><p><strong>Nhiệt độ tới hạn (Tc)</strong>: Nhiệt độ mà dưới đó vật liệu trở thành siêu dẫn.</p></li>
</ol>
<ol start="3" type="1">
<li><strong>Loại siêu dẫn</strong>:</li>
</ol>
<ol type="a">
<li><p>Siêu dẫn loại I: Thường là kim loại nguyên chất, chuyển đột ngột sang trạng thái siêu dẫn.</p></li>
<li><p>Siêu dẫn loại II: Thường là hợp kim hoặc hợp chất phức tạp, có hai nhiệt độ tới hạn và có thể duy trì trạng thái siêu dẫn trong từ trường mạnh hơn.</p></li>
</ol>
<ol start="4" type="1">
<li><strong>Cơ chế</strong>:</li>
</ol>
<ul>
<li>Lý thuyết BCS (Bardeen-Cooper-Schrieffer): Giải thích siêu dẫn thông qua sự hình thành các cặp Cooper (electron ghép đôi).</li>
<li>Siêu dẫn nhiệt độ cao: Cơ chế chưa được hiểu đầy đủ, là một lĩnh vực nghiên cứu đang phát triển.</li>
</ul>
<ol start="5" type="1">
<li><strong>Ứng dụng</strong>:</li>
</ol>
<ul>
<li>Nam châm siêu dẫn mạnh cho MRI và máy gia tốc hạt.</li>
<li>Máy dò SQUID (Superconducting Quantum Interference Device) để đo từ trường cực nhỏ.</li>
<li>Tiềm năng trong máy tính lượng tử và truyền tải điện không tổn thất.</li>
</ul>
<ol start="6" type="1">
<li><strong>Thách thức</strong>:</li>
</ol>
<ul>
<li>Tìm kiếm vật liệu siêu dẫn ở nhiệt độ cao hơn, lý tưởng là ở nhiệt độ phòng.</li>
<li>Hiểu rõ hơn về cơ chế của siêu dẫn nhiệt độ cao.</li>
</ul>
<ol start="7" type="1">
<li><strong>Lịch sử và phát triển</strong>:</li>
</ol>
<ul>
<li>Phát hiện năm 1911 bởi Heike Kamerlingh Onnes trong thủy ngân ở 4.2K.</li>
<li>Lý thuyết BCS được đề xuất năm 1957.</li>
<li>Siêu dẫn nhiệt độ cao được phát hiện năm 1986 bởi Bednorz và Müller.</li>
</ul>
<p>Siêu dẫn là một lĩnh vực nghiên cứu đang phát triển mạnh mẽ trong vật lý hiện đại, với tiềm năng ứng dụng rộng rãi trong công nghệ và kỹ thuật.</p>
</div>
</div>
</div>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<ul>
<li>toán không phải là ngôn ngữ vũ trụ, nhưng rất mạnh mẽ để giải thích tự nhiên;</li>
<li>các luật vật lý cơ bản được diễn giải bằng ngôn ngữ toán, rất thú ví là nhiều định luật vật lý cơ bản lại giải thích được rất nhiều hiện tượng khác nhau, như chuyển thể;</li>
<li>việc hiểu các định luật vật lý tạo ra các tiến bộ công nghệ;</li>
<li>mục tiêu của toán vật lý là phát triển các công cụ toán để hiểu các hệ quả của các định luật vật lý cơ bản và khai phá các cơ chế cũng như nguyên lý đằng sau các hiện tượng quan sát được;</li>
<li>một trong các thành tựu của toán vật lý chính là nghiên cứu về tính ổn định của vật chất.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-08-08-note-muln/summary.png" class="img-fluid figure-img"></p>
<figcaption>summary</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="qa-and-outro" class="level1">
<h1>q&amp;a and outro</h1>
<ol type="1">
<li>hamiltonian mechanics;</li>
<li>non-commutativity;</li>
<li>fermions, fundamental particle, bosons, 4-dimensions space;</li>
<li>schrodinger equation, lagrangian;</li>
<li>phase transitions, is this similar to the butterfly effect (notion of chaos)? eg double pendulum;</li>
<li>when was quantum mechanics been cared;</li>
<li>in classical physics, can predict trajectory; but why in quantum mechanics, we can not. (electron does not have definite position, read more on bell inequalities);</li>
<li>given the particles moving very fast, will they exchange the energy (read more on kinetic energy);</li>
<li>standing wave.</li>
</ol>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-08-08-note-muln/my_brain_is_full.png" class="img-fluid figure-img"></p>
<figcaption>bye bye</figcaption>
</figure>
</div>
</div>
</div>
</div>


<!-- -->

</section>

 ]]></description>
  <category>math</category>
  <guid>https://lktuan.github.io/blog/2024-08-08-note-muln/</guid>
  <pubDate>Wed, 07 Aug 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-08-08-note-muln/rs_portrait.png" medium="image" type="image/png" height="101" width="144"/>
</item>
<item>
  <title>Một số khuôn mẫu tư duy trong Brazilian Jiu-jitsu</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-08-06-bjj-mental-models/</link>
  <description><![CDATA[ 





<p><strong>lược dịch</strong> và/hoặc <strong>tóm tắt</strong> cho khóa học cũng “Mechanic Models of BJJ: A Crash Course” của Steve Kwan.</p>
<section id="theory-of-alignment" class="level1">
<h1>1. <a href="https://www.bjjmentalmodels.com/theory-of-alignment/">theory of alignment</a></h1>
<p>là lý thuyết tối cao của Jiu-jitsu, bao gồm ba yếu tố:</p>
<ol type="1">
<li>posture - tư thế: position một cách hiệu quả cổ (neck) và cột sống (spine);</li>
<li>structure - cấu trúc: position một cách hiệu quả tay (arms) và chân (legs);</li>
<li>base - cở sở: khả năng hấp thụ (absorb) hoặc tạo ra lực liên quan để đạt được mục tiêu.</li>
</ol>
<p>để đạt được alignment hiệu quả, luôn ghi nhớ hai mục tiêu sau:</p>
<ol type="1">
<li>maintain your alignment;</li>
<li>break your opponent’s alignment;</li>
<li>do not proceed 2. if you are failing at 1.</li>
</ol>
<p>trong đào tạo, với trọng số của ba yếu tố như nhau, có thể “chấm điểm” (alignment scorecard) với thang từ 0-3 cho mỗi người chơi. điểm càng cao hơn sẽ là dấu hiệu cho việc bạn có một cơ hội tốt để phá vỡ alignment của đối thủ. ví dụ, trong closed guard, bạn ở dưới, và không ai đang khống chế đối phương bằng một hand grip:</p>
<p>bạn sẽ có 3 điểm nếu:</p>
<ul>
<li><strong>posture</strong>: cổ (neck) và cột sống (spine) ở vị trí tự nhiên, thẳng, không bị kiểm soát. hông (hip) được tự do di chuyển;</li>
<li><strong>structure</strong>: tay (hands) và chân (legs) tự do tạo ra các grips và khung - frames;</li>
<li><strong>base</strong>: bạn có thể tạo (gen) hoặc hấp thụ lực (absord) nhờ vai và vị trí đặt chân.</li>
</ul>
<p>đối thủ sẽ có 3 điểm nếu, tương ứng:</p>
<ul>
<li>cổ và cột sống thẳng, nằm chính diện (vertical, centre) giữa cơ thể bạn;</li>
<li>tay của họ không bị kiểm soát một cách chủ động;</li>
<li>họ có thể chống lại lực từ bạn với cột sống thẳng, vai mở. họ có khả năng break guard khi ngồi - dùng tay, hoặc đứng lên.</li>
</ul>
<p>cả hai đều không có lợi thế đáng kể và nỗ lực submission sẽ dẫn đến escape hoặc reversal.</p>
</section>
<section id="core-mechanics" class="level1 page-columns page-full">
<h1>2. <a href="https://www.bjjmentalmodels.com/core-mechanics/">core mechanics</a></h1>
<p>nếu tiếp cận BJJ theo technique approach, sẽ có rất nhiều kỹ thuật cũng các biến thể (variations) mà bạn không thể khi nhớ hết. <em>may mắn là</em>, các kỹ thuật của BJJ đều là sự kết hợp của 6 cơ chế cốt lõi (core mechanics) sau đây:</p>
<ol type="1">
<li><strong>frame (khung)</strong>:</li>
</ol>
<ul>
<li>là concept phòng thủ quan trọng nhất trong BJJ, nó tạo ra một khung bảo vệ (shield) sử dụng những phần cơ thể cứng (hard) hoặc nhiều xương (bony), thường được sử dụng cho người ở vị trí dưới (bottom);</li>
<li>frame không phụ thuộc vào cơ bắp, mà là sự căn chỉnh hệ xương. bạn không muốn dùng áp lực đẩy đối thủ ra xa, mà là dùng cấu trúc xương để giữ đối thủ tại một khoảng cách nhất định, tạo không gian để bản thân di chuyển. frame tốt thì phải chắc chắn và không sử dụng quá nhiều sức lực ;</li>
<li>không nên frame với các khớp (joints) dễ bị đối phương khai thác: ví dụ dùng hai tay để đẩy đối thủ, phần cổ (wrist) và khuỷu tay yếu và rất dễ bị counter. tương tự, khi frame bằng chân, bạn nên sử dụng gối (knees) và ống chân (shins) nhờ diện tích lớn, dùng bàn chân (feet) có lợi thế về khoảng cách tạo được tuy nhiên rất dễ bị khai thác.</li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">đọc thêm về <a href="https://bjjmentalmodels.com/solid-frames/">solid frame</a></span></div><ol start="2" type="1">
<li><strong>levers (đòn bẩy)</strong>:</li>
</ol>
<ul>
<li>đòn bẩy là phép bội lực rất hiệu quả để tạo sơ hở (openings) và tấn công và kiểm soát đối thủ;</li>
<li>theo thứ tự từ khỏe đến yếu nhất, 3 công cụ đòn bẩy trên cơ thể bạn chính là <em>chân, tay, và đầu</em>; </li>
<li>đầu (head) thường được sử dụng để break tư thế (posture) của đối thủ, trong khi tay (arms) và chân (legs) thường được sử dụng để tấn công cấu trúc (structure);</li>
<li>mỗi chi bạn đều có 3 khớp (joints) chính: với tay là vai (shoulders), khuỷu tay (elbows), cổ tay (wrist), với chân là hông (hip), đầu gối (knee), và cổ chân (ankles);</li>
<li>để kiểm soát tốt tay hoặc chân đối phương bạn cần kiểm soát được ít nhất 2/3 khớp; trên trục tay, chân, khớp tạo ra hiệu ứng đòn bẩy tốt nhất là khớp ngoài cùng; </li>
<li>lúc bạn tấn công, đòn bẩy cho phép bạn tiến tới các vị trí kiểm soát và submission, suy cho cùng thì trong mọi submission hợp lệ, bạn luôn phải tận dụng, kiểm soát được ít nhất một đòn bẩy của đối phương; </li>
<li>khi không ai có ưu thế, người đầu tiên kiểm soát được lever của đối phương sẽ kiểm soát trấn đấu; </li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">đây chính là <a href="https://www.bjjmentalmodels.com/anatomic-hierarchy/">anatomic hierarchy</a></span><span class="margin-aside">đọc thêm về <a href="https://bjjmentalmodels.com/3-joint-rule/">3-joint rule</a></span><span class="margin-aside">đọc thêm về <a href="https://bjjmentalmodels.com/isolate-a-single-target/">isolate a single target</a></span><span class="margin-aside">đọc thêm về <a href="https://bjjmentalmodels.com/grips-dictate-position/">grips dictate position</a></span></div><ol start="3" type="1">
<li><strong>wedges (nêm/chêm)</strong>:</li>
</ol>
<p>có hai kiểu nêm:</p>
<ul>
<li>nêm chặn (blocking wedges): cố định một phần cơ thể đối thủ;</li>
<li>nêm cạy (prying wedge): giúp mở khung (frame) của đối thủ.</li>
</ul>
<p>một số ví dụ:</p>
<ul>
<li>cho tay vào hông (hip) của đối phương để pass guard, không cho đối thủ re-guard chính là ví dụ của nêm chặn;</li>
<li>đòn cắt gối để pass guard (knee cut pass), khi bạn cố đưa gối vào mở hai chân đối thủ, chính là ví dụ của nêm cạy.</li>
</ul>
<p>nêm và đòn bẩy thường đi với nhau, bạn cần dùng nêm để sử dụng đòn bẩy hiệu quả hơn: <strong>nêm một đầu, đòn bẩy một đầu</strong> giúp cố định tốt hơn. gồm hai schemes:</p>
<ul>
<li>hai đánh một: two-on-one (two limbs controlling one lever);</li>
<li>bốn đánh một: four-on-one (four limbs controlling one lever).</li>
</ul>
<ol start="4" type="1">
<li><strong>clamps (kẹp)</strong>:</li>
</ol>
<div class="page-columns page-full"><p>kẹp thường được sử dụng khi bạn đã khóa (lock) được một phần cơ thể của đối thủ trong một vòng khép kín (<strong>closed circuit</strong>), siết chặt hai tay và hai chân để tạo ra một chuối động lực học. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://bjjmentalmodels.com/kinetic-chains/">kinetic chains</a></span></div></div>
<p>cơ chế kiểm soát này như một chiếc neo làm chậm đối thủ, kết dính cơ thể bạn với họ.</p>
<ol start="5" type="1">
<li><strong>hooks (móc)</strong>:</li>
</ol>
<div class="page-columns page-full"><p>các móc được tạo ra từ phần cuối mỗi chi (ND: bàn chân, bàn tay). tuy nhiên người ta thường chỉ hook với phần mu bàn chân (instep ~ shoelace area), nó được gọi là butterfly hook. móc tạo ra các chuyển động, lực kéo từ vị trí dưới, nó yêu cầu bạn phải kiểm soát được không gian phía trong giữa bạn và đối thủ. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thêm <a href="https://bjjmentalmodels.com/inside-channel-control/">inside channel</a></span></div></div>
<p>hook nhìn chung cũng yếu, bởi vì bạn kiểm soát từ bên trong (không phải bên ngoài và tạo một vòng <strong>khép kín</strong>). nó sẽ bị vô hiệu hóa nếu đối phương luồn tay thoát vị trí (pummels) hoặc thoát ly, gỡ khóa (disengages).</p>
<ol start="6" type="1">
<li><strong>posts (trụ)</strong>:</li>
</ol>
<p>post (trụ) được dùng để duy trì base (cơ sở). mindset về giữ vững trụ cho phép sự linh hoạt và chuyển động hông (hip) khi ở vị trí dưới, hay chống bị quét, lật (sweep) khi ở vị trí trên/đứng.</p>
<div class="page-columns page-full"><p>khí sử dụng post ở vị trí dưới, điều quan trọng là trụ phải cùng phương với vector lực tới, nếu không post của bạn sẽ support cho trọng lượng của đối thủ. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">xem thên <a href="https://www.bjjmentalmodels.com/force-vectors/">force vectors</a></span></div></div>
</section>
<section id="anatomic-hierarchy" class="level1">
<h1>3. <a href="https://bjjmentalmodels.com/anatomic-hierarchy/">anatomic hierarchy</a></h1>
<p>human body has 6 areas</p>
<ol type="1">
<li>core;</li>
<li>2 legs;</li>
<li>2 arms;</li>
<li>head.</li>
</ol>
</section>
<section id="type-of-guards" class="level1">
<h1>4. <a href="https://bjjmentalmodels.com/types-of-guard/">type of guards</a></h1>
<ol type="1">
<li>hook-based;</li>
<li>clamp-based;</li>
<li>frame-based;</li>
<li>hybrid.</li>
</ol>
</section>
<section id="breaking-mechanics" class="level1">
<h1>5. <a href="https://bjjmentalmodels.com/breaking-mechanics/">breaking mechanics</a></h1>
<ol type="1">
<li>isolate a lever;</li>
<li>prevent predictable defenses;</li>
<li>maximize leverage;</li>
<li>apply overwhelming force.</li>
</ol>
</section>
<section id="choking-mechanics" class="level1">
<h1>6. <a href="https://bjjmentalmodels.com/choking-mechanics/">choking mechanics</a></h1>
<ol type="1">
<li>air chokes:</li>
<li>blood chokes;</li>
<li>cranks;</li>
<li>compression chokes;</li>
<li>hybrid chokes.</li>
</ol>
</section>
<section id="ratchet-control" class="level1">
<h1>7. <a href="https://bjjmentalmodels.com/ratchet-control/">ratchet control</a></h1>
</section>
<section id="controlled-breathing" class="level1">
<h1>8. <a href="https://bjjmentalmodels.com/controlled-breathing/">controlled breathing</a></h1>
</section>
<section id="staying-loose" class="level1">
<h1>9. <a href="https://bjjmentalmodels.com/staying-loose/">staying loose</a></h1>
</section>
<section id="limb-coiling" class="level1">
<h1>10. <a href="https://bjjmentalmodels.com/limb-coiling/">limb coiling</a></h1>
</section>
<section id="elbow-knee-connection" class="level1">
<h1>11. <a href="https://bjjmentalmodels.com/elbow-knee-connection/">elbow-knee connection</a></h1>
</section>
<section id="solid-frames" class="level1">
<h1>12. <a href="https://bjjmentalmodels.com/solid-frames/">solid frames</a></h1>
</section>
<section id="kinetic-chains" class="level1">
<h1>13. <a href="https://bjjmentalmodels.com/kinetic-chains/">kinetic chains</a></h1>
</section>
<section id="ody-tethering" class="level1">
<h1>14. <a href="https://bjjmentalmodels.com/body-tethering/">ody tethering</a></h1>
</section>
<section id="inside-channel-control" class="level1">
<h1>15. <a href="https://bjjmentalmodels.com/inside-channel-control/">inside channel control</a></h1>
</section>
<section id="single-vs.-double-level-control" class="level1">
<h1>16. <a href="https://bjjmentalmodels.com/single-vs-double-lever-control/">single vs.&nbsp;double level control</a></h1>
</section>
<section id="overwhelming-force" class="level1">
<h1>17. <a href="https://bjjmentalmodels.com/overwhelming-force/">overwhelming force</a></h1>
</section>
<section id="surface-area" class="level1">
<h1>18. <a href="https://bjjmentalmodels.com/surface-area/">surface area</a></h1>
<p><a href="https://www.youtube.com/watch?v=XGZ-0ZoFqKk" class="uri">https://www.youtube.com/watch?v=XGZ-0ZoFqKk</a></p>


<!-- -->

</section>

 ]]></description>
  <category>bjj</category>
  <guid>https://lktuan.github.io/blog/2024-08-06-bjj-mental-models/</guid>
  <pubDate>Mon, 05 Aug 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-08-06-bjj-mental-models/bjj_mental_models.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Now I know docker init is a thing</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-30-docker-init/</link>
  <description><![CDATA[ 





<p>TIL that Docker has an <a href="https://docs.docker.com/language/python/containerize/">example</a> for containerizing Python apps. It uses a simple <a href="https://fastapi.tiangolo.com/">FastAPI</a> example for demonstration. We can download the project as below:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/estebanx64/python-docker-example</span></code></pre></div>
<p>After navigating to our project, we can easily set up our project for containerization with <code>docker init</code>. This will create:</p>
<ul>
<li><code>.dockerignore</code></li>
<li><code>Dockerfile</code></li>
<li><code>compose.yaml</code></li>
<li><code>README.Docker.md</code></li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> init</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Welcome</span> to the Docker Init CLI!</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">This</span> utility will walk you through creating the following files with sensible defaults for your project:</span>
<span id="cb2-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> .dockerignore</span>
<span id="cb2-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Dockerfile</span>
<span id="cb2-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> compose.yaml</span>
<span id="cb2-9">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> README.Docker.md</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Let</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s get started!</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What application platform does your project use? Python</span></span>
<span id="cb2-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What version of Python do you want to use? (3.11.4)</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What version of Python do you want to use? 3.11.4</span></span>
<span id="cb2-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What port do you want your app to listen on? (8000)</span></span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What port do you want your app to listen on? 8000</span></span>
<span id="cb2-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What is the command you use to run your app? (uvicorn '</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">app:app</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' --host=0.0.0.0 --port=8000)</span></span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? What is the command you use to run your app? uvicorn '</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">app:app</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' --host=0.0.0.0 --port=8000</span></span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✔ Created → .dockerignore</span></span>
<span id="cb2-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✔ Created → Dockerfile</span></span>
<span id="cb2-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✔ Created → compose.yaml</span></span>
<span id="cb2-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">✔ Created → README.Docker.md</span></span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">→ Your Docker files are ready!</span></span>
<span id="cb2-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Review your Docker files and tailor them to your application.</span></span>
<span id="cb2-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  Consult README.Docker.md for information about using the generated files.</span></span>
<span id="cb2-32"></span>
<span id="cb2-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">! Warning → Make sure your requirements.txt contains an entry for the uvicorn package, which is required to run your application.</span></span>
<span id="cb2-34"></span>
<span id="cb2-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">What'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">s</span> next<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span>
<span id="cb2-36">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Start</span> your application by running → docker compose up <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build</span></span>
<span id="cb2-37">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Your</span> application will be available at http://localhost:8000</span></code></pre></div>
<p>I can access the application right after running <code>docker compose up --build</code>. The image buidling process was fast, and image size was only <code>203.21MB</code>.</p>
<p>Let’s take a look at the <code>Dockerfile</code>. IMHO, this is not yet a optimal Dockerized Python project:</p>
<ul>
<li>Lack off a dependency management tool (for e.g, <code>pipenv</code>, <code>poetry</code> both are good, production-ready);</li>
<li>This is single-step builder. Should we split it to <code>dependencies</code> and <code>runtime</code> steps, which will limit the objects in the <code>runtime</code> image to only those needed to run the application? </li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">further reading, <a href="https://sourcery.ai/blog/python-docker/">“A perfect way to Dockerize your Pipenv Python application”</a></span></div><p>I do see some good practices here that we should run our apps in a non-privileged user rather than root as well as <em>mount cache and bind</em>, using Docker’s BuildKit feature, which allows more advanced mounting capabilities during build time:</p>
<ol type="1">
<li>first <code>--mount=type=cache,target=/root/.cache/pip</code> option:</li>
</ol>
<ul>
<li>This creates a cache mount for pip’s cache directory;</li>
<li>It speeds up subsequent builds by reusing cached pip packages;</li>
<li>The cache persists between builds, saving time and bandwidth.</li>
</ul>
<ol start="2" type="1">
<li>second <code>--mount=type=bind,source=requirements.txt,target=requirements.txt</code> option:</li>
</ol>
<ul>
<li>This creates a bind mount for the <code>requirements.txt</code> file;</li>
<li>It allows access to the <code>requirements.txt</code> file without copying it into the image layer;</li>
<li>This is useful for keeping the image size smaller and allowing changes to <code>requirements.txt</code> without rebuilding all layers.</li>
</ul>
<p>In conclusion, benefits are:</p>
<ol type="1">
<li><strong>Faster builds</strong>: By using a cache mount for pip, subsequent builds can reuse cached packages, significantly speeding up the process.</li>
<li><strong>Smaller image size</strong>: The bind mount for <code>requirements.txt</code> means the file doesn’t need to be copied into the image, keeping the image size smaller.</li>
<li><strong>Better caching</strong>: Changes to <code>requirements.txt</code> don’t invalidate the entire layer cache, only the parts that have changed.</li>
<li><strong>Separation of concerns</strong>: Downloading dependencies is done as a separate step, which can be beneficial for Docker’s layer caching mechanism.</li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># syntax=docker/dockerfile:1</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Comments are provided throughout this file to help you get started.</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you need more help, visit the Dockerfile reference guide at</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://docs.docker.com/go/dockerfile-reference/</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ARG</span> PYTHON_VERSION=3.11.4</span>
<span id="cb3-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FROM</span> python:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${PYTHON_VERSION}</span>-slim as base</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prevents Python from writing pyc files.</span></span>
<span id="cb3-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ENV</span> PYTHONDONTWRITEBYTECODE=1</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keeps Python from buffering stdout and stderr to avoid situations where</span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the application crashes without emitting any logs due to buffering.</span></span>
<span id="cb3-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ENV</span> PYTHONUNBUFFERED=1</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a non-privileged user that the app will run under.</span></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># See https://docs.docker.com/go/dockerfile-user-best-practices/</span></span>
<span id="cb3-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ARG</span> UID=10001</span>
<span id="cb3-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> adduser <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--disabled-password</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--gecos</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--home</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/nonexistent"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--shell</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/sbin/nologin"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-create-home</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--uid</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${UID}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-31">    appuser</span>
<span id="cb3-32"></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download dependencies as a separate step to take advantage of Docker's caching.</span></span>
<span id="cb3-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.</span></span>
<span id="cb3-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Leverage a bind mount to requirements.txt to avoid having to copy them into</span></span>
<span id="cb3-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># into this layer.</span></span>
<span id="cb3-37"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mount</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>type=cache,target=/root/.cache/pip <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mount</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>type=bind,source=requirements.txt,target=requirements.txt <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-39">    python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span>
<span id="cb3-40"></span>
<span id="cb3-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Switch to the non-privileged user to run the application.</span></span>
<span id="cb3-42"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">USER</span> appuser</span>
<span id="cb3-43"></span>
<span id="cb3-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy the source code into the container.</span></span>
<span id="cb3-45"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">COPY</span> . .</span>
<span id="cb3-46"></span>
<span id="cb3-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Expose the port that the application listens on.</span></span>
<span id="cb3-48"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">EXPOSE</span> 8000</span>
<span id="cb3-49"></span>
<span id="cb3-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the application.</span></span>
<span id="cb3-51"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CMD</span> uvicorn <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'app:app'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--host</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>0.0.0.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--port</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>8000</span></code></pre></div>
<p>Happy coding!</p>


<!-- -->


 ]]></description>
  <category>docker</category>
  <category>python</category>
  <guid>https://lktuan.github.io/blog/2024-07-30-docker-init/</guid>
  <pubDate>Mon, 29 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-30-docker-init/python_docker.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>BJJ Beginners Guide</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/</link>
  <description><![CDATA[ 





<p>Đây là bài (lược) dịch từ beginners guide của Reddit community <code>r/bjj</code>. Link gốc bài viết: <a href="https://www.reddit.com/r/bjj/wiki/beginners-guide/" class="uri">https://www.reddit.com/r/bjj/wiki/beginners-guide/</a>. Một số thuật ngữ mình có thể sẽ để nguyên bản Tiếng Anh, hoặc để kèm trong ngoặc tròn <code>()</code>, chú thích (nếu có) sẽ được đặt trong dấu ngoặc tròn sau “ND”.</p>
<p>Mục đích đánh giá lại những gì mình đạt được sau 6 tháng theo đuổi BJJ.</p>
<section id="hướng-dẫn-jiu-jitsu-cho-người-mới-bắt-đầu" class="level1">
<h1>Hướng dẫn Jiu-jitsu cho người mới bắt đầu</h1>
<p>Chào mừng đến với Brazil Jiujitsu và chào mừng đến với <code>r/bjj</code>! Đây là hướng dẫn tổng hợp dành cho người mới để bắt đầu hành trình Jiu-jitsu của bạn.</p>
<p>Chúc may mắn, và hãy tử tế!</p>
<p>Bạn có đề xuất, cải tiến hoặc nhận xét cho bài viết này? Để nó ở <a href="https://docs.google.com/forms/d/e/1FAIpQLSclF8d-uXVmPVQ3EoV3K-SexnoWbefI5y6lofkSUNI68RpDCQ/viewform">đây</a>.</p>
</section>
<section id="bjj-là-gì" class="level1">
<h1>BJJ là gì?</h1>
<p>Brazilian Jiu-jitsu, đôi lúc gọi là Jiu-jitsu (ND: 八四柔术 Nhu thuật Brazin) là một môn võ kế thừa từ Judo (ND: 柔道 Nhu đạo Nhật bản). Nó:</p>
<ul>
<li>Đối kháng (contact), nghĩa là bạn cần tranh giành ưu thế, chiến thắng với người khác;</li>
<li>Tay không (bare-handed), nghĩa là không vũ khí nào được chấp nhận;</li>
<li>Dựa vào vật lộn (grappling-based), phương thức chiến đấu là vật (grappling, wrestling), đấm (punching) và đá (kicking) là không được phép;</li>
<li>Submission-based (ND: chưa thể dịch từ này), nghĩa là mục tiêu cần đạt được là bắt đối thủ đầu hàng (submission) thông qua một đòn siết nghẹt (choke) hoặc đe dọa tổn thương tới các khớp của họ, hơn là chỉ đơn thuần là chiếm vị trí ưu thế (positioning) hoặc ghim chặt đối thủ (pinning).</li>
</ul>
<p>BJJ khác với Judo ở chỗ nó thiên về vật lộn / địa chiến (ground grappling), trong khi Judo nhấn mạnh về quăng (throws) và quật ngã (takedowns) từ vị trí đứng.</p>
</section>
<section id="tôi-có-thực-sự-thích-jiu-jitsu-không" class="level1">
<h1>Tôi có (thực sự) thích Jiu-jitsu không?</h1>
<p>Bạn sẽ thích Jiu-jitsu nếu:</p>
<ul>
<li>Đang tìm kiếm một bài thể thao rèn luyện (workout), nhưng ghét tập các môn thể dục như chạy bộ, nâng tạ;</li>
<li>Tìm kiếm một cộng đồng sôi động;</li>
<li>Cần tìm cảm giác có mục đích và tiến bộ;</li>
<li>Thích các hoạt động thể thao kết hợp thể chất và trí não (cerebral), như leo núi;</li>
<li>Đã từng đào tạo các môn thể thao đối kháng (combat) khác;</li>
<li>Muốn thử gì đó mới mẻ?.</li>
</ul>
</section>
<section id="jiu-jitsu-có-phù-hợp-với-tôi-không" class="level1">
<h1>Jiu-jitsu có phù hợp với tôi không?</h1>
<p>Nó phù hợp với tất cả bất kể tuổi, thể trạng, giới tính, hoàn cảnh, kinh nghiệm. Tuy nhiên, có thể tập và không cần coi nó là sở thích của bạn, và bạn cũng không cần xuất sắc trong môn này. Mục tiêu không phải là hơn thua với người khác, mà là trở nên <em>tốt nhất có thể</em>.</p>
</section>
<section id="làm-sao-để-thử-và-bắt-đầu" class="level1">
<h1>Làm sao để thử và bắt đầu</h1>
<ol type="1">
<li>Tìm một phòng tập, nên là các phòng có đánh giá tốt;</li>
<li>Tìm hiểu lịch tập, chính sách, giá cả;</li>
<li>Mặc quần áo thoải mái, không đeo trang sức, mang nước, thời điểm này bạn chưa cần trang bị nào khác;</li>
<li>Tập thử;</li>
<li>Lớp thông thường sẽ bao gồm: khởi động (warmups), dạy kĩ thuật và tập luyện (teaching &amp; drilling), sau đó là đối kháng (sparring, rolling, open mat). Tập nhẹ nhàng và không nên kì vọng quá nhiều;</li>
<li>(&amp; 7) Xin tập thử thêm, hoặc tìm một CLB khác, hãy mạnh dạn, cho tới khi ưng ý.</li>
</ol>
</section>
<section id="lựa-chọn-clbphòng-tập" class="level1">
<h1>Lựa chọn CLB/Phòng tập</h1>
<p>Nếu thấy thích BJJ thì bạn nên commit tới một phòng tập. Dưới đây là các tiêu chí:</p>
<ul>
<li>Không khí (Vibe): Thấy hợp không (jibe with the vibe), các thành viên có thân thiện không. Trang thiết bị có sơ sài, có mùi hay không?;</li>
<li>Chất lượng (Quality): Có năng lực tổ chức tốt hay không? Họ focus vào Jiu-jitsu hay các môn khác nữa? Người chủ có đai đen hay không? Họ đào tạo BJJ bao lâu rồi?;</li>
<li>Địa điểm (Location): Thuận tiện cho bạn hay không?;</li>
<li>Chi phí (Cost): Có phù hợp với bạn hay không?.</li>
</ul>
</section>
<section id="các-quy-tắc-lịch-sự" class="level1">
<h1>Các quy tắc lịch sự</h1>
<section id="tổng-quan" class="level2">
<h2 class="anchored" data-anchor-id="tổng-quan">Tổng quan</h2>
<p>Hãy lịch sử và tuân thủ các quy tắc. Bạn đang tham gia một cộng đồng đang cố gắng cải thiện kỹ năng của họ, chứ không phải chiến đấu để đứng đầu theo kiểu của bạn.</p>
</section>
<section id="vệ-sinh-và-sức-khỏe" class="level2">
<h2 class="anchored" data-anchor-id="vệ-sinh-và-sức-khỏe">Vệ sinh và sức khỏe</h2>
<ul>
<li>Đừng đến phòng tập nếu bạn ốm hoặc có virus hoặc bệnh truyền nhiễm khác;</li>
<li>Mang dép hoặc giày ngoài thảm, đi chân đất trên thảm;</li>
<li>Giặt, vệ sinh đồ tập sau mỗi buổi học;</li>
<li>Cắt gọn ngón chân / tay để tránh làm bị thương bạn tập;</li>
<li>Sử dụng xịt khử mùi, nước súc miệng nếu cần;</li>
<li>Trước buổi tập nếu có mồ hôi hoặc mùi, hãy tắm trước;</li>
<li>Tắm càng sớm càng tốt sau buổi tập để tránh nhiễm trùng da;</li>
<li>Chú ý đến da, nếu có vấn đề hãy ngừng tập và gặp bác sĩ.</li>
</ul>
</section>
<section id="tập-luyện-kĩ-thuật-drilling" class="level2">
<h2 class="anchored" data-anchor-id="tập-luyện-kĩ-thuật-drilling">Tập luyện kĩ thuật (Drilling)</h2>
<ul>
<li>Chia đều thời gian của bạn và bạn tập;</li>
<li>Chỉ nên đưa ra lời khuyên khi bạn thực sự tự tin, nếu không thì nghe coach (ND: Biết thì thưa thốt, không biết dựa cột mà nghe);</li>
<li>Mục tiêu là tập luyện các động tác trong điều kiện không có áp lực từ đối thủ. Nên đừng tạo áp lực quá nhiều cho bạn tập, cũng không nên quá thoải mái như một người nộm;</li>
<li>Tập trung vào các chuyện động (movement) hơn là đạt được kết quả của động tác.</li>
</ul>
</section>
<section id="tập-luyện-đối-kháng-rolling" class="level2">
<h2 class="anchored" data-anchor-id="tập-luyện-đối-kháng-rolling">Tập luyện đối kháng (Rolling)</h2>
<ul>
<li>Bạn có quyền từ chối việc roll với bất cứ ai, trong bất cứ thời điểm nào, hoặc bất kì lí do nào. Họ có thể không thích hoặc cho rằng nó thiếu lịch sự, nhưng, bạn có quyền;</li>
<li>Người ta thường đập và cụng ta (hand slap and dump) để đánh dấu cho một ca roll bắt đầu;</li>
<li>Cảm ơn bạn tập sau mỗi lần roll, bất kể nó kết thúc như thế nào;</li>
<li>Mục tiêu của roll là học hỏi chứ không phải chiến thắng, để dành cái ham muốn đó cho các trận đánh thực sự;</li>
<li>Điều tệ nhất bạn có thể làm là gây ra chấn thương cho bạn tập;</li>
<li>Một số thế submission có thể chuyển từ không đau cho tới tạo ra chấn thương nghiêm trọng nhất nhanh. Trong các trường hợp đó, hãy siết lực chậm lại để tạo thời gian cho bạn tập tap-out;</li>
<li>Khi roll với một bạn tập nhỏ hơn mình nhiều, đừng cố gắng dùng trọng lượng để đè họ xuống. Mục tiêu là học hỏi, và 5 phút đè như vậy và chả ai học được gì cả. Hãy cố linh hoạt nhiều tư thế;</li>
<li>Các va chạm tình cờ vào các vùng nhạy cảm là điều bình thường trong các môn vật. Cứ tiếp tục roll hoặc nói “Sorry” nếu bạn muốn, không nên giải thích dài dòng và nên tập trung vào tập luyện.</li>
</ul>
</section>
</section>
<section id="tổng-quan-các-vị-trí-trong-bjj" class="level1">
<h1>Tổng quan các vị trí trong BJJ</h1>
<p>Jiu-jitsu có phong phú các thế, tư thế chiến đấu (configurations and positions). Mỗi tư thế, đối với cả bạn và bạn tập đều sẽ có các chiến lược, kỹ thuật khác nhau.</p>
<p>Mỗi thế sẽ tương ưng là sự chiếm ưu thế cho một cá nhân, và sự thất thế cho một bên còn lại. Đối với người chiếm ưu thế, bạn đang tấn công, ngược lại, bạn đang trong vai trò phòng thủ. (ND) Sự chênh lệch giữa ưu / thất thế cũng sẽ khác nhau cho các thế đánh khác nhau. Mỗi người đều sẽ cố gắng dùng các chiến lược và kĩ thuật để tạo lợi thế cho bản thân.</p>
<p>Dưới đây là một số thế như vậy, bạn không cần ghi nhớ, bạn sẽ được dạy theo thời gian:</p>
<p><em>All photos below credit to orginal post.</em></p>
<section id="closed-guard" class="level2">
<h2 class="anchored" data-anchor-id="closed-guard">Closed Guard</h2>
<p>Closed Guard là tư thế phố biến nhất cho người mới bắt đầu, hai chân bạn sẽ vòng qua hông (waist) đối thủ và dùng mắt cá chân khóa (ankles) lại. Lợi thế thuộc về người ở trên (bạn tập của bạn).</p>
<p>Trong Jiu-jitsu, “guard” mang nghĩa tương tự như “chân”, tư thế này được gọi như vậy vì bạn dùng chân khóa kín đối thủ.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/closed_guard.png" class="img-fluid figure-img"></p>
<figcaption>Closed Guard</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="open-guard" class="level2">
<h2 class="anchored" data-anchor-id="open-guard">Open Guard</h2>
<p>Khi người ở trên có thể thoát, gỡ được móc nối giữa hai mắt cá chân, sẽ hình thành nên tư thế Open Guard. Lúc này “guard” đã được “open”, tư thế này rất linh động và có nhiều biến thể / tên gọi cho từng vị trí cụ thể, như <em>Spider Guard</em> hay <em>Lasso Guard</em>. Nhìn chung tư thế này không có lợi cho cả hai người.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/open_guard.png" class="img-fluid figure-img"></p>
<figcaption>Open Guard</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="side-control" class="level2">
<h2 class="anchored" data-anchor-id="side-control">Side Control</h2>
<p>Khi một người có thể vòng qua chân của người phía dưới và kiểm soát thân mình (torso) thì người đó được xem là đã “passed the guard”, động tác này kết thúc bằng từ thế Side Control. Lợi thế thuộc về người đó - người ở trên.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/side_control.png" class="img-fluid figure-img"></p>
<figcaption>Side Control</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="mount" class="level2">
<h2 class="anchored" data-anchor-id="mount">Mount</h2>
<p>Nếu người ở trên có thể giành được nhiều quyền kiểm soát hơn, họ có thể ngồi lên phần bụng (hips) hoặc ngực (chest), tư thế này được gọi là Mount và nó <em>cực kì</em> có lợi cho người ở trên.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/mount.png" class="img-fluid figure-img"></p>
<figcaption>Mount</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="back" class="level2">
<h2 class="anchored" data-anchor-id="back">Back</h2>
<p>Con người giỏi chiến đấu với các mối đe dọa đến trước mặt mình hơn là từ đằng sau. Vì thế lấy lưng là một tư thế tốt cho việc tấn công, và bị lấy lưng sẽ tạo ra sự thất thế cực lớn cho việc phòng ngự.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/back.png" class="img-fluid figure-img"></p>
<figcaption>Back</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="turtle" class="level2">
<h2 class="anchored" data-anchor-id="turtle">Turtle</h2>
<p>Tư thế con rùa mang lại một chút lợi thế cho người ở trên. Gọi là con rùa bởi vì tư thế của người ở dưới.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/turtle.png" class="img-fluid figure-img"></p>
<figcaption>Turtle</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="half-guard" class="level2">
<h2 class="anchored" data-anchor-id="half-guard">Half Guard</h2>
<p>Khi một người có thể dùng chân khống chế được một chân (thay vì từ phần hông và hai chân) của đối thủ, từ phía dưới, ta gọi đó là Half Guard. Ai có lợi thế còn tùy thuộc vào từng trường hợp cụ thể</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/half_guard.png" class="img-fluid figure-img"></p>
<figcaption>Half Guard</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="làm-sao-để-tiến-bộ" class="level1">
<h1>Làm sao để tiến bộ</h1>
<section id="chấp-nhận-thất-bại-nhất-là-khi-chỉ-mới-bắt-đầu" class="level2">
<h2 class="anchored" data-anchor-id="chấp-nhận-thất-bại-nhất-là-khi-chỉ-mới-bắt-đầu">Chấp nhận thất bại, nhất là khi chỉ mới bắt đầu</h2>
<ul>
<li>Rất là bình thường nếu bạn cảm thấy mình tệ. Bạn đang đào sâu vào một lĩnh vực sâu và phức tạp, ngay cả đai đen cũng có lúc nhận thấy nhiều thứ họ chưa thể hiểu được;</li>
<li>Nếu bạn không có kinh nghiệp vật (grappling) trước đó, 12 tháng đầu tiên bạn sẽ học 108 các phong cách tap-out khác nhau. Vậy nên đừng đo lường mức độ tiến bộ của bạn bằng các chiến thắng, mà nên là cách bạn cải thiện việc phòng thủ;</li>
<li>Hãy khiêm tốn và học cách trân trọng từng sự tiến bộ, tập trung vào học hỏi thay vì kết quả cuối cùng. Tất cả những gì bạn có thể đạt được là một chút tiến bộ mỗi ngày, ai cũng thế, ngay cả khi bạn không chứng kiến.</li>
</ul>
</section>
<section id="việc-khai-triển-kĩ-thuật-khó-hơn-rất-nhiều-khi-roll" class="level2">
<h2 class="anchored" data-anchor-id="việc-khai-triển-kĩ-thuật-khó-hơn-rất-nhiều-khi-roll">Việc khai triển kĩ thuật khó hơn rất nhiều khi Roll</h2>
<ul>
<li>Bạn có thể học được một kĩ thuật và thực hành nó một cách mượt mà khi đối thủ gần như không kháng cự khi tập luyện;</li>
<li>Nhưng khi vào live roll thì khác, khi đối thủ biết bạn muốn làm gì, bạn sẽ thậm chí không thế thực hiện được bước đầu tiên và mọi thứ đều đi chệch khỏi hướng. Hoặc, bạn cũng cảm thấy đầu óc bạn hoàn toàn trống rỗng (ND: hành động theo bản năng);</li>
<li>Điều này là hoàn toàn bình thường, học các bước cơ bản là khởi đầu cho hành trình dài để trở nên thành thạo. Hãy kiên nhẫn nghiên cứu xem mình đã làm chưa đúng ở bước nào, và tiếp tục thực hành.</li>
</ul>
</section>
<section id="làm-sao-tiến-bộ-một-cách-có-hiệu-quả" class="level2">
<h2 class="anchored" data-anchor-id="làm-sao-tiến-bộ-một-cách-có-hiệu-quả">Làm sao tiến bộ một cách có hiệu quả</h2>
<ul>
<li>Hãy đặt câu hỏi cho coach;</li>
<li>Hãy hỏi các tiền bối đi trước, nhớ rằng cần phải tôn trọng thời gian của họ;</li>
<li>Hãy xem các video hướng dẫn, tài nguyên rất phong phú trên Youtube. Cẩn thận với click-bait và video-brain - hãy xem có chọn lọc:</li>
<li>Click-bait: nhờ thuật toán của Youtube mà các video với tiêu đề ‘learn this unstoppable sweep’ hoặc ‘never get submitted again ever’ sẽ xuất hiện rất nhiều. Những thứ này không chính xác, hãy học những thứ basic. Những thứ trông fancy sẽ không phù hợp với mức độ kĩ năng của bạn đâu;</li>
<li>Video-brain: rất dễ để xem hết hai ba chục video youtube về các kỹ thuật submissions, escapes. Nhưng não bộ bạn sẽ không thể hấp thu hết được chừng đấy các kỹ thuật một cách chi tiết. Nếu bạn muốn áp dụng trong rolling, bạn sẽ thấy đầu ong ong và nhức nhức khi cố nhớ về kỹ thuật nào đó đã xem trong video nào đó trong hàng chục cái video khác. Hãy đi sâu thay vì đi rộng (recommended to go deep rather than broad). Xem nhiều video cho cùng một kĩ thuật, hoặc xem một video lặp lại nhiều lần và cố gắng tiếp thu trước khi move on.</li>
<li>Yêu cầu các bạn tập open mat học một kĩ thuật cụ thể hơn là rolling. Rolling mang lại cho bạn kinh nghiệm, nhưng nó sẽ rất loãng. Nếu bạn tập một tư thế guard hoặc một kỹ thuật với nhiều bạn tập khác nhau trong một thời gian ngắn, bạn sẽ thấy sự cải thiện rõ rệt. Hãy bắt đầu với tư thế mà bạn chưa thành thạo và reset nếu một trong hai thoát được khỏi đó. Tất nhiên cũng nên hỏi bạn tập xem họ muốn tập kĩ thuật nào;</li>
<li>Sau mỗi buổi tập, hãy nghĩ về những thứ mình chưa làm được khi roll. Hãy chọn 1, 2 chủ đề trong đó để tự học qua video, buổi sau bạn có thể thực hành cho tới khi thấy có cải thiện. Cứ thế tiếp tục một chu trình như vậy.</li>
</ul>
</section>
</section>
<section id="trang-bị-phụ-kiện" class="level1">
<h1>Trang bị, phụ kiện</h1>
<section id="gi" class="level2">
<h2 class="anchored" data-anchor-id="gi">Gi</h2>
<p>Bạn có thể mua Gi online hoặc ở ngay phòng tập. Tuy nhiên mua online sẽ rẻ hơn. Có một số phòng tập sẽ yêu cầu mua Gi hoặc patch.</p>
<p>Hãy kiểm tra kĩ size chart, nhất là nên hỏi những <em>bạn tập có cùng kích thước với mình</em>. Cũng nên nhớ rằng size chart có thể khác nhau cho các brand khác nhau.</p>
</section>
<section id="rashguard-for-no-gi" class="level2">
<h2 class="anchored" data-anchor-id="rashguard-for-no-gi">Rashguard (for No Gi)</h2>
<p>TODO</p>
</section>
<section id="quần-áo-lót-underclothes" class="level2">
<h2 class="anchored" data-anchor-id="quần-áo-lót-underclothes">Quần áo lót (Underclothes)</h2>
<p>Đối với Gi, bạn có thể mặc đồ lót dưới Gi (ND: vì áo Gi có thể bị kéo bung trong lúc tập luyện và bạn không muốn để ngực trần). Bạn có thể dễ dàng tìm các elastic/compression shirts và pants (spat) online. Hãy nhớ rằng chúng có thể bị nắm/kéo (ND: như là một phần của các kĩ thuật luyện tập với Gi), và có thể làm bạn nóng nực.</p>
<p>Trong thi đấu, nam <em>không được</em> mặc gì dưới áo Gi (Gi top). Còn nữ thì <em>phải mặc</em> compression shirt, gymnast top, hoặc one-piece swimsuit.</p>
</section>
<section id="bảo-vệ-hàm-mounthguard" class="level2">
<h2 class="anchored" data-anchor-id="bảo-vệ-hàm-mounthguard">Bảo vệ hàm (Mounthguard)</h2>
<p>Mặc dù không phải là môn về đấm / đá (striking), sẽ vẫn có khả năng đối thủ, bạn tập của bạn đánh trúng mặt hoặc siết vào hàm của bạn. Do đó, việc đeo bảo vệ hàm sẽ giúp hạn chế các tổn thương tới hàm, răng, môi, lưỡi - những tổn thương rất đau và khó hồi phục.</p>
</section>
<section id="cup" class="level2">
<h2 class="anchored" data-anchor-id="cup">… Cup</h2>
<p>Một số người dùng cup để vào vệ háng / bẹn (crotch), nhưng nó thực sự không cần thiết. Cup có thể làm tổn thương bạn tập, và bị cấm trong hầu hết các tour đấu.</p>
</section>
<section id="bảo-vệ-đầu-headgear" class="level2">
<h2 class="anchored" data-anchor-id="bảo-vệ-đầu-headgear">Bảo vệ đầu (Headgear)</h2>
<p>Bảo về đầu sẽ giúp bạn hạn chế các tổn thương tai - thường dẫn đến “tai súp lơ” (cauliflower ear). Tuy nhiên nó không phổ biến và việc dùng headgear bị cấm trong các tour đấu. Bạn chỉ nên dùng khi đã có các chấn thương và muốn chúng không nặng thêm cho tới khi lành lại.</p>
</section>
</section>
<section id="các-tài-liệu-khác" class="level1">
<h1>Các tài liệu khác</h1>
<p><a href="http://www.artemisbjj.com/FAQ/" class="uri">http://www.artemisbjj.com/FAQ/</a></p>


<!-- -->

</section>

 ]]></description>
  <category>bjj</category>
  <guid>https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/</guid>
  <pubDate>Sun, 28 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-29-bjj-beginners-guide/sloth_bjj.png" medium="image" type="image/png" height="141" width="144"/>
</item>
<item>
  <title>Another James Powell’s impromptu talk, summary by Clauder 3.5 Sonnet</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-18-claude-summary/</link>
  <description><![CDATA[ 





<p>source: <a href="https://www.youtube.com/watch?v=-z2eqLwVmzw">James Powell - Whatever I Can do to Entertain You in 30 Minutes | PyData London 2022</a></p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-18-claude-summary/James Powell - Whatever I Can do to Entertain You in 30 Minutes _ PyData London 2022 0-35 screenshot.png" class="img-fluid figure-img"></p>
<figcaption>Whatever I Can do to Entertain You in 30 Minutes</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>i was using this extension <a href="https://chromewebstore.google.com/detail/language-reactor/hoombieeljmmljlkjmnheibnpciblicm">Language Reactor</a> to export transcript into Excel and convert it to json. here is data in short:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span>   </span>
<span id="cb1-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"5s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"okay let me get started i'll give you the"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"7s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"premise the premise is the issues are not av related the issues are that my"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"12s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"laptop where i was up until 4am last night writing this talk"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"16s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"did not boot at all and as a consequence of that my notes that i spent quite a"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"21s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bit of time putting together are not available to you but i am still on the"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"24s"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hook to keep you entertained for 30 minutes so we're going to see what i can"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"..."</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"..."</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"25:55"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"that makes it possible for us to write code that"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"25:58"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"put some structuring around the core computation now with that said i hope i"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"26:03"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"was able to entertain you i think we're just at the time that we have"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"26:07"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"thank you everybody i'm james powell hopefully i'll give the real talk"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>and this is summary by Clauder AI:</p>
<p>James Powell’s impromptu talk at PyData London 2022 covers several key points about Python programming, particularly aimed at data scientists. Here are the main points he’s trying to convey:</p>
<ol type="1">
<li><strong>Python is more than just APIs and function calls</strong>: Many data scientists focus solely on memorizing APIs (like Pandas or NumPy) without truly understanding the language’s depth and richness.</li>
<li><strong>Generators are underutilized</strong>: Generators can be powerful tools, especially for simulations or non-closed form operations where each incremental step is computationally expensive.</li>
<li><strong>Lazy vs.&nbsp;Eager computation</strong>: Understanding when to use lazy or eager computation can significantly impact performance, especially in data science tasks.</li>
<li><strong>Functions should not be overused</strong>: There’s a tendency to create functions for any repeated code, but this isn’t always the best approach. Powell distinguishes between intentional and coincidental repetition.</li>
<li><strong>Avoid premature abstraction</strong>: Creating functions deep in libraries, especially for data loading, can lead to issues with testing and maintenance. Sometimes, ad-hoc behavior is preferable.</li>
<li><strong>Iteration helpers and intentionality</strong>: Tools like <code>enumerate</code>, <code>zip</code>, and custom iteration helpers can make code more expressive and reveal the programmer’s intentions more clearly.</li>
<li><strong>Understanding Python conventions</strong>: Looking beyond the surface-level functionality of Python’s standard library (e.g., <code>itertools</code>) can reveal patterns and conventions that lead to better code.</li>
<li><strong>Code should express human intention</strong>: Loops in data science code often represent human-level processes rather than low-level computations. The code structure should reflect this.</li>
<li><strong>Flexibility in code structure</strong>: Allowing code to diverge when necessary, rather than forcing premature unification, can lead to more maintainable and adaptable codebases.</li>
<li><strong>Critical thinking about basic tools</strong>: Even when using basic Python constructs, data scientists should think deeply about why they’re using them and what alternatives might exist.</li>
</ol>
<p>Overall, Powell encourages data scientists to look beyond superficial knowledge of Python and its libraries, urging them to understand the language more deeply and use its features more thoughtfully to write more intentional, maintainable, and expressive code.</p>


<!-- -->


 ]]></description>
  <category>python</category>
  <category>pydata</category>
  <guid>https://lktuan.github.io/blog/2024-07-18-claude-summary/</guid>
  <pubDate>Wed, 17 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-18-claude-summary/claude.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A Prefect Workshop</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-17-prefect-workshop/</link>
  <description><![CDATA[ 





<p>🎞 Video source: <a href="https://www.youtube.com/watch?v=yIDBsHwTaa8&amp;list=PLGVZCDnMOq0rrhYTNedKKuJ9716fEaAdK&amp;index=4">Dr.&nbsp;Adam Hill - Empower Your Projects with Prefect’s Pipeline Magic | PyData London 2024</a></p>
<p>⛏ Github repo: <a href="https://github.com/Cadarn/PyData-Prefect-Workshop" class="uri">https://github.com/Cadarn/PyData-Prefect-Workshop</a></p>
<section id="goals" class="level1">
<h1>goals</h1>
<p>by end of this session you will:</p>
<ul>
<li>understand what Prefect is;</li>
<li>build and execute tasks and flows;</li>
<li>have schedules flow using deployment;</li>
<li>have a grasp what else can be done;</li>
<li>have some fun.</li>
</ul>
</section>
<section id="prefect-overview" class="level1">
<h1>prefect overview</h1>
<p>just simple as using jupyter notebook, you only need to use decorators (<code>@task</code> and <code>@flow</code>) to designate functions as <strong>task</strong> for <strong>flow</strong>. you need to breakdown your “notebook” into “code chunks” and organize to get them done.</p>
<div id="3aa32d45" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> prefect <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> task, flow</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> my_task():</span>
<span id="cb1-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello, i am a task!"</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@flow</span></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> my_flow():</span>
<span id="cb1-9">  my_task()</span></code></pre></div>
</details>
</div>
</section>
<section id="jump-to-the-workshop" class="level1">
<h1>jump to the workshop</h1>
<p>clone the repo, have docker compose up and running. then explore <code>http://localhost:8000/get_tweet</code>, this is shown which i have yet no idea:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tweet_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">570306133677760500</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"airline_sentiment"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"neutral"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"airline_sentiment_confidence"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"airline"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Virgin America"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cairdin"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-7">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"text"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@VirginAmerica What @dhepburn said."</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"retweet_count"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tweet_timestamp"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2015-02-24T11:35:52-08:00"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"tweet_coord"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"loop"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>the first thing you need to do is telling where the Prefect API is gonna live. currently it runs on free tier of the their cloud server (?) and now we config it to run in the localhost (?):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> config set PREFECT_API_URL=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://127.0.0.1:4200/api"</span></span></code></pre></div>
<p>then we gonna reset the database, do some config then can start the server. please note that if you are using window, you need to add <code>Scripts</code> variable to environment variables also, the value of the path can be found when you install Prefect by <code>pip</code>:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> server database reset <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> config set PREFECT_API_DATABASE_CONNECTION_URL=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postgresql+asyncpg://postgres:password@localhost:5432/prefect_server"</span></span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> config view <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--show-sources</span></span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefect</span> server start</span></code></pre></div>
<p>below is my initial dashboard, there is nothing!</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-17-prefect-workshop/initial_prefect_server.png" class="img-fluid figure-img"></p>
<figcaption>Prefect Dashboard</figcaption>
</figure>
</div>
</div>
</div>
</div>
<section id="e01-my-first-flow" class="level2">
<h2 class="anchored" data-anchor-id="e01-my-first-flow">e01 my first flow</h2>
<p>the basic component of prefect is <code>task</code> and <code>flow</code>. these are decorators to funtions we want to run. we can name and log easily:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>e01.py</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="e01.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example of processing some data</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> prefect <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> task, flow</span>
<span id="cb5-3"></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task</span>(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Addition operator"</span>)</span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(a, b):</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb5-8"></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task</span>(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Squaring operator"</span>)</span>
<span id="cb5-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> square_num(num):</span>
<span id="cb5-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb5-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span></span>
<span id="cb5-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-15"></span>
<span id="cb5-16"></span>
<span id="cb5-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@flow</span>(log_prints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My first simple flow"</span>)</span>
<span id="cb5-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add_and_square(a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb5-19">    add_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> add(a, b)</span>
<span id="cb5-20">    square_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> square_num(add_result)</span>
<span id="cb5-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) squared = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>square_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-22"></span>
<span id="cb5-23"></span>
<span id="cb5-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb5-25">    add_and_square(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
</div>
</section>
<section id="e02a-sentiment-pipeline-v1" class="level2">
<h2 class="anchored" data-anchor-id="e02a-sentiment-pipeline-v1">e02a sentiment pipeline v1</h2>
</section>
<section id="e02b-sentiment-pipeline-v2" class="level2">
<h2 class="anchored" data-anchor-id="e02b-sentiment-pipeline-v2">e02b sentiment pipeline v2</h2>
</section>
<section id="e03a-kafka-tweet-publisher" class="level2">
<h2 class="anchored" data-anchor-id="e03a-kafka-tweet-publisher">e03a kafka tweet publisher</h2>
</section>
<section id="e03b-kafka-tweet-deployment" class="level2">
<h2 class="anchored" data-anchor-id="e03b-kafka-tweet-deployment">e03b kafka tweet deployment</h2>
</section>
<section id="e04-sentiment-pipeline-v3" class="level2">
<h2 class="anchored" data-anchor-id="e04-sentiment-pipeline-v3">e04 sentiment pipeline v3</h2>
</section>
</section>
<section id="further-reading" class="level1">
<h1>further reading</h1>
<ol type="1">
<li><a href="https://www.reddit.com/r/dataengineering/comments/oqbiiu/airflow_vs_prefect/">Prefect vs Airflow on Reddit</a></li>
</ol>
<p>Bình luận bởi <strong>u/alexisprince</strong>:</p>
<blockquote class="blockquote">
<p>Tôi đang sử dụng song song Airflow và Prefect (A cho scheduling, P cho execution), P được sử dụng khi yêu cầu về hiệu năng tính toán và phần scheduler của A vẫn chưa thể bị thay thế.</p>
<p>Lợi thế của A là đã quá phổ biến, dễ tìm hướng dẫn, dễ tuyển người cho chuyên môn. Yếu điểm là A đã quá cũ, không còn phù hợp cho dynamic workflow và modern data env. Hơn nữa A luôn best fit khi sử dụng chung với Astronomer, ngoài ra khá khó dùng.</p>
<p>P hiện đại hơn, cung cấp nhiều modern execution models, DAG được xác định tại runtime do đó dynamic hơn.</p>
<p>Prefer P hơn, better modularization of code.</p>
</blockquote>
<p>Bình luận bởi <strong>u/ChrisHC05</strong>:</p>
<blockquote class="blockquote">
<p>Tao đã đánh giá Airflow, Dagster, Argo và Prefect mấy tháng nay.</p>
<p>Airflow thì đã già, tuy nhiên tài liệu, hướng dẫn rất phong phú.</p>
<p>Dagster có vẻ gặp nhiều vấn đề với Production.</p>
<p>Prefect có cộng đồng phát triển, support, sửa lỗi active.</p>
<p>Vậy nên tôi chỉ đánh giá cao hai thằng Argo và Prefect. Argo khác biệt một cách mạnh mẽ, config được viết dưới dạng YAML, chạy trên cụm Kubernetes, và việc viết DAG không phụ thuộc vào một ngôn ngữ lập trình nào. Argo (tại thời điểm đó) cũng đang phát triển một module kiểu event listening, from outside, như Sensor của Airflow, thứ mà Prefect thiếu (workaround là call Prefect GraphQL-API).</p>
<p>Nếu đã có sẵn infra là K8S, khuyến nghị Argo, không chỉ là orchestration mà còn là một hệ sinh thái support từ event responding tới CI/CD. Nhưng learning curve thì steep nhé. Nó có nhiều tiềm năng vì giờ thì phần mềm nào cũng cần dockerized cả, tính trừu tượng cao hơn. “And IT in general is all about abstraction to make complicated things easier.”</p>
<p>Vậy nên:</p>
<ul>
<li>Nếu có sẵn cụm K8S: dùng Argo</li>
<li>Nếu không: dùng Prefect</li>
</ul>
</blockquote>
<ol start="2" type="1">
<li><a href="https://www.youtube.com/watch?v=XrZegcm1ftw">Airflow Vs. Prefect: Full Breakdown! by The Data Guy</a></li>
<li><a href="https://www.horsewithapointyhat.com/posts/being-a-data-scientist-in-a-post-truth-world/">Adam Hill’s blog</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>pydata</category>
  <category>prefect</category>
  <guid>https://lktuan.github.io/blog/2024-07-17-prefect-workshop/</guid>
  <pubDate>Tue, 16 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-17-prefect-workshop/adam_hill.png" medium="image" type="image/png" height="179" width="144"/>
</item>
<item>
  <title>Vim 101</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-12-vim/</link>
  <description><![CDATA[ 





<p>source: <a href="https://www.youtube.com/watch?v=RZ4p-saaQkc">Vim tutorial for Beginners</a> by freeCodeCamp.</p>
<p>in an effort not to give Vim up from the very first day. inspired by James Powell’s Vim skill in his every Python lecture.</p>
<p>after a few days of rolling with neovim i already have a somewhat calls sense of how to install, make the <code>nvim</code> config folder, do some <code>git clone</code> stuffs to download a bunch of i have no idea what they are to use vim in my damn window machine. can do <code>nvim file1</code>, <code>:qw</code>, <code>:below terminal</code>, <code>:vsplit</code>, but in general lots of actions i am not yet familiar with so actually could not stick with this editor.</p>
<p>now back to basics, i am spending Friyay night starting from scratch. Florian Dedov uses vim while i use nvim expecting both to be the same.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-12-vim/programmerhumor-io-linux_meme.jpg" class="img-fluid figure-img"></p>
<figcaption>source <a href="https://programmerhumor.io/memes/vim/">programmerhumor</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<section id="intro-why-vim" class="level1">
<h1>intro &amp; why vim?</h1>
<ul>
<li>less stick with your mouse, speed up your coding speed;</li>
<li>all settings are customizable;</li>
<li>dont need to stick with your terminal, you can use Vim keybindings in any IDE or text editor: Jupyter Notebook, VS Code, etc</li>
</ul>
</section>
<section id="installation" class="level1 page-columns page-full">
<h1>installation</h1>
<ul>
<li>i use window, i dont want to install more package manager like <code>scoop</code>, i dont like to use WSL, so just simply run <code>winget install Neovim.Neovim</code>; </li>
<li>this neovim version will not include <em>Neovim QT</em>, alright, i will use my terminal <code>pwsh</code>;</li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">neovim installation <a href="https://github.com/neovim/neovim/blob/master/INSTALL.md">page</a></span></div></section>
<section id="basics" class="level1">
<h1>basics</h1>
<ul>
<li><code>nvim file_name</code> will open a file or create a file if it did not exist (but the file will not be actually created if we dont write <code>:w</code> ~ this is just <strong>buffer</strong>);</li>
</ul>
</section>
<section id="exit" class="level1">
<h1>exit</h1>
<ul>
<li>now if we create a file (e.g.&nbsp;<code>client.py</code>), when we press <code>:q</code> in will return this message:</li>
</ul>
<pre><code>E37: No write since last change
E162: No write since last change for buffer "client.py"   </code></pre>
<ul>
<li>what you need to do is <code>:q!</code> (exclamation mark ~ saying you quite and dismiss any change you’ve made);</li>
<li>notice that <code>q</code> first and <code>!</code> after. <code>:!</code> will open the terminal, so <code>:!q</code> will pass the command <code>q</code> to the terminal (window CMD), which returns “<em>‘q’ is not recognized as an internal or external command, operable program or batch file.</em>”</li>
</ul>
</section>
<section id="insert-and-normal-modes" class="level1">
<h1>insert and normal modes</h1>
<ul>
<li>when we enter vim, we are in <strong>NORMAL</strong> mode. press the <code>i</code> or <code>I</code> will get you into the <strong>INSERT</strong> mode, press <code>esc</code> to enter the <strong>NORMAL</strong> mode;</li>
<li><strong>INSERT</strong> mode: any thing we press does not have functionality, just text;</li>
<li><strong>NORMAL</strong> mode: execute a command;</li>
<li>in normal mode, press <code>:w</code> to save/write file;</li>
<li><code>:wq</code> write and quit;</li>
<li>in <strong>INSERT</strong> mode, cursor points between 2 characters; in <strong>NORMAL</strong> mode cursor points a character;</li>
<li>from <strong>INSERT</strong> mode, press <code>esc</code> and cursor will point to the <strong>up-front</strong> character, press <code>i</code> in the cursor will point to <strong>before</strong> that character, press <code>a</code> and for cursor <strong>after</strong> character;</li>
<li><code>I = shift + i</code> will let you get into insert mode with cursor at the <strong>begin</strong> of the line;</li>
<li><code>A = shift + a</code> for the <strong>end</strong> of the line;</li>
<li>from normal mode, <code>o</code> let you create a new line below and cursor at that line;</li>
<li><code>O = shift + o</code> for creating line above.</li>
</ul>
</section>
<section id="line-numbers" class="level1">
<h1>line numbers</h1>
<ul>
<li>in normal mode, <code>:set number</code> will activate line number;</li>
<li><code>:set nonumber</code> to turn off the line number;</li>
<li>now this is important pattern: “an action can be repeated x times” ~ in normal mode we can move cursor up and down using up and down arrow -&gt; if we press <code>5 + down arrow</code> we will move to the 5th line below;</li>
<li><code>10 + right arrow</code> will move the cursor to 10th character to the right, in the same line (?, or in the end of the line);</li>
<li>you can also use <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code> instead of the arrow keys, they stand for <code>⬅</code>, <code>⬇</code>, <code>⬆</code>, <code>➡</code>, respectively (extremely usefull if you can type with 10 fingers);</li>
</ul>
</section>
<section id="relative-line-numbers" class="level1">
<h1>relative line numbers</h1>
<ul>
<li>certainly you can use <em>number</em> with <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code>. now if you <code>:set relativenumber</code>, you can have your current line indexed as <code>0</code> and easily know the number to move up &amp; down-ward;</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-12-vim/relative_line_number.png" class="img-fluid figure-img"></p>
<figcaption>now if i type <code>14 + k</code> i will move to the 3rd line</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>easy to know that <code>:set norelativenumber</code> will turn this option off.</li>
</ul>
</section>
<section id="various-options" class="level1 page-columns page-full">
<h1>various options</h1>
<ul>
<li><code>:set mouse=a</code> activate the mouse, you can scroll or select text;</li>
<li><code>:set mouse-=a</code> to inactivate, the pattern <code>-=</code> is to inactivate any option;</li>
<li><code>:set tabstop=4</code> set tab as 4 spaces</li>
<li><code>:set shiftwidth=4</code> set shift width as 4 spaces </li>
<li><code>:colorscheme slate</code> to set the color scheme, before type “state” you can tab to select the scheme too (remember the space);</li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">this is <a href="https://stackoverflow.com/questions/1878974/redefine-tab-as-4-spaces">recommended</a></span></div><div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-12-vim/choosing_colorscheme.png" class="img-fluid figure-img"></p>
<figcaption><code>:colorscheme</code> and <code>tab</code> to select color scheme</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>every single time you close and re-open vim, these settings is by far - all gone.</li>
</ul>
</section>
<section id="vimrc" class="level1 page-columns page-full">
<h1><code>.vimrc</code></h1>
<ul>
<li>so you need a configuration file and every time vim or nvim is opened your config will be loaded;</li>
<li>neovim will lookfor <code>init.vim</code> or <code>init.lua</code> when start; </li>
<li>in terminal (pwsn in user folder window), input:</li>
</ul>
<div class="no-row-height column-margin column-container"><span class="margin-aside">refer <a href="https://vi.stackexchange.com/questions/13505/where-do-i-put-my-vimrc-file-for-neovim-on-windows">here</a></span></div><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bass number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">cd %AppData%</span>
<span id="cb2-2">cd .. # to get out of Roaming folder</span>
<span id="cb2-3">cd .\Local\</span>
<span id="cb2-4">mkdir nvim</span>
<span id="cb2-5">cd nvim</span>
<span id="cb2-6">nvim init.vim</span></code></pre></div>
<ul>
<li>then i set these config in my <code>init.vim</code> file:</li>
</ul>
<div class="sourceCode" id="cb3" data-filname="init.vim" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> number</span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> relativenumber</span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> tabstop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb3-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> shiftwidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> autoindent</span>
<span id="cb3-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> mouse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>a</span>
<span id="cb3-7">colorscheme slate</span></code></pre></div>
<ul>
<li>then <code>:wq</code>. now we’ve already have some handy settings when go into nvim.</li>
</ul>
</section>
<section id="keybindings" class="level1">
<h1>keybindings</h1>
<table class="table-striped table-hover table">
<caption>helpful keybindings</caption>
<colgroup>
<col style="width: 24%">
<col style="width: 75%">
</colgroup>
<thead>
<tr class="header">
<th>Keybindings</th>
<th>Actions</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>u</code></td>
<td>undid the actions, vim show “… change; before #x xx seconds ago”</td>
</tr>
<tr class="even">
<td><code>Ctrl + R</code></td>
<td>redo</td>
</tr>
<tr class="odd">
<td><p><code>ntimes u</code></p>
<p><code>ntimes Ctrl + R</code></p></td>
<td>repeat to press <code>u</code> for multiple undo, or you can <code>3 + u</code> for 3 times undo. same for redo</td>
</tr>
<tr class="even">
<td><code>i</code>, <code>I</code>, <code>a</code>, <code>A</code>, <code>o</code>, <code>O</code></td>
<td>back to insert mode in different ways</td>
</tr>
<tr class="odd">
<td><code>v</code></td>
<td>enter VISUAL mode</td>
</tr>
<tr class="even">
<td><code>V</code></td>
<td>enter VISUAL model and select the whole line</td>
</tr>
<tr class="odd">
<td><code>d</code></td>
<td>deleting</td>
</tr>
<tr class="even">
<td><code>y</code></td>
<td>yanking ~ equivalent to copying</td>
</tr>
<tr class="odd">
<td><code>p</code></td>
<td>pasting what we yank before (<strong>after or below</strong> the cursor)</td>
</tr>
<tr class="even">
<td><code>dd</code></td>
<td>delete the whole line</td>
</tr>
<tr class="odd">
<td><code>5dd</code></td>
<td>delete the next whole 5 lines</td>
</tr>
<tr class="even">
<td><code>D</code></td>
<td>delete from the cursor to the end of line</td>
</tr>
<tr class="odd">
<td><code>yy</code></td>
<td>yank the full line in NORMAL mode, same with <code>V</code> then <code>y</code> ~ select the whole line and yank</td>
</tr>
<tr class="even">
<td><code>Y</code></td>
<td>same at <code>yy</code></td>
</tr>
<tr class="odd">
<td><code>P</code></td>
<td><p>pasting what we yank before (<strong>before or above</strong> the cursor)</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>again remember the pattern of <strong>lowercase</strong> and <strong>uppercase</strong></p>
</div>
</div></td>
</tr>
<tr class="even">
<td><code>c</code></td>
<td>delete the selection (from VISUAL mode) and enter to INSERT mode</td>
</tr>
<tr class="odd">
<td><code>cc</code></td>
<td>delete the whole text in the line (the line was kept) enter to INSERT mode</td>
</tr>
<tr class="even">
<td><code>C</code></td>
<td>delete from cursor to end of line (what <code>c</code> does is change, what <code>d</code> does is delete)</td>
</tr>
<tr class="odd">
<td><code>r</code></td>
<td><p>replacing the current cursor in NORMAL mode with 1 character press after <code>r</code></p>
<p>replacing all selection (include cursor) in VISUAL mode</p></td>
</tr>
<tr class="even">
<td><code>w</code></td>
<td>Jump to the next word (split by space or “-”)</td>
</tr>
<tr class="odd">
<td><code>W</code></td>
<td>Jump to the next word (accept only space at delimiter)</td>
</tr>
<tr class="even">
<td><code>b</code>, <code>B</code></td>
<td>The same thing for <em>backward</em></td>
</tr>
<tr class="odd">
<td><code>dw</code></td>
<td>delete a word</td>
</tr>
<tr class="even">
<td><code>2dw</code> , <code>d2w</code></td>
<td>delete 2 words (forward, current cursor and the next one)</td>
</tr>
<tr class="odd">
<td><code>2db</code>, <code>d2b</code></td>
<td>delete 2 words (backward, <strong>before</strong> the cursor)</td>
</tr>
<tr class="even">
<td><code>diw</code></td>
<td>delete in a words</td>
</tr>
<tr class="odd">
<td><code>ciw</code> , <code>cw</code>, <code>cb</code></td>
<td>change in a words, next word, previous word and go into INSERT mode</td>
</tr>
<tr class="even">
<td><code>e</code></td>
<td>Jump to the end of the word (<code>E</code> will be more strictly, only accept space as delimiter)</td>
</tr>
<tr class="odd">
<td><code>0</code>, <code>$</code></td>
<td>Jump to the begin / and the end of the line respectively</td>
</tr>
<tr class="even">
<td><code>d0</code>, <code>d$</code></td>
<td><p>delete everything from cursor to the begin / end of the line, respectively</p>
<p>-&gt; think of <code>c0</code>, and <code>c$</code> for aha</p></td>
</tr>
<tr class="odd">
<td><code>:h ...</code></td>
<td>seek help, <code>:q</code> to quite the help window</td>
</tr>
</tbody>
</table>
</section>
<section id="intermediate-stuff" class="level1">
<h1>intermediate stuff</h1>
<p><strong>go and cook your meal:</strong></p>
<ul>
<li><p><code>i</code> - <strong>before</strong> and <code>I</code> - <strong>beginning</strong>, <code>a</code> - <strong>after</strong> and <code>A</code> - <strong>ending</strong> for navigating to INSERT mode;</p></li>
<li><p><code>o</code> - <strong>below</strong>, <code>O</code> - <strong>above</strong> to insert line;</p></li>
<li><p><code>u</code> - <strong>undo</strong>, <code>Ctrl + R</code> - <strong>redo</strong>;</p></li>
<li><p><code>v</code> - <strong>individual</strong> visual, <code>V</code> - visual the <strong>whole</strong> line;</p></li>
<li><p><code>y</code> - yanking <strong>current</strong>, <code>Y</code>, <code>yy</code> - yanking <strong>whole</strong> line;</p></li>
<li><p><code>p</code> - pasting <strong>after</strong> or <strong>below</strong>, <code>P</code> - pasting <strong>before</strong> or <strong>above</strong>;</p></li>
<li><p><code>d</code> - deleting <strong>current</strong>, <code>dd</code> - deleting <strong>whole</strong> line, <code>D</code> - deleting to the <strong>end</strong> of line;</p></li>
<li><p><code>c</code> - same with <code>d</code> but for <strong>changing</strong>;</p></li>
<li><p><code>r</code> - replacing <strong>current</strong> with 1 character, <code>R</code> - enter the REPLACE mode and replace with <strong>multiple</strong> characters;</p></li>
<li><p><code>w</code>, <code>W</code> - jump word <strong>forward</strong>, <code>b</code>, <code>B</code> - jump word <strong>backward</strong>;</p></li>
<li><p><code>i</code> - <strong>inside</strong> the word, <code>e</code> - <strong>end</strong> of the word;</p></li>
<li><p><code>0</code> - <strong>begin</strong>, <code>$</code> - <strong>end</strong> of the line;</p></li>
<li><p>repeat by press key <strong>multiple</strong> times or <code>n</code> - number before command;</p></li>
<li><p><code>%</code> - jump to the <strong>closing</strong> bracket if you are on the opening one;</p></li>
<li><p><code>t</code> follow by a character will let you jump cursor to <strong>before</strong> the next nearest one;</p></li>
<li><p><code>f</code> same with <code>t</code>, but to the <strong>character’s position</strong>;</p></li>
<li><p><code>T</code> and <code>F</code> for the <strong>backward</strong>;</p></li>
<li><p><code>gg</code> - go to the <strong>begin</strong> of the line, <code>G</code> for the <strong>end</strong> of the file;</p></li>
<li><p><code>123G</code> or <code>:123</code> will bring you to the line 123; ….</p></li>
</ul>
<p><strong>now:</strong></p>
<ul>
<li><p><code>ciw</code> - changing the whole word; but</p></li>
<li><p><code>cib</code> , <code>ciB</code> - changing the text inside the current set of parenthesis () or braces {}, respectively, you can also <code>ci(</code> , <code>ci{</code> , <code>ci&lt;</code> for the specific.</p></li>
<li><p><code>ci"</code> - changing the text inside double quote;</p></li>
<li><p>if you want delete <code>d</code>, or yank <code>y</code> - replace the <code>c</code>;</p></li>
<li><p><code>5dw</code> will delete 5 words, <code>5d5w</code> will delete 5 words 5 times!;</p></li>
<li><p><code>5yy</code> copying 5 lines;</p></li>
<li><p><code>dt(</code> deleting everything up till the opening bracket, <code>df(</code> will delete the bracket also; …</p></li>
</ul>
<p><strong>even more advanced stuff:</strong></p>
<ul>
<li>indentation: <code>&gt;&gt;</code> to the right, <code>&lt;&lt;</code> to the left;</li>
<li><code>V</code> for Visual Line mode, which will automatically select entire lines;</li>
<li><code>Ctrl + v</code> for Block Visual mode, which will select rectangular regions of the text;</li>
<li><code>=</code> for auto indentation;</li>
<li><code>gg=G</code> will start at the begin of the file, auto indentation till the end of file (and end of at the end of file);</li>
<li><code>/</code> and word follow to search the word, then <code>n</code> to jump to the next found, <code>N</code> to jump to the previous one;</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Re-note about the search:</p>
<ul>
<li><code>/pattern</code> - search for pattern;</li>
<li><code>?pattern</code> - search backward for pattern;</li>
<li><code>\vpattern</code> - ‘very magic’ pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed);</li>
<li><code>n</code> - repeat search in same direction;</li>
<li><code>N</code> - repeat search in opposite direction;</li>
<li><code>#</code> go up, <code>*</code> go down.</li>
</ul>
</div>
</div>
<ul>
<li><code>ma</code>: mark A -&gt; to explore later;</li>
<li><code>zz</code>: centre the screen;</li>
<li><code>:%s/old/new/g</code> - replace all old with new throughout file;</li>
<li><code>:%s/old/new/gc</code> - replace all old with new throughout file with confirmations (without <code>c</code> is without confirmation);</li>
<li><code>.</code> repeat the last command;</li>
<li><code>"+</code> and <code>"*</code> are the special registers, which you copied in the system</li>
</ul>
</section>
<section id="registers-and-macros" class="level1">
<h1>registers and macros</h1>
<ul>
<li><code>d</code> deleting is also copying ~ cutting, so if you <code>y</code> then <code>d</code> you will lost the current clipboard</li>
<li><code>:reg</code> to see the history of the clipboard;</li>
<li><code>"7p</code> will paste the 7th register;</li>
<li><code>"7yy</code> yanks the whole line into 7th register;</li>
<li><code>"0p</code> the last thing that i actually yanked, not <code>d</code>;</li>
<li><code>qa</code> recording macro <span class="citation" data-cites="a">@a</span>, <code>q</code> quits recording;</li>
<li>you can see the macro in <code>:reg</code>, <code>@a</code> to use the macro; …</li>
</ul>
</section>
<section id="neovim-plugins" class="level1">
<h1>neovim &amp; plugins</h1>
<ul>
<li>better, have more pluggins supported;</li>
<li>config in <code>./nvim</code> using <code>init.vim</code> or <code>init.lua</code>;</li>
</ul>
</section>
<section id="vim-support" class="level1">
<h1>vim support</h1>
<ul>
<li>can use vim bindings in VS Code, Pycharm</li>
</ul>
</section>
<section id="outro" class="level1">
<h1>outro</h1>
<ul>
<li>it is recommended to use vim bindings while coding, even if you dont like the command line.</li>
</ul>
</section>
<section id="other-resources" class="level1">
<h1>other resources</h1>
<ol type="1">
<li><a href="https://vim.rtorr.com/">Vim cheat sheet</a></li>
<li><a href="https://github.com/junegunn/vim-plug">Vim plug</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>vim</category>
  <guid>https://lktuan.github.io/blog/2024-07-12-vim/</guid>
  <pubDate>Thu, 11 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-12-vim/vim.png" medium="image" type="image/png" height="127" width="144"/>
</item>
<item>
  <title>Recap: So you want to be a Python expert?</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-10-expert-in-python/</link>
  <description><![CDATA[ 





<p>🔥 source: <a href="https://www.youtube.com/watch?v=cKPlPJyQrt4"><strong>James Powell: So you want to be a Python expert? | PyData Seattle 2017</strong></a></p>
<section id="what-is-he-gonna-present" class="level1">
<h1>what is he gonna present?</h1>
<ul>
<li>something deeply behind the Zen of Python;</li>
<li>metaphors and programming in Python;</li>
<li>python is not only scripting language, he will be introducing 4 features of Python and the way experts would think about these features;</li>
<li>a lot of fundamental details of how these feature work but very little talk about we can conceptualize these features in the broader sense of what they mean for modeling core problem. so 4 features you might have heared before and couple of the core mental models how you can think about, an how you can think about python as a whole, wrapping everything together;</li>
<li>you will see me stumble to understand that in case you dont utd or dont have docs memorized, it’s alright, the target is to know what they are and what they mean;</li>
<li>the talk presumes you to have a baseline of Python, but in case you a new to Python he believes there are cores you can take away.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/James Powell_ So you want to be a Python expert_ _ PyData Seattle 2017 5-37 screenshot.png" class="img-fluid figure-img"></p>
<figcaption>James Powell on PyData Seattle 2017</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="data-model-protocol-or-dunder-method" class="level1">
<h1>data model protocol (or dunder method)</h1>
<p>assume we have a data model with Polynomial object intitially do nothing, why I need 4 lines (instead of 2 lines) to create 2 Polynominals. How can I create and assign coefficients together.</p>
<div id="935bce05" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Polynomial:</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb1-3">p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Polynomial()</span>
<span id="cb1-4">p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Polynomial()</span>
<span id="cb1-5">p1.coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  x^2 + 2x + 3</span></span>
<span id="cb1-6">p2.coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3x^2 + 4x + 3</span></span></code></pre></div>
</details>
</div>
<p>the answer is using a constructor <code>__init__</code>, then we can compact our code like this:</p>
<div id="c80a8e25" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Polynomial:</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>coeffs):</span>
<span id="cb2-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coeffs</span>
<span id="cb2-4"></span>
<span id="cb2-5">p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Polynomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> ) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  x^2 + 2x + 3</span></span>
<span id="cb2-6">p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Polynomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> ) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3x^2 + 4x + 3</span></span></code></pre></div>
</details>
</div>
<p>but if we print our objects in the terminal, they look so ugly. We miss the method that actually call <code>repr(obj)</code> when we run <code>obj</code>:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/1_repr.png" class="img-fluid figure-img"></p>
<figcaption>The need of <code>__repr__</code></figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>that’s what <code>__repr__</code> for, a printable representation of the class:</p>
<div id="2f115390" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Polynomial:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>coeffs):</span>
<span id="cb3-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coeffs</span>
<span id="cb3-4"></span>
<span id="cb3-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polynomial(*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{!r}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coeffs)</span>
<span id="cb3-7"></span>
<span id="cb3-8"></span>
<span id="cb3-9">p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Polynomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  x^2 + 2x + 3</span></span>
<span id="cb3-10">p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Polynomial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3x^2 + 4x + 3</span></span></code></pre></div>
</details>
</div>
<p>the next thing we wanna do is to add Polinimials together <code>p1 + p2</code>.</p>
<div id="ee94fb92" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__add__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb4-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Polynomial(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x, y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coeffs, other.coeffs)))</span></code></pre></div>
</details>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>What is pattern here? I have some behaviours that I want to implement, and I write some <strong>underscore</strong> (<code>__x__</code>) funtions. We call them dunder or underscore methods.</p>
<p>Try google “data model” and we’ll a bunch of documents that list all method to implement the principle behaviours of our objects. There are top-level functions of top-level syntaxes that corresponding to <code>__</code>.</p>
<p>But there are smthg more fundamental here, when I want to:</p>
<ul>
<li>x + y -&gt; <code>__add__</code>;</li>
<li>initialize x -&gt; <code>__init__</code>;</li>
<li>repr(x) -&gt; <code>__repr__</code>.</li>
</ul>
<p>Then what if we want to implement the <code>len()</code> (return the length, which is popular know Python function) -&gt; naturally we’ll be thinking of <code>__len__</code>.</p>
<div id="705b098f" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coeffs)</span></code></pre></div>
</details>
</div>
</div>
</div>
<p>The Python data model is a means by which you can protocols. Thos protocols have abstract meaning depending on the object itself. We tight the behaviours to top-level <strong>syntaxes</strong> and <strong>functions</strong>.</p>
<p>Similarly, if we do see the object Polynomial a executable, callable thing, we can implement a <code>__call__</code> which will turn our class to function, in this case we cant imagine such thing, so pass.</p>
<p>✍ There are 3 core patterns we want to understand and remember in Python to really understand object orientation in Python:</p>
<ol type="1">
<li>The protocol view of Python;</li>
<li>The buil-in inheritance protocol;</li>
<li>Some caveats around how OOP in Python works.</li>
</ol>
<p>Which will be continue to present in this video is jumping into a very tricky metaphor a feature we may have heard of.</p>
</section>
<section id="meta-class" class="level1 page-columns page-full">
<h1>meta class</h1>
<p>imagine there are 2 groups working on some piece of software. one is core infrastructure of the group and they write <code>library</code> code, the other group is devloper group, they write <code>user</code> code. the developer use <code>library</code> code to accomplish actual business objectives. the core team less cares about business problem, they focus on technical stuffs.</p>
<p>you are in the dev team and there is no way to change to code of <code>library.py</code>. in what circumstance the code of <code>user</code> can break -&gt; there is no <code>foo</code> method! To avoid that, we could simply write a test that call <code>bar()</code>, then we could know if it fails before production environment’s runtime.</p>
<p>is there anything simpler to know the ability to fail before hit run time in production env? -&gt; use <code>assert</code> to check existence of the attribute. we will have an early warning right before the class was initiated.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/2_assert.png" class="img-fluid figure-img"></p>
<figcaption>we can know if the core team change the function name to “food”</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>by this way we are enforcing constraints on the base class from the derived class.</p>
<p>now we move to a reverse situation, you are the core structure writer and have to deal with the meathead in the business unit that actually using/abusing/missusing your code ~ you have no idea what are they doing. you write the <code>Base</code> class with the assumption and some responsible developer in the BU will go and implement the <code>bar</code> method.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/3_reverse_sit.png" class="img-fluid figure-img"></p>
<figcaption>what if you stand on the left side pane</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>you have no ability to change and even have no idea where the code on the right pane sit. we can not use <code>hasattr()</code> for this particular situation. the first method is to use <code>try ... catch ...</code>, but it only catches in runtime and we will miss catching it before it goes to production env.</p>
<div class="{callout-note}">
<p>The reason that we could call Python a <strong>protocol orientated language</strong> is not just because the Python data model the object model is protocol orientated but that the entire Python language itself has a notion of hooks and protocols and safety valves within it.</p>
<p>Python is much much simpler language, the code run linearly from top to bottom. And the class statement in Python is actually an executable code. We can write this:</p>
<div id="459c7412" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb6-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or the same thing in other way</span></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base:</span>
<span id="cb6-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb6-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> bar(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-9">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span></span></code></pre></div>
</details>
</div>
<p>Only the last one will survive. Python accepts this syntax because it’s class is <strong>fundamentally executable</strong>.</p>
</div>
<p>Let’s get into something more interesting! create a class inside a function and use a function in a module in standard libbrary in Python called <code>dis</code>.</p>
<div id="e9bb28e0" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a class inside a function</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _():</span>
<span id="cb7-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base:</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dis stands for disassemble</span></span>
<span id="cb7-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dis <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dis</span></code></pre></div>
</details>
</div>
<p>let’s ‘dis’ - stands for disassemble - to see what happen in the bytecode. there are actually things in Python bytecode call <code>LOAD_BUILD_CLASS</code>, it’s actual executable runtime instruction in the Python interpreter for create a class.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/4_dis.png" class="img-fluid figure-img"></p>
<figcaption>disassemble</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>at the first section of this lecture, we saw some <strong>correspondence</strong> between top-level syntac or function AND some underscore method that implements that syntax or function. there should be also top-level mechanism, not explicitly syntax or function, with the process of building a class. there is a build-ins function called <code>__build_class__</code>.</p>
<div id="0f955f2e" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">old_bc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> __build_class__</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> my_bc(func, name, base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kw):</span>
<span id="cb8-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> Base:</span>
<span id="cb8-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'check if the bar method is defined'</span>)</span>
<span id="cb8-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> old_bc(func, name, base, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kw)</span>
<span id="cb8-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> old_bc(func, name, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kw)</span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> builtins</span>
<span id="cb8-11">builtins.__build_class__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> my_bc</span></code></pre></div>
</details>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/5_build_class.png" class="img-fluid figure-img"></p>
<figcaption><code>__build_class__</code>, we can check if the <code>bar</code> method is implemented, Python is <strong>protocal oriented language</strong>!</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>It’s actually quite a common pattern and quite a fundamental piece of Python almost everything that a Python language does in an execution context like building classes, creating functions, importing modules you can find a way to <strong>hook</strong> into that. once you can find a way to hook into that you can start doing things that you want to do like check is my user code going to break from the perspective the library author.</p>
<p>The most important thing here is <strong>understanding existence of this pattern</strong>, knowing that there are options solving such problem, and there are even better approachs.</p>
<section id="there-are-2-fundamental-ways-that-people-ussually-use-to-solve-this" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="there-are-2-fundamental-ways-that-people-ussually-use-to-solve-this">There are 2 fundamental ways that people ussually use to solve this</h2>
<section id="meta-class-1" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="meta-class-1">1. meta class</h3>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside"><a href="https://stackoverflow.com/questions/395982/metaclass-new-cls-and-super-what-is-the-mechanism-exactly">futher discussion</a></span></div></div>
<div id="38e91bf5" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># meta classes are merely derived from `type`</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BaseMeta(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>):</span>
<span id="cb9-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__new__</span>(cls, name, bases, namespace):</span>
<span id="cb9-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BaseMeta.__new__'</span>, cls, name, bases, namespace)</span>
<span id="cb9-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Base'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> namespace:</span>
<span id="cb9-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bad User class, 'bar' is not defined"</span>)</span>
<span id="cb9-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__new__</span>(cls, name, bases, namespace)</span>
<span id="cb9-8"></span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then our Base should be derived from BaseMeta</span></span>
<span id="cb9-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base(metaclass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BaseMeta):</span>
<span id="cb9-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bar()</span></code></pre></div>
</details>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/6_meta_class.png" class="img-fluid figure-img"></p>
<figcaption>metaclass</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>That’s it! you can control, constraint the derived class from the base class in class hierachy.</p>
</section>
<section id="init_subclass__" class="level3">
<h3 class="anchored" data-anchor-id="init_subclass__">2. <code>__init_subclass__</code></h3>
<p>We can implement <code>Base</code> like this:</p>
<div id="090bfa24" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Base():</span>
<span id="cb10-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bar()</span>
<span id="cb10-4"></span>
<span id="cb10-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init_subclass__</span>(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb10-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"init subclass"</span>, cls.__dict__, kwargs)</span>
<span id="cb10-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cls.__dict__:</span>
<span id="cb10-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bad sub class"</span>)</span>
<span id="cb10-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init_subclass__</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span></code></pre></div>
</details>
</div>
</section>
</section>
</section>
<section id="decorator" class="level1">
<h1>decorator</h1>
<p>We would have met pattern like this, that’s is decorator:</p>
<div id="1b733668" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dec</span> </span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f():</span>
<span id="cb11-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
</details>
</div>
<p>Python is a live language, there is no separate step that turns function definitions into bags of a set bits tagged and some elf binary or some <a href="https://en.wikipedia.org/wiki/Portable_Executable">PE</a> binary somewhere. That a function definition is actually a live thing, it actually runs at runtime, there’s actually executable code associated with this def <code>f()</code>.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-10-expert-in-python/7_interact_with_object.png" class="img-fluid figure-img"></p>
<figcaption>we can interact with our object as Python is a live language, the function itself is a runtime object</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>That every Python structure that you interact with whether it’s an object or a function or a generator has some <strong>runtime life</strong>, has some <strong>runtime existence</strong> you can see it in memory, you can ask it questions like what module UI were you defined in. you can even ask it very useful questions like if you use the inspect module you can say what’s your source code.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> decorators  python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> .<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\d</span>eco.py</span>
<span id="cb12-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> from <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">inspect</span> import getsource</span>
<span id="cb12-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> getsource<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">add</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'def add(a, b=10):\n    return a + b\n'</span></span>
<span id="cb12-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> print<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">getsource</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">add</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb12-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">def</span> add<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">a,</span> b=10<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">a</span> + b </span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> </span></code></pre></div>
<p>now let’s say I want to calculate how much time does it take to perform the <code>add</code>. simply we would thinking about <code>time</code>, like this:</p>
<div id="17be65b1" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb13-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb13-5"> </span>
<span id="cb13-6">before <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb13-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add(10)'</span>, add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb13-8">after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb13-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time_taken'</span>, after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> before)</span>
<span id="cb13-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add(20, 30)'</span>, add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span>
<span id="cb13-11">after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb13-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time_taken'</span>, after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> before)</span>
<span id="cb13-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add("a", "b")'</span>, add(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>))</span>
<span id="cb13-14">after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb13-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time_taken'</span>, after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> before)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>add(10) 20
time_taken 0.0
add(20, 30) 50
time_taken 0.0
add("a", "b") ab
time_taken 0.0</code></pre>
</div>
</div>
<p>there is something wrong here because we need to add code to everywhere we want to calculate. we see another important pattern in Python, decorator, the Python developers want you to write the simplest, stupidest, quickest thing to get the job done and get the rest of your day with your family.</p>
<p>we will see alot of scenarios where of cases where you can write the simple and stupidest thing to get the job done and when the task at hand becomes harder or more complex or the requirements change you can change your code in a very simple fashion to linearly extend its functionality without have to re-write it from scratch.</p>
<p>in Python we’ll see a number of different features are orientated around how do we write the simplest thing today and then when the problem gets a little bit harder we have an avenue for making our code a little bit more complex.</p>
<p>we can modified a <code>add</code> alittle bit</p>
<div id="9ee3649c" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb15-4">    before <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb15-5">    rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb15-6">    after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb15-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elapsed:'</span>, after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> before)</span>
<span id="cb15-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span></code></pre></div>
</details>
</div>
<p>But if we have more functions, let say <code>sub</code>? We need to modify and make our code complicated. <strong>Python is live language</strong> that everything has some runtime representaion. We can create <code>timer()</code> which take <code>func</code>, <code>x</code>, and <code>y</code> as arguments (<code>x</code> and <code>y</code> will be forwarded to calculation function)</p>
<div id="3aca1fe5" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> timer(func, x, y):</span>
<span id="cb16-4">    before <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb16-5">    rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(x,y)</span>
<span id="cb16-6">    after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb16-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elapsed:'</span>, after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> before)</span>
<span id="cb16-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and </span></span>
<span id="cb16-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add(20, 30)'</span>, timer(add, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span></code></pre></div>
</details>
</div>
<p>we can also wrapping like this, <code>timer()</code> will return a function <code>f</code>:</p>
<div id="19af8894" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> timer(func):</span>
<span id="cb17-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb17-5">      before <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb17-6">      rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(x,y)</span>
<span id="cb17-7">      after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time()</span>
<span id="cb17-8">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elapsed:'</span>, after <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> before)</span>
<span id="cb17-9">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb17-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> f</span>
<span id="cb17-11"></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and </span></span>
<span id="cb17-13">add <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer(add)</span>
<span id="cb17-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add(20, 30)'</span>, add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span></code></pre></div>
</details>
</div>
<p>Python provides a syntax for easily implement every behaviours of <code>timer()</code> to every function:</p>
<div id="7447cf77" class="cell" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@timer</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb18-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add(20, 30)'</span>, add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span></code></pre></div>
</details>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Fundamentally it’s about allowing you to take this wrapping behavior for functions and to wrap wide swathes of functions in one fashion without having to rewrite a lot of user code or having to even perform a lot of turn on your library code.</p>
</div>
</div>
<p>another example when we want a function to run n-times:</p>
<div id="827cb88c" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's say 2 times</span></span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ntimes(f):</span>
<span id="cb19-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb19-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb19-6">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'running {.__name__}'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(f))</span>
<span id="cb19-7">      rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb19-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb19-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper</span>
<span id="cb19-10">    </span>
<span id="cb19-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@ntimes</span></span>
<span id="cb19-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb19-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb19-14"></span>
<span id="cb19-15">add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>running add
running add</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>30</code></pre>
</div>
</div>
<p>wrapp <code>n</code> in to the function so <code>ntimes()</code> takes <code>n</code> instead of <code>f</code> as arg:</p>
<div id="5f7c8852" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># high order decorators</span></span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ntimes(n):</span>
<span id="cb22-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> inner(f):</span>
<span id="cb22-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb22-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb22-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'running {.__name__}'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(f))</span>
<span id="cb22-7">        rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb22-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb22-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper</span>
<span id="cb22-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inner</span>
<span id="cb22-11">    </span>
<span id="cb22-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@ntimes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb22-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb22-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb22-15"></span>
<span id="cb22-16">add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>running add
running add
running add</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>30</code></pre>
</div>
</div>
<p>There is a very important core concept that is hidden in here which is what you might call the <strong>closure object duality</strong>. it’s not something that we have time to look at in this session.</p>
</section>
<section id="generator" class="level1 page-columns page-full">
<h1>generator</h1>
<p>recall what we’ve learned in previous section:</p>
<ul>
<li>there are top-level syntax or function &lt;–&gt; and some underscore methods that implemented it.</li>
<li>if you have parentheses after something x() &lt;–&gt; implies <code>__call__</code> protocol implemented.</li>
</ul>
<p>what is different between these 2:</p>
<div id="0698ed3a" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add1(x, y):</span>
<span id="cb25-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y</span>
<span id="cb25-3"></span>
<span id="cb25-4"></span>
<span id="cb25-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Adder:</span>
<span id="cb25-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb25-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y </span>
<span id="cb25-8">add2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Adder()</span>
<span id="cb25-9"></span>
<span id="cb25-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(add1(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 30</span></span>
<span id="cb25-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(add2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 20</span></span>
<span id="cb25-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(add1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;class 'function'&gt;</span></span>
<span id="cb25-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(add2) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;class '__main__.Adder'&gt;</span></span></code></pre></div>
</details>
</div>
<p>functionally there is not distinguish between <code>add1</code> and <code>add2</code>. <code>add1</code> is syntaxtically whole hell more easy to write. another diffence is if you want to add some <em>statefull behaviors</em>, we can easily modified the class:</p>
<div id="a5a98768" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Adder:</span>
<span id="cb26-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb26-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb26-4"></span>
<span id="cb26-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb26-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb26-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.z</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="margin-aside">Đọc thêm về <a href="https://magz.techover.io/2021/12/04/python-deep-dive-hieu-closures-decorators-va-cac-ung-dung-cua-chung-phan-1/">chuỗi bài này</a> nếu thấy confuse</span></div></div>
<p>there is one what to do with the Adder, another way to do with the function, what he hinted at this object <strong>closure duality</strong>.</p>
<p>let’s think about a function that take a lot of time to do something, like loading the data from the database. we demo by a simple function <code>compute()</code>, which sleep 0.5 sec for each loop. the function only gives us the result once it completelt complete the loop, it will give us the entire result all at once. what if we care about the first? the first 3 values?</p>
<p>this is undesirable. this is wasteful both from the perspective of time &amp; memory. let’s think about it with the object model and rewrite under <code>Compute</code> class:</p>
<div id="583238e2" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep</span>
<span id="cb27-2"></span>
<span id="cb27-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute()</span>
<span id="cb27-4">  rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb27-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb27-6">    sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span>
<span id="cb27-7">    rv.append(i)</span>
<span id="cb27-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb27-9"></span>
<span id="cb27-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Compute:</span>
<span id="cb27-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb27-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb27-13"></span>
<span id="cb27-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb27-15">    rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb27-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb27-17">      sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span>
<span id="cb27-18">      rv.append(i)</span>
<span id="cb27-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb27-20">compute2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Compute()</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full"><p>the 2nd method: </p><div class="no-row-height column-margin column-container"><span class="margin-aside"><a href="https://realpython.com/python-callable-instances">read more</a></span></div></div>
<ul>
<li>Retain state between calls (<strong>stateful callables</strong>)</li>
<li>Cache values that result from previous computations</li>
<li>Implement straightforward and convenient APIs</li>
</ul>
<p>if you want to access data during computaion, think of:</p>
<pre><code>for x in xs:
  pass

x1 = iter(xs)   ---&gt; __iter__
while True:
  x = next(x1)  ---&gt; __next__</code></pre>
<p>and re-write the <code>Compute</code> like this:</p>
<div id="630e83a0" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Compute:</span>
<span id="cb29-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__iter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb29-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb29-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> </span>
<span id="cb29-5">  </span>
<span id="cb29-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__next__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb29-7">    rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.last</span>
<span id="cb29-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb29-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb29-10">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">StopIteration</span>()</span>
<span id="cb29-11">    sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span>
<span id="cb29-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rv</span>
<span id="cb29-13"></span>
<span id="cb29-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> Compute():</span>
<span id="cb29-15">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(val)</span></code></pre></div>
</details>
</div>
<p>now, it:</p>
<ul>
<li>takes 1 iteration to let you start using it;</li>
<li>takes no storage;</li>
<li>but looks ugly.</li>
</ul>
<p>and there is much simpler way to write a function that operate in such fashion, the <strong>generator</strong> syntax, it merely:</p>
<div id="8ff097c6" class="cell" data-execution_count="23">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute()</span>
<span id="cb30-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb30-3">    sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span>
<span id="cb30-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> i</span></code></pre></div>
</details>
</div>
<p>its state is maintained internally. instead of eagerly computing the values, you give them to the user as the ask. let’s look in the last example:</p>
<div id="cf92bb02" class="cell" data-execution_count="24">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Api:</span>
<span id="cb31-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_this_first():</span>
<span id="cb31-3">    first()</span>
<span id="cb31-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_this_second():</span>
<span id="cb31-5">    second()</span>
<span id="cb31-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_this_last():</span>
<span id="cb31-7">    lass()</span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in documentation you ask user to use those functions in order but no physically constraint you to not run like this:</span></span>
<span id="cb31-9">Api.run_this_last()</span>
<span id="cb31-10">Api.run_this_second()</span>
<span id="cb31-11">Api.run_this_first()</span></code></pre></div>
</details>
</div>
<p>the generator not only yield the result back, but also the control back to the caller. we can interleave our code with library code, controling them to run in order, that is conceptualization of how generators are built upon - co-routines.</p>
<p>we can either define execution function inside the class or use generator to control the sequence:</p>
<div id="2a98e5f2" class="cell" data-execution_count="25">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1">...</span>
<span id="cb32-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> doit():</span>
<span id="cb32-3">    first()</span>
<span id="cb32-4">    second()</span>
<span id="cb32-5">    last()</span>
<span id="cb32-6">... </span>
<span id="cb32-7"></span>
<span id="cb32-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or</span></span>
<span id="cb32-9"></span>
<span id="cb32-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> api()</span>
<span id="cb32-11">  first()</span>
<span id="cb32-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb32-13">  second()</span>
<span id="cb32-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb32-15">  last()</span></code></pre></div>
</details>
</div>
</section>
<section id="context-manager" class="level1">
<h1>context manager</h1>
<p>setup &amp; teardown ~ initial action and final action. we would often see pattern like:</p>
<div id="38b78af3" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ctx.py'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb33-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
</details>
</div>
<p>beyond the file, it can be also sqllite</p>
<div id="3576f9c0" class="cell" data-execution_count="27">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span></span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># control the execution is executed when connection is open</span></span>
<span id="cb34-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.db'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb34-5">  cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb34-6">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create table points(x int, y int)'</span>)</span>
<span id="cb34-7">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 1)'</span>)</span>
<span id="cb34-8">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (2, 1)'</span>)</span>
<span id="cb34-9">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 2)'</span>)</span>
<span id="cb34-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select sum(x * y) from points'</span>):</span>
<span id="cb34-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb34-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select x, y from points'</span>):</span>
<span id="cb34-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb34-14">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop table points'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>(5,)
(1, 1)
(2, 1)
(1, 2)</code></pre>
</div>
</div>
<p>now we already control if connection is live to do something, we’ve not yet controlled inside the connection, the entry point and the exit point. now behind the scence</p>
<pre><code>with ctx() as x:
  pass</code></pre>
<p>will look like the following:</p>
<pre><code>x = ctx().__enter__
try
  pass
finally:
  x.__exit__</code></pre>
<p>we’ll try to emplement this to our connection, we’ll wrap it to a <strong>temporary table behaviour</strong>:</p>
<div id="2b7f6312" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span></span>
<span id="cb38-2"></span>
<span id="cb38-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Temporarytable:</span>
<span id="cb38-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, cur):</span>
<span id="cb38-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cur</span>
<span id="cb38-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__enter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb38-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__enter__'</span>)</span>
<span id="cb38-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create table points(x int, y int)'</span>)</span>
<span id="cb38-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__exit__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>arg): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># why need *arg</span></span>
<span id="cb38-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__exit__'</span>)</span>
<span id="cb38-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop table points'</span>)</span>
<span id="cb38-12"></span>
<span id="cb38-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.db'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb38-14">  cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb38-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> Temporarytable(cur<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cur):</span>
<span id="cb38-16">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 1)'</span>)</span>
<span id="cb38-17">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (2, 1)'</span>)</span>
<span id="cb38-18">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 2)'</span>)</span>
<span id="cb38-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select sum(x * y) from points'</span>):</span>
<span id="cb38-20">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb38-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select x, y from points'</span>):</span>
<span id="cb38-22">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>__enter__
(5,)
(1, 1)
(2, 1)
(1, 2)
__exit__</code></pre>
</div>
</div>
<p>now can the exit run before the enter, no! they need to be run sequencely. it remind us about the <strong>generator</strong> to improve this:</p>
<div id="749b00d4" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span></span>
<span id="cb40-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> temporarytable(cur):</span>
<span id="cb40-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'created table'</span>)</span>
<span id="cb40-4">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create table points(x int, y int)'</span>)</span>
<span id="cb40-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb40-6">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop table points'</span>)</span>
<span id="cb40-7">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dropped table'</span>)</span>
<span id="cb40-8"></span>
<span id="cb40-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Temporarytable:</span>
<span id="cb40-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, cur):</span>
<span id="cb40-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cur</span>
<span id="cb40-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__enter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb40-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temporarytable(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cur)</span>
<span id="cb40-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen)</span>
<span id="cb40-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__exit__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>arg):</span>
<span id="cb40-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb40-17"></span>
<span id="cb40-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.db'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb40-19">  cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb40-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> Temporarytable(cur<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cur):</span>
<span id="cb40-21">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 1)'</span>)</span>
<span id="cb40-22">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (2, 1)'</span>)</span>
<span id="cb40-23">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 2)'</span>)</span>
<span id="cb40-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select sum(x * y) from points'</span>):</span>
<span id="cb40-25">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb40-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select x, y from points'</span>):</span>
<span id="cb40-27">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>created table
(5,)
(1, 1)
(2, 1)
(1, 2)
dropped table</code></pre>
</div>
</div>
<p>enter and exit are already implemented in function <code>temporarytable</code> and cursor is implemented in the <code>connect()</code> call. now i would rewrite like this</p>
<div id="3007e670" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span></span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Temporarytable:</span>
<span id="cb42-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, gen):</span>
<span id="cb42-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen</span>
<span id="cb42-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb42-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.args, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> args, kwargs</span>
<span id="cb42-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span>
<span id="cb42-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__enter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb42-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.kwargs)</span>
<span id="cb42-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_instance)</span>
<span id="cb42-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__exit__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>arg):</span>
<span id="cb42-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen_instance, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb42-14"></span>
<span id="cb42-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@Temporarytable</span></span>
<span id="cb42-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> temporarytable(cur):</span>
<span id="cb42-17">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create table points(x int, y int)'</span>)</span>
<span id="cb42-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb42-19">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop table points'</span>)</span>
<span id="cb42-20"></span>
<span id="cb42-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># temporarytable = Temporarytable(temporarytable)</span></span>
<span id="cb42-22"></span>
<span id="cb42-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.db'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb42-24">  cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb42-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> temporarytable(cur):</span>
<span id="cb42-26">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 1)'</span>)</span>
<span id="cb42-27">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (2, 1)'</span>)</span>
<span id="cb42-28">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 2)'</span>)</span>
<span id="cb42-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select sum(x * y) from points'</span>):</span>
<span id="cb42-30">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb42-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select x, y from points'</span>):</span>
<span id="cb42-32">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>(5,)
(1, 1)
(2, 1)
(1, 2)</code></pre>
</div>
</div>
<p>all the stuff context manager above we do not need to write:</p>
<div id="f0ded331" class="cell" data-execution_count="31">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span></span>
<span id="cb44-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> contextlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> contextmanager</span>
<span id="cb44-3"></span>
<span id="cb44-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@contextmanager</span></span>
<span id="cb44-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> temporarytable(cur):</span>
<span id="cb44-6">  cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create table points(x int, y int)'</span>)</span>
<span id="cb44-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb44-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb44-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">finally</span>:</span>
<span id="cb44-10">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop table points'</span>)</span>
<span id="cb44-11"></span>
<span id="cb44-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># temporarytable = Temporarytable(temporarytable)</span></span>
<span id="cb44-13"></span>
<span id="cb44-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.db'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> conn:</span>
<span id="cb44-15">  cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb44-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> temporarytable(cur):</span>
<span id="cb44-17">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 1)'</span>)</span>
<span id="cb44-18">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (2, 1)'</span>)</span>
<span id="cb44-19">    cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into points(x, y) values (1, 2)'</span>)</span>
<span id="cb44-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select sum(x * y) from points'</span>):</span>
<span id="cb44-21">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb44-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select x, y from points'</span>):</span>
<span id="cb44-23">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>(5,)
(1, 1)
(2, 1)
(1, 2)</code></pre>
</div>
</div>
</section>
<section id="summary" class="level1">
<h1>summary</h1>
<p>all combination of what we’ve learned in the last example:</p>
<ul>
<li>a <strong>context manager</strong> is merely some piece of code that pairs set up actions and teardown actions. teardown occurs only if set up occurs</li>
<li>a <strong>generator</strong> is merely some form of syntax that allows us to do things like enforce sequencing and interleaving notice the</li>
</ul>
<p>finally we need something to adapt the generator to this data model that we looked at at the very beginning. we have these underscore methods and we have to find some way to take how the generator works and fit it into those underscore methods. one of the things we need to do in order to do that is we need to take this generator object to wrap it in some fashion that wrapping is part of the core of how Python works it’s easy to dynamics and construct functions</p>
<ul>
<li>there does happen to be a feature called <strong>decorators</strong> that allows us a nice convenient syntax for doing that exactly.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>criteria of Python expert code:</p>
<ul>
<li>expert level code is not code that uses every single feature;</li>
<li>it’s in fact not code that even uses that many features of Python;</li>
<li>it’s code that has a certain clarity to where and when a feature should be used;</li>
<li>it’s code that doesn’t waste the time of the person who’s writing it because they say to themselves I have this pattern Python has this mechanism I fit them together and everything just seamlessly and and very smoothly works;</li>
<li>it’s code that doesn’t have a lot of additional mechanisms associated with it it doesn’t have people creating their own protocols it doesn’t have people creating their own frameworks where the language itself provides the core pieces that you need and you merely have to understand what those core pieces are what they need and how to assemble them.</li>
</ul>
</div>
</div>
</section>
<section id="futher-reading" class="level1">
<h1>futher reading</h1>
<ol type="1">
<li><a href="https://docs.python.org/3/reference/datamodel.html">Python data model</a></li>
<li><a href="https://www.geeksforgeeks.org/python-metaclass-__new__-method/">Python metaclass <code>__new__</code></a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>pydata</category>
  <guid>https://lktuan.github.io/blog/2024-07-10-expert-in-python/</guid>
  <pubDate>Tue, 09 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-10-expert-in-python/pydata-logo-final.png" medium="image" type="image/png" height="60" width="144"/>
</item>
<item>
  <title>A lesson of advanced python from Juan Rodríguez</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-07-08-advanced-python/</link>
  <description><![CDATA[ 





<p>This <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/tree/main">lesson</a> was found on <a href="https://github.com/astrojuanlu">Juan Luis Cano Rodríguez’s</a> github profile when I came across his talk <a href="https://www.youtube.com/watch?v=ffDHdtz_vKc">“Building the composable Python data stack with Kedro &amp; Ibis”</a> (bookmarked for learning later) in <a href="https://www.youtube.com/playlist?list=PLGVZCDnMOq0rrhYTNedKKuJ9716fEaAdK">Pydata London 2024</a>.</p>
<p>This is my notes:</p>
<section id="intro" class="level1">
<h1>00 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/00_intro.ipynb">intro</a></h1>
<section id="learning-objectives" class="level2">
<h2 class="anchored" data-anchor-id="learning-objectives">learning objectives</h2>
<ul>
<li>Learn modern software engineering practices using Python</li>
<li>Understand the value of automation in the software engineering process</li>
<li>Gain insight into how Data Science projects are put in production</li>
<li>Learn better techniques to collaborate in software projects</li>
</ul>
<p>The instructor used Linux / Conda, err I just have Window here so there is no other way but right I will try to make stuffs work in Window. Let’s get started!</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://raw.githubusercontent.com/astrojuanlu/ie-mbd-advanced-python/e2224276f91529280ebfcd42ddc7dc22cf0d2010/img/quote-talk-is-cheap-show-me-the-code-linus-torvalds-273528.jpg" class="img-fluid figure-img"></p>
<figcaption>stolen from the lecture</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="git" class="level1">
<h1>01 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/01_git.ipynb">git</a></h1>
<section id="glossary" class="level2">
<h2 class="anchored" data-anchor-id="glossary">glossary</h2>
<ul>
<li><strong>Repository</strong>: Directory tracked by git, contains a <code>.git</code> folder and it’s created by <code>$ git init</code>;</li>
<li><strong>Commit</strong>: State or snapshot of the repository, they are created by <code>$ git commit</code>;</li>
<li><strong>Branch</strong>: A parallel or separate line of development, the default one is master and they are created by <code>$ git branch</code> or <code>$ git checkout -b</code>.</li>
</ul>
</section>
<section id="git-uses-a-linux-like-cli-so-now-linux-cli-101-and-how-to-do-the-same-on-window-pwsh" class="level2">
<h2 class="anchored" data-anchor-id="git-uses-a-linux-like-cli-so-now-linux-cli-101-and-how-to-do-the-same-on-window-pwsh">git uses a Linux-like cli so now Linux cli 101 (and how to do the same on Window pwsh)</h2>
<ul>
<li><code>whoami</code>: who am i</li>
<li><code>pwd</code>: print working directory</li>
<li><code>ls</code>: list all file in the dir, <code>.</code> for current folder, <code>..</code> for parent one (seems there is no <code>--color</code> or <code>-a</code> in pwsh)</li>
<li><code>cd</code>: change dir</li>
<li><code>touch</code>: create empty file (in pwsh we use <code>echo "" &gt;&gt; file_name</code>)</li>
<li><code>cat</code>: concatenate, print file contents</li>
<li><code>nano</code>: edit a file from the command line (there is a <a href="https://www.hanselman.com/blog/developers-can-run-bash-shell-and-usermode-ubuntu-linux-binaries-on-windows-10">way</a> that allows us to do the same in win10, but ya, nope)</li>
</ul>
</section>
<section id="workflow" class="level2">
<h2 class="anchored" data-anchor-id="workflow">workflow</h2>
<p>I did these in pwsh:</p>
<ol type="1">
<li>Create a directory <code>mkdir test_project</code> and navigate there <code>cd test_project</code>;</li>
<li>Init a git repository <code>git init</code>;</li>
<li>Check status <code>git status</code> (“on branch master, no commits yet, nothing to commit”);</li>
<li>Create some files <code>echo "#Hello, world!" &gt;&gt; readme.md</code>;</li>
<li>Stage the files <code>git add readme.md</code>;</li>
<li>Commit the changes <code>git commit -m "initial commit"</code>;</li>
</ol>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Do not run <code>git init</code> on your home directory, as it can lead to confusion and potential data loss. If <code>git status</code> gives a lot of untracked files unrelated to your project, you might want to <code>rm -rf .git</code> and start in another directory. Notice that this command removes all git history.</p>
</div>
</div>
</section>
<section id="branching" class="level2">
<h2 class="anchored" data-anchor-id="branching">branching</h2>
<ol type="1">
<li>Create and checkout to new branch <code>git switch -c branch1</code> (<code>-c</code> stands for create);</li>
<li>Commit there (see above);</li>
<li>Go back to main branch <code>git switch master</code>;</li>
<li>Merge changes <code>git merge branch1</code>;</li>
<li>Delete branch <code>git branch -d branch1</code> (<code>-d</code> stands for delete, don’t forget this step!).</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Normally, the <code>git merge</code> step happens online using <em>pull requests</em> or <em>merge requests</em>, which are <strong>not</strong> git concepts, but GitHub/GitLab concepts.</li>
<li>If <code>git switch</code> does not work for you, you might have an older version of Git. Consider upgrading, or alternatively replace all <code>git switch -c</code> with <code>git checkout -b</code>.</li>
</ul>
</div>
</div>
<blockquote class="blockquote">
<p>Pull requests (PR) let you tell others about changes you’ve pushed to a branch in a repository on GitHub. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before your changes are merged into the base branch. – GitHub</p>
</blockquote>
<blockquote class="blockquote">
<p>A merge request (MR) is a proposal to incorporate changes from a source branch to a target branch. – GitLab</p>
</blockquote>
<blockquote class="blockquote">
<p>Remember to <strong>never commit to master</strong>. – Git Workflow</p>
</blockquote>
</section>
<section id="merging" class="level2">
<h2 class="anchored" data-anchor-id="merging">merging</h2>
<p>2 types of merging:</p>
<ul>
<li><strong>Fast-forward merge</strong>: There is no diverging history, and git just “advances the pointer” of the current branch. <code>git merge new-branch --ff-only</code> will fail if a fast-forward merge is not possible;</li>
<li><strong>Non fast-forward merge</strong>: The history diverged, and git will create a merge commit (hence ask for a commit message) with two parents that combines the two branches. <code>git merge new-branch --no-ff</code> always creates a merge commit even if a fast-forward merge is possible.</li>
</ul>
<p>GitHub use <code>--no--ff</code> option for pull requests, see <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request">here</a>, and this old-but-gold <a href="https://stackoverflow.com/questions/9069061/what-effect-does-the-no-ff-flag-have-for-git-merge">discussion</a>.</p>
<ul>
<li>Non fast-forward merges can end up in conflicts. In that case, git will halt the merge operation and leave traces in the affected files;</li>
<li>To abort a merge <code>git merge --abort</code> (useful if we are scared and don’t know what to do);</li>
<li>To merge overriding everything with the upcoming branch <code>git merge new-branch --strategy-option theirs</code>;</li>
<li>To merge overriding everything with the current branch <code>git merge new-branch --strategy-option ours</code>.</li>
</ul>
<p><strong>Be careful</strong> while editing files that are in conflict.</p>
</section>
<section id="other" class="level2">
<h2 class="anchored" data-anchor-id="other">other</h2>
<ul>
<li>Ignoring files <code>.gitignore</code>;</li>
<li>Amend the last commit: <code>git commit --amend</code>;</li>
<li>Show pretty history: <code>git log --graph --oneline --decorate --all</code>;</li>
<li>Configuring git aliases: <code>git config --global alias.lg "log --graph --oneline --decorate"</code> (and now you have <code>git lg</code>!).</li>
</ul>
<p>This excellent chart will help you in git workflow decision making.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-08-advanced-python/git_pretty.png" class="img-fluid figure-img"></p>
<figcaption>git flowchart, photo credit to this SO <a href="https://stackoverflow.com/questions/14096721/how-to-add-file-to-a-previous-commit">thread</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="triangular-workflows-in-git" class="level2">
<h2 class="anchored" data-anchor-id="triangular-workflows-in-git">triangular workflows in git</h2>
<p>When collaborating with a project hosted online on GitHub or GitLab, the most common setup is having a central repository, one remote fork per user, and local clones/checkouts:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://github.blog/wp-content/uploads/2015/07/5dcdcae4-354a-11e5-9f82-915914fad4f7.png?resize=2000%2C951" class="img-fluid figure-img"></p>
<figcaption>triangular workflows in git, <a href="https://github.blog/2015-07-29-git-2-5-including-multiple-worktrees-and-triangular-workflows/">source</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Notice the different naming conventions between this website and the first image:</p>
<ul>
<li>Convention 1: upstream/origin/local</li>
<li>Convention 2: origin/<username>/local</username></li>
</ul>
<p>We will be consistent with the Aaron Meurer guide and therefore use Convention 2 all the time.</p>
</section>
<section id="after-creating-a-pr" class="level2">
<h2 class="anchored" data-anchor-id="after-creating-a-pr">after creating a PR</h2>
<p>After your pull request has been merged to <code>master</code>, your local <code>master</code> and <code>&lt;username&gt;/master</code> will be outdated with respect to <code>origin/master</code>. On the other hand, you should <strong>avoid working on this branch anymore in the future</strong>: remember branches should be ephemeral and short-lived.</p>
<p>To put yourself in a clean state again, you have to:</p>
<ol type="1">
<li>Click “remove branch” in the pull request (don’t click “remove fork”!);</li>
<li><code>git checkout master</code> (go back to master);</li>
<li><code>git fetch origin</code> (<strong>never, ever</strong> use <code>git pull</code> unless you know exactly what you’re doing)</li>
<li><code>git merge --ff-only origin master</code> (update your local master with origin/master, and fail if you accidentally made any commit in master)</li>
<li><code>git fetch -p &lt;username&gt;</code> (✨ acknowledge the removal of the remote branch ✨)</li>
<li><code>git branch -d old-branch</code> (remove the old branch)</li>
<li><code>git push &lt;username&gt; master</code> (update your fork with respect to origin)</li>
<li><code>git checkout -b new-branch</code> (start working in the new feature!)</li>
</ol>
<p>This process has to be repeated <strong>after every pull request</strong>.</p>
<p>Some organizations where all the members are trusted do not use forks, and everybody pushes their branches to the same repository instead. While this simplifies some parts of the workflow, it also requires proper checks in place to prevent bad code to be merged - for example, by <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/managing-a-branch-protection-rule">requiring a minimum number of reviews</a> or some <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches">automated status checks</a>.</p>
</section>
</section>
<section id="pythonpath" class="level1">
<h1>02 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/02_pythonpath.ipynb">pythonpath</a></h1>
<section id="how-does-import-work" class="level2">
<h2 class="anchored" data-anchor-id="how-does-import-work">how does <code>import</code> work?</h2>
<p>How do <code>import os, pandas</code> work? If <code>pandas</code> was not installed, what happen?</p>
</section>
<section id="how-can-i-import-my-code" class="level2">
<h2 class="anchored" data-anchor-id="how-can-i-import-my-code">how can I <code>import</code> my code?</h2>
<p>There are three ways to import our own code:</p>
<ul>
<li><strong>Being on the same directory</strong>: This is the quickest, however it scales quite poorly (imagine having all of pandas and scikit-learn in a single directory to do any data analysis project!)</li>
<li><strong>Appending our code location to PYTHONPATH</strong>: This is effective, but we will try to avoid it because it can bring problems in the future.</li>
<li><strong>Making our code installable</strong>: Since any code that’s installed can be imported, this shifts the question to “how to make our code installable”.</li>
</ul>
</section>
<section id="my-first-python-lib" class="level2">
<h2 class="anchored" data-anchor-id="my-first-python-lib">my first python lib</h2>
<p>We will create a new Python library, “IE Titanic utils”, to analyze the <a href="https://www.kaggle.com/c/titanic/data">Titanic dataset</a>. I will create a project <code>ie-titanic-utils</code>, add <code>readme.md</code> and <code>.gitignore</code> files.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> it-titanic-utils</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> init</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# This is utility to help analyze Titanic dataset"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> readme.md</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Invoke-WebRequest</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Uri</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.toptal.com/developers/gitignore/api/python,jupyternotebooks"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Select-Object</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-ExpandProperty</span> Content <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Out-File</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-FilePath</span> .gitignore <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Encoding</span> utf8</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add readme.md .gitignore</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"initial commit"</span></span></code></pre></div>
<p>Now I will create <code>str_utils.py</code> file (using VS code for convenience), with a function called <code>tokenize</code> that takes a str sentence and splits it into a list of words.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>str_utils.py</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="str_utils.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tokenize(sentence: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]:</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sentence.split()</span></code></pre></div>
</div>
<p>In pwsh, I can import and use this function</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Python</span> 3.11.4 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tags/v3.11.4:d2340ef,</span> Jun  7 2023, 05:45:37<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[MSC</span> v.1934 64 bit <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">AMD64</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> on win32</span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Type</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"help"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"copyright"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credits"</span> or <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"license"</span> for more information.</span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> from <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">str_utils</span> import tokenize</span>
<span id="cb3-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> tokenize<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Toi la Le Khac Tuan"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Toi'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'la'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Le'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Khac'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tuan'</span>]</span>
<span id="cb3-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span></span></code></pre></div>
</section>
<section id="the-pythonpath" class="level2">
<h2 class="anchored" data-anchor-id="the-pythonpath">the <code>PYTHONPATH</code></h2>
<p>We saw above that we could easily import our <code>tokenize</code> function. However, this only works if we are in the same directory. Why? Python looks in some predefined locations to know where to find what we want to import, called the “PATH”.</p>
<div id="e4b08fa3" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb4-2">sys.path <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i will not execute this code</span></span></code></pre></div>
</details>
</div>
<p>Therefore, there are two ways of making our code <strong>globally importable</strong>:</p>
<ol type="1">
<li>Modify the “PATH”</li>
<li>Put our code inside a location predefined in the “PATH”</li>
</ol>
<p>The first option can be achieved like this:</p>
<div id="d729e316" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> sys.path.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/username/ie-titanic-utils"</span>)</span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> str_utils  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works!</span></span></code></pre></div>
</details>
</div>
<p>Or, alternatively, from outside of the interpreter: <code>export PYTHONPATH=/home/username/ie-titanic-utils</code>.</p>
<p>However, both are <strong>bad practices and should be avoided</strong>.</p>
</section>
<section id="what-does-import-do" class="level2">
<h2 class="anchored" data-anchor-id="what-does-import-do">what does <code>import</code> do?</h2>
<p>Python code is normally written in <code>.py</code> scripts. These scripts can be imported in the same way that any model or package from the standard library can:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> python3</span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">math</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works, because it's in stdlib</span></span>
<span id="cb6-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">numpy</span> as np  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works if you ran `pip install numpy` in advance</span></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">str_utils</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works if you are in the same directory</span></span>
<span id="cb6-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello,'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'world!'</span>]</span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> </span></code></pre></div>
<p>When the user imports a script, <strong>Python runs the script</strong>. That’s the way all the possible functions and classes inside it are available.</p>
</section>
<section id="how-to-separate-running-code-from-reusable-pieces" class="level2">
<h2 class="anchored" data-anchor-id="how-to-separate-running-code-from-reusable-pieces">how to separate “running code” from reusable pieces</h2>
<p>A Python module (any <code>.py</code> script) might contain code that we want to run, as well as code that we only want to import. To separate these, we use this trick:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  get-content <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Tail</span> 2 .str_utils.py</span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__name__</span> == <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb7-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">print</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tokenize</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello, world!"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  python .str_utils.py <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The `print` runs</span></span>
<span id="cb7-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hello,'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'world!'</span>]</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  python</span>
<span id="cb7-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> from <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">str_utils</span> import tokenize</span>
<span id="cb7-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> tokenize<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hi, world!"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hi,'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'world!'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The `print` doesn't run!</span></span>
<span id="cb7-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span></span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here is what Claude sonnet 3.5 gave me:</p>
<p>To separate code that we want to run directly from code that we only want to import, we should use the if <code>__name__ == "__main__"</code>: idiom in Python. This is a common pattern that allows a Python script to be both importable and executable. Here’s an explanation:</p>
<ol type="1">
<li>When a Python file is run directly, Python sets the special <code>__name__</code> variable to “<code>__main__</code>”.</li>
<li>When a Python file is imported as a module,<code>__name__</code>is set to the name of the module.</li>
</ol>
<p>By using this idiom, we can control which code runs when the script is executed directly versus when it’s imported as a module.</p>
</div>
</div>
</section>
</section>
<section id="pip-vs.-conda" class="level1">
<h1>03&amp;04 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/03-04_pip-vs-conda.ipynb">pip vs.&nbsp;conda</a></h1>
<section id="managing-python-environments" class="level2">
<h2 class="anchored" data-anchor-id="managing-python-environments">managing python environments</h2>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://raw.githubusercontent.com/astrojuanlu/ie-mbd-advanced-python/e2224276f91529280ebfcd42ddc7dc22cf0d2010/img/python_comrades.png" class="img-fluid figure-img"></p>
<figcaption>stolen from the lecture</figcaption>
</figure>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
<p>Simple is better than complex.</p>
<p>Complex is better than complicated.</p>
</blockquote>
<p>How do people install and upgrade Python? -&gt; Most of people choose Python.org, the same for me!</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
</div>
<div class="callout-body-container callout-body">
<p>This way ships a tool to create development environments (<code>venv</code>). However, <code>venv</code> cannot create environments with different Python versions (you’re tied to the one you downloaded) and certain packages will require extra steps to be installed. Therefore, it <strong>is not</strong> for everyone.</p>
</div>
</div>
<p>Juan chose to use <code>conda</code>. As I am learning Docker, I choose Docker for this tutorial.</p>
<p>How do people create isolated development environments? -&gt; The most popular is <code>Virtualenv</code>. But normally when doing an analysis task, I use <code>venv</code> which is built-in python lib. Recently I followed my dev team to use <code>pipenv</code>, I do also see <code>poetry</code> is worth-learning approach.</p>
<blockquote class="blockquote">
<p>“More than a half of the users of Jupyter Notebook and JupyterLab choose Conda”</p>
</blockquote>
<p>As I think a model which is not deployed yet is useless model, I choose VS Code and Docker - more deployment-oriented.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">summary</h2>
<blockquote class="blockquote">
<p>For the user, the most salient distinction is probably this: pip installs python packages within any environment; conda installs any package within conda environments.</p>
<p>—Jake Vanderplas</p>
</blockquote>
<p>However, I will be using <code>pipenv</code> to achieve what Juan done in upcoming sections. I will specify version of each package I used.</p>
</section>
<section id="pip-and-pypi" class="level2">
<h2 class="anchored" data-anchor-id="pip-and-pypi"><code>pip</code> and <code>PyPI</code></h2>
<p><code>pip</code> is the default Python installer. By default, it fetches packages from <a href="https://pypi.org/" class="uri">https://pypi.org/</a>, which is the community repository for Python packages.</p>
</section>
</section>
<section id="layout" class="level1">
<h1>05 layout</h1>
<p>here is my project’s layout:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ie-titanic-utils</span></span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├─</span> src</span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  └─ ie_titanic_utils</span>
<span id="cb8-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>     ├─ __init__.py</span>
<span id="cb8-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>     └─ ...</span>
<span id="cb8-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├─</span> tests</span>
<span id="cb8-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  └─ ...</span>
<span id="cb8-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├─</span> .gitignore</span>
<span id="cb8-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├─</span> README.md</span>
<span id="cb8-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└─</span> pyproject.toml</span></code></pre></div>
<ul>
<li>The <code>src/package_name</code> contains the source code of the library. <code>package_name</code> must be Python identifier. It should contain a <code>__init__.py</code> that can be empty;</li>
<li>The <code>tests</code> directory contains the tests. It must not contain any <code>__init__.py</code> because it’s not meant to be imported as a package. In very specific cases it’s included inside <code>src/package_name</code>;</li>
<li>Every project contains a <code>README.md</code> that at least explains what the project is;</li>
<li><code>pyproject.toml</code> contains the metadata of the project. The absolutely required fields are <code>module</code>, <code>author</code>, and some extra information that tells Python how to install the package.</li>
</ul>
<section id="creating-a-package" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-package">creating a package</h2>
<ol type="1">
<li>run <code>flit init</code> to create the metadata</li>
</ol>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  flit init</span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyproject.toml</span> exists <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> overwrite it<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">y/N</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: y</span>
<span id="cb9-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Module</span> name <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">ie_titanic_utils</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>: ie_utils</span>
<span id="cb9-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Author:</span> Tuan Le Khac</span>
<span id="cb9-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Author</span> email: tuan.lekhac0905@gmail.com</span>
<span id="cb9-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Home</span> page: </span>
<span id="cb9-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Choose</span> a license <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">see</span> http://choosealicense.com/ for more info<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1.</span> MIT <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> simple and permissive</span>
<span id="cb9-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2.</span> Apache <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> explicitly grants patent rights</span>
<span id="cb9-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3.</span> GPL <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> ensures that code based on this is shared with the same terms</span>
<span id="cb9-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">4.</span> Skip <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> choose a license later</span>
<span id="cb9-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Enter</span> 1-4: 4</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Written</span> pyproject.toml<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">edit</span> that file to add optional extra info.</span></code></pre></div>
<ol start="2" type="1">
<li>place some code under the source directory. In <code>__init__.py</code> there must be a docstring giving a description of the project and a <code>__version__</code> variable indicating the version:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>__init__.py</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="__init__.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""IE utils (test package)."""</span></span>
<span id="cb10-2"></span>
<span id="cb10-3">__version__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1.0"</span></span></code></pre></div>
</div>
<ol start="3" type="1">
<li>Install the code using <code>pip install</code>! (this did not work for me currently. edit: the project name should match the <code>src/package_name</code> omg)</li>
</ol>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  pip install .</span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Processing</span> .ie-titanic-utils</span>
<span id="cb11-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb11-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Successfully</span> installed ie_titanic_utils-0.1.0</span>
<span id="cb11-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  python</span>
<span id="cb11-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Python</span> 3.11.4 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tags/v3.11.4:d2340ef,</span> Jun  7 2023, 05:45:37<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[MSC</span> v.1934 64 bit <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">AMD64</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> on win32</span>
<span id="cb11-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Type</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"help"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"copyright"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credits"</span> or <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"license"</span> for more information.</span>
<span id="cb11-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ie_titanic_utils</span></span>
<span id="cb11-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> ie_titanic_utils.__version__</span>
<span id="cb11-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0.1.0'</span></span>
<span id="cb11-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span>    </span></code></pre></div>
<ol start="4" type="1">
<li><code>readme.md</code> and a <code>.gitignore</code> files were created.</li>
<li>commit the change</li>
</ol>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> checkout <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-b</span> first_module <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i should be using switch (-c) haha, checkout is old syntax</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> status</span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .</span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"initial very first module"</span></span>
<span id="cb12-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> checkout master</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  git merge <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-ff</span> first_module</span>
<span id="cb12-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Merge</span> made by the <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ort'</span> strategy.</span>
<span id="cb12-9"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyproject.toml</span>                    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">30</span> ++++++++++++++++++++++++++++++</span>
<span id="cb12-10"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">src/ie_titanic_utils/__init__.py</span>  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6</span> ++++++</span>
<span id="cb12-11"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">src/ie_titanic_utils/str_utils.py</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">6</span> ++++++</span>
<span id="cb12-12"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3</span> files changed, 42 insertions<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-13"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">create</span> mode 100644 pyproject.toml</span>
<span id="cb12-14"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">create</span> mode 100644 src/ie_titanic_utils/__init__.py</span>
<span id="cb12-15"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">create</span> mode 100644 src/ie_titanic_utils/str_utils.py</span>
<span id="cb12-16"></span>
<span id="cb12-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> branch <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> first_module</span>
<span id="cb12-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># git push origin master</span></span>
<span id="cb12-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as I will not upload this code to GitHub</span></span>
<span id="cb12-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://stackoverflow.com/questions/32238616/git-push-fatal-origin-does-not-appear-to-be-a-git-repository-fatal-could-n</span></span></code></pre></div>
<p>Now if I log the git, I will see this:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  git log <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--graph</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--oneline</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--decorate</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--all</span></span>
<span id="cb13-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*</span>   39105c7 <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">HEAD</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> master<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Merge</span> branch <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first_module'</span></span>
<span id="cb13-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*</span> 7a33844 initial very first module</span>
<span id="cb13-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/</span></span>
<span id="cb13-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*</span> 793bd67 initial commit</span></code></pre></div>
<p>Yeah til now I can create a “package” in my computer and install so I can use it <strong>globally</strong>. But I have not use any env management yet.</p>
</section>
<section id="intermezzo-version-numbers" class="level2">
<h2 class="anchored" data-anchor-id="intermezzo-version-numbers">intermezzo: version numbers</h2>
<ul>
<li>Version numbers for Python packages are explained in <a href="https://www.python.org/dev/peps/pep-0440/">PEP 440</a></li>
<li>For libraries, the most widely used convention is <a href="https://semver.org/">semantic versioning</a>: X.Y.Z
<ul>
<li>Z <strong>must</strong> be incremented if only backwards compatible bug fixes are introduced (a bug fix is defined as an internal change that fixes incorrect behavior)</li>
<li>Y <strong>must</strong> be incremented every time there is new, backwards-compatible functionality</li>
<li>X <strong>must</strong> be incremented every time there are backwards-incompatible changes</li>
</ul></li>
<li>Between releases, the version should have the <code>.dev0</code> suffix</li>
<li>Recommendation: start with 0.1.dev0 (development version), then make a <code>0.1.0</code> release, then progress to <code>0.1.1</code> for quick fixes and <code>0.2.0</code> for new functionality, and when you want to make a promise of relative stability jump to <code>1.0.0</code>.</li>
<li>For applications, other conventions are more appropriate, like <a href="https://calver.org/">calendar versioning</a>: <code>[YY]YY.MM.??</code></li>
</ul>
</section>
<section id="project-requirements" class="level2">
<h2 class="anchored" data-anchor-id="project-requirements">project requirements</h2>
<p>Sometimes our project will depend on third-party libraries (pandas, scikit-learn). To make pip install those dependencies automatically, we can add them to our <code>pyproject.toml</code> under the <code>[tool.flit.metadata]</code> section, using the <code>requires</code> option:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">build-system</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb14-2">requires = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"flit_core&gt;=3.4"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb14-3">build-backend = "flit_core.buildapi"</span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">project</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb14-6">name = "ie_titanic_utils"</span>
<span id="cb14-7">authors = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{name = "Tuan Le Khac", email = "tuan.lekhac0905@gmail.com"}</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb14-8">readme = "readme.md"</span>
<span id="cb14-9">requires-python = "&gt;=3.11"</span>
<span id="cb14-10">dynamic = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"version", "description"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb14-11">classifiers = [</span>
<span id="cb14-12">    "Programming Language :: Python :: 3",</span>
<span id="cb14-13">    "License :: OSI Approved :: MIT License",</span>
<span id="cb14-14">    "Operating System :: OS Independent",</span>
<span id="cb14-15">]</span>
<span id="cb14-16">requires = [</span>
<span id="cb14-17">    "pandas",</span>
<span id="cb14-18">    "matplotlib&gt;=2",</span>
<span id="cb14-19">]</span></code></pre></div>
<p>We might want to specify <em>optional</em> dependencies that should only be installed upon request, or for some specific purposes. A typical example will be development dependencies: we will need things like <code>pytest</code> and <code>black</code>, but we don’t want the user to install them as part as our library. To do that, we can specify <em>groups</em> of optional dependencies under the <code>tool.flit.metadata.requires-extra</code> section:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb15-1">In my case, I use <span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">`project.optional-dependencies`</span>: flit_core.config.ConfigError: Use <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">project</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> table for metadata or <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">tool.flit.metadata</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, not both.</span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">project.optional-dependencies</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb15-3">dev = [</span>
<span id="cb15-4">    "pytest&gt;=6.0",</span>
<span id="cb15-5">    "black&gt;=20.8b1",</span>
<span id="cb15-6">]</span></code></pre></div>
<p>That way, they will only get installed when <code>[dev]</code> is added after the name of our library:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  pip install .<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">dev</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Successfully installed black-24.4.2 ie_titanic_utils-0.1.0 iniconfig-2.0.0 pytest-8.2.2</span></span></code></pre></div>
</section>
</section>
<section id="unit-test" class="level1">
<h1>06 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/06_unit-tests.ipynb">unit test</a></h1>
<blockquote class="blockquote">
<p>If you use software that lacks automated tests, you are the tests.</p>
<p>— Jenny Bryan (<span class="citation" data-cites="JennyBryan">@JennyBryan</span>) <a href="https://x.com/JennyBryan/status/1043307291909316609?ref_src=twsrc%5Etfw">September 22, 2018</a></p>
</blockquote>
<p>Testing is <strong>essential</strong>. Computers excel at doing repetitive tasks: they basically never make mistakes (the mistake might be in what we told the computer to do). Humans, on the other hand, fail more often, especially under pressure, or on Friday afternoons and Monday mornings. Therefore, instead of letting the humans be the tests, we will use the computer to <strong>frequently verify that our software works as specified</strong>.</p>
<p>I will be using <code>pytest</code> to achieve this.</p>
<section id="test-driven-development" class="level2">
<h2 class="anchored" data-anchor-id="test-driven-development">test-driven development</h2>
<p>The “test-driven development mantra” is <span style="color:red;font-weight:bold;">Red</span> - <span style="color:green;font-weight:bold;">Green</span> - <span style="color:grey;font-weight:bold;">Refactor</span>:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://raw.githubusercontent.com/astrojuanlu/ie-mbd-advanced-python/e2224276f91529280ebfcd42ddc7dc22cf0d2010/img/red-green-refactor.png" class="img-fluid figure-img"></p>
<figcaption>Make it work. Make it right. Make it fast.</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ol type="1">
<li>Write a test. <span style="color:red;font-weight:bold;">Watch it fail</span>.</li>
<li>Write just enough code to <span style="color:green;font-weight:bold;">pass the test</span>.</li>
<li>Improve the code without breaking the test.</li>
</ol>
<p>Repeat.</p>
</section>
<section id="testing-in-python" class="level2">
<h2 class="anchored" data-anchor-id="testing-in-python">testing in Python</h2>
<p>Summary: use <code>pytest</code>. Everybody does. It rocks.</p>
<p><a href="https://docs.pytest.org/en/8.2.x/">pytest</a> is a testing framework for Python that makes writing tests extremely easy. It is much more powerful than the standard library equivalent, <code>unittest</code>. We can use by install it first <code>pip install pytest</code>.</p>
<p>We can write a function that test the <code>tokenize</code> funtion:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tests/test_tokenize.py</strong></pre>
</div>
<div class="sourceCode" id="cb17" data-filename="tests/test_tokenize.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ie_titanic_utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tokenize  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will fail right away!</span></span>
<span id="cb17-2"></span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_tokenize_returns_expected_list():</span>
<span id="cb17-5">    sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a sentence"</span></span>
<span id="cb17-6">    expected_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span>]</span>
<span id="cb17-7"></span>
<span id="cb17-8">    tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenize(sentence)</span>
<span id="cb17-9"></span>
<span id="cb17-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> expected_tokens</span></code></pre></div>
</div>
<p>and we run it from the command line:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;"></span> ie-titanic-utils  pytest</span>
<span id="cb18-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">============================================================================================</span> test session starts ============================================================================================</span>
<span id="cb18-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">platform</span> win32 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--</span> Python 3.11.4, pytest-8.2.2, pluggy-1.5.0</span>
<span id="cb18-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rootdir:</span> .ie-titanic-utils</span>
<span id="cb18-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">configfile:</span> pyproject.toml</span>
<span id="cb18-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">plugins:</span> anyio-3.7.1, time-machine-2.14.0</span>
<span id="cb18-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">collected</span> 1 item</span>
<span id="cb18-8"></span>
<span id="cb18-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">teststest_tokenize.py</span> .                                                                                                                                                                               <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">100%</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> </span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">=============================================================================================</span> 1 passed in 0.02s ============================================================================================= </span></code></pre></div>
<p>The test successed after I fixed the <code>__init__.py</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/./__init__.py</strong></pre>
</div>
<div class="sourceCode" id="cb19" data-filename="src/./__init__.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ie_titanic_utils.str_utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tokenize</span>
<span id="cb19-2">__all__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tokenize"</span>]</span></code></pre></div>
</div>
</section>
</section>
<section id="oop" class="level1 page-columns page-full">
<h1>07&amp;08 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/07-08_object-oriented-programming.ipynb">oop</a></h1>
<section id="what-are-objects-anyway" class="level2">
<h2 class="anchored" data-anchor-id="what-are-objects-anyway">what are “objects” anyway?</h2>
<p>like pandas’s <code>DataFrame</code> or matplotlib’s <code>Figure</code>, an <em>object</em> is sthg that has:</p>
<ul>
<li>object-bound variables: call <strong>properties</strong>;</li>
<li>object-bound functions: call <strong>methods</strong>.</li>
</ul>
<p>if the object’s properties can change, we say they have <strong>states</strong>, in that case they are <strong>mutable</strong>. otherwise, they are <strong>stateless</strong> and <strong>immutable</strong>. a typical example is list (mutable) and tuple (immutable).</p>
<div id="420bf50e" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">my_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb20-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(my_list)</span>
<span id="cb20-3">my_list.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb20-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(my_list)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1, 2, 3]
[1, 2, 3, 4]</code></pre>
</div>
</div>
<div id="3893a277" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The operator that creates tuples is not parentheses:</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is the comma!</span></span>
<span id="cb22-3">my_tuple <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Notice that I don't need parentheses!</span></span>
<span id="cb22-4">my_tuple</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>(1, 2, 3)</code></pre>
</div>
</div>
<div id="62ffbdb1" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(my_tuple))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nothing that allows us to change the state of the tuple</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index']</code></pre>
</div>
</div>
<div id="38108e09" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1">my_tuple[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This wont work, "TypeError: 'tuple' object does not support item assignment"</span></span></code></pre></div>
</details>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Immutable objects have the advantage that they can be <strong>hashed</strong>, that is: they can be transformed, using some cryptographical function, into something that uniquely represents that object. Mutable objects can’t, because the hash would have to change every time the state of the object changed. <strong>Dictionary keys have to be hashable objects</strong>.</p>
</div>
</div>
<div id="12fa6316" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">{</span>
<span id="cb27-2">    my_tuple: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_tuple"</span></span>
<span id="cb27-3">}</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>{(1, 2, 3): 'my_tuple'}</code></pre>
</div>
</div>
<div id="249e2363" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hash</span>(my_tuple)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>529344067295497451</code></pre>
</div>
</div>
<div id="5ef6beee" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this wont work: "TypeError: unhashable type: 'list'"</span></span>
<span id="cb31-2">{</span>
<span id="cb31-3">    my_list: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_list"</span></span>
<span id="cb31-4">}</span></code></pre></div>
</details>
</div>
<div id="0096641b" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this wont work: "TypeError: unhashable type: 'list'"</span></span>
<span id="cb32-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hash</span>(my_list)</span></code></pre></div>
</details>
</div>
</section>
<section id="classes-and-instances" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="classes-and-instances">classes and instances</h2>
<p>objects are defined by <strong>instantiating a class</strong>. a class is a <strong>template</strong> for objects, where we define it’s behaviours, an <strong>instance</strong> is a particular realization of that class.</p>
<section id="example" class="level3">
<h3 class="anchored" data-anchor-id="example">Example</h3>
<p>we want model the <code>User</code> of our company’s product, to later study their behaviours:</p>
<div id="4d14860f" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> User:</span>
<span id="cb33-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb33-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(User)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>type</code></pre>
</div>
</div>
<p><code>User</code> class is of type <code>type</code>, which means that is can be used to created new objects. Let’s create 2 instances:</p>
<div id="30996245" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">user1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User()</span>
<span id="cb35-2">user2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User()</span>
<span id="cb35-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(user1)</span>
<span id="cb35-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(user2)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;__main__.User object at 0x000001B1AD8D4F90&gt;
&lt;__main__.User object at 0x000001B1AD8D4D90&gt;</code></pre>
</div>
</div>
<p>with a slight abuse of notation, we would say we have 2 <code>User</code> objects, or just 2 <code>User</code>s.</p>
</section>
<section id="using-the-instance-self" class="level3">
<h3 class="anchored" data-anchor-id="using-the-instance-self">Using the instance: <code>self</code></h3>
<p>let’s add a very simple <strong>method</strong> to demonstrate <em>explicit</em> <code>self</code>, a very important concept. a method is like a function bounded to the object, an can use it’s properties:</p>
<div id="ba8a0d18" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> User:</span>
<span id="cb37-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> whoami(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb37-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'This is : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
</div>
<div id="2441e1cb" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1">user1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User()</span>
<span id="cb38-2">user1.whoami()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>This is : &lt;__main__.User object at 0x000001B1AD8D4590&gt;</code></pre>
</div>
</div>
<p>why are methods (instead of plain functions) interesting? Because of <strong>duck typing</strong>:</p>
<blockquote class="blockquote">
<p>“If it walks like a duck and it quacks like a duck, then it must be a duck” – <a href="https://en.wikipedia.org/wiki/Duck_typing" class="uri">https://en.wikipedia.org/wiki/Duck_typing</a></p>
</blockquote>
<p>if something has a method that I need, I don’t care about its type.</p>
<div id="5032dcea" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> do_stuff(obj):</span>
<span id="cb40-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> obj.mean()</span></code></pre></div>
</details>
</div>
<div id="e0da8b5a" class="cell" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb41-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb41-3"></span>
<span id="cb41-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(do_stuff(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span>
<span id="cb41-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(do_stuff(pd.Series([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>2.0
2.0</code></pre>
</div>
</div>
<p>notice how we called <code>user1.test()</code> <strong>without passing an extra argument</strong>? This is because Python is automatically passing the instance. It’s the equivalent of doing this (<strong>never do this</strong>):</p>
<div id="8b163d53" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1">User.whoami(user1)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>This is : &lt;__main__.User object at 0x000001B1AD8D4590&gt;</code></pre>
</div>
</div>
<p>in fact, if we define a method without a first parameter, it will fail when we call it:</p>
<div id="5bf4beeb" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> TestClass:</span>
<span id="cb45-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test():</span>
<span id="cb45-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Don't do anything</span></span>
<span id="cb45-4"></span>
<span id="cb45-5">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TestClass()</span>
<span id="cb45-6">t.test()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fails: "TypeError: test() takes 0 positional arguments but 1 was given"</span></span></code></pre></div>
</details>
</div>
<p>this first parameter can be called anything, but <strong>everybody uses <code>self</code></strong>. Remember, conventions are important to minimize surprise and enhance collaboration!</p>
</section>
<section id="intermezzo-f-strings" class="level3">
<h3 class="anchored" data-anchor-id="intermezzo-f-strings">intermezzo: f-strings</h3>
<div id="669cec83" class="cell" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>user1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Python &gt;= 3.6</span></span>
<span id="cb46-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(user1))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Python &lt; 3.6, equivalent</span></span>
<span id="cb46-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(User.whoami(user1))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DON'T use! (Although it's equivalent)   </span></span>
<span id="cb46-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %timeit User.whoami(user1)  # They have about the same performance </span></span>
<span id="cb46-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %timeit user1.whoami()</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>This is &lt;__main__.User object at 0x000001B1AD8D4590&gt;
This is &lt;__main__.User object at 0x000001B1AD8D4590&gt;
This is : &lt;__main__.User object at 0x000001B1AD8D4590&gt;
None</code></pre>
</div>
</div>
</section>
<section id="initializing-our-instances" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="initializing-our-instances">initializing our instances</h3>
<p>The ellipsis (<code>...</code>) is a built-in constant in Python. It’s an instance of the <code>ellipsis</code> (dấu chấm lửng) class.</p>
<div id="dd7c9d48" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb48-1">...</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>Ellipsis</code></pre>
</div>
</div>
<p>common uses of ellipsis:</p>
<ul>
<li>as a placeholder in function definitions or class bodies</li>
<li>in type hinting (especially for variable-length tuples)</li>
<li>in slicing operations (especially for multidimensional arrays in libraries like NumPy)</li>
</ul>
<div id="9042a8b1" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># As a placeholder</span></span>
<span id="cb50-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> function_to_be_implemented_later():</span>
<span id="cb50-3">    ...</span>
<span id="cb50-4"></span>
<span id="cb50-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In type hinting</span></span>
<span id="cb50-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Tuple</span>
<span id="cb50-7"></span>
<span id="cb50-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> process_points(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>points: Tuple[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, ...]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb50-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> point <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points:</span>
<span id="cb50-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Processing point: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>point<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb50-11"></span>
<span id="cb50-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Usage</span></span>
<span id="cb50-13">process_points((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Processing point: (1, 2)
Processing point: (3, 4, 5)
Processing point: (6,)</code></pre>
</div>
</div>
<div id="82041adf" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1">user1.this_property <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ...  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "99", whatever</span></span>
<span id="cb52-2">user1.this_property</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>Ellipsis</code></pre>
</div>
</div>
<p>however, this is considered a bad practice, and can confuse editors and static analysis tools. These properties should be specified on creation, in a way that I cannot have a user without <code>name</code> and <code>signup_date</code>. Python provides us a special method, <code>__init__</code> (this should not be confused with file <code>__init__.py</code> we put to project to tell Python our code is a package), that <strong>initializes</strong><sup>1</sup> the object:</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;This philosophy used to be summarized by the sentence “we are all consenting adults here”, which is nowadays being less used.</p></div></div><div id="ab86dd9f" class="cell" data-execution_count="23">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> User:</span>
<span id="cb54-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "dunder init" = double underscore init</span></span>
<span id="cb54-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name, signup_date):</span>
<span id="cb54-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name</span>
<span id="cb54-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signup_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> signup_date</span></code></pre></div>
</details>
</div>
<div id="9423fb8d" class="cell" data-execution_count="24">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dt</span>
<span id="cb55-2">user1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Doe"</span>, signup_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dt.datetime.now())</span>
<span id="cb55-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(user1.name, user1.signup_date, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>John Doe
2024-08-01 23:07:08.587740</code></pre>
</div>
</div>
<p>that’s something! However, there are several things we can improve:</p>
<ul>
<li>it can be cumbersome to specify the date every time, and it would be nice to have some default.</li>
<li>the default representation of the instances contains some hexadecimal memory address and nothing else. It would be nice to at least see the user name and the signup date</li>
<li>nothing stops me from changing the name and signup_date of a existing user:</li>
</ul>
</section>
<section id="exercise" class="level3">
<h3 class="anchored" data-anchor-id="exercise">exercise</h3>
<ul>
<li>make <code>signup_date</code> optional by providing a default value;</li>
<li>make the <code>__repr__</code> method return a string containing the <code>name</code> and <code>signup_date</code>, which will override the default.</li>
</ul>
<div id="fd72f5b4" class="cell" data-execution_count="25">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> User:</span>
<span id="cb57-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name, signup_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb57-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> signup_date <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb57-4">            signup_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dt.datetime.now() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Watch out with default parameters! They are created when the function is defined.</span></span>
<span id="cb57-5"></span>
<span id="cb57-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name</span>
<span id="cb57-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signup_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> signup_date</span>
<span id="cb57-8"></span>
<span id="cb57-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb57-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"User(name='</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">', signup_date=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">repr</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.signup_date)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span></span></code></pre></div>
</details>
</div>
<div id="bd10d931" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb58-1">user1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Doe"</span>)</span>
<span id="cb58-2">user1</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>User(name='John Doe', signup_date=datetime.datetime(2024, 8, 1, 23, 7, 8, 618751))</code></pre>
</div>
</div>
</section>
<section id="extra-date-formatting" class="level3">
<h3 class="anchored" data-anchor-id="extra-date-formatting">extra: date formatting</h3>
<div id="fc4b84ad" class="cell" data-execution_count="27">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1">dt.datetime.now().isoformat()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ISO 8601</span></span>
<span id="cb60-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you don't like it, there's http://strftime.org/</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>'2024-08-01T23:07:08.625045'</code></pre>
</div>
</div>
<div id="b23b8c74" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb62-1">user1.signup_date.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y ::: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>'2024 ::: 01'</code></pre>
</div>
</div>
</section>
<section id="protecting-properties" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="protecting-properties">protecting properties</h3>
<p>in Python, there are <em>no private attributes</em> (neither properties nor methods), and in fact everything can be accessed <sup>2</sup>. However, we can “hide” them by default in autocomplete and other environments by using a leading underscore <code>_</code>: this is usually called <strong>protected variables</strong>.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;This philosophy used to be summarized by the sentence “we are all consenting adults here”, which is nowadays being less used.</p></div></div><p>there is a common pattern in which, if I want to make some property read-only, we can:</p>
<ul>
<li>make it protected</li>
<li>create a “getter” using the <span class="citation" data-cites="property">@property</span> decorator, which gets the value of the protected property with a public name</li>
</ul>
<div id="b008d693" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> User:</span>
<span id="cb64-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name, signup_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb64-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> signup_date <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb64-4">            signup_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dt.datetime.now()</span>
<span id="cb64-5"></span>
<span id="cb64-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name</span>
<span id="cb64-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._signup_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> signup_date</span>
<span id="cb64-8"></span>
<span id="cb64-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb64-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> name(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb64-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name</span>
<span id="cb64-12"></span>
<span id="cb64-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb64-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> signup_date(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb64-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._signup_date</span>
<span id="cb64-16"></span>
<span id="cb64-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb64-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"User(name='</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">', signup_date='</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>signup_date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">')"</span></span></code></pre></div>
</details>
</div>
<div id="e9a3b5f8" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb65-1">user1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuan Le"</span>)</span>
<span id="cb65-2">user1.name</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>'Tuan Le'</code></pre>
</div>
</div>
<div id="9fb2282d" class="cell" data-execution_count="31">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this wont work: "AttributeError: can't set attribute"</span></span>
<span id="cb67-2">user1.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tan Le"</span></span></code></pre></div>
</details>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you see tutorials mentioning “true private variables”, they are wrong!</p>
</div>
</div>
<div id="88ed0501" class="cell" data-execution_count="32">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Test:</span>
<span id="cb68-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name):</span>
<span id="cb68-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Not what you think!</span></span>
<span id="cb68-4">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Test(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This name"</span>)</span></code></pre></div>
</details>
</div>
<div id="e79d62f4" class="cell" data-execution_count="33">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this wont work</span></span>
<span id="cb69-2">t1.__name</span></code></pre></div>
</details>
</div>
<div id="ed82f250" class="cell" data-execution_count="34">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb70-1">t1._Test__name  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># These are *NOT* "private" properties</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>'This name'</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The behavior you’re experiencing is due to a feature in Python called “name mangling” for private attributes. Let’s break down what’s happening:</p>
<p>Double underscore prefix:</p>
<ul>
<li>When you define an attribute with a double underscore prefix (__) in a class, Python automatically mangles the name to avoid naming conflicts in inherited classes.</li>
<li>Name mangling process: Python changes the name from __name to _ClassName__name. In your case, it becomes _Test__name.</li>
<li>Accessing the attribute: Because of this name mangling, you can’t access t1.__name directly. Instead, you would need to use the mangled name.</li>
</ul>
<div id="950c80df" class="cell" data-execution_count="35">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Test:</span>
<span id="cb72-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name):</span>
<span id="cb72-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This gets mangled</span></span>
<span id="cb72-4"></span>
<span id="cb72-5">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Test(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This name"</span>)</span>
<span id="cb72-6"></span>
<span id="cb72-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will raise an AttributeError</span></span>
<span id="cb72-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb72-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(t1.__name)</span>
<span id="cb72-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">AttributeError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb72-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"AttributeError: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb72-12"></span>
<span id="cb72-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will work</span></span>
<span id="cb72-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(t1._Test__name)</span>
<span id="cb72-15"></span>
<span id="cb72-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You can see all attributes, including mangled ones</span></span>
<span id="cb72-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(t1))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>AttributeError: 'Test' object has no attribute '__name'
This name
['_Test__name', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']</code></pre>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="inheritance" class="level2">
<h2 class="anchored" data-anchor-id="inheritance">inheritance</h2>
<div id="d54bc550" class="cell" data-execution_count="36">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> SpecialUser(User):</span>
<span id="cb74-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name, age, signup_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb74-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initializes self._name and self._signup_date</span></span>
<span id="cb74-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(name, signup_date)</span>
<span id="cb74-5"></span>
<span id="cb74-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> age</span>
<span id="cb74-7"></span>
<span id="cb74-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb74-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> age(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb74-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._age</span>
<span id="cb74-11"></span>
<span id="cb74-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greet(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb74-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Hi! I'm </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
</div>
<div id="dd17b672" class="cell" data-execution_count="37">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb75-1">s_user1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SpecialUser(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Doe"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>)</span>
<span id="cb75-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#s_user1</span></span></code></pre></div>
</details>
</div>
<div id="bb9e12fb" class="cell" data-execution_count="38">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb76-1">s_user1.name</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>'John Doe'</code></pre>
</div>
</div>
<div id="7742acf4" class="cell" data-execution_count="39">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb78-1">s_user1.greet()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Hi! I'm John Doe</code></pre>
</div>
</div>
<ul>
<li>the diamond problem: <a href="https://www.wikiwand.com/en/Multiple_inheritance#/The_diamond_problem" class="uri">https://www.wikiwand.com/en/Multiple_inheritance#/The_diamond_problem</a></li>
<li>???: <a href="https://softwareengineering.stackexchange.com/questions/238176/why-would-square-inheriting-from-rectangle-be-problematic-if-we-override-the-set/238184#238184" class="uri">https://softwareengineering.stackexchange.com/questions/238176/why-would-square-inheriting-from-rectangle-be-problematic-if-we-override-the-set/238184#238184</a></li>
<li>liskov substitution principle: <a href="https://www.wikiwand.com/en/Liskov_substitution_principle" class="uri">https://www.wikiwand.com/en/Liskov_substitution_principle</a></li>
<li>composition and inheritance: <a href="https://www.thedigitalcatonline.com/blog/2014/08/20/python-3-oop-part-3-delegation-composition-and-inheritance/" class="uri">https://www.thedigitalcatonline.com/blog/2014/08/20/python-3-oop-part-3-delegation-composition-and-inheritance/</a></li>
</ul>
<section id="more-special-methods" class="level3">
<h3 class="anchored" data-anchor-id="more-special-methods">more special methods</h3>
<p>go search for python data model</p>
</section>
</section>
</section>
<section id="flask" class="level1">
<h1>09&amp;10 <a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/09-10_flask.ipynb">flask</a></h1>
<ul>
<li>flask is a “lightweight framework” or a “microframework”. “It is designed to make getting started quick and easy, with the ability to scale up to complex applications”, and therefore requires less context to get started with;</li>
<li>django is a “batteries included” framework that is more focused on good practices and encouraging a “clean, pragmatic design”. It’s more complex and requires more experience to master.</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1><a href="https://github.com/astrojuanlu/ie-mbd-advanced-python/blob/main/sessions/99_conclusion.ipynb">conclusion</a></h1>
<section id="where-do-we-go-from-here" class="level2">
<h2 class="anchored" data-anchor-id="where-do-we-go-from-here">where do we go from here</h2>
<ul>
<li>Keep improving the art of Python packaging</li>
<li>Explore other options for high performance Python</li>
<li>Help “bridging the gap”</li>
<li>Engage with the (open source) Python community</li>
</ul>
</section>
<section id="keep-improving-the-art-of-python-packaging" class="level2">
<h2 class="anchored" data-anchor-id="keep-improving-the-art-of-python-packaging">keep improving the art of python packaging</h2>
<ul>
<li>recommend: <code>pip-tools</code> + <code>requirements.in</code> = <code>requirements.txt</code></li>
<li>Poetry, Pipenv… Yes, they work, but they are way more complex and have “lock-in”</li>
<li>All companies I worked for struggle sooner or later with their code deployment practices. Now, you know better</li>
</ul>
</section>
<section id="explore-other-options-for-high-performance-python" class="level2">
<h2 class="anchored" data-anchor-id="explore-other-options-for-high-performance-python">explore other options for high performance python</h2>
<ul>
<li>Juan mentioned: Numba, Modin, Vaex, Dask, Spark, Coiled, Prefect</li>
<li>Now we have more: polar, pandas 2.0, aiflow, dagster, dbt, etc</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-07-08-advanced-python/setup_py_br.png" class="img-fluid figure-img"></p>
<figcaption>stolen from the lecture</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="other-resources" class="level1">
<h1>other resources</h1>
<ol type="1">
<li><a href="https://nbviewer.org/github/astrojuanlu/ie-mbd-advanced-python/tree/main/">NBViewer</a> for this lecture;</li>
<li><a href="https://pydata.org/">PyData</a>, a community for developers and users of open source data tools;</li>
<li><a href="https://git-scm.com/book/en/v2/">Pro Git</a>, <code>--distributed-is-the-new-centralized</code>;</li>
<li><a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">Pull Requests</a>;</li>
<li><a href="https://docs.gitlab.com/ee/user/project/merge_requests/index.html">Merge Requests</a>;</li>
<li><a href="https://www.asmeurer.com/git-workflow/">Git Workflow</a>, the git workflow for contributing to open source repositories;</li>
<li><a href="https://www.toptal.com/developers/gitignore">Git Ignore</a> builder;</li>
<li><a href="https://www.atlassian.com/git/tutorials/rewriting-history">Git commit –amend</a>, rewriting history;</li>
<li><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">The right way to distribute Python code</a></li>
<li><a href="https://docs.python.org/3/tutorial/modules.html#packages">Python packaging</a></li>
<li><a href="https://docs.pytest.org/en/8.2.x/">Pytest</a>.</li>
</ol>


<!-- -->

</section>


 ]]></description>
  <category>python</category>
  <category>pydata</category>
  <guid>https://lktuan.github.io/blog/2024-07-08-advanced-python/</guid>
  <pubDate>Sun, 07 Jul 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-07-08-advanced-python/juan_r.png" medium="image" type="image/png" height="193" width="144"/>
</item>
<item>
  <title>Random youtube video: How are memories stored in neural networks?</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-06-26-hopfield-network/</link>
  <description><![CDATA[ 





<p>This video came across in my youtube recommendation, the title is <a href="https://www.youtube.com/watch?v=piF6D6CQxUw">“How are memories stored in neural networks? | The Hopfield Network #SoME2”</a> by <a href="https://www.youtube.com/@layerwiselectures"><strong>Layerwise Lectures</strong></a>.</p>
<p>This channel is interestingly has only 1 video, bio:</p>
<blockquote class="blockquote">
<p>Reality comes in layers - layers of abstraction. This channels tries to uncover them to gain insights on neuroscience and machine learning.</p>
</blockquote>
<p>You’ll find how it interesting, below is my notes.</p>
<section id="where-is-your-memory" class="level1">
<h1>Where is your memory?</h1>
<ul>
<li>The Random Access Memory (RAM) of a nowaday typical computer is 8-32GB. That’s the part directly interact with CPU.</li>
<li>Aside from that, you may have hard disk with terabyte or so memory.</li>
<li>How about you ~ or your brain? Can we mearsure in bytes?</li>
<li>But the question should be asked in the first place is: Where is it?</li>
<li>Because memory in computer have <strong>physical</strong> location, to access a piece of data in RAM you have to know the the binary address associated with that location.</li>
<li>For the CPU, the matter comes down to just turning on the right wires to retreive the bits in desired location.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/Where_is_your_memory.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Where is our memory?</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Imagine another kind of memory. Instead of specifying <strong>where</strong> of a memory, it’s a <em>binary address</em>, how about we could specify <strong>what</strong>, it’s <em>content</em>.</li>
<li>Our memory, if we provide a incomplete version of memory, it’s just sort of autocompletes. With the right software, computer can also do this, but it’s not how computer memory work on the basic level.</li>
<li>The point of this video is to convince you that autocompleting memories, also know as <strong>associative memory</strong>, is kind of natural behaviour of networks of neurons.</li>
<li>It’ll become clear that it doesn’t really make sense to measure memory capacity in networks of neurons in the same way we measure computer memory.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/Associative_networks.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Associative Networks</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>The biggest difference might be: computer memory have fixed location, but as we’ll see, the memories in an associative networks rather have - <strong>a time</strong>.</p>
</section>
<section id="computer-memory-in-a-nutshell" class="level1">
<h1>Computer memory in a nutshell</h1>
<ul>
<li>Computer memory is measured in bits, binary switches of ones and zeros. A string of eight such bits can represent anything from letters to integers.</li>
<li>How do I get to a memory once it’s saved, say in RAM? Because on its own it doesn’t do much.</li>
<li>Broadly speaking, and glossing over tons of technical detail here, every piece of data in RAM is matched to a binary address.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/computer_memory.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Memories are matched to addresses and that’s ultimately the only way to retrieve them</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Each piece of data is in a different physical location and can only be retrieved by knowing its address. How the reading and writing of memories is accomplished, is really the meat of programming and is another story.</li>
</ul>
</section>
<section id="modeling-neural-networks" class="level1">
<h1>Modeling neural networks</h1>
<ul>
<li>The aim of the video is to introduce how humain brain memory work, by introducing Hopefield Network.</li>
<li>More generally this lecture aim to be a modelling itself, a kind of the art of essential.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/hopfield_networks.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Hopfield Network</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>This is a picture depicted neuron,</li>
<li>it integrates electrical signals from other neurons to determine its own activity and then,</li>
<li>it broadcasts that activity back to the network.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/a_neuron.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>A Neuron</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Mathematically the story goes something like this:</li>
<li>there’s electrical signals coming in from other neurons, which we will say are just some numbers.</li>
<li>then the synapses act as multipliers on these signals - another set of numbers,</li>
<li>and then the activity of the neuron is based on the sum of the weighted inputs, and by “based on” I mean that it’s fine to apply some function after computing the sum.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/mathematical_expression_of_neuron.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Mathematical expression of Neuron</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>It gets interesting once we turn this into a network, connecting the outputs of neurons to the inputs of other neurons.</li>
<li>This is a special type of neural network. It’s a <strong>recurrent network</strong>, meaning that there are <em>back and forth</em> connections between the neurons.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/recurrent_network.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Recurrent Network</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="memories-in-dynamical-systems" class="level1">
<h1>Memories in dynamical systems</h1>
<ul>
<li>What does this have to do with memory? Well it needs to be somewhere in here doesn’t it? Where?</li>
<li>Remember the idea of an associative memory, which is the ability of a system to sort of “pattern-autocomplete”.</li>
<li>Let’s try a definition of memory that’s slightly wider than maybe what we’re used to.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/a_state_of_memory.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>A State in memory</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Let a memory system be a system that, after having been in a certain state, a configuration, it has the ability to return to that state later on.</li>
<li>The responsibility for this return in our computer is CPU.</li>
<li>Our network seems different though. So let’s get creative. There’s other things in our everyday lives that fall under our definition of memory.</li>
<li>For example, if below bottle’s crushed, in other words its configuration changed, it can sometimes return to its earlier state, which in that sense could be said to have been memorized.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/a_plastic_bottle_in_our_memory.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>A plastic bottle in our memory</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>A neural network is a system with a pattern of activity that dynamically evolves. If, somehow, we could construct our network such that it would have some <strong>preferred</strong> state and would return to that state over time if it was <strong>perturbed</strong>, then that could reasonably be qualified as a memory.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-26-hopfield-network/perturbed_states.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Perturbed states</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ul>
<li>Let’s take a simple example of 8x8 neurons network. The way our system work is to decribe <strong>how the network change over time</strong> # Learning</li>
</ul>
</section>
<section id="memory-capacity-and-conclusion" class="level1">
<h1>Memory capacity and conclusion</h1>
</section>
<section id="resources" class="level1">
<h1>Resources</h1>
<p>This was the submission to the Summer of Math Exposition 2022 (#SoME2). All credit to <a href="https://www.youtube.com/@layerwiselectures">Layerwise Lectures</a>.</p>
<ol type="1">
<li>Orginal paper: Hopfield, J. J. (1982). Neural networks and physical systems with emergent collective computational abilities. Proceedings of the national academy of sciences, 79(8), 2554-2558.</li>
<li>Image: Neuron image by Santiago Ramón y Cajal, The pyramidal neuron of the cerebral cortex, 1904 Ink and pencil on paper, 8 5/8 x 6 7/8 in.</li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>neural networks</category>
  <guid>https://lktuan.github.io/blog/2024-06-26-hopfield-network/</guid>
  <pubDate>Tue, 25 Jun 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-06-26-hopfield-network/neuron.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Hi Docker 🐳</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-06-24-docker/</link>
  <description><![CDATA[ 





<p>Edit: an other great source for Docker - <a href="https://levelup.gitconnected.com/working-with-docker-and-docker-compose-9773295b4d51" class="uri">https://levelup.gitconnected.com/working-with-docker-and-docker-compose-9773295b4d51</a></p>
<div class="columns">
<div class="column" style="width:40%;">
<p>Xuất phát là dân Kinh tế và hiện tại đi theo hướng DS, mình không giỏi làm việc với các công cụ phát triển phần mềm, Docker là một trong số đó. Tuy nhiên trong một dự án Data của team, mình cần sử dụng các công vụ như Airflow, Airbyte hay DBT. Hầu hết các setup đều cần Docker. Do đó thì, phải học thôi!</p>
<p>Mình học tập theo video <a href="https://www.youtube.com/watch?v=Gh1Sgknc6Fg&amp;t=358s">“Hướng dẫn từ A-Z tự xây dựng ứng dụng với Docker”</a> của anh <a href="https://www.youtube.com/@vietnh1009"><strong>Việt Nguyễn AI</strong></a>.</p>
</div><div class="column" style="width:10%;">
<!-- empty column to create gap -->
</div><div class="column" style="width:50%;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-24-docker/vs_cot_song.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>VS Code-song 😪, ảnh nhặt từ J2Team community</figcaption>
</figure>
</div>
</div>
</div>
<section id="introduction-docker-desktop-docker-image-vs-docker-container" class="level1">
<h1>Introduction / Docker Desktop / Docker Image vs Docker Container</h1>
<ul>
<li>Cách cài đặt: trên trang get started, phiên bản Window (rất dễ để mình follow do mình cũng xài Win).</li>
<li>Nhắc lại về Docker Image và Docker Container: giống như Class và Object trong OOP, Image chỉ cho chúng ta biết một cách lý thuyết về thực thể đó, khi dựa vào lý thuyết đó tạo ra một Container thì chũng ta mới có một thực thể dự vào lý thuyết đó.</li>
<li>Trước Docker Image, còn có Dockerfile (giống như công thức nấu ăn) giúp định nghĩa một số phương thức tạo ra Image.</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-24-docker/class_vs_object.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Image vs Container ~ Class vs Object</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="docker-tutorial" class="level1">
<h1>Docker tutorial</h1>
<p>Thực hành theo tutorial trên Docker Desktop: “How do I run a container?”</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Xem nội dung của một file thông qua powershell:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> file_name</span></code></pre></div>
<p>Trong trường hợp thực hành của mình là</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> welcome-to-docker</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> .<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\D</span>ockerfile</span></code></pre></div>
</div>
</div>
<p>Nội dung Dockerfile:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource md number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Start your image with a node base image</span></span>
<span id="cb3-2">FROM node:18-alpine </span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Mỗi custome docker image đều dựa vào một base image, như một class con kế thừa một class cha. Nơi tìm Docker Image: Docker Hub.</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># The /app directory should act as the main application directory</span></span>
<span id="cb3-6">WORKDIR /app</span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Chúng ta làm việc ở bên trong thư mục nào (nếu không đề cập thì sẽ tạo trong một thư mục mặc định)</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Copy the app package and package-lock.json file</span></span>
<span id="cb3-10">COPY package*.json ./</span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Copy các file trong máy vào bên trong Docker Image - file này chắc là file cấu hình</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Copy local directories to the current local directory of our docker image (/app)</span></span>
<span id="cb3-14">COPY ./src ./src</span>
<span id="cb3-15">COPY ./public ./public</span>
<span id="cb3-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Copy các thư mục source</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Install node packages, install serve, build the app, and remove dependencies at the end</span></span>
<span id="cb3-19">RUN npm install \</span>
<span id="cb3-20">    &amp;&amp; npm install -g serve \</span>
<span id="cb3-21">    &amp;&amp; npm run build \</span>
<span id="cb3-22">    &amp;&amp; rm -fr node_modules</span>
<span id="cb3-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Run, cài đặt các thư viện, package</span></span>
<span id="cb3-24"></span>
<span id="cb3-25">EXPOSE 3000</span>
<span id="cb3-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Mở một cổng ở trong Docker container, sau này chúng ta sẽ kết nối cổng này với một cổng trong máy của chúng ta.</span></span>
<span id="cb3-27"></span>
<span id="cb3-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Start the app using serve command</span></span>
<span id="cb3-29">CMD <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> "serve", "-s", "build" </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-30"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Chúng ta muốn chạy lệnh gì trong CMD, chỉ một lệnh CMD (lệnh cuối cùng) sẽ được sử dụng trong một Dockerfile.</span></span></code></pre></div>
<p>Build fist image:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> welcome-to-docker .</span></code></pre></div>
<p>Breaking down this command:</p>
<blockquote class="blockquote">
<p>The -t flag tags your image with a name. (welcome-to-docker in this case). And the . lets Docker know where it can find the Dockerfile.</p>
</blockquote>
</section>
<section id="tự-xây-dựng-docker-image-để-huấn-luyện-mô-hình-ai" class="level1">
<h1>Tự xây dựng Docker Image để huấn luyện mô hình AI</h1>
<section id="giới-thiệu-về-script-python" class="level2">
<h2 class="anchored" data-anchor-id="giới-thiệu-về-script-python">Giới thiệu về script Python</h2>
<p>Mình có một file python đơn giản, huấn luyện một mô hình <code>ml_project</code> Random forest để nhận diện hoa diễn vĩ từ bộ <code>iris</code> dataset với thư viện <code>sklearn</code> như sau:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>iris_classification.py</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="iris_classification.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing required libraries</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing Scikit-learn library and datasets package</span></span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets</span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Splitting arrays or matrices into random train and test subsets</span></span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing random forest classifier from assemble module</span></span>
<span id="cb5-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing scaler</span></span>
<span id="cb5-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler</span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># metrics are used to find accuracy or error</span></span>
<span id="cb5-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score </span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loading the iris plants dataset (classification)</span></span>
<span id="cb5-15">iris <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.load_iris()</span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dividing the datasets into two parts i.e. training datasets and test datasets</span></span>
<span id="cb5-17">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris.data[:, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span>
<span id="cb5-18">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris.target</span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i.e. 70 % training dataset and 30 % test datasets</span></span>
<span id="cb5-20">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.20</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-21"></span>
<span id="cb5-22"></span>
<span id="cb5-23">scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StandardScaler()</span>
<span id="cb5-24">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.fit_transform(X_train)</span>
<span id="cb5-25">x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.transform(X_test)</span>
<span id="cb5-26"></span>
<span id="cb5-27">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestClassifier()</span>
<span id="cb5-28">model.fit(x_train, y_train)</span>
<span id="cb5-29">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(x_test)</span>
<span id="cb5-30"></span>
<span id="cb5-31"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> pred, label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(y_pred, y_test):</span>
<span id="cb5-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prediction: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">. Label: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(pred, label))</span>
<span id="cb5-33"></span>
<span id="cb5-34"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> accuracy_score(y_test, y_pred))</span></code></pre></div>
</div>
</section>
<section id="tìm-base-image-trên-docker-hub" class="level2">
<h2 class="anchored" data-anchor-id="tìm-base-image-trên-docker-hub">Tìm Base Image trên Docker Hub</h2>
<p>Chúng ta có thể tìm các class cha ~ base image trên <code>hub.docker.com</code>, chúng ta muốn app ml này chạy trên <code>ubuntu</code>, do đó có thể start từ image <code>ubuntu</code>.</p>
<p>Mình xây dựng <code>Dockerfile</code> một cách đơn giản như sau:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Dockerfile</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="Dockerfile" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FROM</span> ubuntu</span></code></pre></div>
</div>
<p>Từ Dockerfile này mình có thể build image thông qua command sau:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> ml_project .</span></code></pre></div>
<p>Run một docker container (container vừa run sẽ lập tức exit):</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run image_name container_name</span></code></pre></div>
<p>Nếu muốn “chui” vào bên trong container:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-it</span> image_name container_name bash</span></code></pre></div>
<p><code>-it</code> nghĩa là chúng ta chạy container dưới <strong>interactive</strong> mode, <code>bash</code> nghĩa là chạy trong <strong>bash</strong> mode, chúng ta có thể thực hiện các câu lệnh bash từ đây.</p>
</section>
<section id="cài-đặt-các-thư-viện-trong-docker-image" class="level2">
<h2 class="anchored" data-anchor-id="cài-đặt-các-thư-viện-trong-docker-image">Cài đặt các thư viện trong Docker Image</h2>
<p>Bây giờ ta mới chỉ có duy nhất hệ điều hành ubuntu trong container, chưa có python để chạy ứng dụng. Trong ubuntu, ta dùng <code>apt-get</code> để cài đặt python. Chúng ta sẽ thực hiện các lệnh trên bash ở container hiện tại trước, sau đó mới đưa vào Dockerfile với lệnh <code>RUN</code>. Dưới đây là Dockerfile cập nhật:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Dockerfile</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="Dockerfile" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FROM</span> ubuntu</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> apt-get update</span>
<span id="cb10-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> apt-get <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> install python3</span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -y tự động điền yes khi có các câu hỏi Y/N</span></span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Sử dụng exit() hoặc Ctrl-D để thoát Python mode hoặc Container trong Powershell.</p>
</div>
</div>
<p>Chúng lại truy cập bash của container đang chạy từ Docker desktop hoặc Powershell:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-24-docker/bash_inside_container.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Bash inside container</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="copy-dữ-liệu-từ-host-vào-docker-image" class="level2">
<h2 class="anchored" data-anchor-id="copy-dữ-liệu-từ-host-vào-docker-image">Copy dữ liệu từ host vào Docker Image</h2>
<p>Bây giờ chúng ta muốn rằng sau khi vào container, chúng ta không ở thư mục <code>root</code> nữa mà ở <code>src</code> ~ ứng chúng của chúng ta, với mục đích dễ làm việc hơn. Chúng ta thêm cú pháp <code>WORKDIR /src</code>. Đồng thời cũng cần cài đặt <code>sklearn</code> để ứng dụng có thể chạy. Đồng thời, sau khi tất cả được cài đặt, mình cũng muốn chạy luôn ứng dụng, sử dụng <code>CMD</code>.</p>
<p>Cập nhật Dockerfile như sau:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Dockerfile</strong></pre>
</div>
<div class="sourceCode" id="cb11" data-filename="Dockerfile" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FROM</span> ubuntu</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">WORKDIR</span> /src</span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Khi ở trong docker container, mặc định chúng ta sẽ ở root, giờ ta muốn khi vào container, chúng ta sẽ vào /src</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> apt-get update</span>
<span id="cb11-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> apt-get <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> install python3</span>
<span id="cb11-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> apt-get <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> install python3-sklearn</span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -y tự động điền yes khi có các câu hỏi Y/N</span></span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">COPY</span> iris_classification.py ./iris_classification.py </span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CMD</span> [ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"python3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iris_classification.py"</span> ]</span></code></pre></div>
</div>
</section>
</section>
<section id="end" class="level1">
<h1>End</h1>
<p>Sau khi hoàn thiện, mình không cần chạy containter ở interactive mode và tương tác bằng bash nữa. Lệnh run có thể viết gọn như sau:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run ml_project</span></code></pre></div>
<p>Bài thực hành đến đây kết thúc 🎉.</p>


<!-- -->

</section>

 ]]></description>
  <category>Docker</category>
  <category>Python</category>
  <guid>https://lktuan.github.io/blog/2024-06-24-docker/</guid>
  <pubDate>Sun, 23 Jun 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-06-24-docker/docker.png" medium="image" type="image/png" height="76" width="144"/>
</item>
<item>
  <title>Observable Framework try-out</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-06-19-observable/</link>
  <description><![CDATA[ 





<p>I’ve heard that Observable released their Framework as open source in April 2024, and Quarto also supported Observable natively since version 1.4 (?), thus decided to give it a try. Could not agree more with their slogan:</p>
<blockquote class="blockquote">
<p>The best dashboards are built with <code>code</code>.</p>
</blockquote>
<p>This is my <a href="https://github.com/lktuan/first-observable-project">repo</a> for the practice.</p>
<p>🚀 <strong>Observable Framwork</strong> <a href="https://observablehq.com/framework/">documentation</a>.</p>
<blockquote class="blockquote">
<p>Observable Framework — or “Framework” for short — is an open-source static-site generator for data apps. By data app we mean an application that is primarily a display of data. Data apps help you derive insights (to understand) and evaluate potential decisions (to take action).</p>
</blockquote>
<p>It can be a set of coordinated <strong>interactive visualizations</strong> for “self-service” analysis, a <strong>live dashboard</strong>, or a <strong>point-in-time report</strong> that combines graphics and prose to present in-depth analysis.</p>
<p>Why use Framework for your data app?</p>
<ul>
<li>The power of code: Empowered by D3 and Observable Plot library, there’s no limit to what you can create.</li>
<li>Polyglot meets the web: Framework is <em>polyglot</em> ~ it brings multiple languages together.</li>
<li>Static-site architecture: Framework’s data architecture practically forces your app to be fast because data is precomputed at build time. Furthermore, data snapshots can be highly-optimized (and aggregated and anonymized), minimizing what you send to the client.</li>
<li>Automatic reactivity: Instead of wrangling hooks or signals, you can write declarative code in vanilla JavaScript that automatically re-runs whenever variables change, like a spreadsheet.</li>
<li>An end-to-end solution: Well-designed tools let developers focus on high-value, creative work and build better apps.</li>
</ul>
<p>Let’s start!</p>
<section id="inititate-a-new-project" class="level1">
<h1>Inititate a new Project</h1>
<p>🚀 <strong>Observable Framwork</strong> <a href="">getting started</a></p>
<p>The prerequisite is we must have <a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"><code>npm</code></a> installed on our machine. Running <code>npm -v</code>, I know that I have version <code>10.5.0</code> installed.</p>
<p>We first create a folder and navigate to it:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: true</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> first-observable-project</span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> first-observable-project</span></code></pre></div>
<p>Then simply run this command to initiate the project:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: true</span></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">npm</span> init <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@observablehq"</span></span></code></pre></div>
<p>We gotta fill some basic params:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: true</span></span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">┌</span>   observable create  v1.5.1</span>
<span id="cb3-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  Where to create your project<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span>
<span id="cb3-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  hi-observable</span>
<span id="cb3-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  What to title your project<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span>
<span id="cb3-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  Hi Observable</span>
<span id="cb3-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  Include sample files to help you get started<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span>
<span id="cb3-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  No</span>
<span id="cb3-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  Install dependencies<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span>
<span id="cb3-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  Yes, via npm</span>
<span id="cb3-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  Initialize git repository<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span></span>
<span id="cb3-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  No</span>
<span id="cb3-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  Installed! 🎉</span>
<span id="cb3-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">◇</span>  Next steps… ──────╮</span>
<span id="cb3-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>                    │</span>
<span id="cb3-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  cd hi-observable  │</span>
<span id="cb3-25"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>  npm run dev       │</span>
<span id="cb3-26"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>                    │</span>
<span id="cb3-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├────────────────────╯</span></span>
<span id="cb3-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span></span>
<span id="cb3-29"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└</span>  Problems<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span> https://observablehq.com/framework/getting-started</span></code></pre></div>
<p>We can now easilly preview the app with <code>npm run dev</code>, and access out dashboard via <code>http://127.0.0.1:3000/</code>. Let’s play a little bit, we can modify the <code>h1</code> tags in <code>docs\index.md</code>, then the dashboard will be updated once we save the file, instantly. Cool!</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-19-observable/ojs_fig_1.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Home page layout</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Here is the structure of my project (after adding those Data Loader, SQL, etc steps below):</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource ini number-lines code-with-copy"><code class="sourceCode ini"></code></pre></div>
<section id="self-hosting" class="level2">
<h2 class="anchored" data-anchor-id="self-hosting">Self hosting</h2>
<p>We don’t have to deploy to Observable — Framework projects are simply static sites, so we can host them anywhere. With <code>npm</code>, we can run <code>npm run build</code>, which will generates the <code>dist</code> directory. We can then copy this directory to your static site server or preferred hosting service, like <a href="https://github.com/http-party/http-server"><code>http-server</code></a>, with command <code>npx http-server dist</code>.</p>
<p>For deployment, see the final section at the bottom of this article.</p>
</section>
</section>
<section id="write-first-data-loader" class="level1">
<h1>Write first Data Loader</h1>
<p>In Observable project we can write Data Loader in JavaScript, Python, R or any other languages. Data Loader helps you to (1) minimize file sizes and (2) reduce client side processing.</p>
<p>A data loader file has the name like: <code>dataloader.data_extension.engine_extension</code>. For example, with the American weather forecast API we can have 2 kinds of Data Loader as below:</p>
<p><strong>Javascript 🟨</strong>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>forecast.json.js</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="forecast.json.js" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> longitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">122.47</span>;</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> latitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">37.8</span>;</span>
<span id="cb5-3"></span>
<span id="cb5-4">async <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">json</span>(url) {</span>
<span id="cb5-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> await <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch</span>(url, {headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"User-Agent"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(observablehq.com, support@observablehq.com)"</span>}});</span>
<span id="cb5-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (!response.ok) throw <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Error</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">`fetch failed: ${response.status}`</span>);</span>
<span id="cb5-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> await response.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">json</span>();</span>
<span id="cb5-8">}</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> station <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> await <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">json</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">`https://api.weather.gov/points/${latitude},${longitude}`</span>);</span>
<span id="cb5-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> forecast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> await <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">json</span>(station.properties.forecastHourly);</span>
<span id="cb5-12"></span>
<span id="cb5-13">process.<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">stdout</span>.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write</span>(JSON.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stringify</span>(forecast));</span></code></pre></div>
</div>
<p><strong>Python 🐍</strong>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>forecast.json.py</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="forecast.json.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb6-4"></span>
<span id="cb6-5">longitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">122.47</span></span>
<span id="cb6-6">latitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">37.80</span></span>
<span id="cb6-7"></span>
<span id="cb6-8">station <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://api.weather.gov/points/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>latitude<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>longitude<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>).json()</span>
<span id="cb6-9">forecast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(station[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"forecastHourly"</span>]).json()</span>
<span id="cb6-10"></span>
<span id="cb6-11">json.dump(forecast, sys.stdout)</span></code></pre></div>
</div>
<p>Run the data loader, testing if it work:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: true</span></span>
<span id="cb7-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">node</span> hi-observable<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\d</span>ocs<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\d</span>ata<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\f</span>orecast.json.js</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or</span></span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> hi-observable<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\d</span>ocs<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\d</span>ata<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\f</span>orecast.json.py</span></code></pre></div>
<p>Now if we refresh the dashboard page, the weather forecasting tab should be there. My first run was failed as I miss a comma in JS file 😂. If we change the data loader, the dashboard will change concurrently.</p>
</section>
<section id="sql-in-observable-framework" class="level1">
<h1>SQL in Observable Framework</h1>
</section>
<section id="grids-cards-and-themes" class="level1">
<h1>Grids, Cards, and Themes</h1>
<p>The <code>Grid</code> class allow us to organize multiple vizualization in a denser format, like a dashboard. The <code>Grid</code> class declares a grid container.</p>
</section>
<section id="deployment-a-project" class="level1">
<h1>Deployment a Project</h1>
</section>
<section id="imports-from-npm-local-files-remote-urls-and-lazy-loading" class="level1">
<h1>Imports: from npm, local files, remote URLs, and lazy loading</h1>


<!-- -->

</section>

 ]]></description>
  <category>Dashboard</category>
  <category>Observable</category>
  <category>til</category>
  <guid>https://lktuan.github.io/blog/2024-06-19-observable/</guid>
  <pubDate>Tue, 18 Jun 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-06-19-observable/ojs_forum.png" medium="image" type="image/png"/>
</item>
<item>
  <title>NN-Z2H Lesson 1: The spelled-out intro to neural networks and backpropagation - building micrograd</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/</link>
  <description><![CDATA[ 





<p><strong>Upfront-note</strong>: There are also greate resources in Vietnamese for learning Backpropagation, for e.g.:</p>
<ol type="1">
<li>Blog <a href="https://machinelearningcoban.com/2017/02/24/mlp/">machinelearningcoban</a></li>
<li>Blog <a href="https://dominhhai.github.io/vi/2018/04/nn-bp/">dominhhai</a></li>
</ol>
<section id="micrograd-from-scratch-yayy" class="level1 page-columns page-full">
<h1>MicroGrad from scratch Yayy!</h1>
<p><a href="https://github.com/karpathy/micrograd"><strong>🚀 MicroGrad repo</strong></a> <a href="https://www.youtube.com/watch?v=VMj-3S1tku0&amp;list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ"><strong>🔥 Video Lecture</strong></a></p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20240217152156/Frame-13.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Backpropagation in Neural Networks, photo credit to <a href="https://www.geeksforgeeks.org/backpropagation-in-neural-network/">GeekforGeek</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<section id="intro-micrograd-overview---what-does-your-neural-network-training-look-like-under-the-hood" class="level2">
<h2 class="anchored" data-anchor-id="intro-micrograd-overview---what-does-your-neural-network-training-look-like-under-the-hood">intro &amp; micrograd overview - what does your neural network training look like under the hood?</h2>
<p>What is MicroGrad ❓: a tiny <strong>auto-grad</strong> (automatic gradient) engine, implement of <strong>backpropagation</strong> ~ itertively tune the weight of that nn to minimize the loss function -&gt; improve the accuracy of the neural network. Backpropagation will be the mathematical core of any modern deep neutral network like, say <code>pytorch</code>, or <code>jaxx</code>.</p>
<p>Installation: <code>pip install micrograd</code></p>
<p>Example:</p>
<div id="b9df0d96" class="cell" data-execution_count="1">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> micrograd.engine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Value</span>
<span id="annotated-cell-1-2"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1">1</button><span id="annotated-cell-1-3" class="code-annotation-target">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span>)</span>
<span id="annotated-cell-1-4">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>)</span>
<span id="annotated-cell-1-5">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="annotated-cell-1-6">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="annotated-cell-1-7">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-1-8">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a)</span>
<span id="annotated-cell-1-9">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a).relu()</span>
<span id="annotated-cell-1-10">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a).relu()</span>
<span id="annotated-cell-1-11">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d</span>
<span id="annotated-cell-1-12">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="annotated-cell-1-13">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2">2</button><span id="annotated-cell-1-14" class="code-annotation-target">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> f</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="3">3</button><span id="annotated-cell-1-15" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prints 24.7041, the outcome of this forward pass</span></span>
<span id="annotated-cell-1-16">g.backward()</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="4">4</button><span id="annotated-cell-1-17" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>grad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prints 138.8338, i.e. the numerical value of dg/da</span></span>
<span id="annotated-cell-1-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>grad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prints 645.5773, i.e. the numerical value of dg/db</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="3" data-code-annotation="1">Micrograd allows you to build mathematical expressions, in this case <code>a</code> and <code>b</code> are inputs, wrapped in <code>Value</code> object with value equal to <code>-4.0</code> and <code>2.0</code>, respectively.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="14" data-code-annotation="2"><code>a</code> and <code>b</code> are transformed to <code>c</code>, <code>d</code>, <code>e</code> and eventually <code>f</code>, <code>g</code>. Mathematical operators are implemented, like <code>+</code>, <code>*</code>, <code>**</code>, even <code>relu()</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="15" data-code-annotation="3"><code>Value</code> object contains <code>data</code>, and <code>grad</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="17" data-code-annotation="4">Call <code>backpropagation()</code> process.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>24.7041
138.8338
645.5773</code></pre>
</div>
</div>
</section>
<section id="derivative-of-a-simple-function-with-one-input" class="level2">
<h2 class="anchored" data-anchor-id="derivative-of-a-simple-function-with-one-input">derivative of a simple function with one input</h2>
<p>❓What exactly is derivative❓</p>
<div id="f5593771" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</details>
</div>
<p>A simple quadratic function:</p>
<div id="bad2c0f5" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(x):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
</details>
</div>
<div id="86db4db7" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">f(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>20.0</code></pre>
</div>
</div>
<p>Input also can be an array, we can plot it for visibility.</p>
<div id="09716b95" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb6-2">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(xs)</span>
<span id="cb6-3">plt.plot(xs, ys)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-6-output-1.png" width="575" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>If we bump up a litle value <code>h</code> of <code>x</code>, how <code>f(x)</code> will response?</p>
<div id="47f820a3" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><button class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="1">1</button><span id="annotated-cell-6-1" class="code-annotation-target">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.000000000001</span></span>
<span id="annotated-cell-6-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span></span>
<span id="annotated-cell-6-3">( f(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>h) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> f(x) ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> h</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-6" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="1" data-code-annotation="1">Change the value of <code>h</code> from <code>0.0001</code> to be <code>0.00000...0001</code> -&gt; the slope value comes to <code>14</code> (at the value of <code>3.0</code> of <code>x</code>).</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>14.001244608152774</code></pre>
</div>
</div>
<p>Try for <code>x = -3.0</code>, <code>x = 5.0</code>, we get different values of the slope, for <code>x = 2/3</code>, the slope is zero. Let’s get more complex.</p>
</section>
<section id="derivative-of-a-function-with-multiple-inputs" class="level2">
<h2 class="anchored" data-anchor-id="derivative-of-a-function-with-multiple-inputs">derivative of a function with multiple inputs</h2>
<div id="0d2be48a" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb8-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span></span>
<span id="cb8-3">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span>
<span id="cb8-4">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb8-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>4.0</code></pre>
</div>
</div>
<p>Put our bump-up element to this multi-variables function:</p>
<div id="c8b804a2" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-8-1">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span></span>
<span id="annotated-cell-8-2"></span>
<span id="annotated-cell-8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input</span></span>
<span id="annotated-cell-8-4">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="annotated-cell-8-5">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span></span>
<span id="annotated-cell-8-6">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span>
<span id="annotated-cell-8-7"></span>
<span id="annotated-cell-8-8">d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="1">1</button><span id="annotated-cell-8-9" class="code-annotation-target">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> h</span>
<span id="annotated-cell-8-10">d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="annotated-cell-8-11"></span>
<span id="annotated-cell-8-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d1: '</span>, d1)</span>
<span id="annotated-cell-8-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d2: '</span>, d2)</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="2">2</button><span id="annotated-cell-8-14" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'slope: '</span>, (d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>h)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-8" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="9" data-code-annotation="1">Do the same for <code>b</code>, <code>c</code>, we’ll get different slopes.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="14" data-code-annotation="2">We say given <code>b = -3.0</code> and <code>c = 10.0</code> are constants, the derivative of <code>d</code> at <code>a = 2.0</code> is <code>-3.0</code>. The rate of which <code>d</code> will increase if we scale <code>a</code>!</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>d1:  4.0
d2:  3.997
slope:  -3.0000000000001137</code></pre>
</div>
</div>
</section>
<section id="starting-the-core-value-object-of-micrograd-and-its-visualization" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="starting-the-core-value-object-of-micrograd-and-its-visualization">starting the core <code>Value</code> object of micrograd and its visualization</h2>
<p>So we now have some intuitive sense of what is derivative is telling you about the function. We now move to the Neural Networks, which would be massive mathematical expressions. We need some data structures that maintain these expressions, we first declare an object <code>Value</code> that holds data.</p>
<div id="b333c6c5" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Value:</span>
<span id="annotated-cell-9-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data, </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="3">3</button><span id="annotated-cell-9-3" class="code-annotation-target">                        _children<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(),</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="5">5</button><span id="annotated-cell-9-4" class="code-annotation-target">                        _op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>,</span>
<span id="annotated-cell-9-5">                        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="annotated-cell-9-6">                        ): </span>
<span id="annotated-cell-9-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="6">6</button><span id="annotated-cell-9-8" class="code-annotation-target">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="7">7</button><span id="annotated-cell-9-9" class="code-annotation-target">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="annotated-cell-9-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(_children)</span>
<span id="annotated-cell-9-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _op</span>
<span id="annotated-cell-9-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  label</span>
<span id="annotated-cell-9-13"></span>
<span id="annotated-cell-9-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a nicer looking for class attributes</span></span>
<span id="annotated-cell-9-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Value(data=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span></span>
<span id="annotated-cell-9-16">    </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="4">4</button><span id="annotated-cell-9-17" class="code-annotation-target">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__add__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="annotated-cell-9-18">        other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(other, Value) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> Value(other) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># turn other to Value object before calculation</span></span>
<span id="annotated-cell-9-19">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other.data, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>)</span>
<span id="annotated-cell-9-20"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="8">8</button><span id="annotated-cell-9-21" class="code-annotation-target">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="annotated-cell-9-22">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="annotated-cell-9-23">            other.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="annotated-cell-9-24">        out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="annotated-cell-9-25"></span>
<span id="annotated-cell-9-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="annotated-cell-9-27"></span>
<span id="annotated-cell-9-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__mul__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="annotated-cell-9-29">        other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(other, Value) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> Value(other) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># turn other to Value object before calculation</span></span>
<span id="annotated-cell-9-30">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> other.data, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>)</span>
<span id="annotated-cell-9-31"></span>
<span id="annotated-cell-9-32">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="annotated-cell-9-33">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> other.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="annotated-cell-9-34">            other.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="annotated-cell-9-35">        out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="annotated-cell-9-36"></span>
<span id="annotated-cell-9-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="annotated-cell-9-38"></span>
<span id="annotated-cell-9-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tanh(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-9-40">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data</span>
<span id="annotated-cell-9-41">        t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="annotated-cell-9-42">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(t, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tanh'</span>)</span>
<span id="annotated-cell-9-43"></span>
<span id="annotated-cell-9-44">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="annotated-cell-9-45">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="annotated-cell-9-46">        out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="annotated-cell-9-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="annotated-cell-9-48"></span>
<span id="annotated-cell-9-49">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-9-50">        </span>
<span id="annotated-cell-9-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># topo order for all children in the graph</span></span>
<span id="annotated-cell-9-52">        topo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-9-53">        visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="annotated-cell-9-54">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build_topo(v):</span>
<span id="annotated-cell-9-55">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> visited:</span>
<span id="annotated-cell-9-56">                visited.add(v)</span>
<span id="annotated-cell-9-57">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> child <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> v._prev:</span>
<span id="annotated-cell-9-58">                    build_topo(child) </span>
<span id="annotated-cell-9-59">                topo.append(v)</span>
<span id="annotated-cell-9-60">        build_topo(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="annotated-cell-9-61"></span>
<span id="annotated-cell-9-62">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sequentially apply the chain rules</span></span>
<span id="annotated-cell-9-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="annotated-cell-9-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(topo):</span>
<span id="annotated-cell-9-65">            node._backward()</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-9" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="3" data-code-annotation="3">the connective tissue of this expression. We want to keep these expression graphs, so we need to know and keep pointers about what values produce what other values. <code>_children</code> is by default a empty tuple.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="17" data-code-annotation="4">as we added <code>_children</code>, we also need to point out the father - children relationship in method <code>__add__</code> and <code>__mul__</code> as well.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="4" data-code-annotation="5">we want to know the <strong>operation</strong> between father and child, <code>_op</code> is empty string by default, the value <code>+</code> and <code>-</code> will be added to the operator method respectively.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="8" data-code-annotation="6">initially assume that node has no impact to the output.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="9" data-code-annotation="7">this backward function basically do nothing at the initial.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="21" data-code-annotation="8">implement of backward pass for plus node, <code>+=</code> represent the accumulate action (rather than overwrite it), assigne the gradient behaviour for each type of operation, call the <code>_backward</code> concurrently with function.</span>
</dd>
</dl>
</div>
</div>
<p>Setting input and expression:</p>
<div id="dbbfa0d2" class="cell" data-execution_count="10">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-10-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="annotated-cell-10-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="annotated-cell-10-3">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="annotated-cell-10-4"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="1">1</button><span id="annotated-cell-10-5" class="code-annotation-target">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="annotated-cell-10-6"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="2">2</button><span id="annotated-cell-10-7" class="code-annotation-target">a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="annotated-cell-10-8"></span>
<span id="annotated-cell-10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># d = a*b + c rewrite the expression</span></span>
<span id="annotated-cell-10-10">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span></span>
<span id="annotated-cell-10-11">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> d.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span></span>
<span id="annotated-cell-10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># d</span></span>
<span id="annotated-cell-10-13">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>)</span>
<span id="annotated-cell-10-14">L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> L.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span></span>
<span id="annotated-cell-10-15">L</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-10" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="5" data-code-annotation="1">which will internally call <code>a.__add__(b)</code></span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="7" data-code-annotation="2">which will internally call <code>(a.__mul__(b)).__add__(c)</code></span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Value(data=-8.0)</code></pre>
</div>
</div>
<p>So that we can know the children:</p>
<div id="d5fc2d85" class="cell" data-execution_count="11">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">d._prev</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>{Value(data=-6.0), Value(data=10.0)}</code></pre>
</div>
</div>
<p>We can know the operations:</p>
<div id="8e746d76" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">d._op</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>'+'</code></pre>
</div>
</div>
<p>Now we know exactly how each value came to be by <strong>word</strong> expression and from what other values. These will be quite abit larger, so we need a way to nicely visualize these expressions that we’re building out. Below are a-little-scary codes.</p>
<div id="1b6e7a49" class="cell" data-execution_count="13">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="annotated-cell-13-2"></span>
<span id="annotated-cell-13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming the Graphviz bin directory path is 'C:/Program Files (x86)/Graphviz2.xx/bin'</span></span>
<span id="annotated-cell-13-4">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PATH"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> os.pathsep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C:/Program Files (x86)/Graphviz/bin'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add with the code, Gemini instructed me this 😪</span></span>
<span id="annotated-cell-13-5"></span>
<span id="annotated-cell-13-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> graphviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Digraph</span>
<span id="annotated-cell-13-7"></span>
<span id="annotated-cell-13-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> trace(root):</span>
<span id="annotated-cell-13-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build a set of all nodes and edges in a graph</span></span>
<span id="annotated-cell-13-10">    nodes, edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="annotated-cell-13-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build(v):</span>
<span id="annotated-cell-13-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes:</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="1">1</button><span id="annotated-cell-13-13" class="code-annotation-target">            nodes.add(v)</span>
<span id="annotated-cell-13-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> child <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> v._prev:</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="2">2</button><span id="annotated-cell-13-15" class="code-annotation-target">                edges.add((child, v))</span>
<span id="annotated-cell-13-16">                build(child)</span>
<span id="annotated-cell-13-17">    build(root)</span>
<span id="annotated-cell-13-18"></span>
<span id="annotated-cell-13-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nodes, edges</span>
<span id="annotated-cell-13-20"></span>
<span id="annotated-cell-13-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_dot(root):</span>
<span id="annotated-cell-13-22">    dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Digraph(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'svg'</span>, graph_attr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rankdir'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LR'</span>}) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LR = from left to right</span></span>
<span id="annotated-cell-13-23">    nodes, edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trace(root)</span>
<span id="annotated-cell-13-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes:</span>
<span id="annotated-cell-13-25">        uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>(n))</span>
<span id="annotated-cell-13-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for any value in the graph, create a rectangular ('record') node for it</span></span>
<span id="annotated-cell-13-27">        dot.node(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>uid, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{ </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | data </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.4f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | grad </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.4f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (n.label, n.data, n.grad), shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'record'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># why is (n.data, ), but not (n.data) ???</span></span>
<span id="annotated-cell-13-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n._op:</span>
<span id="annotated-cell-13-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if this value is a result of some operations, create an op node for it</span></span>
<span id="annotated-cell-13-30">            dot.node(name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n._op, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n._op)</span>
<span id="annotated-cell-13-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and connect the node to it</span></span>
<span id="annotated-cell-13-32">            dot.edge(uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n._op, uid)</span>
<span id="annotated-cell-13-33"></span>
<span id="annotated-cell-13-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n1, n2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> edges:</span>
<span id="annotated-cell-13-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># connect n1 to the op node of n2</span></span>
<span id="annotated-cell-13-36">        dot.edge(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>(n1)), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>(n2)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n2._op)</span>
<span id="annotated-cell-13-37"></span>
<span id="annotated-cell-13-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dot</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-13" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="13" data-code-annotation="1">This will collect all nodes to the <code>nodes</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="15" data-code-annotation="2">This will iteratively recursively collect all nodes to the <code>nodes</code>, add child and node ralationship information to <code>edges</code>.</span>
</dd>
</dl>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Remember to let <a href="https://graphviz.org/download/">graphviz</a> installed on your machine, not only Python package, I also run this:</p>
<div id="0ead0492" class="cell" data-execution_count="14">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb16-2">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PATH"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> os.pathsep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C:\Program Files (x86)\Graphviz</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">in\dot.exe'</span></span></code></pre></div>
</details>
</div>
</div></div><p>Now we can draw 🚀.</p>
<div id="2df941fe" class="cell" data-execution_count="15">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1">draw_dot(d)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-16-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So far we’ve build out mathematical expressions using only plus <code>+</code> and times <code>*</code>, all <code>Value</code>s are only scalar.</p>
<p>Back to the <code>Value</code> object, we will create 1 more attribute call <code>label</code>, make the expression more complicated by adding intermediate value <code>f</code>, <code>d</code>, out final node will be capital <code>L</code>.</p>
</section>
</section>
<section id="backpropagation" class="level1 page-columns page-full">
<h1>Backpropagation</h1>
<p>In backpropagation, we start at the end and are going to reverse and calculate the gradients along all the intermediate values. What we are actually computing for evert single node here is derivative of that node with respect to <code>L</code>.</p>
<p>In neural nets, <code>L</code> represent to a Loss function. And you will be very interested in the derivative of bassically loss function <code>L</code> with respect to the <strong>weights</strong> of the neural networks.</p>
<p>We need to know how are those <strong>leaf nodes</strong> <code>a</code>, <code>b</code>, <code>c</code>, <code>f</code> are impacting to the loss function. We call it <code>grad</code> and add this attribute to the <code>Value</code> object.</p>
<section id="manual-backpropagation-example-1-simple-expression" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="manual-backpropagation-example-1-simple-expression">manual backpropagation example #1: simple expression</h2>
<div class="page-columns page-full">
<div id="e64e9aae" class="cell page-columns page-full" data-execution_count="16">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1">draw_dot(L)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="15">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-17-output-1.svg" class="img-fluid figure-img column-page"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Let’s do the backpropagation <strong>manually</strong>:</p>
<ol type="1">
<li>First we need to calculate the <code>dL/dL</code>, how <code>L</code> will response if we change <code>L</code> a tiny value <code>h</code>. The response simply is <code>1</code> so <code>L.grad = 1.0</code>.</li>
<li><code>F = d * f</code>, so <code>dL/dd</code> -&gt; <code>(f((x+h)) - f(x))/h = ((d+h)*f - d*f)/h = h*f/h = f = -2.0</code>. Quite straighforward, so <code>d.grad = -2.0</code>.</li>
<li>Similarly, <code>f.grad = d = 4</code>.<br>
</li>
<li>Next, for <code>dL/dc</code>. We first concern <code>dd/dc</code>, we know <code>d = c + e</code>. Same with (2) we will soon know <code>dd/dc = 1.0</code>, by symmetry <code>dd/de = 1.0</code>. Following the <strong>Chain Rules</strong> <img src="https://latex.codecogs.com/png.latex?h'(x)%20=%20f'(g(x))g'(x)">, we have <code>dL/dc = dL/dd * dd/dc = -2.0 * 1 = -2.0</code>. </li>
<li>By symmetry, <code>dL/de = -2.0</code>.</li>
<li><code>dL/da = dL/de * de/da = -2.0 * b = -2.0 * -3.0 = 6.0</code>.</li>
<li><code>dl/db = dL/de * de/db = -2.0 * a = -2.0 * 2.0 = -4.0</code>.</li>
</ol>
<div class="no-row-height column-margin column-container"><span class="margin-aside"><a href="https://en.wikipedia.org/wiki/Chain_rule">Chain Rules Wiki</a></span></div><p>We can also create a function for playing around / gradient check, and not messing up the global scope.</p>
<div id="b0ddb825" class="cell" data-execution_count="17">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> lol():</span>
<span id="cb19-2"></span>
<span id="cb19-3">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span></span>
<span id="cb19-4"></span>
<span id="cb19-5">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb19-6">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb19-7">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb19-8">    e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span></span>
<span id="cb19-9">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> d.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span></span>
<span id="cb19-10">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>)</span>
<span id="cb19-11">    L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> L.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span></span>
<span id="cb19-12">    L1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L.data</span>
<span id="cb19-13"></span>
<span id="cb19-14">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb19-15">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb19-16">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb19-17">    c.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> h <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dL/dc = -2.0</span></span>
<span id="cb19-18">    e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span></span>
<span id="cb19-19">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> d.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span></span>
<span id="cb19-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># d.data += h # dL/dd = -2.0</span></span>
<span id="cb19-21">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># + h # dL/df = 4.0</span></span>
<span id="cb19-22">                , label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>) </span>
<span id="cb19-23">    L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> L.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span></span>
<span id="cb19-24">    L2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L.data <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># + h # dL/dL = 1.0</span></span>
<span id="cb19-25"></span>
<span id="cb19-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>((L2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> L1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> h)</span>
<span id="cb19-27"></span>
<span id="cb19-28">lol()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>-1.9999999999953388</code></pre>
</div>
</div>
<p>So that is backpropagation ~ just recursively applying the Chain Rules, multiplying local derivatives.</p>
</section>
<section id="preview-of-a-single-optimization-step" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="preview-of-a-single-optimization-step">preview of a single optimization step</h2>
<p>We can change the input that we can control <code>a, b, c, f</code> to see 1 step of the optimization of process.</p>
<div id="61c0f1aa" class="cell" data-execution_count="18">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">a.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.0</span></span>
<span id="cb21-2">b.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span></span>
<span id="cb21-3">c.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb21-4">f.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span></span>
<span id="cb21-5"></span>
<span id="cb21-6">a.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a.grad</span>
<span id="cb21-7">b.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b.grad</span>
<span id="cb21-8">c.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c.grad</span>
<span id="cb21-9">f.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f.grad</span>
<span id="cb21-10"></span>
<span id="cb21-11">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span></span>
<span id="cb21-12">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> d.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> d.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span></span>
<span id="cb21-13">L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f</span>
<span id="cb21-14"></span>
<span id="cb21-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(L.data)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>-7.286496</code></pre>
</div>
</div>
<p>We can see the changes, <code>L</code> increased a little bit as expected.</p>
<div class="page-columns page-full">
<div id="5117ec3b" class="cell page-columns page-full" data-execution_count="19">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">draw_dot(L)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="18">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-20-output-1.svg" class="img-fluid figure-img column-page"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="manual-backpropagation-example-2-a-neuron" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="manual-backpropagation-example-2-a-neuron">manual backpropagation example #2: a neuron</h2>
<p>Anatomy of neurons, we have:</p>
<ul>
<li><code>axon</code> as input <img src="https://latex.codecogs.com/png.latex?x_0">;</li>
<li><code>synapse</code> string as weight <img src="https://latex.codecogs.com/png.latex?w_0">;</li>
<li>information flows into the cell body will be <img src="https://latex.codecogs.com/png.latex?x_0w_0">;</li>
<li>there are multiple inputs <img src="https://latex.codecogs.com/png.latex?x_iw_i"> flow into the cell body;</li>
<li>the cell body has some <em>bias</em> itself <img src="https://latex.codecogs.com/png.latex?b">;</li>
<li>the cell body processes all information, the output will flow through an <em>activation</em> function ~ which is some kind of a squashing function, like <code>sigmoid</code>, <code>tanh</code> or something like that;</li>
</ul>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.researchgate.net/publication/364814302/figure/fig5/AS:11431281092677232@1666928276027/Neural-net-Structure-with-an-Activation-Function-Source-CS231n-Stanford-2017.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Neural net Structure with an Activation Function, CS231n Stanford 2017</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>🚀How does the <code>tanh</code> look like? this hyperbolic function will squash the output to the edge values: <code>-1.0</code> or <code>1.0</code>.</p>
<div id="1435c01a" class="cell" data-execution_count="20">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1">plt.plot(np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>), np.tanh(np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> plt.grid()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-21-output-1.png" width="590" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>We first implement <a href="https://en.wikipedia.org/wiki/Hyperbolic_functions"><code>tanh</code></a> function to our class <code>Value</code>.</p>
<div id="c999efd4" class="cell" data-execution_count="21">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tanh(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb25-2">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data</span>
<span id="cb25-3">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb25-4">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(t, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tanh'</span>)</span>
<span id="cb25-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb25-6"></span>
<span id="cb25-7">Value.tanh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tanh</span></code></pre></div>
</details>
</div>
</div></div><p>Let’s take a simple example of 2-dimensional neuron with 2 inputs <code>x1</code> and <code>x2</code>:</p>
<div id="adf855ae" class="cell" data-execution_count="22">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input x1, x2</span></span>
<span id="cb26-2">x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1'</span>)</span>
<span id="cb26-3">x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2'</span>)</span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weights w1,w2</span></span>
<span id="cb26-5">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w1'</span>)</span>
<span id="cb26-6">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w2'</span>)</span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bias of neuron b</span></span>
<span id="cb26-8">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.88137358</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb26-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x1*w1 + x2*w2 + b</span></span>
<span id="cb26-10">x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1w1'</span></span>
<span id="cb26-11">x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2w2'</span></span>
<span id="cb26-12">x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1w1 + x2w2'</span></span>
<span id="cb26-13">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span></span>
<span id="cb26-14"></span>
<span id="cb26-15">o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n.tanh()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> o.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># not define yet</span></span></code></pre></div>
</details>
</div>
<div class="page-columns page-full">
<div id="b5fc4c81" class="cell page-columns page-full" data-execution_count="23">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">draw_dot(o)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="21">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-24-output-1.svg" class="img-fluid figure-img column-page"></p>
</figure>
</div>
</div>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<div id="050f50a4" class="cell" data-execution_count="24">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">o.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb28-2">n.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> o.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb28-3">b.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n.grad</span>
<span id="cb28-4">x1w1x2w2.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n.grad</span>
<span id="cb28-5">x1w1.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1x2w2.grad</span>
<span id="cb28-6">x2w2.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1x2w2.grad</span>
<span id="cb28-7">x1.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w1.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x1w1.grad</span>
<span id="cb28-8">w1.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x1w1.grad</span>
<span id="cb28-9">x2.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w2.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x2w2.grad</span>
<span id="cb28-10">w2.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x2.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x2w2.grad</span></code></pre></div>
</details>
</div>
</div></div><p>From here we will manually calculate the gradient again:</p>
<ol type="1">
<li><code>do/do = 1</code>, that’s the base case, so <code>o.grad = 1.0</code>.</li>
<li><code>o = tanh(n)</code>, follow that Wiki link (and of course can be easily proof) we have <code>do/dn = 1 - tanh(x)^2 = 1 - o^2</code>.</li>
<li><code>n = x1w1x2w2 + b</code>, this is plus node, which gradient will flow to children equally, <code>do/db = do/dn * dn/db = do/dn * 1</code>.</li>
<li>By symmertry, <code>do/dx1w1x2w2 = do/db</code>.</li>
<li><code>do/dx1w1 = do/dx1w1x2w2</code>.</li>
<li><code>do/dx2w2 = do/dx1w1x2w2</code>.</li>
<li><code>do/dx1 = w1 * do/dx1w1</code>.</li>
<li><code>do/dw1 = x1 * do/dx1w1</code>.</li>
<li><code>do/dx2 = w2 * do/dx2w2</code>.</li>
<li><code>do/dw2 = x2 * do/dx2w2</code>.</li>
</ol>
<div class="page-columns page-full">
<div id="b2a5685c" class="cell page-columns page-full" data-execution_count="25">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1">draw_dot(o)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="23">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-26-output-1.svg" class="img-fluid figure-img column-page"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="implementing-the-backward-function-for-each-operation" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="implementing-the-backward-function-for-each-operation">implementing the backward function for each operation</h2>
<p>Doing the backpropagation manually is obviously ridiculous and we are now to put an end to this suffering. We will see how we can implement backward pass a bit more automatically.</p>
<p>We create <code>_backward</code> operation for each operator, implement the Chain Rules. Activate the <code>_backward</code> call along with funtion execution.</p>
<div id="724b9351" class="cell" data-execution_count="26">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1">o.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb30-2"></span>
<span id="cb30-3">o._backward()</span>
<span id="cb30-4">n._backward()</span>
<span id="cb30-5">b._backward()</span>
<span id="cb30-6">x1w1x2w2._backward()</span>
<span id="cb30-7">x1w1._backward()</span>
<span id="cb30-8">x2w2._backward()</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full">
<div id="7b8ca278" class="cell page-columns page-full" data-execution_count="27">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1">draw_dot(o)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="25">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-28-output-1.svg" class="img-fluid figure-img column-page"></p>
</figure>
</div>
</div>
</div>
</div>
<p>We still need to call the <code>_backward</code> node by node. Now we move to the next step, to implement backward function to whole expression graph.</p>
</section>
<section id="implementing-the-backward-function-for-a-whole-expression-graph" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="implementing-the-backward-function-for-a-whole-expression-graph">implementing the backward function for a whole expression graph</h2>
<p>In short, we need to do everything after each node before we call the backward function itself. For every node, all dependencies, everything that it depends on has to propagate to it before we can continue backpropagation.</p>
<p>This ordering of graph can be archived using something like <a href="https://en.wikipedia.org/wiki/Topological_sorting">topological sort</a>.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://miro.medium.com/v2/resize:fit:720/format:webp/1*0jRSNI2zo30sENk2qlqEvw.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Topological Sort, photo credit to <a href="https://yuminlee2.medium.com/topological-sort-cf9f8e43af6a">Claire Lee</a></figcaption>
</figure>
</div>
</div>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<div id="8e1cf168" class="cell" data-execution_count="28">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we first reset the Values</span></span>
<span id="cb32-2">x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1'</span>)</span>
<span id="cb32-3">x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2'</span>)</span>
<span id="cb32-4">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w1'</span>)</span>
<span id="cb32-5">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w2'</span>)</span>
<span id="cb32-6">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.88137358</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb32-7">x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1w1'</span></span>
<span id="cb32-8">x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2w2'</span></span>
<span id="cb32-9">x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1w1 + x2w2'</span></span>
<span id="cb32-10">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span></span>
<span id="cb32-11">o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n.tanh()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> o.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span></span></code></pre></div>
</details>
</div>
</div></div><p>Below is the code:</p>
<div id="701c37a6" class="cell" data-execution_count="29">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1">topo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb33-2">visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build_topo(v):</span>
<span id="cb33-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> visited:</span>
<span id="cb33-6">        visited.add(v)</span>
<span id="cb33-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> child <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> v._prev:</span>
<span id="cb33-8">            build_topo(child) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># recursively look up all children for v</span></span>
<span id="cb33-9">        topo.append(v)</span>
<span id="cb33-10"></span>
<span id="cb33-11">build_topo(o)</span>
<span id="cb33-12">topo</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>[Value(data=6.88137358),
 Value(data=2.0),
 Value(data=-3.0),
 Value(data=-6.0),
 Value(data=0.0),
 Value(data=1.0),
 Value(data=0.0),
 Value(data=-6.0),
 Value(data=0.88137358),
 Value(data=0.707106777676776)]</code></pre>
</div>
</div>
<p>We implement the topological sort to <code>backward()</code> (without underscore) function. Now we can trigger the whole process:</p>
<div id="23bc7fa2" class="cell" data-execution_count="30">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">o.backward()</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full">
<div id="ffb0088c" class="cell page-columns page-full" data-execution_count="31">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">draw_dot(o)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="29">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-32-output-1.svg" class="img-fluid figure-img column-page"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="fixing-a-backprop-bug-when-one-node-is-used-multiple-times" class="level2">
<h2 class="anchored" data-anchor-id="fixing-a-backprop-bug-when-one-node-is-used-multiple-times">fixing a backprop bug when one node is used multiple times ⛔</h2>
<p>This <code>a.grad</code> should be <code>2.0</code>.</p>
<div id="6eaa6894" class="cell" data-execution_count="32">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb37-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> b.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this case self and other are both a, we should not overwrite the gradient, we should accumulate it.</span></span>
<span id="cb37-3">b.backward()</span>
<span id="cb37-4">draw_dot(b)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="30">
<div>
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-33-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="breaking-up-a-tanh-exercising-with-more-operations" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="breaking-up-a-tanh-exercising-with-more-operations">breaking up a <code>tanh</code>, exercising with more operations</h2>
<p>Sometime we do operations between <code>Value</code> and other, like <code>int</code>. We can not do this unless we add below code to <code>__add__</code> and <code>__mul__</code> operations. Now we can <code>Value(1.0) + 1.0</code>, or <code>Value(2.0) * 2</code>.</p>
<div id="e91741ed" class="cell" data-execution_count="33">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1">other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(other, Value) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> Value(other)</span></code></pre></div>
</details>
</div>
<p>But for <code>2 * Value(2.0)</code>, which will internally call <code>2.__mul__(Value(2.0))</code>, will not work. We add <code>__rmul__</code>:</p>
<div id="80439bef" class="cell" data-execution_count="34">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__rmul__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># other * self</span></span>
<span id="cb39-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> other</span>
<span id="cb39-3"></span>
<span id="cb39-4">Value.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__rmul__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__rmul__</span></span></code></pre></div>
</details>
</div>
<p>For exponential, we add <code>epx</code>:</p>
<div id="13022508" class="cell" data-execution_count="35">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> exp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb40-2">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data</span>
<span id="cb40-3">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(math.exp(x), (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exp'</span>)</span>
<span id="cb40-4"></span>
<span id="cb40-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="cb40-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> out.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="cb40-7">    out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="cb40-8"></span>
<span id="cb40-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb40-10"></span>
<span id="cb40-11">Value.exp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exp</span></code></pre></div>
</details>
</div>
<p>For division, we add <code>__truediv__</code>:</p>
<div id="b4ac6bfa" class="cell" data-execution_count="36">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__truediv__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self / other</span></span>
<span id="cb41-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb41-3"></span>
<span id="cb41-4">Value.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__truediv__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__truediv__</span></span></code></pre></div>
</details>
</div>
<p>For power, we add <code>__pow__</code>:</p>
<div id="b5e05d88" class="cell" data-execution_count="37">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__pow__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self ** other</span></span>
<span id="cb42-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(other, (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TypeError: only supporting int/float power for now"</span></span>
<span id="cb42-3">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>other, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ), <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'**</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>other<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb42-4"></span>
<span id="cb42-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="cb42-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ( <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="cb42-7">    out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="cb42-8"></span>
<span id="cb42-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb42-10"></span>
<span id="cb42-11">Value.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__pow__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__pow__</span> </span></code></pre></div>
</details>
</div>
<p>For subtract, we add <code>__neg__</code> and <code>__sub__</code>:</p>
<div id="46cb1ab6" class="cell" data-execution_count="38">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__neg__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - self</span></span>
<span id="cb43-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span>
<span id="cb43-3"></span>
<span id="cb43-4">Value.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__neg__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__neg__</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self - other</span></span>
<span id="cb43-5"></span>
<span id="cb43-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__sub__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb43-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>other)</span>
<span id="cb43-8"></span>
<span id="cb43-9">Value.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__sub__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__sub__</span></span></code></pre></div>
</details>
</div>
<p>Now we are ready to try <code>tanh</code> in a different way:</p>
<div id="6164cb90" class="cell" data-execution_count="39">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1">x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1'</span>)</span>
<span id="cb44-2">x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2'</span>)</span>
<span id="cb44-3">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w1'</span>)</span>
<span id="cb44-4">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w2'</span>)</span>
<span id="cb44-5">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.88137358</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb44-6">x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1w1'</span></span>
<span id="cb44-7">x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2w2'</span></span>
<span id="cb44-8">x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1w1 + x2w2'</span></span>
<span id="cb44-9">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span></span>
<span id="cb44-10"></span>
<span id="cb44-11">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n).exp()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span></span>
<span id="cb44-12">o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb44-13">o.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span></span>
<span id="cb44-14">o.backward()</span></code></pre></div>
</details>
</div>
<div class="page-columns page-full">
<div id="548cf0cd" class="cell page-columns page-full" data-execution_count="40">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1">draw_dot(o)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="37">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-41-output-1.svg" class="img-fluid figure-img column-screen"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="pytorch-comparison" class="level1">
<h1>PyTorch comparison</h1>
<section id="doing-the-same-thing-but-in-pytorch-comparison" class="level2">
<h2 class="anchored" data-anchor-id="doing-the-same-thing-but-in-pytorch-comparison">doing the same thing but in PyTorch: comparison</h2>
<div id="188c2133" class="cell" data-execution_count="41">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb46-2"></span>
<span id="cb46-3">x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>]).double()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb46-4">x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>]).double()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x2.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb46-5">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>]).double()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> w1.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb46-6">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]).double()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> w2.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb46-7">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.8813735870195432</span>]).double()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> b.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb46-8"></span>
<span id="cb46-9">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb46-10">o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(n)</span>
<span id="cb46-11"></span>
<span id="cb46-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(o.data.item())</span>
<span id="cb46-13">o.backward()</span>
<span id="cb46-14"></span>
<span id="cb46-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'------------------'</span>)</span>
<span id="cb46-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1'</span>, x1.grad.item())</span>
<span id="cb46-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w1'</span>, w1.grad.item())</span>
<span id="cb46-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2'</span>, x2.grad.item())</span>
<span id="cb46-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w2'</span>, w2.grad.item())</span>
<span id="cb46-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'------------------'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>0.7071066904050358
------------------
x1 -1.5000003851533106
w1 1.0000002567688737
x2 0.5000001283844369
w2 0.0
------------------</code></pre>
</div>
</div>
</section>
</section>
<section id="building-the-library" class="level1 page-columns page-full">
<h1>Building the library</h1>
<section id="building-out-a-neural-net-library-multi-layer-perceptron-in-micrograd" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="building-out-a-neural-net-library-multi-layer-perceptron-in-micrograd">building out a neural net library (multi-layer perceptron) in micrograd</h2>
<p>We are going to build out a two-layer perceptron.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cs231n.github.io/assets/nn1/neural_net2.jpeg" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>A 3-layer neural network with three inputs, two hidden layers of 4 neurons each and one output layer. Notice that in both cases there are connections (synapses) between neurons across layers, but not within a layer, photo credit to <a href="https://cs231n.github.io/neural-networks-1/">cs231n</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<div id="e0a044d7" class="cell" data-execution_count="42">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="annotated-cell-31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Neuron:</span>
<span id="annotated-cell-31-2"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-31" data-target-annotation="1">1</button><span id="annotated-cell-31-3" class="code-annotation-target">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nin):</span>
<span id="annotated-cell-31-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Value(np.random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nin)]</span>
<span id="annotated-cell-31-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(np.random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="annotated-cell-31-6">    </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-31" data-target-annotation="2">2</button><span id="annotated-cell-31-7" class="code-annotation-target">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="annotated-cell-31-8">        activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((wi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>xi <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> wi, xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, x)), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b)</span>
<span id="annotated-cell-31-9">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation.tanh()</span>
<span id="annotated-cell-31-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="annotated-cell-31-11"></span>
<span id="annotated-cell-31-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-31-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list plus list gives you a list</span></span>
<span id="annotated-cell-31-14"></span>
<span id="annotated-cell-31-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Layer:</span>
<span id="annotated-cell-31-16"></span>
<span id="annotated-cell-31-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nin, nout):</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-31" data-target-annotation="3">3</button><span id="annotated-cell-31-18" class="code-annotation-target">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.neurons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Neuron(nin) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nout)]</span>
<span id="annotated-cell-31-19"></span>
<span id="annotated-cell-31-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="annotated-cell-31-21">        outs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [n(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.neurons]</span>
<span id="annotated-cell-31-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> outs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(outs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> outs</span>
<span id="annotated-cell-31-23"></span>
<span id="annotated-cell-31-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-31-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [p <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> neuron <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.neurons <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> neuron.parameters()] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list comprehension</span></span>
<span id="annotated-cell-31-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># params = []</span></span>
<span id="annotated-cell-31-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for neuron in self.neurons:</span></span>
<span id="annotated-cell-31-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     ps = neuron.parameters()</span></span>
<span id="annotated-cell-31-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     params.extend(ps)</span></span>
<span id="annotated-cell-31-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return params</span></span>
<span id="annotated-cell-31-31"></span>
<span id="annotated-cell-31-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MLP:</span>
<span id="annotated-cell-31-33"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-31" data-target-annotation="4">4</button><span id="annotated-cell-31-34" class="code-annotation-target">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nin, nouts):</span>
<span id="annotated-cell-31-35">        sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [nin] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> nouts</span>
<span id="annotated-cell-31-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Layer(sz[i], sz[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nouts))]</span>
<span id="annotated-cell-31-37"></span>
<span id="annotated-cell-31-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="annotated-cell-31-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers:</span>
<span id="annotated-cell-31-40">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer(x)</span>
<span id="annotated-cell-31-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x</span>
<span id="annotated-cell-31-42"></span>
<span id="annotated-cell-31-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-31-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [p <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layer.parameters()] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for neuron in layer.neurons for neuron.parameters()]</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</details>
<div class="cell-annotation">
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-31" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-31" data-code-lines="3" data-code-annotation="1">Number of <code>input</code> for the Neuron. <code>w</code> is randomly generated for each input, same for <code>b</code> which is the bias that controll “the happiness”.</span>
</dd>
<dt data-target-cell="annotated-cell-31" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-31" data-code-lines="7" data-code-annotation="2">Object as a function: define the forward pass of the Neuron <img src="https://latex.codecogs.com/png.latex?%5Csum%5Climits_%7Bi=1%7D%5E%7Bnin%7D%20w_ix_i+b">, then squash the output using <code>tanh</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-31" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-31" data-code-lines="18" data-code-annotation="3">A Layer is a list of Neurons, <code>nout</code> specifies how many Neurons in the Layer. Each neuron has <code>nin</code> inputs ~ nin-D. We just initialize completely independent neurons with this given dimensionality.</span>
</dd>
<dt data-target-cell="annotated-cell-31" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-31" data-code-lines="34" data-code-annotation="4">A MLP is a sequence of Layers, picture above depicts a 3-layers MLP containing 1 input layer and 3 output layers, we say the size is 4. We sequentially create connection from the input layer to the 1st output layer, 1st output layer to 2nd output layer,…</span>
</dd>
</dl>
</div>
</div>
<div id="ff8ca4dd" class="cell" data-execution_count="43">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb48-1">nin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb48-2">nouts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]</span>
<span id="cb48-3">[nin] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> nouts</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>[3, 2.0, 3.0, -1.0]</code></pre>
</div>
</div>
<div id="04dc941c" class="cell" data-execution_count="44">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>]</span>
<span id="cb50-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Neuron(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb50-3">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Layer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb50-4">n(x)</span>
<span id="cb50-5">l(x)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>[Value(data=0.6482171154461839),
 Value(data=-0.9819100896618514),
 Value(data=0.42012274248341236)]</code></pre>
</div>
</div>
<div id="8cf5d3a3" class="cell" data-execution_count="45">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]</span>
<span id="cb52-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MLP(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a MLP with 3-D input, 3 output layers contains 4, 4, 1 neurons in each layer respectively</span></span>
<span id="cb52-3">m(x)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>Value(data=-0.4705965544324498)</code></pre>
</div>
</div>
<div class="page-columns page-full">
<div id="237a863d" class="cell page-columns page-full" data-execution_count="46">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1">draw_dot(m(x))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="43">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-47-output-1.svg" class="img-fluid figure-img column-screen"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="creating-a-tiny-dataset-writing-the-loss-function" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="creating-a-tiny-dataset-writing-the-loss-function">creating a tiny dataset, writing the loss function</h2>
<p>A simple data set, <code>m()</code> is the MLP we defined above.</p>
<div id="20ba7355" class="cell" data-execution_count="47">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb55-1">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb55-2">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb55-3">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>],</span>
<span id="cb55-4">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb55-5">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]</span>
<span id="cb55-6">]</span>
<span id="cb55-7">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># designed targets</span></span></code></pre></div>
</details>
</div>
<div class="page-columns page-full"><p>Writing the loss function. </p><div class="no-row-height column-margin column-container"><span class="margin-aside">I was unable to sum a list of Value, found the solution <a href="https://stackoverflow.com/questions/54153552/unsupported-operand-type-error-when-adding-objects-within-list-using-sum-functio">here</a>; Edit: I used Numpy random instead of random</span></div></div>
<div id="bad2b0d7" class="cell" data-execution_count="48">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [m(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xs]</span>
<span id="cb56-2">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([(yout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ygt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ygt, yout <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ys, ypred)]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb56-3"></span>
<span id="cb56-4">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>Value(data=3.7846173239470486)</code></pre>
</div>
</div>
<p>Backpropagation the <code>loss</code>, some magical here:</p>
<div id="88f8a81a" class="cell" data-execution_count="49">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb58-1">loss.backward()</span></code></pre></div>
</details>
</div>
<p>We can look into the gradient of weight of the first neuron of the first layer (input layer)</p>
<div id="6bfcc38c" class="cell" data-execution_count="50">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value of 1st neuron in 1st layer: '</span>,m.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].neurons[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].w[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].data)</span>
<span id="cb59-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grad of 1st neuron in 1st layer: '</span>,m.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].neurons[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].w[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grad)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>value of 1st neuron in 1st layer:  -0.6357735432605731
grad of 1st neuron in 1st layer:  -4.1814374695537895</code></pre>
</div>
</div>
<div class="page-columns page-full">
<div id="2c9861ac" class="cell page-columns page-full" data-execution_count="51">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb61-1">draw_dot(loss)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display page-columns page-full" data-execution_count="48">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/index_files/figure-html/cell-52-output-1.svg" class="img-fluid figure-img column-screen"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="collecting-all-of-the-parameters-of-the-neural-net" class="level2">
<h2 class="anchored" data-anchor-id="collecting-all-of-the-parameters-of-the-neural-net">collecting all of the parameters of the neural net</h2>
<p>We aim to produce the fitness <code>ypred</code>. <code>xs</code> is the data, the input of problem, we can not change it. <code>ys</code> is the ground true, can not changes as well. What we can change is the “paramters” of each neuron, which is weight <code>w</code> and bias <code>b</code>.</p>
<p>We add in to each class a <code>parameters()</code> function to collect those. Finally we can get all the paramters of the MLP:</p>
<div id="d4c227bc" class="cell" data-execution_count="52">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(m.parameters())</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>41</code></pre>
</div>
</div>
</section>
<section id="doing-gradient-descent-optimization-manually-training-the-network" class="level2">
<h2 class="anchored" data-anchor-id="doing-gradient-descent-optimization-manually-training-the-network">doing gradient descent optimization manually, training the network</h2>
<p>Now we will try to change the paramters to minimize the loss, which means our prediction will be more close to the ground true.</p>
<p><strong>Forward pass</strong>, calculate the loss:</p>
<div id="6a39b17e" class="cell" data-execution_count="53">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb64-1">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [m(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xs]</span>
<span id="cb64-2">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([(yout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ygt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ygt, yout <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ys, ypred)]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb64-3">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>Value(data=3.7846173239470486)</code></pre>
</div>
</div>
<p><strong>Backward pass</strong>, calculate the parameters:</p>
<div id="799752ef" class="cell" data-execution_count="54">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb66-1">loss.backward()</span></code></pre></div>
</details>
</div>
<p><strong>Update the parameters</strong>, change the parameters following opposite direction to reduce the loss:</p>
<div id="d46206a7" class="cell" data-execution_count="55">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> m.parameters():</span>
<span id="cb67-2">    p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we want the p.data go on opposite direction of the loss</span></span></code></pre></div>
</details>
</div>
<p><code>0.01</code> is the learning rate!</p>
<p><strong>New loss</strong></p>
<div id="5fb4eec1" class="cell" data-execution_count="56">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb68-1">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [m(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xs]</span>
<span id="cb68-2">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([(yout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ygt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ygt, yout <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ys, ypred)]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb68-3">loss</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>Value(data=0.885210729994525)</code></pre>
</div>
</div>
<p>Yeah the loss decreased. In short, the process is:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">%%{init: {'theme':'dark'}}%%
flowchart LR

P1(Updated parameters) -- Forward Pass --&gt; L(Loss)
L(Loss) -- Backward Pass --&gt; P2(Parameters to update) 
P2(Parameters to update)  -- Update Pamameters --&gt; P1(Updated parameters)
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p><strong>Automate the training loop</strong>:</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>For each process, there remained a subtle bug above that we didn’t flush the grads before backpropagation. Because we did not overwrite the gradients (remember the <code>+=</code>), they kept accumulated. The next action of backward and changing parameters using learning rate and grad (which produce a massive step size) become wrong! We must set the grad to zero before backward pass.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/guilty.png" class="img-fluid figure-img"></p>
<figcaption>Common guilties when training the NN</figcaption>
</figure>
</div>
</div>
</div>
<div id="e6a7c5f1" class="cell" data-execution_count="57">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb70-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb70-3">    ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [m(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xs]</span>
<span id="cb70-4">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([(yout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ygt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ygt, yout <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ys, ypred)]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb70-5"></span>
<span id="cb70-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb70-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> m.parameters():</span>
<span id="cb70-8">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb70-9">    loss.backward()</span>
<span id="cb70-10"></span>
<span id="cb70-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update params:</span></span>
<span id="cb70-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> m.parameters():</span>
<span id="cb70-13">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb70-14"></span>
<span id="cb70-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(k, loss.data)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>0 0.885210729994525
1 0.7272070306002337
2 0.6335880961402813
3 0.5694033268577418
4 0.5210728602755308
5 0.48234433619750416
6 0.4499798770914163
7 0.4221446577843293
8 0.3977190488833604
9 0.3759751713337349
10 0.3564130670665513
11 0.33867257920988014
12 0.32248348490480044
13 0.30763598643104695
14 0.29396252735650596
15 0.28132615850080067
16 0.2696128276033427
17 0.25872609733197516
18 0.2485834130081963
19 0.23911338866893608</code></pre>
</div>
</div>
<div id="69ae0b38" class="cell" data-execution_count="58">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb72-1">ypred</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>[Value(data=0.7723855044989809),
 Value(data=-0.7666895995000865),
 Value(data=-0.7316139699290238),
 Value(data=0.7533418844066474)]</code></pre>
</div>
</div>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<section id="summary-of-what-we-learned-how-to-go-towards-modern-neural-nets" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-what-we-learned-how-to-go-towards-modern-neural-nets">summary of what we learned, how to go towards modern neural nets</h2>
<ol type="1">
<li>What are Neural Nets: they are mathematical expressions, in case of MLP it takes: (1) data as the input, and (2) weights and biases as parameters to build out expression for the forward pass followed by the loss function.</li>
<li>The loss function is kind of measure for the accuracy of predictions. The low loss implies that predicted values are matching our targets and the networks are behaving well.</li>
<li>The process of Gradient Descent is for each step, we calculate the loss (output of the nets), backwarding it to get paramters, then updating data (which we can change - weights and biases) follow the opposite side of the loss (negative grad * learning rate). We’ll get a lower loss, and backwarding again and again. This process will find the local minimum of the loss.</li>
</ol>
</section>
<section id="walkthrough-of-the-full-code-of-micrograd-on-github" class="level2">
<h2 class="anchored" data-anchor-id="walkthrough-of-the-full-code-of-micrograd-on-github">walkthrough of the full code of micrograd on github</h2>
<p>Same with which we built today:</p>
<ul>
<li>engine: Value</li>
<li>nn: Neuron, Layer, MLP, and modulize the zero grad process to class Module</li>
<li>test: sanity check - compare the backward with <code>torch</code>, also for the forward pass</li>
<li>demo: a bit complicated example with <code>sklearn</code> dataset, using batch processing when the dataset come large, the loss is slightly different - SVM max-margin loss and using of auto L2 regularization</li>
<li>learning rate decay: is a scaled as a function of number of iterations, high at begin and low at the end</li>
</ul>
</section>
<section id="real-stuff-diving-into-pytorch-finding-their-backward-pass-for-tanh" class="level2">
<h2 class="anchored" data-anchor-id="real-stuff-diving-into-pytorch-finding-their-backward-pass-for-tanh">real stuff: diving into PyTorch, finding their backward pass for <code>tanh</code></h2>
<p>These libraries unfortunately grow in size and <strong>entropy</strong>, if you just search for <code>tanh</code> it’ll give you thousands of results.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">conclusion</h2>
<p>There will be follow up session yeah haha.</p>
</section>
<section id="outtakes" class="level2">
<h2 class="anchored" data-anchor-id="outtakes">outtakes :)</h2>
<p>Pytorch self-defined autograd.</p>
<p>🤙🚀🔥</p>


<!-- -->

</section>
</section>

 ]]></description>
  <category>til</category>
  <category>python</category>
  <category>andrej karpathy</category>
  <category>nn-z2h</category>
  <category>backpropagation</category>
  <category>neural networks</category>
  <guid>https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/</guid>
  <pubDate>Sat, 15 Jun 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-06-17-nn-z2h-p1/puppy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Bitcoin tour in Python</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-06-10-python-bitcoin/</link>
  <description><![CDATA[ 





<p>A from-scratch implementation of Bitcoin in Python under tuturial from Andrej Karpathy.</p>
<section id="motivation" class="level1 page-columns page-full">
<h1>Motivation</h1>
<p>Đây là bài thực hành implement Bitcoin sử dụng Python mà tôi học được trên trang blog của Andrej Karpathy, nhà Khoa học máy tính, cựu Director mảng AI của Open AI.</p>
<p><a href="https://karpathy.ai/">Andrej Karpathy</a> cho rằng blockchain đang giúp nới rộng trạng thái của ngành công nghiệp phát triển phần mềm, từ open source thành open source plus. Nghĩa là chúng ta đang không chỉ chia sẻ, công khai mã nguồn, mà còn cả tài nguyên (run time, computing machine). Và với tinh thần:</p>
<blockquote class="blockquote page-columns page-full">
<div class="page-columns page-full"><p>“what I cannot create I do not understand” </p><div class="no-row-height column-margin column-container"><span class="margin-aside">Edit: câu này là của <a href="https://www.quora.com/What-did-Richard-Feynman-mean-when-he-said-What-I-cannot-create-I-do-not-understand">Richard Feynman</a></span></div></div>
</blockquote>
<p>, cách tốt nhất để học nó là thực hiện nó. Tôi cũng cho là thế!</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-10-python-bitcoin/karpathy-podcast.jpg" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Andrej Karpathy trong podcast với Lex Fridman</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Phạm vi bài thực hành này là <strong>tạo, ký số, phát hành các giao dịch Bitcoin thuần Python, từ con số 0, không thư viện phụ thuộc</strong>.</p>
<p>Đây là môi trường Python của mình:</p>
<div id="bf86a4c0" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sys.version)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>3.11.4 (tags/v3.11.4:d2340ef, Jun  7 2023, 05:45:37) [MSC v.1934 64 bit (AMD64)]</code></pre>
</div>
</div>
</section>
<section id="step-1-generating-a-crypto-identity" class="level1 page-columns page-full">
<h1>Step 1: generating a crypto identity</h1>
<p>Một trong những đặc tính quan trọng nhất của Bitcoin nói riêng và Blockchain (chuỗi khối) nói chung là tính bảo mật. Blockchain sử dụng các phương thức bảo mật như: <strong>ECC</strong>, <strong>ECDH</strong> hoặc <strong>ECDSA</strong>, trong đó <code>EC</code> chính là viết tắt của Elliptic Curve. Không chỉ trong lĩnh vực blockchain, <code>EC</code> còn được sử dụng rộng rãi trong bảo mật <a href="https://datatracker.ietf.org/doc/html/rfc4492"><code>TLS</code></a>, <a href="https://datatracker.ietf.org/doc/html/rfc6637"><code>PGP</code></a>, <a href="https://datatracker.ietf.org/doc/html/rfc5656"><code>SSH</code></a>.</p>
<p>Khác với các bảo mật <strong>đối xứng</strong> thông thường, ta có một key duy nhất để mã hóa và giải mã ~ có key là có tất cả, không có key là không có gì, các thuật toán mã hóa EC là <strong>Bất đối xứng</strong>. Trong đó, ta có một cặp <code>private key</code>/<code>public key</code> (khóa bí mật và khóa công khai). Khóa bí mật chỉ là một con số ngẫu nhiên, cần được chủ nhân của nó <strong>giữ bí mật hoàn toàn</strong>, ví nó là thứ duy nhất tạo ra được <strong>chữ kí</strong> cho họ. Khác với khóa bí mật, khóa công khai được công khai cho tất cả mọi người. <code>public key</code> được tạo ra bởi <strong>phép nhân</strong> với <code>private key</code> trong <strong>đường cong Elliptic</strong>. Phép nhân đường cong Elliptic là một phép toán <strong>trap door</strong> (cửa lật), có nghĩa là nó dễ tính theo <strong>một chiều</strong> (phép nhân) và không thể tính được theo chiều ngược lại (phép chia) ~ đó là lý do ta gọi nó là mã hóa bất đối xứng.</p>
<div class="page-columns page-full"><p>Bitcoin sử dụng Hệ mật trên đường cong Elliptic (ECC) để bảo mật giao dịch .</p><div class="no-row-height column-margin column-container"><span class="margin-aside">Xem thêm: 1. <a href="https://viblo.asia/p/gioi-thieu-ve-he-mat-tren-duong-cong-elliptic-ecc-XL6lA2PR5ek">Viblo</a>, 2. <a href="https://en.wikipedia.org/wiki/Elliptic-curve_cryptography">Wiki</a>, 3. <a href="https://mathworld.wolfram.com/EllipticCurve.html">Wolfram</a>, quá khó cho tôi tại thời điểm bây giờ - nên tôi sẽ tạm bỏ qua, dù gì cũng cần phác thảo một khung tranh “mờ mờ” trước, việc vẽ chi tiết để sau.</span></div></div>
<p>Đường cong <img src="https://latex.codecogs.com/png.latex?E:%20y%5E2%20=%20x%5E3%20+%20ax%20+%20b%20%5C:(mod%5C:p)"> trên trường hữu hạn <img src="https://latex.codecogs.com/png.latex?Z_p"> (cũng có người gọi là <img src="https://latex.codecogs.com/png.latex?Z/p">,<img src="https://latex.codecogs.com/png.latex?GF_(p)">,hoặc <img src="https://latex.codecogs.com/png.latex?F_p">, với p là số nguyên tố) được xác định bởi 6 tham số <img src="https://latex.codecogs.com/png.latex?T%20=%20(p,a,b,G,n,h)"> sau:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?p%20=%20FFFFFFFF%20FFFFFFFF%20FFFFFFFF%20FFFFFFFF%20FFFFFFFF%20FFFFFFFF%20FFFFFFFE%20FFFFFC2F"></p>
<p><img src="https://latex.codecogs.com/png.latex?=%202%5E%7B256%7D%20-%202%5E%7B32%7D%20-%202%5E9%20-%202%5E8%20-%202%5E7%20-%202%5E6%20-%202%5E4%20-%201"></p>
<p><img src="https://latex.codecogs.com/png.latex?=%202%5E%7B256%7D%20-%202%5E%7B32%7D%20-%20977"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?a%20=%2000000000%2000000000%2000000000%2000000000%2000000000%2000000000%2000000000%2000000000"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?b%20=%2000000000%2000000000%2000000000%2000000000%2000000000%2000000000%2000000000%2000000007"></p></li>
</ul>
<p>Vì được xác định trên <img src="https://latex.codecogs.com/png.latex?Z_p">, nên trên thực tế nó là một đường không liên lục, và trông sẽ như các điểm ngẫu nhiên trên một biểu đồ phân tán. Để dễ tưởng tượng và min họa, khi xác định trên trường số thực, EC sẽ trông như thế này:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-10-python-bitcoin/what_does_ec_look_like.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption><a href="https://bitcoin.stackexchange.com/questions/21907/what-does-the-curve-used-in-bitcoin-secp256k1-look-like">What does the curve used in Bitcoin, secp256k1, look like?</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Đây là tài liệu mà Andrej gợi ý cho chúng ta đọc về ECC: <a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/">blog post</a> của Andrea Corbellini. Bài viết đầu tiên của ông giới thiệu EC trên <strong>trường số thực và luật nhóm</strong>. Theo đó, với EC được xác định bằng <img src="https://latex.codecogs.com/png.latex?%5C%7B(x,y)%5Cin%20R%5E2%20%7C%20y%5E2%20=%20x%5E3%20+%20ax%20+%20b,%204a%5E3%20+%2027b%5E2%20%5Cneq%200%5C%7D%20%5Ccup%20%5C%7B0%5C%7D">, trong đó (<img src="https://latex.codecogs.com/png.latex?4a%5E3%20+%2027b%5E2%20%5Cneq%200"> là để tránh điểm kỳ dị singular), cùng với các tiên đề về phép toán cộng (<img src="https://latex.codecogs.com/png.latex?+">) được trang bị gồm:</p>
<ol type="1">
<li>Tính đóng (closure): nếu <img src="https://latex.codecogs.com/png.latex?a"> và <img src="https://latex.codecogs.com/png.latex?b"> thuộc <img src="https://latex.codecogs.com/png.latex?G">, thì <img src="https://latex.codecogs.com/png.latex?a+b"> cũng thuộc <img src="https://latex.codecogs.com/png.latex?G">;</li>
<li>Tính kết hợp (associativity): <img src="https://latex.codecogs.com/png.latex?(a+b)+c%20=%20a%20+%20(b+c)">;</li>
<li>Sự tồn tại của phần tử đơn vị (identity element 0): <img src="https://latex.codecogs.com/png.latex?a+0=0+a=a">;</li>
<li>Tính khả nghịch (commutativity): với mọi <img src="https://latex.codecogs.com/png.latex?a">, tồn tại <img src="https://latex.codecogs.com/png.latex?b"> sao cho <img src="https://latex.codecogs.com/png.latex?a+b=0">;</li>
</ol>
<p>Nếu chúng ta có thêm tính chất thứ 5 sau:</p>
<ol start="5" type="1">
<li>Tính giao hoán (commutativity): <img src="https://latex.codecogs.com/png.latex?a+b%20=%20b+a">.</li>
</ol>
<p>Thì nhóm đó được xem là một nhóm Abel (Ví dụ: tập hợp các số nguyên <img src="https://latex.codecogs.com/png.latex?Z"> là một nhóm - Abel).</p>
<p>Tập hợp các điểm trên EC là một nhóm Abel, do đó nó cũng có tính chất trên: có sự tồn tại của <strong>phần tử đơn vị</strong> 0 (cũng là vô hạn); phần tử <strong>nghịch đảo</strong> của <img src="https://latex.codecogs.com/png.latex?P">, ký hiệu <img src="https://latex.codecogs.com/png.latex?-P">, là điểm đối xứng của P qua trục hoành; <strong>phép cộng</strong> được định nghĩa như sau: với ba điểm <img src="https://latex.codecogs.com/png.latex?P">, <img src="https://latex.codecogs.com/png.latex?Q">, <img src="https://latex.codecogs.com/png.latex?R"> khác 0 và thẳng hàng trên EC, thì <img src="https://latex.codecogs.com/png.latex?P%20+%20Q%20+%20R%20=%200">, bất kể thứ tự của các điểm - ta thấy nó thỏa mãn các tính chất kết hợp và giao hoán của một nhóm Abel!.</p>
<p><strong>Phép cộng hình học và đại số</strong> và <strong>phép nhân vô hướng</strong> sẽ được trình bày ở phía sau - trực tiếp trong không gian hữu hạn. Hiện tại ình chỉ cố gắng <strong>hình dung</strong> các tính chất của EC thông qua việc xem xét nó trên <strong>trường số thực</strong>.</p>
<p>Block code dưới đây định nghĩa đường cong EC. Bitcoin (hay Ethereum) sử dụng một đường cong theo tiêu chuẩn <a href="https://en.bitcoin.it/wiki/Secp256k1">secp256k1</a> do <em>Viện Tiêu Chuẩn và Kỹ Thuật Quốc Gia Mỹ (NIST)</em> đặt ra. Với <img src="https://latex.codecogs.com/png.latex?a=0">, <img src="https://latex.codecogs.com/png.latex?b=7">, định nghĩa đường cong trên trường <img src="https://latex.codecogs.com/png.latex?Z_p"> giờ sẽ là:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5C%7B(x,y)%5Cin%20(Z_p)%5E2%20%7C%5C:%20y%5E2%20%5Cequiv%20x%5E3%20+%207%20%5C:%20(mod%20%5C:%20p)%5C%7D%20%5Ccup%20%5C%7B0%5C%7D"></p>
<div id="31b730f8" class="cell" data-execution_count="2">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from __future__ import annotations # PEP 563: Postponed evaluation of annotations</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># since my python version is 3.11.4 so no need to use future annotation feature </span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># which redefined since python 3.5</span></span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dataclasses <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dataclass <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace constructor __init__, </span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># help us to easily declare class attributes.</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb3-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Curve:</span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Elliptic Curve over the field of integers modulo a prime.</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Points on the curve satisfy y^2 = x^3 + a*x + b (mod p).</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z_p là một TẬP HỢP, khi p là số nguyên tố thì có thể coi nó là một TRƯỜNG </span></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    https://forum.mathscope.org/archive/index.php/t-11835.html</span></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-16">    p: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ta nói secp256k1 có đặc trưng p, được định trong trường Z_p</span></span>
<span id="cb3-17">    a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb3-18">    b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># secp256k1 uses a = 0, b = 7, so we're dealing with the curve y^2 = x^3 + 7 (mod p)</span></span>
<span id="cb3-21">bitcoin_curve <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Curve(</span>
<span id="cb3-22">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F</span>,</span>
<span id="cb3-23">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x0000000000000000000000000000000000000000000000000000000000000000</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a = 0</span></span>
<span id="cb3-24">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x0000000000000000000000000000000000000000000000000000000000000007</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># b = 7</span></span>
<span id="cb3-25">)</span></code></pre></div>
</details>
</div>
<p>Chúng ta chưa thấy phương trình của EC được thể hiện trong class <code>Curve</code>, chúng ta implement nó bằng cách tạo một class <code>Point</code>. Sau khi xác định curve, ta xác định generator - điểm sinh G (là một điểm dùng để khởi tạo quá trình “walk” trên đường cong)</p>
<div id="e9c90434" class="cell" data-execution_count="3">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Point:</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Số nguyên tọa độ (x,y) trên đường cong """</span></span>
<span id="cb4-4">    curve: Curve</span>
<span id="cb4-5">    x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb4-6">    y: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb4-7"></span>
<span id="cb4-8">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Point(</span>
<span id="cb4-9">    bitcoin_curve,</span>
<span id="cb4-10">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798</span>,</span>
<span id="cb4-11">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8</span>,    </span>
<span id="cb4-12">)</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># xác nhận xem G có nằm trên đường cong hay không, tức là y^2 = x^3 + 7 (mod p)</span></span>
<span id="cb4-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"G is on the curve:"</span>, (G.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> G.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> bitcoin_curve.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># các giá trị bất kỳ khác HẦU NHƯ sẽ không nằm trên đường cong:</span></span>
<span id="cb4-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb4-19">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1337</span>)</span>
<span id="cb4-20">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randrange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, bitcoin_curve.p) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ngẫu nhiên giữa 0 và p</span></span>
<span id="cb4-21">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randrange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, bitcoin_curve.p)</span>
<span id="cb4-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"G is on the curve:"</span>, (y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> bitcoin_curve.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>G is on the curve: True
G is on the curve: False</code></pre>
</div>
</div>
<p>Some notes to be updated here</p>
<div id="af99d5c1" class="cell" data-execution_count="4">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Generator:</span>
<span id="cb6-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A Generator over a curve: an initial point and pre-declared order.</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-6">    G: Point <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># starting point on the curve</span></span>
<span id="cb6-7">    n: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the order 0*G = n*G = INF (????)</span></span>
<span id="cb6-8"></span>
<span id="cb6-9">bitcoin_gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Generator(</span>
<span id="cb6-10">    G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> G,</span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the order of G is known and can be mathematically derived</span></span>
<span id="cb6-12">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141</span>,</span>
<span id="cb6-13">)</span></code></pre></div>
</details>
</div>
<p>Như vậy đã định nghĩa xong Đường Cong, Điểm sinh (<code>G</code>), và Trình tạo. Giờ ta sẽ tạo <code>private key</code> (hay <code>secret key</code>) - một số nguyên ngẫu nhiên thỏa <code>1&lt;= key &lt; n</code> (n đại diện cho order).</p>
<div id="b9d6501d" class="cell" data-execution_count="5">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">secret_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>.from_bytes(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'Hi, this is Tuan'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is how I will do it for reproducibility</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> secret_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> bitcoin_gen.n</span>
<span id="cb7-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(secret_key)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>96250501864010348276735010787267273070</code></pre>
</div>
</div>
<p>Giờ chúng ta sẽ tạo <code>public key</code>, chỉnh là cộng <code>G</code> <code>private key</code> lần.</p>
<div id="29cce254" class="cell" data-execution_count="6">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">INF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Point(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># special point at "infinity", kind of like a zero</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extended_euclidean_algorithm(a, b):</span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns (gcd, x, y) s.t. a * x + b * y == gcd</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function implements the extended Euclidean</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    algorithm and runs in O(log b) in the worst case,</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    taken from Wikipedia.</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb9-10">    old_r, r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a, b</span>
<span id="cb9-11">    old_s, s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-12">    old_t, t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb9-14">        quotient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> old_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> r</span>
<span id="cb9-15">        old_r, r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r, old_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> quotient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r</span>
<span id="cb9-16">        old_s, s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s, old_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> quotient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s</span>
<span id="cb9-17">        old_t, t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t, old_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> quotient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t</span>
<span id="cb9-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> old_r, old_s, old_t</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> inv(n, p):</span>
<span id="cb9-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" returns modular multiplicate inverse m s.t. (n * m) % p == 1 """</span></span>
<span id="cb9-22">    gcd, x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extended_euclidean_algorithm(n, p) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pylint: disable=unused-variable</span></span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> p</span>
<span id="cb9-24"></span>
<span id="cb9-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> elliptic_curve_addition(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other: Point) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Point:</span>
<span id="cb9-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># handle special case of P + 0 = 0 + P = 0</span></span>
<span id="cb9-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> INF:</span>
<span id="cb9-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> other</span>
<span id="cb9-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> INF:</span>
<span id="cb9-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span>
<span id="cb9-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># handle special case of P + (-P) = 0</span></span>
<span id="cb9-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other.x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> other.y:</span>
<span id="cb9-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> INF</span>
<span id="cb9-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute the "slope"</span></span>
<span id="cb9-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other.x: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (self.y = other.y is guaranteed too per above check)</span></span>
<span id="cb9-36">        m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.curve.a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inv(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.curve.p)</span>
<span id="cb9-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb9-38">        m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other.y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inv(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.curve.p)</span>
<span id="cb9-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute the new point</span></span>
<span id="cb9-40">    rx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other.x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.curve.p</span>
<span id="cb9-41">    ry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(rx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.curve.p</span>
<span id="cb9-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Point(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.curve, rx, ry)</span>
<span id="cb9-43"></span>
<span id="cb9-44">Point.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__add__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> elliptic_curve_addition <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># monkey patch addition into the Point class</span></span></code></pre></div>
</details>
</div>
<p>Giờ ta sẽ thử gen một số bộ <code>private key</code>, <code>public key</code>:</p>
<div id="3aef3e9d" class="cell" data-execution_count="7">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if our secret key was the integer 1, then our public key would just be G:</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use sk for secret key = private key</span></span>
<span id="cb10-3">sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-4">pk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> G</span>
<span id="cb10-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" secret key: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> public key: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(pk.x, pk.y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Verify the public key is on the curve: "</span>, (pk.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pk.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> bitcoin_curve.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if it was 2, the public key is G + G:</span></span>
<span id="cb10-8">sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-9">pk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> G</span>
<span id="cb10-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" secret key: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> public key: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(pk.x, pk.y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Verify the public key is on the curve: "</span>, (pk.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pk.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> bitcoin_curve.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># etc.:</span></span>
<span id="cb10-13">sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb10-14">pk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> G</span>
<span id="cb10-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" secret key: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> public key: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(pk.x, pk.y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Verify the public key is on the curve: "</span>, (pk.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pk.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> bitcoin_curve.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code> secret key: 1
 public key: (55066263022277343669578718895168534326250603453777594175500187360389116729240, 32670510020758816978083085130507043184471273380659243275938904335757337482424)
Verify the public key is on the curve:  True
 secret key: 2
 public key: (89565891926547004231252920425935692360644145829622209833684329913297188986597, 12158399299693830322967808612713398636155367887041628176798871954788371653930)
Verify the public key is on the curve:  True
 secret key: 3
 public key: (112711660439710606056748659173929673102114977341539408544630613555209775888121, 25583027980570883691656905877401976406448868254816295069919888960541586679410)
Verify the public key is on the curve:  True</code></pre>
</div>
</div>
<p>Chúng ta cần tăng tốc việc cộng <code>G</code> với chính nó với số lần cực kì lớn, do đó Andrej sử dụng 1 thuật toán <code>double_and_add</code> như sau:</p>
<div id="7ea37b33" class="cell" data-execution_count="8">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> double_and_add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, k: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Point:</span>
<span id="cb12-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(k, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-3">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INF</span>
<span id="cb12-4">    append <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span>
<span id="cb12-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> k:</span>
<span id="cb12-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb12-7">            result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> append</span>
<span id="cb12-8">        append <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> append</span>
<span id="cb12-9">        k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># monkey patch double and add into the Point class for convenience</span></span>
<span id="cb12-13">Point.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__rmul__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> double_and_add</span>
<span id="cb12-14"></span>
<span id="cb12-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "verify" correctness</span></span>
<span id="cb12-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>G)</span>
<span id="cb12-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>G)</span>
<span id="cb12-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>G)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>True
True
True</code></pre>
</div>
</div>
<p>Giờ test với <code>private_key</code> mà chúng ta tạo lúc đầu:</p>
<div id="eed4d025" class="cell" data-execution_count="9">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># efficiently calculate our actual public key!</span></span>
<span id="cb14-2">public_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> secret_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> G</span>
<span id="cb14-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"x: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>public_key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">y: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>public_key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Verify the public key is on the curve: "</span>, (public_key.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> public_key.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> bitcoin_curve.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>x: 95402322600731393781298762734940467224395293762704745012558525900395478371250
y: 53299222514341331201918874000650944949613849271347665849281678080211837503484
Verify the public key is on the curve:  True</code></pre>
</div>
</div>
<p><strong>🚀Đã được modulized ở</strong> <a href=""><code>curves.py</code></a></p>
<p>Với cặp private/public key ta đã implement được khả năng định danh cho Bitcoin. Giờ ta cần liên kết nó với địa chỉ ví. Trước hết ta cần triển khai một số hàm hash.</p>
<p>Có thể sử dụng <code>hashlib</code> của Python tuy nhiên Andrej không muốn sử dụng thư viện phụ thuộc. Andrej đã viết lại hai hàm hash mà Bitcoin sử dụng là <code>SHA-256</code> và <code>RIPEMD-160</code>, lần lượt dưới đây, mình note giải thích của Andrej ở phần code comment.</p>
<p>Có lẽ sẽ cần một dịp khác để hiểu hai hàm băm này, nó nằm ngoài khả năng của mình.</p>
<div id="2ccabec9" class="cell" data-execution_count="10">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> gen_sha256_with_variable_scope_protector_to_not_pollute_global_namespace():</span>
<span id="cb16-2"></span>
<span id="cb16-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    SHA256 implementation.</span></span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Follows the FIPS PUB 180-4 description for calculating SHA-256 hash function</span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf</span></span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Noone in their right mind should use this for any serious reason. This was written</span></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    purely for educational purposes.</span></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb16-12"></span>
<span id="cb16-13">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb16-14">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> count, islice</span>
<span id="cb16-15"></span>
<span id="cb16-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------------------------------------------------------------------</span></span>
<span id="cb16-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SHA-256 Functions, defined in Section 4</span></span>
<span id="cb16-18"></span>
<span id="cb16-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rotr(x, n, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>):</span>
<span id="cb16-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-21"></span>
<span id="cb16-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> shr(x, n):</span>
<span id="cb16-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> n</span>
<span id="cb16-24"></span>
<span id="cb16-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sig0(x):</span>
<span id="cb16-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> shr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb16-27"></span>
<span id="cb16-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sig1(x):</span>
<span id="cb16-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> shr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb16-30"></span>
<span id="cb16-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> capsig0(x):</span>
<span id="cb16-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span>
<span id="cb16-33"></span>
<span id="cb16-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> capsig1(x):</span>
<span id="cb16-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> rotr(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb16-36"></span>
<span id="cb16-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ch(x, y, z):</span>
<span id="cb16-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> z)</span>
<span id="cb16-39"></span>
<span id="cb16-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> maj(x, y, z):</span>
<span id="cb16-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> z) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> z)</span>
<span id="cb16-42"></span>
<span id="cb16-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> b2i(b):</span>
<span id="cb16-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>.from_bytes(b, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>)</span>
<span id="cb16-45"></span>
<span id="cb16-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> i2b(i):</span>
<span id="cb16-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> i.to_bytes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>)</span>
<span id="cb16-48"></span>
<span id="cb16-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------------------------------------------------------------------</span></span>
<span id="cb16-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SHA-256 Constants</span></span>
<span id="cb16-51"></span>
<span id="cb16-52">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_prime(n):</span>
<span id="cb16-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(f <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(math.sqrt(n))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb16-54"></span>
<span id="cb16-55">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> first_n_primes(n):</span>
<span id="cb16-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> islice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(is_prime, count(start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)), n)</span>
<span id="cb16-57"></span>
<span id="cb16-58">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> frac_bin(f, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>):</span>
<span id="cb16-59">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" return the first n bits of fractional part of float f """</span></span>
<span id="cb16-60">        f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> math.floor(f) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get only the fractional part</span></span>
<span id="cb16-61">        f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>n <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shift left</span></span>
<span id="cb16-62">        f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(f) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># truncate the rest of the fractional content</span></span>
<span id="cb16-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> f</span>
<span id="cb16-64"></span>
<span id="cb16-65">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> genK():</span>
<span id="cb16-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Follows Section 4.2.2 to generate K</span></span>
<span id="cb16-68"></span>
<span id="cb16-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The first 32 bits of the fractional parts of the cube roots of the first</span></span>
<span id="cb16-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        64 prime numbers:</span></span>
<span id="cb16-71"></span>
<span id="cb16-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        428a2f98 71374491 b5c0fbcf e9b5dba5 3956c25b 59f111f1 923f82a4 ab1c5ed5</span></span>
<span id="cb16-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        d807aa98 12835b01 243185be 550c7dc3 72be5d74 80deb1fe 9bdc06a7 c19bf174</span></span>
<span id="cb16-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        e49b69c1 efbe4786 0fc19dc6 240ca1cc 2de92c6f 4a7484aa 5cb0a9dc 76f988da</span></span>
<span id="cb16-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        983e5152 a831c66d b00327c8 bf597fc7 c6e00bf3 d5a79147 06ca6351 14292967</span></span>
<span id="cb16-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        27b70a85 2e1b2138 4d2c6dfc 53380d13 650a7354 766a0abb 81c2c92e 92722c85</span></span>
<span id="cb16-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a2bfe8a1 a81a664b c24b8b70 c76c51a3 d192e819 d6990624 f40e3585 106aa070</span></span>
<span id="cb16-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        19a4c116 1e376c08 2748774c 34b0bcb5 391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3</span></span>
<span id="cb16-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        748f82ee 78a5636f 84c87814 8cc70208 90befffa a4506ceb bef9a3f7 c67178f2</span></span>
<span id="cb16-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb16-81">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [frac_bin(p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> first_n_primes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)]</span>
<span id="cb16-82"></span>
<span id="cb16-83">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> genH():</span>
<span id="cb16-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Follows Section 5.3.3 to generate the initial hash value H^0</span></span>
<span id="cb16-86"></span>
<span id="cb16-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The first 32 bits of the fractional parts of the square roots of</span></span>
<span id="cb16-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the first 8 prime numbers.</span></span>
<span id="cb16-89"></span>
<span id="cb16-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        6a09e667 bb67ae85 3c6ef372 a54ff53a 9b05688c 510e527f 1f83d9ab 5be0cd19</span></span>
<span id="cb16-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb16-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [frac_bin(p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> first_n_primes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)]</span>
<span id="cb16-93"></span>
<span id="cb16-94">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------------------------------------------------------------------</span></span>
<span id="cb16-95"></span>
<span id="cb16-96">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pad(b):</span>
<span id="cb16-97">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Follows Section 5.1: Padding the message """</span></span>
<span id="cb16-98">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytearray</span>(b) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to a mutable equivalent</span></span>
<span id="cb16-99">        l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note: len returns number of bytes not bits</span></span>
<span id="cb16-100"></span>
<span id="cb16-101">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># append but "1" to the end of the message</span></span>
<span id="cb16-102">        b.append(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0b10000000</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># appending 10000000 in binary (=128 in decimal)</span></span>
<span id="cb16-103"></span>
<span id="cb16-104">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># follow by k zero bits, where k is the smallest non-negative solution to</span></span>
<span id="cb16-105">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># l + 1 + k = 448 mod 512</span></span>
<span id="cb16-106">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i.e. pad with zeros until we reach 448 (mod 512)</span></span>
<span id="cb16-107">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>:</span>
<span id="cb16-108">            b.append(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x00</span>)</span>
<span id="cb16-109"></span>
<span id="cb16-110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the last 64-bit block is the length l of the original message</span></span>
<span id="cb16-111">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expressed in binary (big endian)</span></span>
<span id="cb16-112">        b.extend(l.to_bytes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>))</span>
<span id="cb16-113"></span>
<span id="cb16-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> b</span>
<span id="cb16-115"></span>
<span id="cb16-116">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sha256(b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>:</span>
<span id="cb16-117"></span>
<span id="cb16-118">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Section 4.2</span></span>
<span id="cb16-119">        K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genK()</span>
<span id="cb16-120"></span>
<span id="cb16-121">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Section 5: Preprocessing</span></span>
<span id="cb16-122">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Section 5.1: Pad the message</span></span>
<span id="cb16-123">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad(b)</span>
<span id="cb16-124">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Section 5.2: Separate the message into blocks of 512 bits (64 bytes)</span></span>
<span id="cb16-125">        blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [b[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)]</span>
<span id="cb16-126"></span>
<span id="cb16-127">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for each message block M^1 ... M^N</span></span>
<span id="cb16-128">        H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genH() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Section 5.3</span></span>
<span id="cb16-129"></span>
<span id="cb16-130">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Section 6</span></span>
<span id="cb16-131">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> M <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> blocks: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each block is a 64-entry array of 8-bit bytes</span></span>
<span id="cb16-132"></span>
<span id="cb16-133">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Prepare the message schedule, a 64-entry array of 32-bit words</span></span>
<span id="cb16-134">            W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb16-135">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>):</span>
<span id="cb16-136">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>:</span>
<span id="cb16-137">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the first 16 words are just a copy of the block</span></span>
<span id="cb16-138">                    W.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>(M[t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]))</span>
<span id="cb16-139">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb16-140">                    term1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sig1(b2i(W[t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]))</span>
<span id="cb16-141">                    term2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2i(W[t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>])</span>
<span id="cb16-142">                    term3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sig0(b2i(W[t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]))</span>
<span id="cb16-143">                    term4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2i(W[t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>])</span>
<span id="cb16-144">                    total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (term1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> term2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> term3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> term4) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb16-145">                    W.append(i2b(total))</span>
<span id="cb16-146"></span>
<span id="cb16-147">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Initialize the 8 working variables a,b,c,d,e,f,g,h with prev hash value</span></span>
<span id="cb16-148">            a, b, c, d, e, f, g, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> H</span>
<span id="cb16-149"></span>
<span id="cb16-150">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3.</span></span>
<span id="cb16-151">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>):</span>
<span id="cb16-152">                T1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> capsig1(e) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ch(e, f, g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> K[t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2i(W[t])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb16-153">                T2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (capsig0(a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> maj(a, b, c)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb16-154">                h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g</span>
<span id="cb16-155">                g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f</span>
<span id="cb16-156">                f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e</span>
<span id="cb16-157">                e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> T1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb16-158">                d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c</span>
<span id="cb16-159">                c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b</span>
<span id="cb16-160">                b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a</span>
<span id="cb16-161">                a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (T1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> T2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb16-162"></span>
<span id="cb16-163">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Compute the i-th intermediate hash value H^i</span></span>
<span id="cb16-164">            delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [a, b, c, d, e, f, g, h]</span>
<span id="cb16-165">            H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(i1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i1, i2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(H, delta)]</span>
<span id="cb16-166"></span>
<span id="cb16-167">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b''</span>.join(i2b(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> H)</span>
<span id="cb16-168"></span>
<span id="cb16-169">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sha256</span>
<span id="cb16-170"></span>
<span id="cb16-171">sha256 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen_sha256_with_variable_scope_protector_to_not_pollute_global_namespace()</span>
<span id="cb16-172"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"verify empty hash:"</span>, sha256(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b''</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># should be e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855</span></span>
<span id="cb16-173"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sha256(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'here is a random bytes message, cool right?'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>())</span>
<span id="cb16-174"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number of bytes in a sha256 digest: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sha256(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b''</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>verify empty hash: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
69b9779edaa573a509999cbae415d3408c30544bad09727a1d64eff353c95b89
number of bytes in a sha256 digest:  32</code></pre>
</div>
</div>
<p>Hàm băm thứ hai là <code>RIPEMD-160</code>:</p>
<div id="b3d4266c" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> gen_ripemd160_with_variable_scope_protector_to_not_pollute_global_namespace():</span>
<span id="cb18-2"></span>
<span id="cb18-3">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb18-4">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> struct</span>
<span id="cb18-5"></span>
<span id="cb18-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------------------------------------------------------------------</span></span>
<span id="cb18-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># public interface</span></span>
<span id="cb18-8"></span>
<span id="cb18-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ripemd160(b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>:</span>
<span id="cb18-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" simple wrapper for a simpler API to this hash function, just bytes to bytes """</span></span>
<span id="cb18-11">        ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RMDContext()</span>
<span id="cb18-12">        RMD160Update(ctx, b, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b))</span>
<span id="cb18-13">        digest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RMD160Final(ctx)</span>
<span id="cb18-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> digest</span>
<span id="cb18-15"></span>
<span id="cb18-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------------------------------------------------------------------</span></span>
<span id="cb18-17"></span>
<span id="cb18-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RMDContext:</span>
<span id="cb18-19">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb18-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x67452301</span>, <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xEFCDAB89</span>, <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x98BADCFE</span>, <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x10325476</span>, <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xC3D2E1F0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># uint32</span></span>
<span id="cb18-21">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># uint64</span></span>
<span id="cb18-22">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># uchar</span></span>
<span id="cb18-23"></span>
<span id="cb18-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> RMD160Update(ctx, inp, inplen):</span>
<span id="cb18-25">        have <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((ctx.count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb18-26">        inplen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(inplen)</span>
<span id="cb18-27">        need <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> have</span>
<span id="cb18-28">        ctx.count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inplen</span>
<span id="cb18-29">        off <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb18-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> inplen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> need:</span>
<span id="cb18-31">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> have:</span>
<span id="cb18-32">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(need):</span>
<span id="cb18-33">                    ctx.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[have<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp[i]</span>
<span id="cb18-34">                RMD160Transform(ctx.state, ctx.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>)</span>
<span id="cb18-35">                off <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> need</span>
<span id="cb18-36">                have <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb18-37">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> off <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> inplen:</span>
<span id="cb18-38">                RMD160Transform(ctx.state, inp[off:])</span>
<span id="cb18-39">                off <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb18-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> off <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> inplen:</span>
<span id="cb18-41">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(inplen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> off):</span>
<span id="cb18-42">                ctx.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>[have<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp[off<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i]</span>
<span id="cb18-43"></span>
<span id="cb18-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> RMD160Final(ctx):</span>
<span id="cb18-45">        size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> struct.pack(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;Q"</span>, ctx.count)</span>
<span id="cb18-46">        padlen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ((ctx.count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb18-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> padlen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>:</span>
<span id="cb18-48">            padlen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb18-49">        RMD160Update(ctx, PADDING, padlen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb18-50">        RMD160Update(ctx, size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb18-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> struct.pack(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;5L"</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ctx.state)</span>
<span id="cb18-52"></span>
<span id="cb18-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -----------------------------------------------------------------------------</span></span>
<span id="cb18-54"></span>
<span id="cb18-55">    K0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x00000000</span></span>
<span id="cb18-56">    K1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x5A827999</span></span>
<span id="cb18-57">    K2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x6ED9EBA1</span></span>
<span id="cb18-58">    K3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x8F1BBCDC</span></span>
<span id="cb18-59">    K4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xA953FD4E</span></span>
<span id="cb18-60">    KK0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x50A28BE6</span></span>
<span id="cb18-61">    KK1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x5C4DD124</span></span>
<span id="cb18-62">    KK2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x6D703EF3</span></span>
<span id="cb18-63">    KK3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x7A6D76E9</span></span>
<span id="cb18-64">    KK4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x00000000</span></span>
<span id="cb18-65"></span>
<span id="cb18-66">    PADDING <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x80</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span></span>
<span id="cb18-67"></span>
<span id="cb18-68">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ROL(n, x):</span>
<span id="cb18-69">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xffffffff</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n))</span>
<span id="cb18-70"></span>
<span id="cb18-71">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> F0(x, y, z):</span>
<span id="cb18-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> z</span>
<span id="cb18-73"></span>
<span id="cb18-74">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> F1(x, y, z):</span>
<span id="cb18-75">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> z)</span>
<span id="cb18-76"></span>
<span id="cb18-77">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> F2(x, y, z):</span>
<span id="cb18-78">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> ((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> z</span>
<span id="cb18-79"></span>
<span id="cb18-80">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> F3(x, y, z):</span>
<span id="cb18-81">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> z) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>z) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> y)</span>
<span id="cb18-82"></span>
<span id="cb18-83">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> F4(x, y, z):</span>
<span id="cb18-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> ((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>z) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span>))</span>
<span id="cb18-85"></span>
<span id="cb18-86">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> R(a, b, c, d, e, Fj, Kj, sj, rj, X):</span>
<span id="cb18-87">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ROL(sj, (a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Fj(b, c, d) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> X[rj] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Kj) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> e</span>
<span id="cb18-88">        c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ROL(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, c)</span>
<span id="cb18-89">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span>, c</span>
<span id="cb18-90"></span>
<span id="cb18-91">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> RMD160Transform(state, block): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#uint32 state[5], uchar block[64]</span></span>
<span id="cb18-92"></span>
<span id="cb18-93">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb18-94">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> sys.byteorder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'little'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Only little endian is supported atm for RIPEMD160"</span></span>
<span id="cb18-95">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> struct.unpack(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;16L'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>(block[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>]))</span>
<span id="cb18-96"></span>
<span id="cb18-97">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb18-98">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-99">        c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb18-100">        d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb18-101">        e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb18-102"></span>
<span id="cb18-103">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Round 1 */</span></span>
<span id="cb18-104">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-105">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-106">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-107">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-108">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-109">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-110">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-111">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-112">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-113">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-114">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-115">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F0, K0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-116">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-117">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-118">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-119">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, K0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #15 */</span></span>
<span id="cb18-120">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Round 2 */</span></span>
<span id="cb18-121">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-122">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-123">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-124">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-125">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-126">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-127">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-128">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-129">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-130">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-131">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-132">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-133">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-134">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F1, K1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-135">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-136">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, K1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #31 */</span></span>
<span id="cb18-137">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Round 3 */</span></span>
<span id="cb18-138">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-139">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-140">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-141">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-142">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-143">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-144">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-145">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-146">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-147">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-148">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-149">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-150">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-151">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F2, K2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-152">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-153">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, K2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #47 */</span></span>
<span id="cb18-154">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Round 4 */</span></span>
<span id="cb18-155">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-156">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-157">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-158">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-159">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-160">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-161">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-162">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-163">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-164">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-165">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-166">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-167">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-168">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-169">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F3, K3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-170">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, K3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #63 */</span></span>
<span id="cb18-171">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Round 5 */</span></span>
<span id="cb18-172">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-173">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-174">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-175">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-176">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-177">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-178">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-179">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-180">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-181">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-182">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-183">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-184">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F4, K4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-185">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-186">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-187">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, K4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #79 */</span></span>
<span id="cb18-188"></span>
<span id="cb18-189">        aa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a</span>
<span id="cb18-190">        bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b</span>
<span id="cb18-191">        cc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c</span>
<span id="cb18-192">        dd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d</span>
<span id="cb18-193">        ee <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e</span>
<span id="cb18-194"></span>
<span id="cb18-195">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb18-196">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-197">        c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb18-198">        d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb18-199">        e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb18-200"></span>
<span id="cb18-201">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Parallel round 1 */</span></span>
<span id="cb18-202">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-203">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-204">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-205">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-206">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-207">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-208">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-209">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-210">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-211">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-212">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-213">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-214">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-215">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-216">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F4, KK0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-217">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F4, KK0,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #15 */</span></span>
<span id="cb18-218">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Parallel round 2 */</span></span>
<span id="cb18-219">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-220">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-221">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-222">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-223">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-224">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-225">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-226">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-227">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-228">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-229">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-230">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-231">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F3, KK1,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-232">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-233">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-234">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F3, KK1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #31 */</span></span>
<span id="cb18-235">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Parallel round 3 */</span></span>
<span id="cb18-236">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-237">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-238">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-239">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-240">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-241">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-242">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-243">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-244">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-245">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-246">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-247">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-248">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-249">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F2, KK2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-250">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-251">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F2, KK2,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #47 */</span></span>
<span id="cb18-252">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Parallel round 4 */</span></span>
<span id="cb18-253">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-254">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-255">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-256">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-257">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-258">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x)</span>
<span id="cb18-259">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-260">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-261">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-262">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-263">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-264">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-265">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-266">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-267">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F1, KK3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-268">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F1, KK3,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #63 */</span></span>
<span id="cb18-269">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* Parallel round 5 */</span></span>
<span id="cb18-270">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, x)</span>
<span id="cb18-271">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, x)</span>
<span id="cb18-272">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, x)</span>
<span id="cb18-273">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x)</span>
<span id="cb18-274">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb18-275">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x)</span>
<span id="cb18-276">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, x)</span>
<span id="cb18-277">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, x)</span>
<span id="cb18-278">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, x)</span>
<span id="cb18-279">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, x)</span>
<span id="cb18-280">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, x)</span>
<span id="cb18-281">        a, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(a, b, c, d, e, F0, KK4,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, x)</span>
<span id="cb18-282">        e, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(e, a, b, c, d, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x)</span>
<span id="cb18-283">        d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(d, e, a, b, c, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb18-284">        c, e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(c, d, e, a, b, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, x)</span>
<span id="cb18-285">        b, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R(b, c, d, e, a, F0, KK4, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/* #79 */</span></span>
<span id="cb18-286"></span>
<span id="cb18-287">        t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span></span>
<span id="cb18-288">        state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> e) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span></span>
<span id="cb18-289">        state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ee <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span></span>
<span id="cb18-290">        state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> aa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span></span>
<span id="cb18-291">        state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span></span>
<span id="cb18-292">        state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x100000000</span></span>
<span id="cb18-293"></span>
<span id="cb18-294">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ripemd160</span>
<span id="cb18-295"></span>
<span id="cb18-296">ripemd160 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen_ripemd160_with_variable_scope_protector_to_not_pollute_global_namespace()</span>
<span id="cb18-297"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ripemd160(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'hello this is a test'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>())</span>
<span id="cb18-298"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number of bytes in a RIPEMD-160 digest: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ripemd160(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b''</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>f51960af7dd4813a587ab26388ddab3b28d1f7b4
number of bytes in a RIPEMD-160 digest:  20</code></pre>
</div>
</div>
<p>Ok giờ thì có thể làm việc với Bitcoin Address. Chúng ta sẽ tạo một class <code>PublicKet</code>, là con của <code>Point</code>, cũng là một điểm trên <code>Curve</code>.</p>
<div id="504be61c" class="cell" data-execution_count="12">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PublicKey(Point):</span>
<span id="cb20-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The public key is just a Point on a Curve, but has some additional specific</span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    encoding / decoding functionality that this class implements.</span></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb20-6"></span>
<span id="cb20-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@classmethod</span></span>
<span id="cb20-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> from_point(cls, pt: Point):</span>
<span id="cb20-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" promote a Point to be a PublicKey """</span></span>
<span id="cb20-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cls(pt.curve, pt.x, pt.y)</span>
<span id="cb20-11"></span>
<span id="cb20-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, compressed, hash160<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb20-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" return the SEC bytes encoding of the public key Point """</span></span>
<span id="cb20-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the bytes</span></span>
<span id="cb20-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> compressed:</span>
<span id="cb20-16">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (x,y) is very redundant. Because y^2 = x^3 + 7,</span></span>
<span id="cb20-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we can just encode x, and then y = +/- sqrt(x^3 + 7),</span></span>
<span id="cb20-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># so we need one more bit to encode whether it was the + or the -</span></span>
<span id="cb20-19">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># but because this is modular arithmetic there is no +/-, instead</span></span>
<span id="cb20-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it can be shown that one y will always be even and the other odd.</span></span>
<span id="cb20-21">            prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x02</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x03</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb20-22">            pkb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x.to_bytes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>)</span>
<span id="cb20-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb20-24">            pkb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x04</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x.to_bytes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y.to_bytes(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>)</span>
<span id="cb20-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hash if desired</span></span>
<span id="cb20-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ripemd160(sha256(pkb)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> hash160 <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> pkb</span>
<span id="cb20-27"></span>
<span id="cb20-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> address(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, net: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, compressed: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb20-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" return the associated bitcoin address for this public key as string """</span></span>
<span id="cb20-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># encode the public key into bytes and hash to get the payload</span></span>
<span id="cb20-31">        pkb_hash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encode(compressed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>compressed, hash160<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add version byte (0x00 for Main Network, or 0x6f for Test Network)</span></span>
<span id="cb20-33">        version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'main'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x00</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x6f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>}</span>
<span id="cb20-34">        ver_pkb_hash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> version[net] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pkb_hash</span>
<span id="cb20-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the checksum</span></span>
<span id="cb20-36">        checksum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sha256(sha256(ver_pkb_hash))[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb20-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># append to form the full 25-byte binary Bitcoin Address</span></span>
<span id="cb20-38">        byte_address <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ver_pkb_hash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> checksum</span>
<span id="cb20-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># finally b58 encode the result</span></span>
<span id="cb20-40">        b58check_address <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b58encode(byte_address)</span>
<span id="cb20-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> b58check_address</span></code></pre></div>
</details>
</div>
<p>Step 1 not completed yet.</p>
<section id="part-1-summary-so-far" class="level2">
<h2 class="anchored" data-anchor-id="part-1-summary-so-far">Part 1: summary so far</h2>
</section>
</section>
<section id="part-2-obtaining-seed-funds-intro-to-bitcoin-under-the-hood" class="level1">
<h1>Part 2: Obtaining seed funds + intro to Bitcoin under the hood</h1>
</section>
<section id="part-3-crafting-our-transaction" class="level1">
<h1>Part 3: Crafting our transaction</h1>
</section>
<section id="digital-signature" class="level1">
<h1>Digital Signature</h1>
</section>
<section id="putting-it-all-together-one-more-consolidating-transaction" class="level1">
<h1>Putting it all together: One more consolidating transaction</h1>
</section>
<section id="resources" class="level1">
<h1>Resources</h1>
<p>Andrej Karpathy’s <a href="https://karpathy.github.io/2021/06/21/blockchain/">blog post</a></p>


<!-- -->

</section>

 ]]></description>
  <category>til</category>
  <category>crypto</category>
  <category>bitcoin</category>
  <category>python</category>
  <category>andrej karpathy</category>
  <guid>https://lktuan.github.io/blog/2024-06-10-python-bitcoin/</guid>
  <pubDate>Sun, 09 Jun 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-06-10-python-bitcoin/python_bitcoin.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>TIL: Xử lý dynamic-ragged array trong Excel</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-06-06-excel-blambda/</link>
  <description><![CDATA[ 





<section id="problem-statement" class="level1">
<h1>Problem statement</h1>
<p>TIL: Hôm nay mình thử giải một <a href="https://www.linkedin.com/posts/owenhprice_data-analytics-sql-activity-7204129483144986624-R73I">challenge</a> của bác <a href="https://www.linkedin.com/in/owenhprice/">Owen Price</a>. Bác là Microsoft MVP, master ở khía cạnh xử lí, làm sạch, thậm chí là tối ưu việc xử lí đó trong Excel, trang blog của bác là <a href="https://www.flexyourdata.com/">FLEX YOUR DATA</a>, mình học được rất nhiều cách sử dụng formulas, đặc biệt là các hàm mới từ <code>LAMBDA()</code>, <code>MAP()</code>, <code>REDUCE()</code> cho đến gần đây là <strong>Python in Excel</strong>, <code>GROUPBY()</code>, <code>PIVOTBY</code>, và các hàm <code>REGEX_()</code>.</p>
<p>Nội dung challenge là, với <strong>một phần</strong> (1000 records) của bộ dữ liệu <a href="https://citibikenyc.com/system-data">Citi Bike</a>, trong đó chứa hai cột <code>start_station_name</code>, <code>end_station_name</code>, mỗi cột lại chứa thông tin các “station” ~ trạm, liệt kê 5 <strong>địa chỉ</strong> cùng số lần xuất hiện với số lượng lớn nhất!. Hình dưới là 10 dòng đầu tiên của dữ liệu.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-06-excel-blambda/data.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>10 dòng đầu tiên của dữ liệu</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Well lúc đầu mình nghĩ nó cũng đơn giản 😂, thậm chí cũng không hiểu tại sao mỗi start hoặc end station lại có <em>hai station</em>, cách nhau bởi ký tự <code>&amp;</code> (space before &amp; after). Mình lập tức đưa ra lời giải như sau:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb1-1">=LET(</span>
<span id="cb1-2">    _d, " &amp; ",</span>
<span id="cb1-3">    _all_records, TOCOL(</span>
<span id="cb1-4">        BYROW(</span>
<span id="cb1-5">            BYROW(</span>
<span id="cb1-6">                _tbl_CityBike[[start_station_name]:[end_station_name]],</span>
<span id="cb1-7">                LAMBDA(x, TEXTJOIN(_d, TRUE, x))</span>
<span id="cb1-8">            ),</span>
<span id="cb1-9">        LAMBDA(x, TEXTSPLIT(x, _d))</span>
<span id="cb1-10">        )</span>
<span id="cb1-11">    ),</span>
<span id="cb1-12">    _stations, UNIQUE(_all_records),</span>
<span id="cb1-13">    _cnt, BYROW(</span>
<span id="cb1-14">        --(_stations = TRANSPOSE(_all_records)), </span>
<span id="cb1-15">        // "--" equals to "+" will convert the boolean TRUE/FALSE to value 1/0</span>
<span id="cb1-16">        LAMBDA(x, SUM(x))</span>
<span id="cb1-17">    ),</span>
<span id="cb1-18">    TAKE(SORTBY(HSTACK(_stations, _cnt), _cnt, -1), 5, )</span>
<span id="cb1-19">)</span></code></pre></div>
<p>Kết quả:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-06-excel-blambda/my_initial_result.png" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption>Kết quả đầu tiên của mình</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Đối chiếu với các kết quả của những người tham gia khách thì nó sai! Ý tưởng của mình là đầu tiên với mỗi hàng, join chúng lại với <code>&amp;</code> (<code>_d</code>), sau đó lại split chúng ra với cùng <code>_d</code> đó, từ đó có được danh sách occurence của tất cả các <strong>địa chỉ</strong>. Tuy nhiên mình nhận ra dữ liệu trả về cho <code>_all_records</code> bị thiếu sót. Lý do là các trạm (station) thường là các giao lộ, kết hợp từ hai địa chỉ với dấu <code>&amp;</code>, tuy nhiên có một số trạm lại nằm trên một con đường. Và vì chất lượng dữ liệu, cũng có một số station là <code>null</code>. Hàm <code>TOCOL()</code> là hàm mảng xử lí các mảng con nhận được từ <code>BYROW(...,LAMBDA(...,TEXTSPLIT()))</code>, các mảng con này có độ dài <strong>không đều</strong>, dẫn đến <code>TOCOL()</code> chỉ take record đầu tiên của mỗi mảng con, trả về <code>_all_records</code> chỉ gồm <em>1000 dòng dữ liệu</em>.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-06-excel-blambda/special_data_points.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Các điểm dữ liệu đặc biệt</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="solution" class="level1 page-columns page-full">
<h1>Solution</h1>
<div class="page-columns page-full"><p>Các mảng lởm chởm hay ragged/jagged array là các mảng gồm các mảng con có độ dài không đều nhau.  Excel <strong>không thể</strong> merge các bảng có kích cỡ không bằng nhau.</p><div class="no-row-height column-margin column-container"><span class="margin-aside">In computer science, a <strong>jagged array</strong>, also known as a <strong>ragged array</strong>, or <strong>irregular array</strong>, is an array of arrays of which the member arrays can be of different lengths, producing rows of jagged edges when visualized as output. In contrast, two-dimensional arrays are always rectangular, so jagged arrays should not be confused with multidimensional arrays, but the former is often used to emulate the latter. <a href="https://en.wikipedia.org/wiki/Jagged_array#:~:text=In%20computer%20science%2C%20a%20jagged,edges%20when%20visualized%20as%20output.">Wiki</a></span></div></div>
<p>Một <a href="https://www.linkedin.com/feed/update/urn:li:activity:7204129483144986624?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7204129483144986624%2C7204309739827044353%29&amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287204309739827044353%2Curn%3Ali%3Aactivity%3A7204129483144986624%29">comment</a> đưa mình tới hàm <a href="https://gist.github.com/ncalm/0e72b08272ec14f411e8aaa763c0c0b5"><code>BLAMBDAλ()</code></a> của bác MVP <a href="https://www.linkedin.com/in/peterbartholomew/">Peter Bartholemew</a> và <a href="https://www.linkedin.com/pulse/excel-lambda-spotlight-bisected-map-bmap%2525CE%2525BB-owen-price/">bài giải thích</a> của Owen Price.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-06-excel-blambda/g4g_ragged_array.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption>Ragged or Jagged array, photo credit to <a href="https://www.geeksforgeeks.org/jagged-array-in-java/">Geeks for Geeks</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Và lời giải đúng, được dựa trên ý tưởng của <code>BLAMBDAλ()</code> là:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb2-1">=LET(</span>
<span id="cb2-2">    B, LAMBDA(B, v,</span>
<span id="cb2-3">        LET(</span>
<span id="cb2-4">            n, ROWS(v),</span>
<span id="cb2-5">            IF(</span>
<span id="cb2-6">                n &gt; 1,</span>
<span id="cb2-7">                VSTACK(B(B, TAKE(v, n / 2)), B(B, DROP(v, n / 2))),</span>
<span id="cb2-8">                TEXTSPLIT(TEXTJOIN(" &amp; ", , v), , " &amp; ")</span>
<span id="cb2-9">            )</span>
<span id="cb2-10">        )</span>
<span id="cb2-11">    ),</span>
<span id="cb2-12">    str, B(B, CHOOSECOLS(_tbl_CityBike, 4, 5)),</span>
<span id="cb2-13">    _u_str, UNIQUE(str),</span>
<span id="cb2-14">    _cnt, BYROW(--(_u_str = TRANSPOSE(str)), LAMBDA(x, SUM(x))),</span>
<span id="cb2-15">    TAKE(SORTBY(HSTACK(_u_str, _cnt), _cnt, -1), 5)</span>
<span id="cb2-16">)</span></code></pre></div>
<p>Nếu sử dụng <code>GROUPBY()</code> thì việc tính toán cuối cùng sẽ gọn hơn, tuy nhiên vào thời điểm viết bài, hàm này vẫn chưa được MS đưa lên 365 Production mà chỉ ở kênh Insider.</p>
<p>Kết quả cuối cùng:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-06-06-excel-blambda/final_result.png" class="img-fluid figure-img" style="width:50.0%"></p>
<figcaption>Kết quả đúng</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="blambdaλ" class="level1">
<h1><code>BLAMBDAλ()</code></h1>
<p>Nguyên văn mục đích của <code>BLAMBDAλ()</code> của Peter:</p>
<blockquote class="blockquote">
<p>Recursively bisects an array and applies a function to the leaf nodes. Useful for when the result of the Fnλ(leaf) calls are not of equal length. As such, BMAPλ can produce ragged arrays.</p>
</blockquote>
<p>Owen cũng nhận xét là hàm này “more computationally efficient” so với <a href="https://gist.github.com/ncalm/ef7ed953571eec1475c291948aa2dbc3"><code>STACKER()</code></a> của ổng. Chi tiết về ý tưởng hàm gốc có thể tham khảo ở các link trên, giờ mình sẽ tìm hiểu <code>BLAMBDAλ()</code> được áp dụng cho use case này.</p>
<p>Đầu tiên <code>B()</code> (stands for Bisected) là một hàm recursive:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb3-1">B = LAMBDA(B, v,</span>
<span id="cb3-2">        LET(</span>
<span id="cb3-3">            n, ROWS(v),</span>
<span id="cb3-4">            IF(</span>
<span id="cb3-5">                n &gt; 1,</span>
<span id="cb3-6">                VSTACK(B(B, TAKE(v, n / 2)), B(B, DROP(v, n / 2))),</span>
<span id="cb3-7">                TEXTSPLIT(TEXTJOIN(" &amp; ", , v), , " &amp; ")</span>
<span id="cb3-8">            )</span>
<span id="cb3-9">        )</span>
<span id="cb3-10">    )</span></code></pre></div>
<p>Trong đó:</p>
<ul>
<li><code>n</code> là số dòng của <code>v</code> ~ mảng cần tính toán</li>
<li>nếu <code>n</code> &gt; 1, trả về kết hợp <code>VSTACK()</code> khi hàm <code>B()</code> được áp dụng cho hai nửa của mảng <code>v</code>, <code>TAKE()</code> sẽ lấy “phân nửa” đầu tiên, <code>DROP()</code> sẽ bỏ đi phân nửa đầu tiên ~ nghĩa là lấy phân nửa thứ 2 (lưu ý rằng hai hàm này đều lấy số nguyên nhỏ hơn gần nhất của <code>n / 2</code>, do đó không cần lấy phần nguyên bằng <code>QUOTIENT(n,2)</code> như hàm gốc của Peter).</li>
<li>khi n = 1, nghĩa là với mỗi phần tử của mảng <code>v</code>, thực hiện động tác <code>TEXTSPLIT(TEXTJOIN(...))</code> ~ trước hết join hai cột rồi sau đó split.</li>
<li>hàm này đệ quy và sẽ <code>VSTACK()</code> tất cả các mảng dọc sinh từ việc <code>TEXTSPLIT()</code> kết quả của <code>TEXTJOIN()</code> hai cột trên mỗi dòng của mảng <code>v</code>.</li>
</ul>
<p>Mình cũng thử viết lại hàm <code>B()</code>, thay đổi một chút ~ thay vì thực hiện trên 1 mảng 2 cột mình cố gắng chuyển mảng <code>v</code> thành một cột, tuy nhiên chưa thành công 😪 <strong>(chưa hiểu tại sao)</strong>:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb4-1">=LET(</span>
<span id="cb4-2">    B, LAMBDA(B, v,</span>
<span id="cb4-3">        LET(</span>
<span id="cb4-4">            n, ROWS(v),</span>
<span id="cb4-5">            IF(n &gt; 1, VSTACK(B(B, TAKE(v, n / 2)), B(B, DROP(v, n / 2))), TEXTSPLIT(v, " &amp; "))</span>
<span id="cb4-6">        )</span>
<span id="cb4-7">    ),</span>
<span id="cb4-8">    _data, VSTACK(_tbl_CityBike[start_station_name], _tbl_CityBike[end_station_name]),</span>
<span id="cb4-9">    str, B(B, FILTER(_data, LEN(_data) &gt; 0)),</span>
<span id="cb4-10">    _u_str, UNIQUE(str),</span>
<span id="cb4-11">    _cnt, BYROW(--(_u_str = TRANSPOSE(str)), LAMBDA(x, SUM(x))),</span>
<span id="cb4-12">    TAKE(SORTBY(HSTACK(_u_str, _cnt), _cnt, -1), 5)</span>
<span id="cb4-13">)</span></code></pre></div>
<section id="edit-sau-khi-mày-mò-thêm-sửa-lỗi-cho-giải-pháp-trên-mình-back-to-basic-với-lời-giải-sau" class="level2">
<h2 class="anchored" data-anchor-id="edit-sau-khi-mày-mò-thêm-sửa-lỗi-cho-giải-pháp-trên-mình-back-to-basic-với-lời-giải-sau">🚀 Edit: sau khi mày mò thêm sửa lỗi cho giải pháp trên mình back to basic với lời giải sau:</h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource txt number-lines code-with-copy"><code class="sourceCode default"><span id="cb5-1">=LET(</span>
<span id="cb5-2">    _data, TOCOL(_tbl_CityBike[[start_station_name]:[end_station_name]], 3),</span>
<span id="cb5-3">    _str, DROP(REDUCE("", _data, LAMBDA(a, x, VSTACK(a, TEXTSPLIT(x, , " &amp; ")))), 1),</span>
<span id="cb5-4">    _u_str, UNIQUE(_str),</span>
<span id="cb5-5">    _cnt, BYROW(--(_u_str = TRANSPOSE(_str)), LAMBDA(x, SUM(x))),</span>
<span id="cb5-6">    TAKE(SORTBY(HSTACK(_u_str, _cnt), _cnt, -1), 5)</span>
<span id="cb5-7">)</span></code></pre></div>
<p>Tất nhiên tốc độ xử lí sẽ chậm hơn <code>BLAMBDAλ()</code> - O_log(n), giải pháp này duyệt qua từng phần tử, nên BigO là O(n)</p>
<p>Thanks Peter &amp; Owen for this great use of recursion presented in such a concise manner.</p>


<!-- -->

</section>
</section>

 ]]></description>
  <category>excel</category>
  <category>lambda</category>
  <category>til</category>
  <guid>https://lktuan.github.io/blog/2024-06-06-excel-blambda/</guid>
  <pubDate>Wed, 05 Jun 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-06-06-excel-blambda/excel-lambda.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Về quy ước đặt tên dữ liệu</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-06-05-cnac/</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-note callout-titled" name="Edit">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Các bạn cũng có thể xem thêm slide về dbtplyr của Emily trong posit::conf ở <a href="https://www.emilyriederer.com/talk/dbtplyr/">đây</a>.</p>
</div>
</div>
<hr>
<p>Đây là keynote từ article <a href="https://emilyriederer.netlify.app/post/column-name-contracts/">Column Names as Contracts</a> của <a href="https://emilyriederer.netlify.app/about">Emily Riederer</a>.</p>
<p>Các sản phẩm phần mềm luôn tuân theo một quy ước nhất định (về hình ảnh, ký tự) nhằm để người dùng có thể ngay lập tức nắm bắt được cách thức sử dụng, giao tiếp với nó. Ví dụ, nút Home thường sẽ đưa người dùng về trang chủ của một mobile app, nút “blog” trên blog của tôi sẽ đưa các bạn tiếp cận danh mục bài viết, etc. Ở layer phía sau, các API được BE viết cần tuân thủ documented inputs &amp; outputs, để các BE khác hay FE có thể sử dụng.</p>
<p>Tuy nhiên các bảng dữ liệu lại nằm ở một vùng màu xám không rõ ràng. Data service (từ producer i.e DE -&gt; user i.e DA, DS) đủ tĩnh để không được xem là normal service, nhưng cũng đủ thô để người ta ít chú ý đến nó về mặt giao diện. DE cứ thể lấy hết mọi dữ liệu trong hệ thống, DA nhìn dữ liệu và ngay lập tức giả định được nội dung của (cột) dữ liệu đó.</p>
<blockquote class="blockquote">
<p>Producers wonder why consumers aren’t satisfied, and consumers wonder why the data is never “right”.</p>
</blockquote>
<p>Cũng có một cách được nhiều tổ chức sử dụng như là Metadata managament, như:</p>
<ul>
<li>Lyft’s <a href="https://eng.lyft.com/amundsen-lyfts-data-discovery-metadata-engine-62d27254fbb9">Amundsen</a></li>
<li>LinkedIn’s <a href="https://www.linkedin.com/blog/engineering/archive/data-hub">DataHub</a></li>
<li>Netflix’s <a href="https://netflixtechblog.com/building-and-scaling-data-lineage-at-netflix-to-improve-data-infrastructure-reliability-and-1a52526a7977">Metacat</a></li>
</ul>
<p>Tuy nhiên giải pháp này là documentation oriented, producer và user đều phải tuân thủ nghiêm ngặt. Nó không <em>trực diện</em> khi DE đặt tên cột, hay DA đọc dữ liệu.</p>
<p>Ý tưởng của Emily là chuẩn hóa các quy ước đặt tên dữ liệu bằng <a href="https://en.wikipedia.org/wiki/Controlled_vocabulary">Controlled vocabulary</a>. Minh họa bằng <code>pointblank</code>, <code>collapsibleTree</code>, và <code>dplyr</code>.</p>
<section id="controlled-vocabulary" class="level1">
<h1>Controlled Vocabulary</h1>
<p>CV là phương pháp sử dụng một tập hợp các từ, cụm từ, từ viết tắt để ký hiệu thông tin. Quy ước này cần được định nghĩa đề phù hợp cho tính chất bộ dữ liệu, và cũng đủ đơn giản để người tạo dữ liệu, người sử dụng dữ liệu sử dụng.</p>
<p>Ví dụ, 1 ứng dụng booking.</p>
<section id="level-1-kiểu-dữ-liệu-kiểu-đo-lường" class="level2">
<h2 class="anchored" data-anchor-id="level-1-kiểu-dữ-liệu-kiểu-đo-lường">Level 1: Kiểu dữ liệu, kiểu đo lường</h2>
<ul>
<li><code>ID</code>: chỉ đối tượng, dạng numberic, tối ưu cho việc lưu trữ và thường làm khóa chính các bảng’</li>
<li><code>IND</code>: giá trị boolean 0/1, tôi thì thường sử dụng các từ như <code>IS</code>, <code>FLAG</code>;</li>
<li><code>N</code>: chỉ các dạng thông tin <em>có thể đếm (count)</em> được;</li>
<li><code>AMT</code>: chỉ các dạng thông tin có thể tổng, thường đề cập đến <em>currency</em>;</li>
<li><code>VAL</code>: cũng là số nhưng không thể tổng được (không có ý nghĩa), ví dụ như <em>kinh độ</em>, <em>vĩ độ</em>;</li>
<li><code>DT</code>: ngày;</li>
<li><code>TM</code>: giờ hoặc ngày giờ;</li>
<li><code>CAT</code>: category</li>
</ul>
<p>Cũng tùy vào dữ liệu, có thể thêm các cụm từ nhất định đề đề cập đến thông tin dữ liệu đó mang lại, ví dụ <code>ADD</code> cho address.</p>
</section>
<section id="level-2-đối-tượng-chủ-đề" class="level2">
<h2 class="anchored" data-anchor-id="level-2-đối-tượng-chủ-đề">Level 2: Đối tượng, chủ đề</h2>
<p>Mối quan tâm của người dùng dữ liệu cũng giống như nhà quản trị, xung quanh các đối tượng của business: <code>USER</code>, <code>TRANSACTION</code>, etc.</p>
<p>Đối với ứng dụng đặt xe, các chủ thể có thể cần quan tâm là <code>TRIP</code>, <code>TRAVELER</code>, <code>ACCOMODATION</code>, <code>TRANSPORTATION</code>, etc.</p>
</section>
<section id="level-3-n-chi-tiết" class="level2">
<h2 class="anchored" data-anchor-id="level-3-n-chi-tiết">Level 3-n: Chi tiết</h2>
<p>Hai tầng trên về cơ bản đã cho phép chúng ta mô tả được cột thông tin, chúng đều thể hiện được thuộc tính của chủ thể. Ví dụ:</p>
<ul>
<li><code>AMT_TRIP</code>: giá trị deal của Trip;</li>
<li><code>ADD_DESTINATION</code>: Điểm đến của trip.</li>
</ul>
<p>Tuy nhiên tùy vào từng use case, chúng ta hoàn toàn có thể mở rộng được về cả hai phía. Ví dụ:</p>
<ul>
<li>Về phía trước: khi làm việc với nhiều layer dữ liệu, ta có thể dùng <code>RAW</code>, <code>STAGING</code>, <code>DW</code>, <code>DL</code>, <code>DM</code>, etc<br>
</li>
<li>Về phía sau: <code>DAY</code> hoặc <code>MONTH</code> cho <code>N_DURATION</code>, <code>VND</code> hoặc <code>USD</code> cho currency <code>AMT</code>.</li>
</ul>
<p>Miễn là có một quy chuẩn, và nó đủ đơn giản để sử dụng.</p>
</section>
<section id="kết-hợp-chúng-lại" class="level2">
<h2 class="anchored" data-anchor-id="kết-hợp-chúng-lại">Kết hợp chúng lại</h2>
<p>Tất nhiên ràng buộc việc đặt tên như vậy không chỉ để trang trí, nó sẽ giúp chúng ta tự động hóa quy trình kiểm soát chất lượng dữ liệu, .</p>
<p>Tôi sử dụng <a href="https://www.kaggle.com/datasets/rkiattisak/traveler-trip-data">bộ dữ liệu</a> này để thực hành (cột dữ liệu đã được đổi tên).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(trip_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 13
  ID_TRIP CAT_DESTINATION_CITY DT_START  DT_END N_DURATION_DAY CAT_TRAVELER_NAME
    &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;            
1       1 London, UK           5/1/2023  5/8/2…              7 John Smith       
2       2 Phuket, Thailand     6/15/2023 6/20/…              5 Jane Doe         
3       3 Bali, Indonesia      7/1/2023  7/8/2…              7 David Lee        
4       4 New York, USA        8/15/2023 8/29/…             14 Sarah Johnson    
5       5 Tokyo, Japan         9/10/2023 9/17/…              7 Kim Nguyen       
6       6 Paris, France        10/5/2023 10/10…              5 Michael Brown    
# ℹ 7 more variables: VAL_AGE_TRAVELER &lt;dbl&gt;, IND_GENDER_TRAVELER &lt;chr&gt;,
#   CAT_TRAVELER_NATIONALITY &lt;chr&gt;, CAT_ACCOMMODATION_TYPE &lt;chr&gt;,
#   AMT_ACCOMMODATION_COST &lt;chr&gt;, CAT_TRANSPORTATION_TYPE &lt;chr&gt;,
#   AMT_TRANSPORTATION_COST &lt;chr&gt;</code></pre>
</div>
</div>
</section>
</section>
<section id="data-validation" class="level1 page-columns page-full">
<h1>Data Validation</h1>
<p>Sử dụng <code>pointblank</code> của R để kiếm tra một số tính chất của dữ liệu:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pointblank)</span>
<span id="cb3-2"></span>
<span id="cb3-3">agent <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb3-4">  trip_data  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_agent</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">actions =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">action_levels</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stop_at =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_vals_gte</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if cols start with N is GTE 0 or not</span></span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_vals_gte</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VAL"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if cols start with VAL is GTE 0 or not</span></span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_vals_not_null</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IND"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if cols start with IND contain Null or not</span></span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_vals_in_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IND"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># validate the value of only column started with IND - Gender</span></span>
<span id="cb3-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_is_date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DT"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check validation of date columns</span></span>
<span id="cb3-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interrogate</span>()</span></code></pre></div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Note: To type <code>pipe</code> operator in VS Code, use this in the <code>keybindings.json</code> file:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource json number-lines code-with-copy"><code class="sourceCode json"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"key"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ctrl+Shift+m"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span>             </span>
<span id="cb4-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"command"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb4-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"args"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"text"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" %&gt;% "</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb4-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"when"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"editorTextFocus </span></span>
<span id="cb4-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            &amp;&amp; !editorHasSelection </span></span>
<span id="cb4-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            &amp;&amp; editorLangId </span></span>
<span id="cb4-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            == 'quarto'"</span> </span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Then you can get the <code>pipe</code> when type <code>Ctrl + Shift + M</code>.</p>
</div></div><div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb5-1">agent</span></code></pre></div>
<div class="cell-output-display">
<div>
<div id="pb_agent" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>@import url("https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");
@import url("https://unpkg.com/balloon-css/balloon.min.css");
#pb_agent table {
  font-family: 'IBM Plex Sans', system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#pb_agent thead, #pb_agent tbody, #pb_agent tfoot, #pb_agent tr, #pb_agent td, #pb_agent th {
  border-style: none;
}

#pb_agent p {
  margin: 0;
  padding: 0;
}

#pb_agent .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 90%;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#pb_agent .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#pb_agent .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#pb_agent .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#pb_agent .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#pb_agent .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pb_agent .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#pb_agent .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#pb_agent .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#pb_agent .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#pb_agent .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#pb_agent .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#pb_agent .gt_spanner_row {
  border-bottom-style: hidden;
}

#pb_agent .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#pb_agent .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#pb_agent .gt_from_md > :first-child {
  margin-top: 0;
}

#pb_agent .gt_from_md > :last-child {
  margin-bottom: 0;
}

#pb_agent .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#pb_agent .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#pb_agent .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#pb_agent .gt_row_group_first td {
  border-top-width: 2px;
}

#pb_agent .gt_row_group_first th {
  border-top-width: 2px;
}

#pb_agent .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#pb_agent .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#pb_agent .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#pb_agent .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pb_agent .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#pb_agent .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#pb_agent .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#pb_agent .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#pb_agent .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pb_agent .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#pb_agent .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#pb_agent .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#pb_agent .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#pb_agent .gt_left {
  text-align: left;
}

#pb_agent .gt_center {
  text-align: center;
}

#pb_agent .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#pb_agent .gt_font_normal {
  font-weight: normal;
}

#pb_agent .gt_font_bold {
  font-weight: bold;
}

#pb_agent .gt_font_italic {
  font-style: italic;
}

#pb_agent .gt_super {
  font-size: 65%;
}

#pb_agent .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#pb_agent .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#pb_agent .gt_indent_1 {
  text-indent: 5px;
}

#pb_agent .gt_indent_2 {
  text-indent: 10px;
}

#pb_agent .gt_indent_3 {
  text-indent: 15px;
}

#pb_agent .gt_indent_4 {
  text-indent: 20px;
}

#pb_agent .gt_indent_5 {
  text-indent: 25px;
}

#pb_agent {
  -webkit-font-smoothing: antialiased;
}

#pb_agent .gt_row {
  overflow: visible;
}

#pb_agent .gt_sourcenote {
  height: 35px;
  padding: 0;
}

#pb_agent code {
  font-family: 'IBM Plex Mono', monospace, courier;
  color: black;
  background-color: transparent;
  padding: 0;
}
</style>

<table class="gt_table table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
<thead>
<tr class="header gt_heading">
<th colspan="14" class="gt_heading gt_title gt_font_normal" style="text-align: left; color: #444444; font-size: 28px; font-weight: 500;">Pointblank Validation</th>
</tr>
<tr class="odd gt_heading">
<th colspan="14" class="gt_heading gt_subtitle gt_font_normal gt_bottom_border" style="text-align: left; font-size: 12px;"><span style="text-decoration-style:solid;text-decoration-color:#ADD8E6;text-decoration-line:underline;text-underline-position:under;color:#333333;font-variant-numeric:tabular-nums;padding-left:4px;margin-right:5px;padding-right:2px;">[2024-07-04|09:52:39]</span>
<p></p>
<div style="height:25px;padding-top:10px;">
<span style="background-color: #F1D35A;color: #222222;padding: 0.5em 0.5em;position: inherit;text-transform: uppercase;margin: 5px 1px 5px 4px;font-weight: bold;border: solid 1px #F1D35A;padding: 2px 10px 2px 10px;font-size: smaller;">tibble</span><span style="background-color:#E5AB00;color:white;padding:0.5em 0.5em;position:inherit;text-transform:uppercase;margin:5px 0px 5px 5px;font-weight:bold;border:solid 1px #E5AB00;padding:2px 15px 2px 15px;font-size:smaller;">WARN</span> <span style="background-color:none;color:#333333;padding:0.5em 0.5em;position:inherit;margin:5px 0px 5px -4px;font-weight:bold;border:solid 1px #E5AB00;padding:2px 15px 2px 15px;font-size:smaller;">—</span> <span style="background-color:#D0182F;color:white;padding:0.5em 0.5em;position:inherit;text-transform:uppercase;margin:5px 0px 5px 1px;font-weight:bold;border:solid 1px #D0182F;padding:2px 15px 2px 15px;font-size:smaller;">STOP</span> <span style="background-color:none;color:#333333;padding:0.5em 0.5em;position:inherit;margin:5px 0px 5px -4px;font-weight:bold;border:solid 1px #D0182F;padding:2px 15px 2px 15px;font-size:smaller;">0.00</span> <span style="background-color:#499FFE;color:white;padding:0.5em 0.5em;position:inherit;text-transform:uppercase;margin:5px 0px 5px 1px;font-weight:bold;border:solid 1px #499FFE;padding:2px 15px 2px 15px;font-size:smaller;">NOTIFY</span> <span style="background-color:none;color:#333333;padding:0.5em 0.5em;position:inherit;margin:5px 0px 5px -4px;font-weight:bold;border:solid 1px #499FFE;padding:2px 15px 2px 15px;font-size:smaller;">—</span>
</div></th>
</tr>
<tr class="header gt_col_headings">
<th class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col"></th>
<th class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col"></th>
<th id="STEP" class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col">STEP</th>
<th id="COLUMNS" class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col">COLUMNS</th>
<th id="VALUES" class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col">VALUES</th>
<th id="TBL" class="gt_col_heading gt_columns_bottom_border gt_center" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col">TBL</th>
<th id="EVAL" class="gt_col_heading gt_columns_bottom_border gt_center" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col">EVAL</th>
<th id="UNITS" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col">UNITS</th>
<th id="PASS" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col">PASS</th>
<th id="FAIL" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col">FAIL</th>
<th id="W" class="gt_col_heading gt_columns_bottom_border gt_center" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col">W</th>
<th id="S" class="gt_col_heading gt_columns_bottom_border gt_center" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col">S</th>
<th id="N" class="gt_col_heading gt_columns_bottom_border gt_center" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col">N</th>
<th id="EXT" class="gt_col_heading gt_columns_bottom_border gt_center" data-quarto-table-cell-role="th" style="color: #666666; font-weight: bold" scope="col">EXT</th>
</tr>
</thead>
<tbody class="gt_table_body">
<tr class="odd">
<td class="gt_row gt_left" headers="status_color" style="background-color: #CF142B; height: 40px"><br>
</td>
<td class="gt_row gt_right" headers="i" style="color: #666666; font-size: 13px; font-weight: bold; height: 40px">1</td>
<td class="gt_row gt_left" headers="type" style="height: 40px"><div aria-label="Expect that values in `N_DURATION_DAY` should be >= `0`. " data-balloon-pos="right" style="width:fit-content;">
<div style="margin:0;padding:0;display:inline-block;height:30px;vertical-align:middle;">
<svg width="30px" height="30px" viewbox="0 0 67 67" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
<title>
col_vals_gte
</title>
<g id="All-Icons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="col_vals_gte" transform="translate(0.000000, 0.241379)"> <path d="M56.712234,1 C59.1975153,1 61.4475153,2.00735931 63.076195,3.63603897 C64.7048747,5.26471863 65.712234,7.51471863 65.712234,10 L65.712234,10 L65.712234,65 L10.712234,65 C8.22695259,65 5.97695259,63.9926407 4.34827294,62.363961 C2.71959328,60.7352814 1.71223397,58.4852814 1.71223397,56 L1.71223397,56 L1.71223397,10 C1.71223397,7.51471863 2.71959328,5.26471863 4.34827294,3.63603897 C5.97695259,2.00735931 8.22695259,1 10.712234,1 L10.712234,1 Z" id="rectangle" stroke="#000000" stroke-width="2" fill="#FFFFFF"></path> <path d="M49.712234,12 L17.712234,12 C14.952234,12 12.712234,14.24 12.712234,17 L12.712234,49 C12.712234,51.76 14.952234,54 17.712234,54 L49.712234,54 C52.472234,54 54.712234,51.76 54.712234,49 L54.712234,17 C54.712234,14.24 52.472234,12 49.712234,12 Z M44.712234,47 L22.712234,47 L22.712234,45 L44.712234,45 L44.712234,47 Z M24.182234,40.88 L23.242234,39.12 L40.562234,30 L23.242234,20.88 L24.182234,19.12 L44.862234,30 L24.182234,40.88 Z" id="greater_than_equal" fill="#000000" fill-rule="nonzero"></path> </g> </g>
</svg>
</div>
<code style="font-size:11px;">&nbsp;col_vals_gte()</code>
</div></td>
<td class="gt_row gt_left" headers="columns" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; height: 40px"><div aria-label="N_DURATION_DAY" data-balloon-pos="left">
<p><span style="color:purple;"><code>▮</code></span><code>N_DURATION_DAY</code></p>
</div></td>
<td class="gt_row gt_left" headers="values" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; height: 40px"><div aria-label="0" data-balloon-pos="left">
<p><code>0</code></p>
</div></td>
<td class="gt_row gt_center" headers="precon" style="border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; background-color: #FCFCFC; height: 40px"><span style="background:transparent;padding:0;color:#333333;vertical-align:middle;font-size:10px;border:none;border-radius:4px;" aria-label="No modifications of the table." data-balloon-pos="left">
<svg width="25px" height="25px" viewbox="0 0 25 25" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="vertical-align: middle;">
<g id="unchanged" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="unchanged" transform="translate(0.500000, 0.570147)"> <rect id="Rectangle" x="0.125132506" y="0" width="23.749735" height="23.7894737"></rect> <path d="M5.80375046,8.18194736 C3.77191832,8.18194736 2.11875046,9.83495328 2.11875046,11.8669474 C2.11875046,13.8989414 3.77191832,15.5519474 5.80375046,15.5519474 C7.8355826,15.5519474 9.48875046,13.8989414 9.48875046,11.8669474 C9.48875046,9.83495328 7.83552863,8.18194736 5.80375046,8.18194736 Z M5.80375046,14.814915 C4.17821997,14.814915 2.85578285,13.4924778 2.85578285,11.8669474 C2.85578285,10.2414169 4.17821997,8.91897975 5.80375046,8.91897975 C7.42928095,8.91897975 8.75171807,10.2414169 8.75171807,11.8669474 C8.75171807,13.4924778 7.42928095,14.814915 5.80375046,14.814915 Z" id="Shape" fill="#000000" fill-rule="nonzero"></path> <path d="M13.9638189,8.699335 C13.9364621,8.70430925 13.9091059,8.71176968 13.8842359,8.71923074 C13.7822704,8.73663967 13.6877654,8.77643115 13.6056956,8.83860518 L10.2433156,11.3852598 C10.0766886,11.5046343 9.97720993,11.6986181 9.97720993,11.9025491 C9.97720993,12.1064807 10.0766886,12.3004639 10.2433156,12.4198383 L13.6056956,14.966493 C13.891697,15.1803725 14.2970729,15.1231721 14.5109517,14.8371707 C14.7248313,14.5511692 14.6676309,14.145794 14.3816294,13.9319145 L12.5313257,12.5392127 L21.8812495,12.5392127 L21.8812495,11.2658854 L12.5313257,11.2658854 L14.3816294,9.87318364 C14.6377872,9.71650453 14.7497006,9.40066014 14.6477351,9.11714553 C14.5482564,8.83363156 14.262255,8.65954352 13.9638189,8.699335 Z" id="arrow" fill="#000000" transform="translate(15.929230, 11.894737) rotate(-180.000000) translate(-15.929230, -11.894737) "></path> </g> </g>
</svg>
</span></td>
<td class="gt_row gt_center" headers="eval_sym" style="border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; background-color: #FCFCFC; height: 40px"><span style="background:transparent;padding:5px;color:#4CA64C;vertical-align:middle;font-size:15px;border:none;" aria-label="No evaluation issues." data-balloon-pos="left">✓</span></td>
<td class="gt_row gt_right" headers="units" style="font-size: 11px; height: 40px"><code>139</code></td>
<td class="gt_row gt_right" headers="n_pass" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; font-size: 11px; height: 40px"><code>137</code><br>
<code>0.98561</code></td>
<td class="gt_row gt_right" headers="n_fail" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; font-size: 11px; height: 40px"><code>2</code><br>
<code>0.01439</code></td>
<td class="gt_row gt_center" headers="W" style="border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; background-color: #FCFCFC; height: 40px">—</td>
<td class="gt_row gt_center" headers="S" style="background-color: #FCFCFC; height: 40px"><span style="color: #CF142B;">●</span></td>
<td class="gt_row gt_center" headers="N" style="border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; background-color: #FCFCFC; height: 40px">—</td>
<td class="gt_row gt_center" headers="extract" style="height: 40px"><a href="data:text/csv;base64,IklEX1RSSVAiLCJDQVRfREVTVElOQVRJT05fQ0lUWSIsIkRUX1NUQVJUIiwiRFRfRU5EIiwiTl9EVVJBVElPTl9EQVkiLCJDQVRfVFJBVkVMRVJfTkFNRSIsIlZBTF9BR0VfVFJBVkVMRVIiLCJJTkRfR0VOREVSX1RSQVZFTEVSIiwiQ0FUX1RSQVZFTEVSX05BVElPTkFMSVRZIiwiQ0FUX0FDQ09NTU9EQVRJT05fVFlQRSIsIkFNVF9BQ0NPTU1PREFUSU9OX0NPU1QiLCJDQVRfVFJBTlNQT1JUQVRJT05fVFlQRSIsIkFNVF9UUkFOU1BPUlRBVElPTl9DT1NUIg0KNzIsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkENCjEyOCxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQQ0K" download="extract_0001.csv">
<button aria-label="There are 2 'fail' rows available as a CSV file." data-balloon-pos="left" style="background-color:#67C2DC;color:#FFFFFF;border:none;padding:5px;font-weight:bold;cursor:pointer;border-radius:4px;">
CSV
</button>
</a></td>
</tr>
<tr class="even">
<td class="gt_row gt_left" headers="status_color" style="background-color: #CF142B; height: 40px"><br>
</td>
<td class="gt_row gt_right" headers="i" style="color: #666666; font-size: 13px; font-weight: bold; height: 40px">2</td>
<td class="gt_row gt_left" headers="type" style="height: 40px"><div aria-label="Expect that values in `VAL_AGE_TRAVELER` should be >= `0`. " data-balloon-pos="right" style="width:fit-content;">
<div style="margin:0;padding:0;display:inline-block;height:30px;vertical-align:middle;">
<svg width="30px" height="30px" viewbox="0 0 67 67" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
<title>
col_vals_gte
</title>
<g id="All-Icons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="col_vals_gte" transform="translate(0.000000, 0.241379)"> <path d="M56.712234,1 C59.1975153,1 61.4475153,2.00735931 63.076195,3.63603897 C64.7048747,5.26471863 65.712234,7.51471863 65.712234,10 L65.712234,10 L65.712234,65 L10.712234,65 C8.22695259,65 5.97695259,63.9926407 4.34827294,62.363961 C2.71959328,60.7352814 1.71223397,58.4852814 1.71223397,56 L1.71223397,56 L1.71223397,10 C1.71223397,7.51471863 2.71959328,5.26471863 4.34827294,3.63603897 C5.97695259,2.00735931 8.22695259,1 10.712234,1 L10.712234,1 Z" id="rectangle" stroke="#000000" stroke-width="2" fill="#FFFFFF"></path> <path d="M49.712234,12 L17.712234,12 C14.952234,12 12.712234,14.24 12.712234,17 L12.712234,49 C12.712234,51.76 14.952234,54 17.712234,54 L49.712234,54 C52.472234,54 54.712234,51.76 54.712234,49 L54.712234,17 C54.712234,14.24 52.472234,12 49.712234,12 Z M44.712234,47 L22.712234,47 L22.712234,45 L44.712234,45 L44.712234,47 Z M24.182234,40.88 L23.242234,39.12 L40.562234,30 L23.242234,20.88 L24.182234,19.12 L44.862234,30 L24.182234,40.88 Z" id="greater_than_equal" fill="#000000" fill-rule="nonzero"></path> </g> </g>
</svg>
</div>
<code style="font-size:11px;">&nbsp;col_vals_gte()</code>
</div></td>
<td class="gt_row gt_left" headers="columns" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; height: 40px"><div aria-label="VAL_AGE_TRAVELER" data-balloon-pos="left">
<p><span style="color:purple;"><code>▮</code></span><code>VAL_AGE_TRAVELER</code></p>
</div></td>
<td class="gt_row gt_left" headers="values" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; height: 40px"><div aria-label="0" data-balloon-pos="left">
<p><code>0</code></p>
</div></td>
<td class="gt_row gt_center" headers="precon" style="border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; background-color: #FCFCFC; height: 40px"><span style="background:transparent;padding:0;color:#333333;vertical-align:middle;font-size:10px;border:none;border-radius:4px;" aria-label="No modifications of the table." data-balloon-pos="left">
<svg width="25px" height="25px" viewbox="0 0 25 25" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="vertical-align: middle;">
<g id="unchanged" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="unchanged" transform="translate(0.500000, 0.570147)"> <rect id="Rectangle" x="0.125132506" y="0" width="23.749735" height="23.7894737"></rect> <path d="M5.80375046,8.18194736 C3.77191832,8.18194736 2.11875046,9.83495328 2.11875046,11.8669474 C2.11875046,13.8989414 3.77191832,15.5519474 5.80375046,15.5519474 C7.8355826,15.5519474 9.48875046,13.8989414 9.48875046,11.8669474 C9.48875046,9.83495328 7.83552863,8.18194736 5.80375046,8.18194736 Z M5.80375046,14.814915 C4.17821997,14.814915 2.85578285,13.4924778 2.85578285,11.8669474 C2.85578285,10.2414169 4.17821997,8.91897975 5.80375046,8.91897975 C7.42928095,8.91897975 8.75171807,10.2414169 8.75171807,11.8669474 C8.75171807,13.4924778 7.42928095,14.814915 5.80375046,14.814915 Z" id="Shape" fill="#000000" fill-rule="nonzero"></path> <path d="M13.9638189,8.699335 C13.9364621,8.70430925 13.9091059,8.71176968 13.8842359,8.71923074 C13.7822704,8.73663967 13.6877654,8.77643115 13.6056956,8.83860518 L10.2433156,11.3852598 C10.0766886,11.5046343 9.97720993,11.6986181 9.97720993,11.9025491 C9.97720993,12.1064807 10.0766886,12.3004639 10.2433156,12.4198383 L13.6056956,14.966493 C13.891697,15.1803725 14.2970729,15.1231721 14.5109517,14.8371707 C14.7248313,14.5511692 14.6676309,14.145794 14.3816294,13.9319145 L12.5313257,12.5392127 L21.8812495,12.5392127 L21.8812495,11.2658854 L12.5313257,11.2658854 L14.3816294,9.87318364 C14.6377872,9.71650453 14.7497006,9.40066014 14.6477351,9.11714553 C14.5482564,8.83363156 14.262255,8.65954352 13.9638189,8.699335 Z" id="arrow" fill="#000000" transform="translate(15.929230, 11.894737) rotate(-180.000000) translate(-15.929230, -11.894737) "></path> </g> </g>
</svg>
</span></td>
<td class="gt_row gt_center" headers="eval_sym" style="border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; background-color: #FCFCFC; height: 40px"><span style="background:transparent;padding:5px;color:#4CA64C;vertical-align:middle;font-size:15px;border:none;" aria-label="No evaluation issues." data-balloon-pos="left">✓</span></td>
<td class="gt_row gt_right" headers="units" style="font-size: 11px; height: 40px"><code>139</code></td>
<td class="gt_row gt_right" headers="n_pass" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; font-size: 11px; height: 40px"><code>137</code><br>
<code>0.98561</code></td>
<td class="gt_row gt_right" headers="n_fail" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; font-size: 11px; height: 40px"><code>2</code><br>
<code>0.01439</code></td>
<td class="gt_row gt_center" headers="W" style="border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; background-color: #FCFCFC; height: 40px">—</td>
<td class="gt_row gt_center" headers="S" style="background-color: #FCFCFC; height: 40px"><span style="color: #CF142B;">●</span></td>
<td class="gt_row gt_center" headers="N" style="border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; background-color: #FCFCFC; height: 40px">—</td>
<td class="gt_row gt_center" headers="extract" style="height: 40px"><a href="data:text/csv;base64,IklEX1RSSVAiLCJDQVRfREVTVElOQVRJT05fQ0lUWSIsIkRUX1NUQVJUIiwiRFRfRU5EIiwiTl9EVVJBVElPTl9EQVkiLCJDQVRfVFJBVkVMRVJfTkFNRSIsIlZBTF9BR0VfVFJBVkVMRVIiLCJJTkRfR0VOREVSX1RSQVZFTEVSIiwiQ0FUX1RSQVZFTEVSX05BVElPTkFMSVRZIiwiQ0FUX0FDQ09NTU9EQVRJT05fVFlQRSIsIkFNVF9BQ0NPTU1PREFUSU9OX0NPU1QiLCJDQVRfVFJBTlNQT1JUQVRJT05fVFlQRSIsIkFNVF9UUkFOU1BPUlRBVElPTl9DT1NUIg0KNzIsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkENCjEyOCxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQQ0K" download="extract_0002.csv">
<button aria-label="There are 2 'fail' rows available as a CSV file." data-balloon-pos="left" style="background-color:#67C2DC;color:#FFFFFF;border:none;padding:5px;font-weight:bold;cursor:pointer;border-radius:4px;">
CSV
</button>
</a></td>
</tr>
<tr class="odd">
<td class="gt_row gt_left" headers="status_color" style="background-color: #CF142B; height: 40px"><br>
</td>
<td class="gt_row gt_right" headers="i" style="color: #666666; font-size: 13px; font-weight: bold; height: 40px">3</td>
<td class="gt_row gt_left" headers="type" style="height: 40px"><div aria-label="Expect that all values in `IND_GENDER_TRAVELER` should not be NULL. " data-balloon-pos="right" style="width:fit-content;">
<div style="margin:0;padding:0;display:inline-block;height:30px;vertical-align:middle;">
<svg width="30px" height="30px" viewbox="0 0 67 67" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
<title>
col_vals_not_null
</title>
<g id="All-Icons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="col_vals_not_null" transform="translate(0.000000, 0.551724)"> <path d="M56.712234,1 C59.1975153,1 61.4475153,2.00735931 63.076195,3.63603897 C64.7048747,5.26471863 65.712234,7.51471863 65.712234,10 L65.712234,10 L65.712234,65 L10.712234,65 C8.22695259,65 5.97695259,63.9926407 4.34827294,62.363961 C2.71959328,60.7352814 1.71223397,58.4852814 1.71223397,56 L1.71223397,56 L1.71223397,10 C1.71223397,7.51471863 2.71959328,5.26471863 4.34827294,3.63603897 C5.97695259,2.00735931 8.22695259,1 10.712234,1 L10.712234,1 Z" id="rectangle" stroke="#000000" stroke-width="2" fill="#FFFFFF"></path> <path d="M40.6120805,47.037834 C37.4692348,47.037834 35.0126139,45.9348613 33.712234,44.0140597 C32.4118541,45.9348613 29.9552331,47.037834 26.8123883,47.037834 C22.6574397,47.037834 16.0646712,43.4437723 16.0646712,33.8021619 C16.0646712,29.3401361 17.4715879,18.962166 30.5035862,18.962166 C30.9454018,18.962166 31.3057481,19.3225124 31.3057481,19.7643279 L31.3057481,21.3686518 C31.3057481,21.8104674 30.9454018,22.1708138 30.5035862,22.1708138 C26.6400486,22.1708138 22.4819668,25.8118774 22.4819668,33.8021619 C22.4819668,37.5090277 23.7635456,43.0270243 27.2949384,43.0270243 C29.795428,43.0270243 31.224279,40.4231312 32.0985095,38.2861221 C30.5067194,35.6101596 29.7014243,33.1034035 29.7014243,30.8347892 C29.7014243,25.6238707 31.8603677,23.7751377 33.712234,23.7751377 C35.5641002,23.7751377 37.7230437,25.6238707 37.7230437,30.8347892 C37.7230437,33.1347383 36.9396828,35.5788255 35.3290916,38.2861221 C36.6294715,41.4321009 38.243196,43.0270243 40.1295295,43.0270243 C43.6609223,43.0270243 44.9425012,37.5090277 44.9425012,33.8021619 C44.9425012,25.8118774 40.7844193,22.1708138 36.9208817,22.1708138 C36.4759329,22.1708138 36.1187198,21.8104674 36.1187198,21.3686518 L36.1187198,19.7643279 C36.1187198,19.3225124 36.4759329,18.962166 36.9208817,18.962166 C49.9528801,18.962166 51.3597967,29.3401361 51.3597967,33.8021619 C51.3597967,43.4437723 44.7670282,47.037834 40.6120805,47.037834 Z" id="omega" fill="#000000" fill-rule="nonzero"></path> <path d="M33,7.93597705 C33.2761424,7.93597705 33.5,8.15983467 33.5,8.43597705 L33.5,57.564023 C33.5,57.8401653 33.2761424,58.064023 33,58.064023 C32.7238576,58.064023 32.5,57.8401653 32.5,57.564023 L32.5,8.43597705 C32.5,8.15983467 32.7238576,7.93597705 33,7.93597705 Z" id="line_black" fill="#000000" transform="translate(33.000000, 33.000000) rotate(-320.000000) translate(-33.000000, -33.000000) "></path> <polygon id="line_white" fill="#FFFFFF" transform="translate(34.899496, 32.153303) rotate(-320.000000) translate(-34.899496, -32.153303) " points="34.3994962 8.54160469 35.3994962 8.54160469 35.3994962 55.7650019 34.3994962 55.7650019"></polygon> </g> </g>
</svg>
</div>
<code style="font-size:10px;">&nbsp;col_vals_not_null()</code>
</div></td>
<td class="gt_row gt_left" headers="columns" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; height: 40px"><div aria-label="IND_GENDER_TRAVELER" data-balloon-pos="left">
<p><span style="color:purple;"><code>▮</code></span><code>IND_GENDER_TRAVELER</code></p>
</div></td>
<td class="gt_row gt_left" headers="values" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; height: 40px">—</td>
<td class="gt_row gt_center" headers="precon" style="border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; background-color: #FCFCFC; height: 40px"><span style="background:transparent;padding:0;color:#333333;vertical-align:middle;font-size:10px;border:none;border-radius:4px;" aria-label="No modifications of the table." data-balloon-pos="left">
<svg width="25px" height="25px" viewbox="0 0 25 25" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="vertical-align: middle;">
<g id="unchanged" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="unchanged" transform="translate(0.500000, 0.570147)"> <rect id="Rectangle" x="0.125132506" y="0" width="23.749735" height="23.7894737"></rect> <path d="M5.80375046,8.18194736 C3.77191832,8.18194736 2.11875046,9.83495328 2.11875046,11.8669474 C2.11875046,13.8989414 3.77191832,15.5519474 5.80375046,15.5519474 C7.8355826,15.5519474 9.48875046,13.8989414 9.48875046,11.8669474 C9.48875046,9.83495328 7.83552863,8.18194736 5.80375046,8.18194736 Z M5.80375046,14.814915 C4.17821997,14.814915 2.85578285,13.4924778 2.85578285,11.8669474 C2.85578285,10.2414169 4.17821997,8.91897975 5.80375046,8.91897975 C7.42928095,8.91897975 8.75171807,10.2414169 8.75171807,11.8669474 C8.75171807,13.4924778 7.42928095,14.814915 5.80375046,14.814915 Z" id="Shape" fill="#000000" fill-rule="nonzero"></path> <path d="M13.9638189,8.699335 C13.9364621,8.70430925 13.9091059,8.71176968 13.8842359,8.71923074 C13.7822704,8.73663967 13.6877654,8.77643115 13.6056956,8.83860518 L10.2433156,11.3852598 C10.0766886,11.5046343 9.97720993,11.6986181 9.97720993,11.9025491 C9.97720993,12.1064807 10.0766886,12.3004639 10.2433156,12.4198383 L13.6056956,14.966493 C13.891697,15.1803725 14.2970729,15.1231721 14.5109517,14.8371707 C14.7248313,14.5511692 14.6676309,14.145794 14.3816294,13.9319145 L12.5313257,12.5392127 L21.8812495,12.5392127 L21.8812495,11.2658854 L12.5313257,11.2658854 L14.3816294,9.87318364 C14.6377872,9.71650453 14.7497006,9.40066014 14.6477351,9.11714553 C14.5482564,8.83363156 14.262255,8.65954352 13.9638189,8.699335 Z" id="arrow" fill="#000000" transform="translate(15.929230, 11.894737) rotate(-180.000000) translate(-15.929230, -11.894737) "></path> </g> </g>
</svg>
</span></td>
<td class="gt_row gt_center" headers="eval_sym" style="border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; background-color: #FCFCFC; height: 40px"><span style="background:transparent;padding:5px;color:#4CA64C;vertical-align:middle;font-size:15px;border:none;" aria-label="No evaluation issues." data-balloon-pos="left">✓</span></td>
<td class="gt_row gt_right" headers="units" style="font-size: 11px; height: 40px"><code>139</code></td>
<td class="gt_row gt_right" headers="n_pass" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; font-size: 11px; height: 40px"><code>137</code><br>
<code>0.98561</code></td>
<td class="gt_row gt_right" headers="n_fail" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; font-size: 11px; height: 40px"><code>2</code><br>
<code>0.01439</code></td>
<td class="gt_row gt_center" headers="W" style="border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; background-color: #FCFCFC; height: 40px">—</td>
<td class="gt_row gt_center" headers="S" style="background-color: #FCFCFC; height: 40px"><span style="color: #CF142B;">●</span></td>
<td class="gt_row gt_center" headers="N" style="border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; background-color: #FCFCFC; height: 40px">—</td>
<td class="gt_row gt_center" headers="extract" style="height: 40px"><a href="data:text/csv;base64,IklEX1RSSVAiLCJDQVRfREVTVElOQVRJT05fQ0lUWSIsIkRUX1NUQVJUIiwiRFRfRU5EIiwiTl9EVVJBVElPTl9EQVkiLCJDQVRfVFJBVkVMRVJfTkFNRSIsIlZBTF9BR0VfVFJBVkVMRVIiLCJJTkRfR0VOREVSX1RSQVZFTEVSIiwiQ0FUX1RSQVZFTEVSX05BVElPTkFMSVRZIiwiQ0FUX0FDQ09NTU9EQVRJT05fVFlQRSIsIkFNVF9BQ0NPTU1PREFUSU9OX0NPU1QiLCJDQVRfVFJBTlNQT1JUQVRJT05fVFlQRSIsIkFNVF9UUkFOU1BPUlRBVElPTl9DT1NUIg0KNzIsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkENCjEyOCxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQQ0K" download="extract_0003.csv">
<button aria-label="There are 2 'fail' rows available as a CSV file." data-balloon-pos="left" style="background-color:#67C2DC;color:#FFFFFF;border:none;padding:5px;font-weight:bold;cursor:pointer;border-radius:4px;">
CSV
</button>
</a></td>
</tr>
<tr class="even">
<td class="gt_row gt_left" headers="status_color" style="background-color: #CF142B; height: 40px"><br>
</td>
<td class="gt_row gt_right" headers="i" style="color: #666666; font-size: 13px; font-weight: bold; height: 40px">4</td>
<td class="gt_row gt_left" headers="type" style="height: 40px"><div aria-label="Expect that values in `IND_GENDER_TRAVELER` should be in the set of `Male`, `Female`. " data-balloon-pos="right" style="width:fit-content;">
<div style="margin:0;padding:0;display:inline-block;height:30px;vertical-align:middle;">
<svg width="30px" height="30px" viewbox="0 0 67 67" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
<title>
col_vals_in_set
</title>
<g id="All-Icons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="col_vals_in_set" transform="translate(0.000000, 0.172414)"> <path d="M56.712234,1 C59.1975153,1 61.4475153,2.00735931 63.076195,3.63603897 C64.7048747,5.26471863 65.712234,7.51471863 65.712234,10 L65.712234,10 L65.712234,65 L10.712234,65 C8.22695259,65 5.97695259,63.9926407 4.34827294,62.363961 C2.71959328,60.7352814 1.71223397,58.4852814 1.71223397,56 L1.71223397,56 L1.71223397,10 C1.71223397,7.51471863 2.71959328,5.26471863 4.34827294,3.63603897 C5.97695259,2.00735931 8.22695259,1 10.712234,1 L10.712234,1 Z" id="rectangle" stroke="#000000" stroke-width="2" fill="#FFFFFF"></path> <path d="M44.127969,41.1538382 L31.0814568,41.1538382 C29.9510748,41.1536429 28.8827052,40.9256134 27.9079888,40.5136953 C26.4467442,39.8960136 25.19849,38.8599685 24.3189894,37.5577099 C23.8792391,36.906727 23.5314818,36.1899233 23.2936866,35.4252675 C23.2130217,35.16589 23.1460289,34.9005554 23.0913409,34.6307286 L44.1278714,34.6307286 C45.028466,34.6306309 45.7586488,33.9004481 45.7586488,32.9998535 C45.7586488,32.0992589 45.028466,31.3690761 44.1278714,31.3690761 L23.0905596,31.3690761 C23.1990567,30.8337194 23.3597028,30.3180894 23.5675173,29.8264831 C24.185199,28.3652386 25.2212442,27.1169844 26.5236004,26.2374838 C27.1745833,25.7977334 27.891387,25.4499762 28.6560428,25.2122786 C29.4208939,24.9744833 30.2334994,24.8459665 31.0813591,24.8459665 L44.1277737,24.8459665 C45.0283683,24.8459665 45.7586488,24.1157837 45.7586488,23.2151891 C45.7586488,22.3145945 45.0283683,21.5844117 44.1277737,21.5844117 L31.0813591,21.5844117 C29.5096643,21.5844117 28.0039858,21.9038483 26.6373711,22.4820765 C24.5866678,23.3498583 22.8469049,24.7950871 21.6163267,26.616296 C20.3856508,28.4362354 19.665136,30.6413347 19.6658191,33.0000488 C19.6658191,34.5717436 19.9852563,36.0774222 20.5635822,37.4440369 C21.4312663,39.4947402 22.8765927,41.2345031 24.697704,42.4650813 C26.5176434,43.6957572 28.7227427,44.4155883 31.0814568,44.4155883 L44.1278714,44.4155883 C45.028466,44.4155883 45.7586488,43.6854055 45.7586488,42.7848109 C45.7586488,41.8842163 45.0285636,41.1538382 44.127969,41.1538382 Z" id="set_of" fill="#000000" fill-rule="nonzero"></path> </g> </g>
</svg>
</div>
<code style="font-size:11px;">&nbsp;col_vals_in_set()</code>
</div></td>
<td class="gt_row gt_left" headers="columns" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; height: 40px"><div aria-label="IND_GENDER_TRAVELER" data-balloon-pos="left">
<p><span style="color:purple;"><code>▮</code></span><code>IND_GENDER_TRAVELER</code></p>
</div></td>
<td class="gt_row gt_left" headers="values" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; height: 40px"><div aria-label="Male, Female" data-balloon-pos="left">
<p><code>Male, Female</code></p>
</div></td>
<td class="gt_row gt_center" headers="precon" style="border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; background-color: #FCFCFC; height: 40px"><span style="background:transparent;padding:0;color:#333333;vertical-align:middle;font-size:10px;border:none;border-radius:4px;" aria-label="No modifications of the table." data-balloon-pos="left">
<svg width="25px" height="25px" viewbox="0 0 25 25" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="vertical-align: middle;">
<g id="unchanged" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="unchanged" transform="translate(0.500000, 0.570147)"> <rect id="Rectangle" x="0.125132506" y="0" width="23.749735" height="23.7894737"></rect> <path d="M5.80375046,8.18194736 C3.77191832,8.18194736 2.11875046,9.83495328 2.11875046,11.8669474 C2.11875046,13.8989414 3.77191832,15.5519474 5.80375046,15.5519474 C7.8355826,15.5519474 9.48875046,13.8989414 9.48875046,11.8669474 C9.48875046,9.83495328 7.83552863,8.18194736 5.80375046,8.18194736 Z M5.80375046,14.814915 C4.17821997,14.814915 2.85578285,13.4924778 2.85578285,11.8669474 C2.85578285,10.2414169 4.17821997,8.91897975 5.80375046,8.91897975 C7.42928095,8.91897975 8.75171807,10.2414169 8.75171807,11.8669474 C8.75171807,13.4924778 7.42928095,14.814915 5.80375046,14.814915 Z" id="Shape" fill="#000000" fill-rule="nonzero"></path> <path d="M13.9638189,8.699335 C13.9364621,8.70430925 13.9091059,8.71176968 13.8842359,8.71923074 C13.7822704,8.73663967 13.6877654,8.77643115 13.6056956,8.83860518 L10.2433156,11.3852598 C10.0766886,11.5046343 9.97720993,11.6986181 9.97720993,11.9025491 C9.97720993,12.1064807 10.0766886,12.3004639 10.2433156,12.4198383 L13.6056956,14.966493 C13.891697,15.1803725 14.2970729,15.1231721 14.5109517,14.8371707 C14.7248313,14.5511692 14.6676309,14.145794 14.3816294,13.9319145 L12.5313257,12.5392127 L21.8812495,12.5392127 L21.8812495,11.2658854 L12.5313257,11.2658854 L14.3816294,9.87318364 C14.6377872,9.71650453 14.7497006,9.40066014 14.6477351,9.11714553 C14.5482564,8.83363156 14.262255,8.65954352 13.9638189,8.699335 Z" id="arrow" fill="#000000" transform="translate(15.929230, 11.894737) rotate(-180.000000) translate(-15.929230, -11.894737) "></path> </g> </g>
</svg>
</span></td>
<td class="gt_row gt_center" headers="eval_sym" style="border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; background-color: #FCFCFC; height: 40px"><span style="background:transparent;padding:5px;color:#4CA64C;vertical-align:middle;font-size:15px;border:none;" aria-label="No evaluation issues." data-balloon-pos="left">✓</span></td>
<td class="gt_row gt_right" headers="units" style="font-size: 11px; height: 40px"><code>139</code></td>
<td class="gt_row gt_right" headers="n_pass" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; font-size: 11px; height: 40px"><code>137</code><br>
<code>0.98561</code></td>
<td class="gt_row gt_right" headers="n_fail" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; font-size: 11px; height: 40px"><code>2</code><br>
<code>0.01439</code></td>
<td class="gt_row gt_center" headers="W" style="border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; background-color: #FCFCFC; height: 40px">—</td>
<td class="gt_row gt_center" headers="S" style="background-color: #FCFCFC; height: 40px"><span style="color: #CF142B;">●</span></td>
<td class="gt_row gt_center" headers="N" style="border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; background-color: #FCFCFC; height: 40px">—</td>
<td class="gt_row gt_center" headers="extract" style="height: 40px"><a href="data:text/csv;base64,IklEX1RSSVAiLCJDQVRfREVTVElOQVRJT05fQ0lUWSIsIkRUX1NUQVJUIiwiRFRfRU5EIiwiTl9EVVJBVElPTl9EQVkiLCJDQVRfVFJBVkVMRVJfTkFNRSIsIlZBTF9BR0VfVFJBVkVMRVIiLCJJTkRfR0VOREVSX1RSQVZFTEVSIiwiQ0FUX1RSQVZFTEVSX05BVElPTkFMSVRZIiwiQ0FUX0FDQ09NTU9EQVRJT05fVFlQRSIsIkFNVF9BQ0NPTU1PREFUSU9OX0NPU1QiLCJDQVRfVFJBTlNQT1JUQVRJT05fVFlQRSIsIkFNVF9UUkFOU1BPUlRBVElPTl9DT1NUIg0KNzIsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkEsTkENCjEyOCxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQSxOQQ0K" download="extract_0004.csv">
<button aria-label="There are 2 'fail' rows available as a CSV file." data-balloon-pos="left" style="background-color:#67C2DC;color:#FFFFFF;border:none;padding:5px;font-weight:bold;cursor:pointer;border-radius:4px;">
CSV
</button>
</a></td>
</tr>
<tr class="odd">
<td class="gt_row gt_left" headers="status_color" style="background-color: #CF142B; height: 40px"><br>
</td>
<td class="gt_row gt_right" headers="i" style="color: #666666; font-size: 13px; font-weight: bold; height: 40px">5</td>
<td class="gt_row gt_left" headers="type" style="height: 40px"><div aria-label="Expect that column `DT_START` is of type: Date. " data-balloon-pos="right" style="width:fit-content;">
<div style="margin:0;padding:0;display:inline-block;height:30px;vertical-align:middle;">
<svg width="30px" height="30px" viewbox="0 0 67 67" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
<title>
col_is_date
</title>
<g id="All-Icons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="col_is_date" transform="translate(0.000000, 0.379310)"> <path d="M56.712234,1.01466935 C59.1975153,1.01466935 61.4475153,2.02202867 63.076195,3.65070832 C64.7048747,5.27938798 65.712234,7.52938798 65.712234,10.0146694 L65.712234,10.0146694 L65.712234,65.0146694 L10.712234,65.0146694 C8.22695259,65.0146694 5.97695259,64.00731 4.34827294,62.3786304 C2.71959328,60.7499507 1.71223397,58.4999507 1.71223397,56.0146694 L1.71223397,56.0146694 L1.71223397,10.0146694 C1.71223397,7.52938798 2.71959328,5.27938798 4.34827294,3.65070832 C5.97695259,2.02202867 8.22695259,1.01466935 10.712234,1.01466935 L10.712234,1.01466935 Z" id="rectangle" stroke="#000000" stroke-width="2" fill="#FFFFFF"></path> <rect id="column" fill="#000000" x="12.2117153" y="12.0146694" width="20" height="42" rx="1"></rect> <path d="M40.7190873,43.0146694 L40.7190873,24.2256069 L46.9651811,24.2256069 C48.8271696,24.2256069 50.3315491,24.4329616 51.4783647,24.8476772 C52.6251803,25.2623928 53.6175206,25.9648597 54.4554155,26.955099 C55.7841981,28.5293257 56.4485795,30.6028726 56.4485795,33.1758022 C56.4485795,36.2988647 55.6233925,38.7194134 53.9729936,40.4375209 C52.3225947,42.1556285 49.9993758,43.0146694 47.003267,43.0146694 L40.7190873,43.0146694 Z M43.385103,41.0215053 L46.800142,41.0215053 C49.2376542,41.0215053 50.9641994,40.3655874 51.9798295,39.0537319 C53.0716319,37.6572405 53.6175248,35.7825848 53.6175248,33.4297084 C53.6175248,31.220713 53.0800953,29.4857043 52.0052202,28.2246303 C51.3535242,27.4544441 50.5748861,26.9275939 49.6692827,26.6440639 C48.7636792,26.3605338 47.4010626,26.2187709 45.581392,26.2187709 L43.385103,26.2187709 L43.385103,41.0215053 Z" id="D" fill="#000000"></path> </g> </g>
</svg>
</div>
<code style="font-size:11px;">&nbsp;col_is_date()</code>
</div></td>
<td class="gt_row gt_left" headers="columns" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; height: 40px"><div aria-label="DT_START" data-balloon-pos="left">
<p><span style="color:purple;"><code>▮</code></span><code>DT_START</code></p>
</div></td>
<td class="gt_row gt_left" headers="values" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; height: 40px">—</td>
<td class="gt_row gt_center" headers="precon" style="border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; background-color: #FCFCFC; height: 40px"><span style="background:transparent;padding:0;color:#333333;vertical-align:middle;font-size:10px;border:none;border-radius:4px;" aria-label="No modifications of the table." data-balloon-pos="left">
<svg width="25px" height="25px" viewbox="0 0 25 25" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="vertical-align: middle;">
<g id="unchanged" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="unchanged" transform="translate(0.500000, 0.570147)"> <rect id="Rectangle" x="0.125132506" y="0" width="23.749735" height="23.7894737"></rect> <path d="M5.80375046,8.18194736 C3.77191832,8.18194736 2.11875046,9.83495328 2.11875046,11.8669474 C2.11875046,13.8989414 3.77191832,15.5519474 5.80375046,15.5519474 C7.8355826,15.5519474 9.48875046,13.8989414 9.48875046,11.8669474 C9.48875046,9.83495328 7.83552863,8.18194736 5.80375046,8.18194736 Z M5.80375046,14.814915 C4.17821997,14.814915 2.85578285,13.4924778 2.85578285,11.8669474 C2.85578285,10.2414169 4.17821997,8.91897975 5.80375046,8.91897975 C7.42928095,8.91897975 8.75171807,10.2414169 8.75171807,11.8669474 C8.75171807,13.4924778 7.42928095,14.814915 5.80375046,14.814915 Z" id="Shape" fill="#000000" fill-rule="nonzero"></path> <path d="M13.9638189,8.699335 C13.9364621,8.70430925 13.9091059,8.71176968 13.8842359,8.71923074 C13.7822704,8.73663967 13.6877654,8.77643115 13.6056956,8.83860518 L10.2433156,11.3852598 C10.0766886,11.5046343 9.97720993,11.6986181 9.97720993,11.9025491 C9.97720993,12.1064807 10.0766886,12.3004639 10.2433156,12.4198383 L13.6056956,14.966493 C13.891697,15.1803725 14.2970729,15.1231721 14.5109517,14.8371707 C14.7248313,14.5511692 14.6676309,14.145794 14.3816294,13.9319145 L12.5313257,12.5392127 L21.8812495,12.5392127 L21.8812495,11.2658854 L12.5313257,11.2658854 L14.3816294,9.87318364 C14.6377872,9.71650453 14.7497006,9.40066014 14.6477351,9.11714553 C14.5482564,8.83363156 14.262255,8.65954352 13.9638189,8.699335 Z" id="arrow" fill="#000000" transform="translate(15.929230, 11.894737) rotate(-180.000000) translate(-15.929230, -11.894737) "></path> </g> </g>
</svg>
</span></td>
<td class="gt_row gt_center" headers="eval_sym" style="border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; background-color: #FCFCFC; height: 40px"><span style="background:transparent;padding:5px;color:#4CA64C;vertical-align:middle;font-size:15px;border:none;" aria-label="No evaluation issues." data-balloon-pos="left">✓</span></td>
<td class="gt_row gt_right" headers="units" style="font-size: 11px; height: 40px"><code>1</code></td>
<td class="gt_row gt_right" headers="n_pass" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; font-size: 11px; height: 40px"><code>0</code><br>
<code>0</code></td>
<td class="gt_row gt_right" headers="n_fail" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; font-size: 11px; height: 40px"><code>1</code><br>
<code>1</code></td>
<td class="gt_row gt_center" headers="W" style="border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; background-color: #FCFCFC; height: 40px">—</td>
<td class="gt_row gt_center" headers="S" style="background-color: #FCFCFC; height: 40px"><span style="color: #CF142B;">●</span></td>
<td class="gt_row gt_center" headers="N" style="border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; background-color: #FCFCFC; height: 40px">—</td>
<td class="gt_row gt_center" headers="extract" style="height: 40px">—</td>
</tr>
<tr class="even">
<td class="gt_row gt_left" headers="status_color" style="background-color: #CF142B; height: 40px"><br>
</td>
<td class="gt_row gt_right" headers="i" style="color: #666666; font-size: 13px; font-weight: bold; height: 40px">6</td>
<td class="gt_row gt_left" headers="type" style="height: 40px"><div aria-label="Expect that column `DT_END` is of type: Date. " data-balloon-pos="right" style="width:fit-content;">
<div style="margin:0;padding:0;display:inline-block;height:30px;vertical-align:middle;">
<svg width="30px" height="30px" viewbox="0 0 67 67" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
<title>
col_is_date
</title>
<g id="All-Icons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="col_is_date" transform="translate(0.000000, 0.379310)"> <path d="M56.712234,1.01466935 C59.1975153,1.01466935 61.4475153,2.02202867 63.076195,3.65070832 C64.7048747,5.27938798 65.712234,7.52938798 65.712234,10.0146694 L65.712234,10.0146694 L65.712234,65.0146694 L10.712234,65.0146694 C8.22695259,65.0146694 5.97695259,64.00731 4.34827294,62.3786304 C2.71959328,60.7499507 1.71223397,58.4999507 1.71223397,56.0146694 L1.71223397,56.0146694 L1.71223397,10.0146694 C1.71223397,7.52938798 2.71959328,5.27938798 4.34827294,3.65070832 C5.97695259,2.02202867 8.22695259,1.01466935 10.712234,1.01466935 L10.712234,1.01466935 Z" id="rectangle" stroke="#000000" stroke-width="2" fill="#FFFFFF"></path> <rect id="column" fill="#000000" x="12.2117153" y="12.0146694" width="20" height="42" rx="1"></rect> <path d="M40.7190873,43.0146694 L40.7190873,24.2256069 L46.9651811,24.2256069 C48.8271696,24.2256069 50.3315491,24.4329616 51.4783647,24.8476772 C52.6251803,25.2623928 53.6175206,25.9648597 54.4554155,26.955099 C55.7841981,28.5293257 56.4485795,30.6028726 56.4485795,33.1758022 C56.4485795,36.2988647 55.6233925,38.7194134 53.9729936,40.4375209 C52.3225947,42.1556285 49.9993758,43.0146694 47.003267,43.0146694 L40.7190873,43.0146694 Z M43.385103,41.0215053 L46.800142,41.0215053 C49.2376542,41.0215053 50.9641994,40.3655874 51.9798295,39.0537319 C53.0716319,37.6572405 53.6175248,35.7825848 53.6175248,33.4297084 C53.6175248,31.220713 53.0800953,29.4857043 52.0052202,28.2246303 C51.3535242,27.4544441 50.5748861,26.9275939 49.6692827,26.6440639 C48.7636792,26.3605338 47.4010626,26.2187709 45.581392,26.2187709 L43.385103,26.2187709 L43.385103,41.0215053 Z" id="D" fill="#000000"></path> </g> </g>
</svg>
</div>
<code style="font-size:11px;">&nbsp;col_is_date()</code>
</div></td>
<td class="gt_row gt_left" headers="columns" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; height: 40px"><div aria-label="DT_END" data-balloon-pos="left">
<p><span style="color:purple;"><code>▮</code></span><code>DT_END</code></p>
</div></td>
<td class="gt_row gt_left" headers="values" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; height: 40px">—</td>
<td class="gt_row gt_center" headers="precon" style="border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; background-color: #FCFCFC; height: 40px"><span style="background:transparent;padding:0;color:#333333;vertical-align:middle;font-size:10px;border:none;border-radius:4px;" aria-label="No modifications of the table." data-balloon-pos="left">
<svg width="25px" height="25px" viewbox="0 0 25 25" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="vertical-align: middle;">
<g id="unchanged" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="unchanged" transform="translate(0.500000, 0.570147)"> <rect id="Rectangle" x="0.125132506" y="0" width="23.749735" height="23.7894737"></rect> <path d="M5.80375046,8.18194736 C3.77191832,8.18194736 2.11875046,9.83495328 2.11875046,11.8669474 C2.11875046,13.8989414 3.77191832,15.5519474 5.80375046,15.5519474 C7.8355826,15.5519474 9.48875046,13.8989414 9.48875046,11.8669474 C9.48875046,9.83495328 7.83552863,8.18194736 5.80375046,8.18194736 Z M5.80375046,14.814915 C4.17821997,14.814915 2.85578285,13.4924778 2.85578285,11.8669474 C2.85578285,10.2414169 4.17821997,8.91897975 5.80375046,8.91897975 C7.42928095,8.91897975 8.75171807,10.2414169 8.75171807,11.8669474 C8.75171807,13.4924778 7.42928095,14.814915 5.80375046,14.814915 Z" id="Shape" fill="#000000" fill-rule="nonzero"></path> <path d="M13.9638189,8.699335 C13.9364621,8.70430925 13.9091059,8.71176968 13.8842359,8.71923074 C13.7822704,8.73663967 13.6877654,8.77643115 13.6056956,8.83860518 L10.2433156,11.3852598 C10.0766886,11.5046343 9.97720993,11.6986181 9.97720993,11.9025491 C9.97720993,12.1064807 10.0766886,12.3004639 10.2433156,12.4198383 L13.6056956,14.966493 C13.891697,15.1803725 14.2970729,15.1231721 14.5109517,14.8371707 C14.7248313,14.5511692 14.6676309,14.145794 14.3816294,13.9319145 L12.5313257,12.5392127 L21.8812495,12.5392127 L21.8812495,11.2658854 L12.5313257,11.2658854 L14.3816294,9.87318364 C14.6377872,9.71650453 14.7497006,9.40066014 14.6477351,9.11714553 C14.5482564,8.83363156 14.262255,8.65954352 13.9638189,8.699335 Z" id="arrow" fill="#000000" transform="translate(15.929230, 11.894737) rotate(-180.000000) translate(-15.929230, -11.894737) "></path> </g> </g>
</svg>
</span></td>
<td class="gt_row gt_center" headers="eval_sym" style="border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; background-color: #FCFCFC; height: 40px"><span style="background:transparent;padding:5px;color:#4CA64C;vertical-align:middle;font-size:15px;border:none;" aria-label="No evaluation issues." data-balloon-pos="left">✓</span></td>
<td class="gt_row gt_right" headers="units" style="font-size: 11px; height: 40px"><code>1</code></td>
<td class="gt_row gt_right" headers="n_pass" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; font-size: 11px; height: 40px"><code>0</code><br>
<code>0</code></td>
<td class="gt_row gt_right" headers="n_fail" style="border-left-width: 1px; border-left-style: dashed; border-left-color: #E5E5E5; font-size: 11px; height: 40px"><code>1</code><br>
<code>1</code></td>
<td class="gt_row gt_center" headers="W" style="border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; background-color: #FCFCFC; height: 40px">—</td>
<td class="gt_row gt_center" headers="S" style="background-color: #FCFCFC; height: 40px"><span style="color: #CF142B;">●</span></td>
<td class="gt_row gt_center" headers="N" style="border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; background-color: #FCFCFC; height: 40px">—</td>
<td class="gt_row gt_center" headers="extract" style="height: 40px">—</td>
</tr>
</tbody><tfoot class="gt_sourcenotes">
<tr class="odd">
<td colspan="14" class="gt_sourcenote"><span style="background-color:#FFF;color:#444;padding:0.5em 0.5em;position:inherit;text-transform:uppercase;margin-left:10px;border:solid 1px #999999;font-variant-numeric:tabular-nums;border-radius:0;padding:2px 10px 2px 10px;padding:2px 10px 2px 10px;">2024-07-04 09:52:39 +07</span> <span style="background-color:#FFF;color:#444;padding:0.5em 0.5em;position:inherit;margin:5px 1px 5px 0;border:solid 1px #999999;font-variant-numeric:tabular-nums;border-radius:0;padding:2px 10px 2px 10px;">&lt; 1 s</span> <span style="background-color:#FFF;color:#444;padding:0.5em 0.5em;position:inherit;text-transform:uppercase;margin:5px 1px 5px -1px;border:solid 1px #999999;font-variant-numeric:tabular-nums;border-radius:0;padding:2px 10px 2px 10px;">2024-07-04 09:52:39 +07</span></td>
</tr>
</tfoot>

</table>

</div>
</div>
</div>
</div>
<p>Cool! Không chỉ kiểm tra được tính đúng đắn của dữ liệu, cũng có thể xác định được biến nào không tuân theo quy tắc đặt tên.</p>
</section>
<section id="data-discoverability" class="level1">
<h1>Data Discoverability</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb6-1">cols_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(trip_data)</span>
<span id="cb6-2">cols_data_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(cols_data,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span>
<span id="cb6-3">cols_components <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">variable =</span> cols_data,</span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(cols_data_split, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb6-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(cols_data_split, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb6-7">)</span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(cols_components)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              variable level1      level2
1              ID_TRIP     ID        TRIP
2 CAT_DESTINATION_CITY    CAT DESTINATION
3             DT_START     DT       START
4               DT_END     DT         END
5       N_DURATION_DAY      N    DURATION
6    CAT_TRAVELER_NAME    CAT    TRAVELER</code></pre>
</div>
</div>
<p>Đây là một cách để xây dựng metadata, chúng ta có thể touch một cách interactive với:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DT)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datatable</span>(cols_components,  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clear =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="datatables html-widget html-fill-item" id="htmlwidget-38da5d6e8848be63810c" style="width:100%;height:auto;"></div>
<script type="application/json" data-for="htmlwidget-38da5d6e8848be63810c">{"x":{"filter":"top","vertical":false,"filterHTML":"<tr>\n  <td><\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n    <\/div>\n  <\/td>\n<\/tr>","data":[["1","2","3","4","5","6","7","8","9","10","11","12","13"],["ID_TRIP","CAT_DESTINATION_CITY","DT_START","DT_END","N_DURATION_DAY","CAT_TRAVELER_NAME","VAL_AGE_TRAVELER","IND_GENDER_TRAVELER","CAT_TRAVELER_NATIONALITY","CAT_ACCOMMODATION_TYPE","AMT_ACCOMMODATION_COST","CAT_TRANSPORTATION_TYPE","AMT_TRANSPORTATION_COST"],["ID","CAT","DT","DT","N","CAT","VAL","IND","CAT","CAT","AMT","CAT","AMT"],["TRIP","DESTINATION","START","END","DURATION","TRAVELER","AGE","GENDER","TRAVELER","ACCOMMODATION","ACCOMMODATION","TRANSPORTATION","TRANSPORTATION"]],"container":"<table class=\"display\">\n  <thead>\n    <tr>\n      <th> <\/th>\n      <th>variable<\/th>\n      <th>level1<\/th>\n      <th>level2<\/th>\n    <\/tr>\n  <\/thead>\n<\/table>","options":{"columnDefs":[{"orderable":false,"targets":0},{"name":" ","targets":0},{"name":"variable","targets":1},{"name":"level1","targets":2},{"name":"level2","targets":3}],"order":[],"autoWidth":false,"orderClasses":false,"orderCellsTop":true}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Cũng có thể visualize thành một tree như bên dưới:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(collapsibleTree)</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collapsibleTree</span>(cols_components, </span>
<span id="cb9-3">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hierarchy =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"level"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb9-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nodeSize =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"leafCount"</span></span>
<span id="cb9-5">                )</span></code></pre></div>
<div class="cell-output-display">
<div class="collapsibleTree html-widget html-fill-item" id="htmlwidget-848b250e5c4166207b6a" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-848b250e5c4166207b6a">{"x":{"data":{"name":"cols_components","SizeOfNode":34.41,"children":[{"name":"ID","SizeOfNode":9.93,"children":[{"name":"TRIP","SizeOfNode":9.93}]},{"name":"CAT","SizeOfNode":19.87,"children":[{"name":"DESTINATION","SizeOfNode":9.93},{"name":"TRAVELER","SizeOfNode":9.93},{"name":"ACCOMMODATION","SizeOfNode":9.93},{"name":"TRANSPORTATION","SizeOfNode":9.93}]},{"name":"DT","SizeOfNode":14.05,"children":[{"name":"START","SizeOfNode":9.93},{"name":"END","SizeOfNode":9.93}]},{"name":"N","SizeOfNode":9.93,"children":[{"name":"DURATION","SizeOfNode":9.93}]},{"name":"VAL","SizeOfNode":9.93,"children":[{"name":"AGE","SizeOfNode":9.93}]},{"name":"IND","SizeOfNode":9.93,"children":[{"name":"GENDER","SizeOfNode":9.93}]},{"name":"AMT","SizeOfNode":14.05,"children":[{"name":"ACCOMMODATION","SizeOfNode":9.93},{"name":"TRANSPORTATION","SizeOfNode":9.93}]}]},"options":{"hierarchy":["level1","level2"],"input":null,"attribute":"leafCount","linkLength":null,"fontSize":10,"tooltip":false,"collapsed":true,"zoomable":true,"margin":{"top":20,"bottom":20,"left":124.41,"right":95},"fill":"lightsteelblue"}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Đây là cách xem từ kiểu dữ liệu -&gt; chủ thể, chúng ta cũng có thể làm ngược lại:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collapsibleTree</span>(cols_components, </span>
<span id="cb10-2">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hierarchy =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"level"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb10-3">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nodeSize =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"leafCount"</span></span>
<span id="cb10-4">                )</span></code></pre></div>
<div class="cell-output-display">
<div class="collapsibleTree html-widget html-fill-item" id="htmlwidget-7e3f955f97ec0b1d8268" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-7e3f955f97ec0b1d8268">{"x":{"data":{"name":"cols_components","SizeOfNode":34.41,"children":[{"name":"TRIP","SizeOfNode":9.93,"children":[{"name":"ID","SizeOfNode":9.93}]},{"name":"DESTINATION","SizeOfNode":9.93,"children":[{"name":"CAT","SizeOfNode":9.93}]},{"name":"START","SizeOfNode":9.93,"children":[{"name":"DT","SizeOfNode":9.93}]},{"name":"END","SizeOfNode":9.93,"children":[{"name":"DT","SizeOfNode":9.93}]},{"name":"DURATION","SizeOfNode":9.93,"children":[{"name":"N","SizeOfNode":9.93}]},{"name":"TRAVELER","SizeOfNode":9.93,"children":[{"name":"CAT","SizeOfNode":9.93}]},{"name":"AGE","SizeOfNode":9.93,"children":[{"name":"VAL","SizeOfNode":9.93}]},{"name":"GENDER","SizeOfNode":9.93,"children":[{"name":"IND","SizeOfNode":9.93}]},{"name":"ACCOMMODATION","SizeOfNode":14.05,"children":[{"name":"CAT","SizeOfNode":9.93},{"name":"AMT","SizeOfNode":9.93}]},{"name":"TRANSPORTATION","SizeOfNode":14.05,"children":[{"name":"CAT","SizeOfNode":9.93},{"name":"AMT","SizeOfNode":9.93}]}]},"options":{"hierarchy":["level2","level1"],"input":null,"attribute":"leafCount","linkLength":null,"fontSize":10,"tooltip":false,"collapsed":true,"zoomable":true,"margin":{"top":20,"bottom":20,"left":124.41,"right":40},"fill":"lightsteelblue"}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Bộ dữ liệu mình sử dụng khá nghèo nàn và tập trung về một chủ thể duy nhất là <code>TRIP</code>, nên khả năng minh họa không được phong phú 😂. Ngoài ra, việc đặt tên như thế cũng giúp ta dễ dàng gọi biến ở IDE.</p>
</section>
<section id="data-wrangling" class="level1">
<h1>Data Wrangling</h1>
<p>Tương tự, với việc sử dụng một bộ từ điển có hệ thống, lớp lang cũng support chúng ta trong việc biến đổi dữ liệu. Ví dụ chúng ta có thể tận dụng “select helpers” trong gói <code>dplyr</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb11-2">trip_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(trip_data)</span>
<span id="cb11-3">trip_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(.))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(CAT_TRAVELER_NATIONALITY) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(</span>
<span id="cb11-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DT_"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(min,max))</span>
<span id="cb11-8">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 42 × 5
   CAT_TRAVELER_NATIONALITY DT_START_1 DT_START_2 DT_END_1   DT_END_2 
   &lt;chr&gt;                    &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;    
 1 American                 1/1/2023   9/15/2022  1/1/2023   9/22/2022
 2 Australian               11/20/2023 9/5/2022   11/30/2023 9/14/2022
 3 Brazil                   4/3/2024   4/3/2024   4/10/2024  4/10/2024
 4 Brazilian                1/15/2024  8/1/2023   1/12/2024  8/10/2023
 5 British                  1/1/2025   8/20/2022  1/15/2023  9/2/2022 
 6 Cambodia                 9/10/2022  9/10/2022  9/15/2022  9/15/2022
 7 Canada                   7/1/2022   9/1/2022   7/10/2022  9/10/2022
 8 Canadian                 1/2/2023   8/15/2023  1/9/2023   8/22/2023
 9 China                    5/8/2023   5/8/2023   5/14/2023  5/14/2023
10 Chinese                  11/11/2022 9/1/2023   11/21/2022 9/8/2023 
# ℹ 32 more rows</code></pre>
</div>
</div>
</section>
<section id="other-languages" class="level1">
<h1>Other languages</h1>
<section id="generating-sql" class="level2">
<h2 class="anchored" data-anchor-id="generating-sql">Generating SQL</h2>
<p>Sử dụng R để generate SQL query</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dbplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dbplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:dplyr':

    ident, sql</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RSQLite)</span>
<span id="cb16-2">df_mem <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">memdb_frame</span>(trip_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example_table"</span>)</span>
<span id="cb16-3"></span>
<span id="cb16-4">df_mem <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(CAT_TRAVELER_NATIONALITY) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize_at</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N_"</span>)), mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_query</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;SQL&gt;
SELECT `CAT_TRAVELER_NATIONALITY`, AVG(`N_DURATION_DAY`) AS `N_DURATION_DAY`
FROM `example_table`
GROUP BY `CAT_TRAVELER_NATIONALITY`</code></pre>
</div>
</div>
</section>
<section id="r---base-data.table" class="level2">
<h2 class="anchored" data-anchor-id="r---base-data.table">R - <code>base</code> &amp; <code>data.table</code></h2>
<p>sử dụng <code>base::grep</code> để tìm tất cả các columns bắt đầu bằng <code>AMT_</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb18-1">cols_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^AMT_"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(trip_data), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(cols_n)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "AMT_ACCOMMODATION_COST"  "AMT_TRANSPORTATION_COST"</code></pre>
</div>
</div>
<p>sử dụng vector để lưu các cột chúng ta muốn group by:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb20-1">cols_grp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CAT_TRAVELER_NATIONALITY"</span>)</span></code></pre></div>
</div>
<p>chúng ta có thể dùng vector này trong <code>stats::aggregate</code></p>
<p>hoặc trong <code>data.table</code></p>
</section>
<section id="python-pandas" class="level2">
<h2 class="anchored" data-anchor-id="python-pandas">python <code>pandas</code></h2>
<p>tương tự trong python, sử dụng list comprehension:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource markdown number-lines code-with-copy"><code class="sourceCode markdown"><span id="cb21-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{python}</span></span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">import pandas as pd</span></span>
<span id="cb21-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">cols_n   = [vbl for vbl in trip_data.columns if vbl[0:2] == 'AMT_']</span></span>
<span id="cb21-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">cols_grp = ["CAT_TRAVELER_NATIONALITY"]</span></span>
<span id="cb21-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">trip_data.groupby(cols_grp)[cols_n].sum()</span></span>
<span id="cb21-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
</section>
</section>
<section id="updates-by-emily" class="level1">
<h1>Updates by Emily</h1>
<section id="concept-map" class="level2">
<h2 class="anchored" data-anchor-id="concept-map">Concept Map</h2>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">%%{init: {'theme':'dark'}}%%
flowchart LR
  A(dataframe)-- has --&gt; B(columns)
  A(dataframe)-- has --&gt; C(names)
  B -- have --&gt; D(data types)
  B -- have --&gt; E(units)
  B -- have --&gt; F(meaning)
  C -- should encode --&gt; D
  C -- should encode --&gt; E
  C -- should encode --&gt; F
  C -- can support --&gt; G(validation)
  C -- explained in --&gt; H(documentation)
  G -- should check consistency of --&gt; C
  G -- should check consistency of --&gt; H
  H --&gt; I(data dictionary)
  H --&gt; K(ERD)
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</section>
<section id="new-package-dec-2020" class="level2">
<h2 class="anchored" data-anchor-id="new-package-dec-2020">New Package (Dec 2020)</h2>
<p><a href="https://emilyriederer.github.io/convo/articles/quickstart-guide.html"><code>convo</code></a> là một thư viện released bởi Emily phục vụ cho việc quản lý controlled vocabulary:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(convo)</span></code></pre></div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>vocab.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">level1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb23-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ID</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb23-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Unique identifier</span></span>
<span id="cb23-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">valid</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb23-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> col_vals_not_null()</span></span>
<span id="cb23-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> col_is_numeric()</span></span>
<span id="cb23-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> col_vals_between(1000, 99999)</span></span>
<span id="cb23-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IND</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb23-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Binary indicator</span></span>
<span id="cb23-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">valid</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb23-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> col_is_numeric()</span></span>
<span id="cb23-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> col_vals_in_set(c(0,1))</span></span>
<span id="cb23-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb23-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> SUM</span></span>
<span id="cb23-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N'</span></span>
<span id="cb23-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AVG</span></span>
<span id="cb23-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> P</span></span>
<span id="cb23-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AMT</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb23-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Non-negative, summable quantity</span></span>
<span id="cb23-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">valid</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb23-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> col_is_numeric()</span></span>
<span id="cb23-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> col_vals_gte(0)</span></span>
<span id="cb23-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">VAL</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb23-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Value</span></span>
<span id="cb23-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">valid</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb23-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> col_is_numeric()</span></span>
<span id="cb23-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb23-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">when</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AVG</span></span>
<span id="cb23-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">then</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> VALAV</span></span></code></pre></div>
</div>
</div>
</section>
<section id="new-package-april-2021" class="level2">
<h2 class="anchored" data-anchor-id="new-package-april-2021">New Package (April 2021)</h2>
<p><a href="https://emilyriederer.github.io/dbtplyr/#!/overview"><code>dbtplyr</code></a> là một package port tính năng “select helpers” của <code>dplyr</code> sang <code>dbt</code>.</p>


<!-- -->

</section>
</section>

 ]]></description>
  <category>data quality</category>
  <category>name convention</category>
  <category>controlled vocabulary</category>
  <category>metadata</category>
  <guid>https://lktuan.github.io/blog/2024-06-05-cnac/</guid>
  <pubDate>Tue, 04 Jun 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-06-05-cnac/pepe.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Storytelling with Data: Let’s Practice, Improve this table!</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-05-22-swd-p2-improve-table/</link>
  <description><![CDATA[ 





<section id="motivation" class="level1">
<h1>1. Motivation</h1>
<p>Lấy cảm hứng từ bài <a href="https://rpubs.com/chidungkt/1139405">post</a> của thầy Nguyễn Chí Dũng về việc giải các exercise thuộc Chương 2 cuốn sách <strong>Storytelling with Data: Let’s Practice</strong> của tác giả <a href="https://www.linkedin.com/in/colenussbaumer/">Cole Nussbaumer Knaflic</a> sử dụng R, mình muốn cải thiện 1 bảng biểu nhưng sử dụng Python (trong cuốn sách gốc, tác giả sử dụng Excel để makeover các graph).</p>
<p>Đây là một cuốn sách hay về chủ để visualization, dành cho những người sử dụng biểu đồ nhiều để communicate trong công việc. Cụm từ “storytelling” đang được sử dụng rất nhiều, thậm chí như là một buzzword, một keyword cần có trong CV của mỗi người làm data. Đối với mình, “storytelling” chỉ nên được sử dụng khi bạn đã có sẵn các kết quả phân tích, được thực hiện một cách khoa học, và bạn muốn truyền tải nó tới business unit/management một cách hiệu quả. “Storytelling” nên không bao giờ là động cơ để bạn thực hiện một phân tích (thứ thay vào đó nên là một <strong>câu hỏi</strong>), thiên kiến sẽ ảnh hưởng tới phương pháp thực hiện, và rất dễ nảy sinh ngụy biện khi kết luận. Hãy xem bài viết này của <a href="https://www.linkedin.com/pulse/data-professionals-beware-storytelling-keith-mcnulty/">Keith McNulty</a> và <a href="https://www.linkedin.com/posts/keith-mcnulty_my-most-hated-word-in-data-science-activity-7017097392759918592-2Atc/">discussion</a> trên Linked In.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-05-22-swd-p2-improve-table/swd_chap5.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Photo credit to <a href="https://www.storytellingwithdata.com/blog/2019/8/27/lets-practice">swd</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="lets-practice" class="level1">
<h1>2. Let’s Practice</h1>
<p>Mình đang học <code>{ggplot2}</code> trên R để thực hành hình ảnh hóa dữ liệu, tuy nhiên có vẻ package này (và tương ứng là <code>plotnine</code> trên Python không phù hợp cho báo cáo bảng). Trong bài post, thầy Dũng cũng sử dụng một library khác là <code>kableExtra</code> (tham khảo <a href="https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html">đây</a>).</p>
<p>Sau một lúc google thì có vẻ có một package của Python phù hợp để làm nhiệm vụ này, đó là <code>great_tables</code> (tham khảo <a href="https://posit-dev.github.io/great-tables/articles/intro.html">đây</a>). Package này cũng được khuyến khích sử dụng cho mục đích communication bởi <a href="https://www.emilyriederer.com/post/py-rgo/#the-stack">Emily Riederer</a>.</p>
<section id="import-the-data" class="level2">
<h2 class="anchored" data-anchor-id="import-the-data">2.1. Import the data</h2>
<p>Okay đầu tiên cần import và làm sạch dữ liệu. Bảng có sẵn trong file Exercise có vẻ dùng để báo cáo hơn là lưu trữ dữ liệu.</p>
<div id="562db42c" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"></span>
<span id="cb1-3">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_excel(</span>
<span id="cb1-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2.1 EXERCISE.xlsx"</span>,</span>
<span id="cb1-5">  sheet_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EXERCISE 2.1"</span>,</span>
<span id="cb1-6">  skiprows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb1-7">)</span>
<span id="cb1-8"></span>
<span id="cb1-9">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unnamed: 0'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-10">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tier"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tier"</span></span>
<span id="cb1-11">                    ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# of Accounts"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no_of_account"</span></span>
<span id="cb1-12">                    ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"% Accounts"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_account"</span></span>
<span id="cb1-13">                    ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Revenue ($M)"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"revenue"</span></span>
<span id="cb1-14">                    ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"% Revenue"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_revenue"</span>})</span></code></pre></div>
</div>
</section>
<section id="data-manipulation" class="level2">
<h2 class="anchored" data-anchor-id="data-manipulation">2.2. Data manipulation</h2>
<p>Yep giờ ta đã có 1 bảng data khá sạch, tuy nhiên lưu ý là bảng đang không thể hiện toàn bộ dữ liệu (total của <code>pct_of_account</code> chỉ là <code>81.86%</code>). Ta cần tính toán thêm <code>All other</code> và <code>Grand Total</code> (lý do là mình chưa tìm thấy function hiển thị Grand Total với package đang sử dụng, ngay cả trong ví dụ <a href="https://posit-dev.github.io/great-tables/blog/pycon-2024-great-tables-are-possible/">này</a>, GT cũng sử dụng data đã có sẵn Grand Total).</p>
<div id="19805bdd" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">all_other_pct_of_account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_account"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb2-2">all_other_no_of_account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(all_other_pct_of_account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_account"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no_of_account"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">all_other_pct_of_revenue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_revenue"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb2-5">all_other_revenue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(all_other_pct_of_revenue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_revenue"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"revenue"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7">all_other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series({ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tier"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"All other"</span>,</span>
<span id="cb2-8">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no_of_account"</span>: all_other_no_of_account,</span>
<span id="cb2-9">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_account"</span>: all_other_pct_of_account,</span>
<span id="cb2-10">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"revenue"</span>:all_other_revenue,</span>
<span id="cb2-11">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_revenue"</span>: all_other_pct_of_revenue})</span>
<span id="cb2-12"></span>
<span id="cb2-13">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([data, all_other.to_frame().T], ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-14"></span>
<span id="cb2-15">data.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data.index)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb2-16">data.loc[data.index[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tier'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grand Total'</span></span></code></pre></div>
</div>
<p>Show the data:</p>
<div id="f85da960" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> great_tables <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GT</span>
<span id="cb3-2"></span>
<span id="cb3-3">( </span>
<span id="cb3-4">  GT(data)</span>
<span id="cb3-5">  .fmt_number(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no_of_account"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_account"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"revenue"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_revenue"</span>],decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<div id="craneejhel" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>
#craneejhel table {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
          -webkit-font-smoothing: antialiased;
          -moz-osx-font-smoothing: grayscale;
        }

#craneejhel thead, tbody, tfoot, tr, td, th { border-style: none; }
 tr { background-color: transparent; }
#craneejhel p { margin: 0; padding: 0; }
 #craneejhel .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }
 #craneejhel .gt_caption { padding-top: 4px; padding-bottom: 4px; }
 #craneejhel .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }
 #craneejhel .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }
 #craneejhel .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }
 #craneejhel .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }
 #craneejhel .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }
 #craneejhel .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }
 #craneejhel .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }
 #craneejhel .gt_column_spanner_outer:first-child { padding-left: 0; }
 #craneejhel .gt_column_spanner_outer:last-child { padding-right: 0; }
 #craneejhel .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }
 #craneejhel .gt_spanner_row { border-bottom-style: hidden; }
 #craneejhel .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }
 #craneejhel .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }
 #craneejhel .gt_from_md> :first-child { margin-top: 0; }
 #craneejhel .gt_from_md> :last-child { margin-bottom: 0; }
 #craneejhel .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }
 #craneejhel .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }
 #craneejhel .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }
 #craneejhel .gt_row_group_first td { border-top-width: 2px; }
 #craneejhel .gt_row_group_first th { border-top-width: 2px; }
 #craneejhel .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }
 #craneejhel .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }
 #craneejhel .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }
 #craneejhel .gt_left { text-align: left; }
 #craneejhel .gt_center { text-align: center; }
 #craneejhel .gt_right { text-align: right; font-variant-numeric: tabular-nums; }
 #craneejhel .gt_font_normal { font-weight: normal; }
 #craneejhel .gt_font_bold { font-weight: bold; }
 #craneejhel .gt_font_italic { font-style: italic; }
 #craneejhel .gt_super { font-size: 65%; }
 #craneejhel .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }
 #craneejhel .gt_asterisk { font-size: 100%; vertical-align: 0; }
 
</style>

<table class="gt_table table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
<tbody>
<tr class="odd gt_col_headings">
<td id="tier" class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" scope="col">tier</td>
<td id="no_of_account" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">no_of_account</td>
<td id="pct_of_account" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">pct_of_account</td>
<td id="revenue" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">revenue</td>
<td id="pct_of_revenue" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">pct_of_revenue</td>
</tr>
</tbody>
<tbody class="gt_table_body">
<tr class="odd">
<td class="gt_row gt_left">A</td>
<td class="gt_row gt_right">77.00</td>
<td class="gt_row gt_right">0.07</td>
<td class="gt_row gt_right">4.67</td>
<td class="gt_row gt_right">0.25</td>
</tr>
<tr class="even">
<td class="gt_row gt_left">A+</td>
<td class="gt_row gt_right">19.00</td>
<td class="gt_row gt_right">0.02</td>
<td class="gt_row gt_right">3.93</td>
<td class="gt_row gt_right">0.21</td>
</tr>
<tr class="odd">
<td class="gt_row gt_left">B</td>
<td class="gt_row gt_right">338.00</td>
<td class="gt_row gt_right">0.31</td>
<td class="gt_row gt_right">5.98</td>
<td class="gt_row gt_right">0.32</td>
</tr>
<tr class="even">
<td class="gt_row gt_left">C</td>
<td class="gt_row gt_right">425.00</td>
<td class="gt_row gt_right">0.39</td>
<td class="gt_row gt_right">2.80</td>
<td class="gt_row gt_right">0.15</td>
</tr>
<tr class="odd">
<td class="gt_row gt_left">D</td>
<td class="gt_row gt_right">24.00</td>
<td class="gt_row gt_right">0.02</td>
<td class="gt_row gt_right">0.37</td>
<td class="gt_row gt_right">0.02</td>
</tr>
<tr class="even">
<td class="gt_row gt_left">All other</td>
<td class="gt_row gt_right">205.00</td>
<td class="gt_row gt_right">0.19</td>
<td class="gt_row gt_right">0.94</td>
<td class="gt_row gt_right">0.05</td>
</tr>
<tr class="odd">
<td class="gt_row gt_left">Grand Total</td>
<td class="gt_row gt_right">1,088.00</td>
<td class="gt_row gt_right">1.00</td>
<td class="gt_row gt_right">18.70</td>
<td class="gt_row gt_right">1.00</td>
</tr>
</tbody>
</table>


</div>
        
</div>
</div>
</div>
</section>
<section id="visualization" class="level2">
<h2 class="anchored" data-anchor-id="visualization">2.3. Visualization</h2>
<p>Được rồi, giờ ta có thể dùng <code>great_tables</code> để tiến hành visualize. Về cơ bản, chỉ cần khởi tạo một object <code>GT()</code> có thể mở rộng được, các element/hoặc format được định nghĩa về sau.</p>
<p>Dưới đây chúng ta trình bày một bảng đơn giản với tiêu đề, tên cột, cũng như định dạng lại dữ liệu.</p>
<div id="de0bc25c" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">(</span>
<span id="cb4-2">  GT(data)</span>
<span id="cb4-3">  .tab_header(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New client tier share"</span>)</span>
<span id="cb4-4">  .cols_label(</span>
<span id="cb4-5">    tier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tier"</span>,</span>
<span id="cb4-6">    no_of_account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# of Accounts"</span>,</span>
<span id="cb4-7">    pct_of_account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"% Accounts"</span>,</span>
<span id="cb4-8">    revenue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Revenue ($M)"</span>,</span>
<span id="cb4-9">    pct_of_revenue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"% Revenue"</span></span>
<span id="cb4-10">  )</span>
<span id="cb4-11">  .fmt_number(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no_of_account"</span>,decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-12">  .fmt_percent(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_account"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_revenue"</span>], decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-13">  .fmt_currency(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"revenue"</span>, currency<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"USD"</span>, decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-14">  .tab_source_note(source_note<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Figure 2.1b: Slightly improved table"</span>)</span>
<span id="cb4-15">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>
<div id="owjzkcqqrj" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>
#owjzkcqqrj table {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
          -webkit-font-smoothing: antialiased;
          -moz-osx-font-smoothing: grayscale;
        }

#owjzkcqqrj thead, tbody, tfoot, tr, td, th { border-style: none; }
 tr { background-color: transparent; }
#owjzkcqqrj p { margin: 0; padding: 0; }
 #owjzkcqqrj .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }
 #owjzkcqqrj .gt_caption { padding-top: 4px; padding-bottom: 4px; }
 #owjzkcqqrj .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }
 #owjzkcqqrj .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }
 #owjzkcqqrj .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }
 #owjzkcqqrj .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }
 #owjzkcqqrj .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }
 #owjzkcqqrj .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }
 #owjzkcqqrj .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }
 #owjzkcqqrj .gt_column_spanner_outer:first-child { padding-left: 0; }
 #owjzkcqqrj .gt_column_spanner_outer:last-child { padding-right: 0; }
 #owjzkcqqrj .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }
 #owjzkcqqrj .gt_spanner_row { border-bottom-style: hidden; }
 #owjzkcqqrj .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }
 #owjzkcqqrj .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }
 #owjzkcqqrj .gt_from_md> :first-child { margin-top: 0; }
 #owjzkcqqrj .gt_from_md> :last-child { margin-bottom: 0; }
 #owjzkcqqrj .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }
 #owjzkcqqrj .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }
 #owjzkcqqrj .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }
 #owjzkcqqrj .gt_row_group_first td { border-top-width: 2px; }
 #owjzkcqqrj .gt_row_group_first th { border-top-width: 2px; }
 #owjzkcqqrj .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }
 #owjzkcqqrj .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }
 #owjzkcqqrj .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }
 #owjzkcqqrj .gt_left { text-align: left; }
 #owjzkcqqrj .gt_center { text-align: center; }
 #owjzkcqqrj .gt_right { text-align: right; font-variant-numeric: tabular-nums; }
 #owjzkcqqrj .gt_font_normal { font-weight: normal; }
 #owjzkcqqrj .gt_font_bold { font-weight: bold; }
 #owjzkcqqrj .gt_font_italic { font-style: italic; }
 #owjzkcqqrj .gt_super { font-size: 65%; }
 #owjzkcqqrj .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }
 #owjzkcqqrj .gt_asterisk { font-size: 100%; vertical-align: 0; }
 
</style>

<table class="gt_table table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
<thead class="gt_header">
<tr class="header">
<th colspan="5" class="gt_heading gt_title gt_font_normal" data-quarto-table-cell-role="th">New client tier share</th>
</tr>
</thead>
<tbody>
<tr class="odd gt_col_headings">
<td id="Tier" class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" scope="col">Tier</td>
<td id="# of Accounts" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col"># of Accounts</td>
<td id="% Accounts" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">% Accounts</td>
<td id="Revenue ($M)" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">Revenue ($M)</td>
<td id="% Revenue" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">% Revenue</td>
</tr>
</tbody>
<tbody class="gt_table_body">
<tr class="odd">
<td class="gt_row gt_left">A</td>
<td class="gt_row gt_right">77</td>
<td class="gt_row gt_right">7.08%</td>
<td class="gt_row gt_right">$4.67</td>
<td class="gt_row gt_right">25.00%</td>
</tr>
<tr class="even">
<td class="gt_row gt_left">A+</td>
<td class="gt_row gt_right">19</td>
<td class="gt_row gt_right">1.75%</td>
<td class="gt_row gt_right">$3.93</td>
<td class="gt_row gt_right">21.00%</td>
</tr>
<tr class="odd">
<td class="gt_row gt_left">B</td>
<td class="gt_row gt_right">338</td>
<td class="gt_row gt_right">31.07%</td>
<td class="gt_row gt_right">$5.98</td>
<td class="gt_row gt_right">32.00%</td>
</tr>
<tr class="even">
<td class="gt_row gt_left">C</td>
<td class="gt_row gt_right">425</td>
<td class="gt_row gt_right">39.06%</td>
<td class="gt_row gt_right">$2.80</td>
<td class="gt_row gt_right">15.00%</td>
</tr>
<tr class="odd">
<td class="gt_row gt_left">D</td>
<td class="gt_row gt_right">24</td>
<td class="gt_row gt_right">2.21%</td>
<td class="gt_row gt_right">$0.37</td>
<td class="gt_row gt_right">2.00%</td>
</tr>
<tr class="even">
<td class="gt_row gt_left">All other</td>
<td class="gt_row gt_right">205</td>
<td class="gt_row gt_right">18.84%</td>
<td class="gt_row gt_right">$0.94</td>
<td class="gt_row gt_right">5.00%</td>
</tr>
<tr class="odd">
<td class="gt_row gt_left">Grand Total</td>
<td class="gt_row gt_right">1,088</td>
<td class="gt_row gt_right">100.00%</td>
<td class="gt_row gt_right">$18.70</td>
<td class="gt_row gt_right">100.00%</td>
</tr>
</tbody><tfoot class="gt_sourcenotes">
<tr class="odd">
<td colspan="5" class="gt_sourcenote">Figure 2.1b: Slightly improved table</td>
</tr>
</tfoot>

</table>


</div>
        
</div>
</div>
</div>
<p>Trông ổn (ít nhất là trình bày số liệu một cách toàn vẹn) so với bản gốc rồi!</p>
<p>Tiếp tục, ta dùng - helper <code>md()</code> để định dạng lại tiêu đề; - sử dụng <code>.data_color()</code> để tạo heatmapping; - sử dụng <code>tab_style()</code> để format dòng Grand Total; - sử dụng <code>.opt_stylize()</code> để theming.</p>
<div id="35220963" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> great_tables <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> md, style, loc</span>
<span id="cb5-2"></span>
<span id="cb5-3">(</span>
<span id="cb5-4">  GT(data)</span>
<span id="cb5-5">  .tab_header(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>md(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;strong&gt;New client tier share&lt;/strong&gt;"</span>))</span>
<span id="cb5-6">  .opt_align_table_header(align<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>)</span>
<span id="cb5-7">  .cols_label(</span>
<span id="cb5-8">    tier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tier"</span>,</span>
<span id="cb5-9">    no_of_account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# of Accounts"</span>,</span>
<span id="cb5-10">    pct_of_account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"% Accounts"</span>,</span>
<span id="cb5-11">    revenue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"($M) Revenue"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change the label</span></span>
<span id="cb5-12">    pct_of_revenue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"% Revenue"</span></span>
<span id="cb5-13">  )</span>
<span id="cb5-14">  .fmt_number(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no_of_account"</span>,decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-15">  .fmt_percent(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_account"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_revenue"</span>], decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># changed decimals</span></span>
<span id="cb5-16">  .fmt_currency(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"revenue"</span>, currency<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"USD"</span>, decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># changed decimals</span></span>
<span id="cb5-17">  .tab_source_note(source_note<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Figure 2.1c: Table with heatmapping"</span>)</span>
<span id="cb5-18">  .data_color(</span>
<span id="cb5-19">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_account"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_revenue"</span>],</span>
<span id="cb5-20">    palette<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#57A6A1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#577B8D"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#344C64"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#240750"</span>],</span>
<span id="cb5-21">    domain<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb5-22">    na_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightgray"</span>,</span>
<span id="cb5-23">    autocolor_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb5-24">  )</span>
<span id="cb5-25">  .tab_style(</span>
<span id="cb5-26">        style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb5-27">          style.text(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bolder"</span>),</span>
<span id="cb5-28">          style.fill(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#EEEEEE"</span>),</span>
<span id="cb5-29">          style.borders(sides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>], weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2px'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>)</span>
<span id="cb5-30">          ],</span>
<span id="cb5-31">        locations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loc.body(rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])</span>
<span id="cb5-32">  )</span>
<span id="cb5-33">  .opt_stylize(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> ,color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>)</span>
<span id="cb5-34">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>
<div id="xlwzucecqv" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>
#xlwzucecqv table {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
          -webkit-font-smoothing: antialiased;
          -moz-osx-font-smoothing: grayscale;
        }

#xlwzucecqv thead, tbody, tfoot, tr, td, th { border-style: none; }
 tr { background-color: transparent; }
#xlwzucecqv p { margin: 0; padding: 0; }
 #xlwzucecqv .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #D5D5D5; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D5D5D5; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }
 #xlwzucecqv .gt_caption { padding-top: 4px; padding-bottom: 4px; }
 #xlwzucecqv .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }
 #xlwzucecqv .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }
 #xlwzucecqv .gt_heading { background-color: #FFFFFF; text-align: left; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }
 #xlwzucecqv .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D5D5D5; }
 #xlwzucecqv .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D5D5D5; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D5D5D5; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }
 #xlwzucecqv .gt_col_heading { color: #FFFFFF; background-color: #004D80; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }
 #xlwzucecqv .gt_column_spanner_outer { color: #FFFFFF; background-color: #004D80; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }
 #xlwzucecqv .gt_column_spanner_outer:first-child { padding-left: 0; }
 #xlwzucecqv .gt_column_spanner_outer:last-child { padding-right: 0; }
 #xlwzucecqv .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D5D5D5; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }
 #xlwzucecqv .gt_spanner_row { border-bottom-style: hidden; }
 #xlwzucecqv .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D5D5D5; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D5D5D5; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }
 #xlwzucecqv .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D5D5D5; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D5D5D5; vertical-align: middle; }
 #xlwzucecqv .gt_from_md> :first-child { margin-top: 0; }
 #xlwzucecqv .gt_from_md> :last-child { margin-bottom: 0; }
 #xlwzucecqv .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D5D5D5; border-left-style: solid; border-left-width: 1px; border-left-color: #D5D5D5; border-right-style: solid; border-right-width: 1px; border-right-color: #D5D5D5; vertical-align: middle; overflow-x: hidden; }
 #xlwzucecqv .gt_stub { color: #333333; background-color: #929292; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D5D5D5; padding-left: 5px; padding-right: 5px; }
 #xlwzucecqv .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }
 #xlwzucecqv .gt_row_group_first td { border-top-width: 2px; }
 #xlwzucecqv .gt_row_group_first th { border-top-width: 2px; }
 #xlwzucecqv .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D5D5D5; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D5D5D5; }
 #xlwzucecqv .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }
 #xlwzucecqv .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }
 #xlwzucecqv .gt_left { text-align: left; }
 #xlwzucecqv .gt_center { text-align: center; }
 #xlwzucecqv .gt_right { text-align: right; font-variant-numeric: tabular-nums; }
 #xlwzucecqv .gt_font_normal { font-weight: normal; }
 #xlwzucecqv .gt_font_bold { font-weight: bold; }
 #xlwzucecqv .gt_font_italic { font-style: italic; }
 #xlwzucecqv .gt_super { font-size: 65%; }
 #xlwzucecqv .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }
 #xlwzucecqv .gt_asterisk { font-size: 100%; vertical-align: 0; }
 
</style>

<table class="gt_table table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
<thead class="gt_header">
<tr class="header">
<th colspan="5" class="gt_heading gt_title gt_font_normal" data-quarto-table-cell-role="th"><strong>New client tier share</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd gt_col_headings">
<td id="Tier" class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" scope="col">Tier</td>
<td id="# of Accounts" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col"># of Accounts</td>
<td id="% Accounts" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">% Accounts</td>
<td id="($M) Revenue" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">($M) Revenue</td>
<td id="% Revenue" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">% Revenue</td>
</tr>
</tbody>
<tbody class="gt_table_body">
<tr class="odd">
<td class="gt_row gt_left">A</td>
<td class="gt_row gt_right">77</td>
<td class="gt_row gt_right" style="background-color: #579d9d">7%</td>
<td class="gt_row gt_right">$4.7</td>
<td class="gt_row gt_right" style="background-color: #578692">25%</td>
</tr>
<tr class="even">
<td class="gt_row gt_left">A+</td>
<td class="gt_row gt_right">19</td>
<td class="gt_row gt_right" style="background-color: #57a4a0">2%</td>
<td class="gt_row gt_right">$3.9</td>
<td class="gt_row gt_right" style="background-color: #578b94">21%</td>
</tr>
<tr class="odd">
<td class="gt_row gt_left">B</td>
<td class="gt_row gt_right">338</td>
<td class="gt_row gt_right" style="background-color: #577e8e">31%</td>
<td class="gt_row gt_right">$6.0</td>
<td class="gt_row gt_right" style="background-color: #577d8e">32%</td>
</tr>
<tr class="even">
<td class="gt_row gt_left">C</td>
<td class="gt_row gt_right">425</td>
<td class="gt_row gt_right" style="background-color: #517386">39%</td>
<td class="gt_row gt_right">$2.8</td>
<td class="gt_row gt_right" style="background-color: #579398">15%</td>
</tr>
<tr class="odd">
<td class="gt_row gt_left">D</td>
<td class="gt_row gt_right">24</td>
<td class="gt_row gt_right" style="background-color: #57a3a0">2%</td>
<td class="gt_row gt_right">$0.4</td>
<td class="gt_row gt_right" style="background-color: #57a3a0">2%</td>
</tr>
<tr class="even">
<td class="gt_row gt_left">All other</td>
<td class="gt_row gt_right">205</td>
<td class="gt_row gt_right" style="background-color: #578e96">19%</td>
<td class="gt_row gt_right">$0.9</td>
<td class="gt_row gt_right" style="background-color: #57a09e">5%</td>
</tr>
<tr class="odd">
<td class="gt_row gt_left" style="font-style: bolder; background-color: #EEEEEE; border-top: 2px solid grey; border-bottom: 2px solid grey">Grand Total</td>
<td class="gt_row gt_right" style="font-style: bolder; background-color: #EEEEEE; border-top: 2px solid grey; border-bottom: 2px solid grey">1,088</td>
<td class="gt_row gt_right" style="background-color: #240750; font-style: bolder; background-color: #EEEEEE; border-top: 2px solid grey; border-bottom: 2px solid grey">100%</td>
<td class="gt_row gt_right" style="font-style: bolder; background-color: #EEEEEE; border-top: 2px solid grey; border-bottom: 2px solid grey">$18.7</td>
<td class="gt_row gt_right" style="background-color: #240750; font-style: bolder; background-color: #EEEEEE; border-top: 2px solid grey; border-bottom: 2px solid grey">100%</td>
</tr>
</tbody><tfoot class="gt_sourcenotes">
<tr class="odd">
<td colspan="5" class="gt_sourcenote">Figure 2.1c: Table with heatmapping</td>
</tr>
</tfoot>

</table>


</div>
        
</div>
</div>
</div>
<p>Tiếp theo, chúng ta sẽ thử dùng <code>fmt_nanoplot()</code> để tạo một bar plots thay cho hai cột percentage.</p>
<p>Đây là một tính năng trong giai đoạn thử nghiệm nên mình thấy chưa thực sử ổn định và tuân theo document mà nhà phát triển đề cập. Trong ví dụ dưới đây mình sử dụng data bar, loại bỏ format do hàng cuối cùng. Tuy nhiên, đồ thị vẫn include giá trị <code>100%</code> ở hàng Grand Total để điều chỉnh bar scale.</p>
<p>Thêm nữa mình cần chuyển dataframe về polar dataframe, khi đó một column của dl.df là iterable.</p>
<div id="be86356a" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> great_tables <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> md, style, loc, nanoplot_options</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb6-4"></span>
<span id="cb6-5">data.at[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_account"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.nan</span>
<span id="cb6-6">data.at[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_revenue"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.nan</span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># so that the data scale looks better</span></span>
<span id="cb6-8"></span>
<span id="cb6-9">pl_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.from_pandas(data)</span>
<span id="cb6-10"></span>
<span id="cb6-11">(</span>
<span id="cb6-12">  GT(pl_data, rowname_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tier"</span>)</span>
<span id="cb6-13">  .tab_header(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>md(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;strong&gt;New client tier share&lt;/strong&gt;"</span>))</span>
<span id="cb6-14">  .opt_align_table_header(align<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>)</span>
<span id="cb6-15">  .tab_source_note(source_note<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Figure 2.1d: Table with data bar"</span>)</span>
<span id="cb6-16">  .cols_label(</span>
<span id="cb6-17">    tier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tier"</span>,</span>
<span id="cb6-18">    no_of_account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# of Accounts"</span>,</span>
<span id="cb6-19">    pct_of_account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"% Accounts"</span>,</span>
<span id="cb6-20">    revenue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"($M) Revenue"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change the label</span></span>
<span id="cb6-21">    pct_of_revenue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"% Revenue"</span></span>
<span id="cb6-22">  )</span>
<span id="cb6-23">  .fmt_number(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no_of_account"</span>,decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-24">  .fmt_currency(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"revenue"</span>, currency<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"USD"</span>, decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-25">  .fmt_percent(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_account"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_revenue"</span>], decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># changed decimals</span></span>
<span id="cb6-26">  .cols_width(</span>
<span id="cb6-27">    cases<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb6-28">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tier"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"20%"</span>,</span>
<span id="cb6-29">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no_of_account"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"20%"</span>,</span>
<span id="cb6-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_account"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"20%"</span>,</span>
<span id="cb6-31">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"revenue"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"20%"</span>,</span>
<span id="cb6-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_revenue"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"20%"</span>      </span>
<span id="cb6-33">    }</span>
<span id="cb6-34">    )</span>
<span id="cb6-35">  .fmt_nanoplot(</span>
<span id="cb6-36">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_account"</span>,</span>
<span id="cb6-37">    rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="cb6-38">    plot_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span>,</span>
<span id="cb6-39">    plot_height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3em"</span>,</span>
<span id="cb6-40">    autoscale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb6-41">    options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nanoplot_options(</span>
<span id="cb6-42">      data_bar_stroke_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#577B8D"</span>,</span>
<span id="cb6-43">      data_bar_stroke_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>,</span>
<span id="cb6-44">      data_bar_fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#577B8D"</span>,)</span>
<span id="cb6-45">    )</span>
<span id="cb6-46">  .fmt_nanoplot(</span>
<span id="cb6-47">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_revenue"</span>,</span>
<span id="cb6-48">    rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="cb6-49">    plot_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span>,</span>
<span id="cb6-50">    plot_height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3em"</span>,</span>
<span id="cb6-51">    autoscale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb6-52">    options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nanoplot_options(</span>
<span id="cb6-53">      data_bar_stroke_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#577B8D"</span>,</span>
<span id="cb6-54">      data_bar_stroke_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>,</span>
<span id="cb6-55">      data_bar_fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#577B8D"</span>,)</span>
<span id="cb6-56">  )</span>
<span id="cb6-57">  .tab_style(</span>
<span id="cb6-58">        style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb6-59">          style.text(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bolder"</span>),</span>
<span id="cb6-60">          style.fill(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#EEEEEE"</span>),</span>
<span id="cb6-61">          style.borders(sides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>], weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2px'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>)</span>
<span id="cb6-62">          ],</span>
<span id="cb6-63">        locations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loc.body(rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])</span>
<span id="cb6-64">  )</span>
<span id="cb6-65">  .tab_style(</span>
<span id="cb6-66">        style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb6-67">          style.text(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#EEEEEE"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb6-68">          ],</span>
<span id="cb6-69">        locations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loc.body(rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_account"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct_of_revenue"</span>])</span>
<span id="cb6-70">  )</span>
<span id="cb6-71">  .opt_stylize(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> ,color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>)</span>
<span id="cb6-72">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>
<div id="xsdfljskly" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>
#xsdfljskly table {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
          -webkit-font-smoothing: antialiased;
          -moz-osx-font-smoothing: grayscale;
        }

#xsdfljskly thead, tbody, tfoot, tr, td, th { border-style: none; }
 tr { background-color: transparent; }
#xsdfljskly p { margin: 0; padding: 0; }
 #xsdfljskly .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #929292; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #929292; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }
 #xsdfljskly .gt_caption { padding-top: 4px; padding-bottom: 4px; }
 #xsdfljskly .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }
 #xsdfljskly .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }
 #xsdfljskly .gt_heading { background-color: #FFFFFF; text-align: left; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }
 #xsdfljskly .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #929292; }
 #xsdfljskly .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #929292; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #929292; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }
 #xsdfljskly .gt_col_heading { color: #FFFFFF; background-color: #004D80; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }
 #xsdfljskly .gt_column_spanner_outer { color: #FFFFFF; background-color: #004D80; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }
 #xsdfljskly .gt_column_spanner_outer:first-child { padding-left: 0; }
 #xsdfljskly .gt_column_spanner_outer:last-child { padding-right: 0; }
 #xsdfljskly .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #929292; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }
 #xsdfljskly .gt_spanner_row { border-bottom-style: hidden; }
 #xsdfljskly .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #929292; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #929292; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }
 #xsdfljskly .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #929292; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #929292; vertical-align: middle; }
 #xsdfljskly .gt_from_md> :first-child { margin-top: 0; }
 #xsdfljskly .gt_from_md> :last-child { margin-bottom: 0; }
 #xsdfljskly .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: dashed; border-top-width: 1px; border-top-color: #929292; border-left-style: none; border-left-width: 1px; border-left-color: #929292; border-right-style: none; border-right-width: 1px; border-right-color: #929292; vertical-align: middle; overflow-x: hidden; }
 #xsdfljskly .gt_stub { color: #333333; background-color: #D5D5D5; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: none; border-right-width: 2px; border-right-color: #FFFFFF; padding-left: 5px; padding-right: 5px; }
 #xsdfljskly .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }
 #xsdfljskly .gt_row_group_first td { border-top-width: 2px; }
 #xsdfljskly .gt_row_group_first th { border-top-width: 2px; }
 #xsdfljskly .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #929292; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #929292; }
 #xsdfljskly .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }
 #xsdfljskly .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }
 #xsdfljskly .gt_left { text-align: left; }
 #xsdfljskly .gt_center { text-align: center; }
 #xsdfljskly .gt_right { text-align: right; font-variant-numeric: tabular-nums; }
 #xsdfljskly .gt_font_normal { font-weight: normal; }
 #xsdfljskly .gt_font_bold { font-weight: bold; }
 #xsdfljskly .gt_font_italic { font-style: italic; }
 #xsdfljskly .gt_super { font-size: 65%; }
 #xsdfljskly .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }
 #xsdfljskly .gt_asterisk { font-size: 100%; vertical-align: 0; }
 
</style>

<table class="gt_table table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead class="gt_header">
<tr class="header">
<th colspan="5" class="gt_heading gt_title gt_font_normal" data-quarto-table-cell-role="th"><strong>New client tier share</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd gt_col_headings">
<td class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" scope="col"></td>
<td id="# of Accounts" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col"># of Accounts</td>
<td id="% Accounts" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">% Accounts</td>
<td id="($M) Revenue" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">($M) Revenue</td>
<td id="% Revenue" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" scope="col">% Revenue</td>
</tr>
</tbody>
<tbody class="gt_table_body">
<tr class="odd">
<td class="gt_row gt_left gt_stub" data-quarto-table-cell-role="th">A</td>
<td class="gt_row gt_right">77</td>
<td class="gt_row gt_right"><div>
<svg viewbox="0 0 600 130" style="height: 3em; margin-left: auto; margin-right: auto; font-size: inherit; overflow: visible; vertical-align: middle; position:relative;">
<defs><pattern id="area_pattern" width="8" height="8" patternunits="userSpaceOnUse"><path class="pattern-line" d="M 0,8 l 8,-8 M -1,1 l 4,-4 M 6,10 l 4,-4" stroke="#FF0000" stroke-width="1.5" stroke-linecap="round" shape-rendering="geometricPrecision"></path></pattern></defs>
<style> text { font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace; stroke-width: 0.15em; paint-order: stroke; stroke-linejoin: round; cursor: default; } .vert-line:hover rect { fill: #911EB4; fill-opacity: 40%; stroke: #FFFFFF60; color: red; } .vert-line:hover text { stroke: white; fill: #212427; } .horizontal-line:hover text {stroke: white; fill: #212427; } .ref-line:hover rect { stroke: #FFFFFF60; } .ref-line:hover line { stroke: #FF0000; } .ref-line:hover text { stroke: white; fill: #212427; } .y-axis-line:hover rect { fill: #EDEDED; fill-opacity: 60%; stroke: #FFFFFF60; color: red; } .y-axis-line:hover text { stroke: white; stroke-width: 0.20em; fill: #1A1C1F; } </style>
<line x1="0.0" y1="5.0" x2="0.0" y2="125.0" stroke="#BFBFBF" stroke-width="4"></line><rect x="0.0" y="45.0" width="108.70588235294117" height="40" stroke="#577B8D" stroke-width="80" fill="#577B8D"></rect><g class="horizontal-line"><rect x="0" y="45.0" width="600" height="40" stroke="transparent" stroke-width="12" fill="transparent"></rect><text x="10.0" y="25" fill="transparent" stroke="transparent" font-size="30px">0.071</text></g>
</svg>
</div></td>
<td class="gt_row gt_right">$4.7</td>
<td class="gt_row gt_right"><div>
<svg viewbox="0 0 600 130" style="height: 3em; margin-left: auto; margin-right: auto; font-size: inherit; overflow: visible; vertical-align: middle; position:relative;">
<defs><pattern id="area_pattern" width="8" height="8" patternunits="userSpaceOnUse"><path class="pattern-line" d="M 0,8 l 8,-8 M -1,1 l 4,-4 M 6,10 l 4,-4" stroke="#FF0000" stroke-width="1.5" stroke-linecap="round" shape-rendering="geometricPrecision"></path></pattern></defs>
<style> text { font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace; stroke-width: 0.15em; paint-order: stroke; stroke-linejoin: round; cursor: default; } .vert-line:hover rect { fill: #911EB4; fill-opacity: 40%; stroke: #FFFFFF60; color: red; } .vert-line:hover text { stroke: white; fill: #212427; } .horizontal-line:hover text {stroke: white; fill: #212427; } .ref-line:hover rect { stroke: #FFFFFF60; } .ref-line:hover line { stroke: #FF0000; } .ref-line:hover text { stroke: white; fill: #212427; } .y-axis-line:hover rect { fill: #EDEDED; fill-opacity: 60%; stroke: #FFFFFF60; color: red; } .y-axis-line:hover text { stroke: white; stroke-width: 0.20em; fill: #1A1C1F; } </style>
<line x1="0.0" y1="5.0" x2="0.0" y2="125.0" stroke="#BFBFBF" stroke-width="4"></line><rect x="0.0" y="45.0" width="468.75" height="40" stroke="#577B8D" stroke-width="80" fill="#577B8D"></rect><g class="horizontal-line"><rect x="0" y="45.0" width="600" height="40" stroke="transparent" stroke-width="12" fill="transparent"></rect><text x="10.0" y="25" fill="transparent" stroke="transparent" font-size="30px">0.25</text></g>
</svg>
</div></td>
</tr>
<tr class="even">
<td class="gt_row gt_left gt_stub" data-quarto-table-cell-role="th">A+</td>
<td class="gt_row gt_right">19</td>
<td class="gt_row gt_right"><div>
<svg viewbox="0 0 600 130" style="height: 3em; margin-left: auto; margin-right: auto; font-size: inherit; overflow: visible; vertical-align: middle; position:relative;">
<defs><pattern id="area_pattern" width="8" height="8" patternunits="userSpaceOnUse"><path class="pattern-line" d="M 0,8 l 8,-8 M -1,1 l 4,-4 M 6,10 l 4,-4" stroke="#FF0000" stroke-width="1.5" stroke-linecap="round" shape-rendering="geometricPrecision"></path></pattern></defs>
<style> text { font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace; stroke-width: 0.15em; paint-order: stroke; stroke-linejoin: round; cursor: default; } .vert-line:hover rect { fill: #911EB4; fill-opacity: 40%; stroke: #FFFFFF60; color: red; } .vert-line:hover text { stroke: white; fill: #212427; } .horizontal-line:hover text {stroke: white; fill: #212427; } .ref-line:hover rect { stroke: #FFFFFF60; } .ref-line:hover line { stroke: #FF0000; } .ref-line:hover text { stroke: white; fill: #212427; } .y-axis-line:hover rect { fill: #EDEDED; fill-opacity: 60%; stroke: #FFFFFF60; color: red; } .y-axis-line:hover text { stroke: white; stroke-width: 0.20em; fill: #1A1C1F; } </style>
<line x1="0.0" y1="5.0" x2="0.0" y2="125.0" stroke="#BFBFBF" stroke-width="4"></line><rect x="0.0" y="45.0" width="26.823529411764707" height="40" stroke="#577B8D" stroke-width="80" fill="#577B8D"></rect><g class="horizontal-line"><rect x="0" y="45.0" width="600" height="40" stroke="transparent" stroke-width="12" fill="transparent"></rect><text x="10.0" y="25" fill="transparent" stroke="transparent" font-size="30px">0.017</text></g>
</svg>
</div></td>
<td class="gt_row gt_right">$3.9</td>
<td class="gt_row gt_right"><div>
<svg viewbox="0 0 600 130" style="height: 3em; margin-left: auto; margin-right: auto; font-size: inherit; overflow: visible; vertical-align: middle; position:relative;">
<defs><pattern id="area_pattern" width="8" height="8" patternunits="userSpaceOnUse"><path class="pattern-line" d="M 0,8 l 8,-8 M -1,1 l 4,-4 M 6,10 l 4,-4" stroke="#FF0000" stroke-width="1.5" stroke-linecap="round" shape-rendering="geometricPrecision"></path></pattern></defs>
<style> text { font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace; stroke-width: 0.15em; paint-order: stroke; stroke-linejoin: round; cursor: default; } .vert-line:hover rect { fill: #911EB4; fill-opacity: 40%; stroke: #FFFFFF60; color: red; } .vert-line:hover text { stroke: white; fill: #212427; } .horizontal-line:hover text {stroke: white; fill: #212427; } .ref-line:hover rect { stroke: #FFFFFF60; } .ref-line:hover line { stroke: #FF0000; } .ref-line:hover text { stroke: white; fill: #212427; } .y-axis-line:hover rect { fill: #EDEDED; fill-opacity: 60%; stroke: #FFFFFF60; color: red; } .y-axis-line:hover text { stroke: white; stroke-width: 0.20em; fill: #1A1C1F; } </style>
<line x1="0.0" y1="5.0" x2="0.0" y2="125.0" stroke="#BFBFBF" stroke-width="4"></line><rect x="0.0" y="45.0" width="393.75" height="40" stroke="#577B8D" stroke-width="80" fill="#577B8D"></rect><g class="horizontal-line"><rect x="0" y="45.0" width="600" height="40" stroke="transparent" stroke-width="12" fill="transparent"></rect><text x="10.0" y="25" fill="transparent" stroke="transparent" font-size="30px">0.21</text></g>
</svg>
</div></td>
</tr>
<tr class="odd">
<td class="gt_row gt_left gt_stub" data-quarto-table-cell-role="th">B</td>
<td class="gt_row gt_right">338</td>
<td class="gt_row gt_right"><div>
<svg viewbox="0 0 600 130" style="height: 3em; margin-left: auto; margin-right: auto; font-size: inherit; overflow: visible; vertical-align: middle; position:relative;">
<defs><pattern id="area_pattern" width="8" height="8" patternunits="userSpaceOnUse"><path class="pattern-line" d="M 0,8 l 8,-8 M -1,1 l 4,-4 M 6,10 l 4,-4" stroke="#FF0000" stroke-width="1.5" stroke-linecap="round" shape-rendering="geometricPrecision"></path></pattern></defs>
<style> text { font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace; stroke-width: 0.15em; paint-order: stroke; stroke-linejoin: round; cursor: default; } .vert-line:hover rect { fill: #911EB4; fill-opacity: 40%; stroke: #FFFFFF60; color: red; } .vert-line:hover text { stroke: white; fill: #212427; } .horizontal-line:hover text {stroke: white; fill: #212427; } .ref-line:hover rect { stroke: #FFFFFF60; } .ref-line:hover line { stroke: #FF0000; } .ref-line:hover text { stroke: white; fill: #212427; } .y-axis-line:hover rect { fill: #EDEDED; fill-opacity: 60%; stroke: #FFFFFF60; color: red; } .y-axis-line:hover text { stroke: white; stroke-width: 0.20em; fill: #1A1C1F; } </style>
<line x1="0.0" y1="5.0" x2="0.0" y2="125.0" stroke="#BFBFBF" stroke-width="4"></line><rect x="0.0" y="45.0" width="477.1764705882353" height="40" stroke="#577B8D" stroke-width="80" fill="#577B8D"></rect><g class="horizontal-line"><rect x="0" y="45.0" width="600" height="40" stroke="transparent" stroke-width="12" fill="transparent"></rect><text x="10.0" y="25" fill="transparent" stroke="transparent" font-size="30px">0.31</text></g>
</svg>
</div></td>
<td class="gt_row gt_right">$6.0</td>
<td class="gt_row gt_right"><div>
<svg viewbox="0 0 600 130" style="height: 3em; margin-left: auto; margin-right: auto; font-size: inherit; overflow: visible; vertical-align: middle; position:relative;">
<defs><pattern id="area_pattern" width="8" height="8" patternunits="userSpaceOnUse"><path class="pattern-line" d="M 0,8 l 8,-8 M -1,1 l 4,-4 M 6,10 l 4,-4" stroke="#FF0000" stroke-width="1.5" stroke-linecap="round" shape-rendering="geometricPrecision"></path></pattern></defs>
<style> text { font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace; stroke-width: 0.15em; paint-order: stroke; stroke-linejoin: round; cursor: default; } .vert-line:hover rect { fill: #911EB4; fill-opacity: 40%; stroke: #FFFFFF60; color: red; } .vert-line:hover text { stroke: white; fill: #212427; } .horizontal-line:hover text {stroke: white; fill: #212427; } .ref-line:hover rect { stroke: #FFFFFF60; } .ref-line:hover line { stroke: #FF0000; } .ref-line:hover text { stroke: white; fill: #212427; } .y-axis-line:hover rect { fill: #EDEDED; fill-opacity: 60%; stroke: #FFFFFF60; color: red; } .y-axis-line:hover text { stroke: white; stroke-width: 0.20em; fill: #1A1C1F; } </style>
<line x1="0.0" y1="5.0" x2="0.0" y2="125.0" stroke="#BFBFBF" stroke-width="4"></line><rect x="0.0" y="45.0" width="600.0" height="40" stroke="#577B8D" stroke-width="80" fill="#577B8D"></rect><g class="horizontal-line"><rect x="0" y="45.0" width="600" height="40" stroke="transparent" stroke-width="12" fill="transparent"></rect><text x="10.0" y="25" fill="transparent" stroke="transparent" font-size="30px">0.32</text></g>
</svg>
</div></td>
</tr>
<tr class="even">
<td class="gt_row gt_left gt_stub" data-quarto-table-cell-role="th">C</td>
<td class="gt_row gt_right">425</td>
<td class="gt_row gt_right"><div>
<svg viewbox="0 0 600 130" style="height: 3em; margin-left: auto; margin-right: auto; font-size: inherit; overflow: visible; vertical-align: middle; position:relative;">
<defs><pattern id="area_pattern" width="8" height="8" patternunits="userSpaceOnUse"><path class="pattern-line" d="M 0,8 l 8,-8 M -1,1 l 4,-4 M 6,10 l 4,-4" stroke="#FF0000" stroke-width="1.5" stroke-linecap="round" shape-rendering="geometricPrecision"></path></pattern></defs>
<style> text { font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace; stroke-width: 0.15em; paint-order: stroke; stroke-linejoin: round; cursor: default; } .vert-line:hover rect { fill: #911EB4; fill-opacity: 40%; stroke: #FFFFFF60; color: red; } .vert-line:hover text { stroke: white; fill: #212427; } .horizontal-line:hover text {stroke: white; fill: #212427; } .ref-line:hover rect { stroke: #FFFFFF60; } .ref-line:hover line { stroke: #FF0000; } .ref-line:hover text { stroke: white; fill: #212427; } .y-axis-line:hover rect { fill: #EDEDED; fill-opacity: 60%; stroke: #FFFFFF60; color: red; } .y-axis-line:hover text { stroke: white; stroke-width: 0.20em; fill: #1A1C1F; } </style>
<line x1="0.0" y1="5.0" x2="0.0" y2="125.0" stroke="#BFBFBF" stroke-width="4"></line><rect x="0.0" y="45.0" width="600.0" height="40" stroke="#577B8D" stroke-width="80" fill="#577B8D"></rect><g class="horizontal-line"><rect x="0" y="45.0" width="600" height="40" stroke="transparent" stroke-width="12" fill="transparent"></rect><text x="10.0" y="25" fill="transparent" stroke="transparent" font-size="30px">0.39</text></g>
</svg>
</div></td>
<td class="gt_row gt_right">$2.8</td>
<td class="gt_row gt_right"><div>
<svg viewbox="0 0 600 130" style="height: 3em; margin-left: auto; margin-right: auto; font-size: inherit; overflow: visible; vertical-align: middle; position:relative;">
<defs><pattern id="area_pattern" width="8" height="8" patternunits="userSpaceOnUse"><path class="pattern-line" d="M 0,8 l 8,-8 M -1,1 l 4,-4 M 6,10 l 4,-4" stroke="#FF0000" stroke-width="1.5" stroke-linecap="round" shape-rendering="geometricPrecision"></path></pattern></defs>
<style> text { font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace; stroke-width: 0.15em; paint-order: stroke; stroke-linejoin: round; cursor: default; } .vert-line:hover rect { fill: #911EB4; fill-opacity: 40%; stroke: #FFFFFF60; color: red; } .vert-line:hover text { stroke: white; fill: #212427; } .horizontal-line:hover text {stroke: white; fill: #212427; } .ref-line:hover rect { stroke: #FFFFFF60; } .ref-line:hover line { stroke: #FF0000; } .ref-line:hover text { stroke: white; fill: #212427; } .y-axis-line:hover rect { fill: #EDEDED; fill-opacity: 60%; stroke: #FFFFFF60; color: red; } .y-axis-line:hover text { stroke: white; stroke-width: 0.20em; fill: #1A1C1F; } </style>
<line x1="0.0" y1="5.0" x2="0.0" y2="125.0" stroke="#BFBFBF" stroke-width="4"></line><rect x="0.0" y="45.0" width="281.25" height="40" stroke="#577B8D" stroke-width="80" fill="#577B8D"></rect><g class="horizontal-line"><rect x="0" y="45.0" width="600" height="40" stroke="transparent" stroke-width="12" fill="transparent"></rect><text x="10.0" y="25" fill="transparent" stroke="transparent" font-size="30px">0.15</text></g>
</svg>
</div></td>
</tr>
<tr class="odd">
<td class="gt_row gt_left gt_stub" data-quarto-table-cell-role="th">D</td>
<td class="gt_row gt_right">24</td>
<td class="gt_row gt_right"><div>
<svg viewbox="0 0 600 130" style="height: 3em; margin-left: auto; margin-right: auto; font-size: inherit; overflow: visible; vertical-align: middle; position:relative;">
<defs><pattern id="area_pattern" width="8" height="8" patternunits="userSpaceOnUse"><path class="pattern-line" d="M 0,8 l 8,-8 M -1,1 l 4,-4 M 6,10 l 4,-4" stroke="#FF0000" stroke-width="1.5" stroke-linecap="round" shape-rendering="geometricPrecision"></path></pattern></defs>
<style> text { font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace; stroke-width: 0.15em; paint-order: stroke; stroke-linejoin: round; cursor: default; } .vert-line:hover rect { fill: #911EB4; fill-opacity: 40%; stroke: #FFFFFF60; color: red; } .vert-line:hover text { stroke: white; fill: #212427; } .horizontal-line:hover text {stroke: white; fill: #212427; } .ref-line:hover rect { stroke: #FFFFFF60; } .ref-line:hover line { stroke: #FF0000; } .ref-line:hover text { stroke: white; fill: #212427; } .y-axis-line:hover rect { fill: #EDEDED; fill-opacity: 60%; stroke: #FFFFFF60; color: red; } .y-axis-line:hover text { stroke: white; stroke-width: 0.20em; fill: #1A1C1F; } </style>
<line x1="0.0" y1="5.0" x2="0.0" y2="125.0" stroke="#BFBFBF" stroke-width="4"></line><rect x="0.0" y="45.0" width="33.88235294117647" height="40" stroke="#577B8D" stroke-width="80" fill="#577B8D"></rect><g class="horizontal-line"><rect x="0" y="45.0" width="600" height="40" stroke="transparent" stroke-width="12" fill="transparent"></rect><text x="10.0" y="25" fill="transparent" stroke="transparent" font-size="30px">0.022</text></g>
</svg>
</div></td>
<td class="gt_row gt_right">$0.4</td>
<td class="gt_row gt_right"><div>
<svg viewbox="0 0 600 130" style="height: 3em; margin-left: auto; margin-right: auto; font-size: inherit; overflow: visible; vertical-align: middle; position:relative;">
<defs><pattern id="area_pattern" width="8" height="8" patternunits="userSpaceOnUse"><path class="pattern-line" d="M 0,8 l 8,-8 M -1,1 l 4,-4 M 6,10 l 4,-4" stroke="#FF0000" stroke-width="1.5" stroke-linecap="round" shape-rendering="geometricPrecision"></path></pattern></defs>
<style> text { font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace; stroke-width: 0.15em; paint-order: stroke; stroke-linejoin: round; cursor: default; } .vert-line:hover rect { fill: #911EB4; fill-opacity: 40%; stroke: #FFFFFF60; color: red; } .vert-line:hover text { stroke: white; fill: #212427; } .horizontal-line:hover text {stroke: white; fill: #212427; } .ref-line:hover rect { stroke: #FFFFFF60; } .ref-line:hover line { stroke: #FF0000; } .ref-line:hover text { stroke: white; fill: #212427; } .y-axis-line:hover rect { fill: #EDEDED; fill-opacity: 60%; stroke: #FFFFFF60; color: red; } .y-axis-line:hover text { stroke: white; stroke-width: 0.20em; fill: #1A1C1F; } </style>
<line x1="0.0" y1="5.0" x2="0.0" y2="125.0" stroke="#BFBFBF" stroke-width="4"></line><rect x="0.0" y="45.0" width="37.5" height="40" stroke="#577B8D" stroke-width="80" fill="#577B8D"></rect><g class="horizontal-line"><rect x="0" y="45.0" width="600" height="40" stroke="transparent" stroke-width="12" fill="transparent"></rect><text x="10.0" y="25" fill="transparent" stroke="transparent" font-size="30px">0.020</text></g>
</svg>
</div></td>
</tr>
<tr class="even">
<td class="gt_row gt_left gt_stub" data-quarto-table-cell-role="th">All other</td>
<td class="gt_row gt_right">205</td>
<td class="gt_row gt_right"><div>
<svg viewbox="0 0 600 130" style="height: 3em; margin-left: auto; margin-right: auto; font-size: inherit; overflow: visible; vertical-align: middle; position:relative;">
<defs><pattern id="area_pattern" width="8" height="8" patternunits="userSpaceOnUse"><path class="pattern-line" d="M 0,8 l 8,-8 M -1,1 l 4,-4 M 6,10 l 4,-4" stroke="#FF0000" stroke-width="1.5" stroke-linecap="round" shape-rendering="geometricPrecision"></path></pattern></defs>
<style> text { font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace; stroke-width: 0.15em; paint-order: stroke; stroke-linejoin: round; cursor: default; } .vert-line:hover rect { fill: #911EB4; fill-opacity: 40%; stroke: #FFFFFF60; color: red; } .vert-line:hover text { stroke: white; fill: #212427; } .horizontal-line:hover text {stroke: white; fill: #212427; } .ref-line:hover rect { stroke: #FFFFFF60; } .ref-line:hover line { stroke: #FF0000; } .ref-line:hover text { stroke: white; fill: #212427; } .y-axis-line:hover rect { fill: #EDEDED; fill-opacity: 60%; stroke: #FFFFFF60; color: red; } .y-axis-line:hover text { stroke: white; stroke-width: 0.20em; fill: #1A1C1F; } </style>
<line x1="0.0" y1="5.0" x2="0.0" y2="125.0" stroke="#BFBFBF" stroke-width="4"></line><rect x="0.0" y="45.0" width="289.41176470588226" height="40" stroke="#577B8D" stroke-width="80" fill="#577B8D"></rect><g class="horizontal-line"><rect x="0" y="45.0" width="600" height="40" stroke="transparent" stroke-width="12" fill="transparent"></rect><text x="10.0" y="25" fill="transparent" stroke="transparent" font-size="30px">0.19</text></g>
</svg>
</div></td>
<td class="gt_row gt_right">$0.9</td>
<td class="gt_row gt_right"><div>
<svg viewbox="0 0 600 130" style="height: 3em; margin-left: auto; margin-right: auto; font-size: inherit; overflow: visible; vertical-align: middle; position:relative;">
<defs><pattern id="area_pattern" width="8" height="8" patternunits="userSpaceOnUse"><path class="pattern-line" d="M 0,8 l 8,-8 M -1,1 l 4,-4 M 6,10 l 4,-4" stroke="#FF0000" stroke-width="1.5" stroke-linecap="round" shape-rendering="geometricPrecision"></path></pattern></defs>
<style> text { font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace; stroke-width: 0.15em; paint-order: stroke; stroke-linejoin: round; cursor: default; } .vert-line:hover rect { fill: #911EB4; fill-opacity: 40%; stroke: #FFFFFF60; color: red; } .vert-line:hover text { stroke: white; fill: #212427; } .horizontal-line:hover text {stroke: white; fill: #212427; } .ref-line:hover rect { stroke: #FFFFFF60; } .ref-line:hover line { stroke: #FF0000; } .ref-line:hover text { stroke: white; fill: #212427; } .y-axis-line:hover rect { fill: #EDEDED; fill-opacity: 60%; stroke: #FFFFFF60; color: red; } .y-axis-line:hover text { stroke: white; stroke-width: 0.20em; fill: #1A1C1F; } </style>
<line x1="0.0" y1="5.0" x2="0.0" y2="125.0" stroke="#BFBFBF" stroke-width="4"></line><rect x="0.0" y="45.0" width="93.74999999999987" height="40" stroke="#577B8D" stroke-width="80" fill="#577B8D"></rect><g class="horizontal-line"><rect x="0" y="45.0" width="600" height="40" stroke="transparent" stroke-width="12" fill="transparent"></rect><text x="10.0" y="25" fill="transparent" stroke="transparent" font-size="30px">0.050</text></g>
</svg>
</div></td>
</tr>
<tr class="odd">
<td class="gt_row gt_left gt_stub" data-quarto-table-cell-role="th">Grand Total</td>
<td class="gt_row gt_right" style="font-style: bolder; background-color: #EEEEEE; border-top: 2px solid grey; border-bottom: 2px solid grey">1,088</td>
<td class="gt_row gt_right" style="font-style: bolder; background-color: #EEEEEE; border-top: 2px solid grey; border-bottom: 2px solid grey; color: #EEEEEE; font-size: 0.5">None</td>
<td class="gt_row gt_right" style="font-style: bolder; background-color: #EEEEEE; border-top: 2px solid grey; border-bottom: 2px solid grey">$18.7</td>
<td class="gt_row gt_right" style="font-style: bolder; background-color: #EEEEEE; border-top: 2px solid grey; border-bottom: 2px solid grey; color: #EEEEEE; font-size: 0.5">None</td>
</tr>
</tbody><tfoot class="gt_sourcenotes">
<tr class="odd">
<td colspan="5" class="gt_sourcenote">Figure 2.1d: Table with data bar</td>
</tr>
</tfoot>

</table>


</div>
        
</div>
</div>
</div>
<p><code>great_tables</code> vẫn chưa thực sự render ra được bảng biểu đúng như setting.</p>
<p>Bài thực hành đến đây là kết thúc! 🚀</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://www.storytellingwithdata.com/books" class="uri">https://www.storytellingwithdata.com/books</a></li>
<li><a href="https://rpubs.com/chidungkt/1139405" class="uri">https://rpubs.com/chidungkt/1139405</a></li>
<li><a href="https://posit-dev.github.io/great-tables/articles/intro.html" class="uri">https://posit-dev.github.io/great-tables/articles/intro.html</a></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>Python</category>
  <category>Visualization</category>
  <guid>https://lktuan.github.io/blog/2024-05-22-swd-p2-improve-table/</guid>
  <pubDate>Tue, 21 May 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-05-22-swd-p2-improve-table/SWD-Cover-FULL-R5-MED.png" medium="image" type="image/png" height="180" width="144"/>
</item>
<item>
  <title>Python is cool ❄</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-05-21-python-is-cool/</link>
  <description><![CDATA[ 





<section id="motivation" class="level1">
<h1>1. Motivation</h1>
<hr>
<p>Đây là một bài thực hành theo một <a href="https://github.com/chiphuyen/python-is-cool/tree/master">post</a> bởi chị <a href="https://huyenchip.com/">Chip Huyen</a> về một số features đặc biệt của Python. Là một DA không sử dụng Python quá nhiều, chỉ một số feature dưới đây là mình đã từng <em>nghe</em> qua. Hi vọng bài thực hành sẽ giúp mình hứng thú với Python hơn!</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-05-21-python-is-cool/python.jpg" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Dong Nai Cultural Nature Reserve, a python lying along the stream waiting for the prey. Photo credit to <a href="https://www.instagram.com/vietnamphotos_herping/">PhucNguyenPhotos</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="lambda-map-filter-reduce" class="level1">
<h1>2. Lambda, map, filter, &amp; reduce</h1>
<hr>
<p>Lambda cho phép người dùng định nghĩa in-line functions. Việc sử dụng <code>lambda()</code> rất thuận tiện khi gọi lại (callback ~ một function được thực thi sau khi một function khác được thực thi; một cách lưu trữ function) hoặc khi đầu ra của một function là đối số cho một function khác.</p>
<p>Hai hàm <code>square_fn</code> và <code>square_ld</code> dưới đây là một:</p>
<div id="9888a1b5" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> square_fn(x):</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x</span>
<span id="cb1-3"></span>
<span id="cb1-4">square_ld <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x : x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb1-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> square_fn(i) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> square_ld(i)</span></code></pre></div>
</div>
<p><code>lambda</code> rất hữu ích khi sử dụng cùng với các function khác như <code>map</code>, <code>filter</code>, và <code>reduce</code> (mình rất hay sử dụng pattern này trên Excel 😂). <code>map(fn, interable)</code> sẽ apply hàm <code>fn</code> cho tất cả các phần tử trong <code>iterable</code> (như list, set, dict, tuple, string), trả về map object.</p>
<div id="122f7ae6" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">nums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1001</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>]</span>
<span id="cb2-2">nums_squared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> num <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nums]</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(nums_squared)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0.1111111111111111, 0.08163265306122448, 0.0007125340444444445, 2.194787379972565]</code></pre>
</div>
</div>
<p>Dùng <code>map</code> và một hàm callback, cho ra kết quả tương đương:</p>
<div id="f82670d0" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">nums_squared_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(square_fn, nums)</span>
<span id="cb4-2">nums_squared_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x, nums)</span>
<span id="cb4-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(nums_squared_1)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list to list the elements of map object</span></span>
<span id="cb4-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(nums_squared_2))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0.1111111111111111, 0.08163265306122448, 0.0007125340444444445, 2.194787379972565]
[0.1111111111111111, 0.08163265306122448, 0.0007125340444444445, 2.194787379972565]</code></pre>
</div>
</div>
<p>Có thể dùng <code>map</code> với nhiều hơn 1 iterable. Ví dụ muốn tính MSE cho một hồi quy tuyến tính đơn giản <code>f(x) = ax + b</code> với ground tru <code>labels</code>, hai phương pháp sau tương đương:</p>
<div id="fd4ece20" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb6-2">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb6-3">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.3</span>]</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Phương pháp 1, loop</span></span>
<span id="cb6-6">errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(xs):</span>
<span id="cb6-8">    errors.append( (a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> labels[i])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> )</span>
<span id="cb6-9">result_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(errors)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xs)</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Phương pháp 2, map</span></span>
<span id="cb6-12">diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x, y: (a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, xs, labels) </span>
<span id="cb6-13">result_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(diff)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xs)</span>
<span id="cb6-14"></span>
<span id="cb6-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result_1, result_2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.35089172119045514 0.35089172119045514</code></pre>
</div>
</div>
<p><code>filter(fn, iterable)</code> giống như <code>map</code>, tuy nhiên <code>fn</code> là một hàm trả về giá trị boolean true/false, và <code>filter</code> sẽ trả về các phần tử của <code>iterable</code> khi <code>fn</code> trả về true.</p>
<div id="ac926059" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">bad_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, errors)</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(bad_preds))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0.8100000000000006, 0.6400000000000011]</code></pre>
</div>
</div>
<p><code>reduce(fn, iterable, initializer)</code> được dùng khi ta muốn áp dụng một toán lên tất cả thành phần trong danh sách. Ví dụ muốn tính kết quả nhân của toàn bộ phần tử:</p>
<div id="b5b421de" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nums:</span>
<span id="cb10-3">    product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> num</span>
<span id="cb10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(product)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.0037662551440329215</code></pre>
</div>
</div>
<p>Sử dụng <code>reduce</code>:</p>
<div id="6b0aef3b" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span></span>
<span id="cb12-2"></span>
<span id="cb12-3">product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x, y: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y, nums)</span>
<span id="cb12-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(product)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.0037662551440329215</code></pre>
</div>
</div>
<section id="hiệu-suất-hàm-lambda" class="level3">
<h3 class="anchored" data-anchor-id="hiệu-suất-hàm-lambda">Hiệu suất hàm Lambda</h3>
<p>Lambda được thiết kế để sử dụng một lần. Mỗi lần được gọi, hàm <code>lambda x: dosomething(x)</code> đều được tạo lại, và do đó ảnh hưởng tới hiệu suất.</p>
<p>Khi hàm lambda được định nghĩa trước <code>fn = lambda x: dosomething(x)</code>, hiệu suất của nó vẫn chậm hơn <code>def</code>, tuy nhiên không <a href="https://stackoverflow.com/questions/26540885/lambda-is-slower-than-function-call-in-python-why">đáng kể</a>.</p>
<p>🚀Nguyên văn chị Chip:</p>
<blockquote class="blockquote">
<p>Even though I find lambdas cool, I personally recommend using named functions when you can for the sake of clarity.</p>
</blockquote>
</section>
</section>
<section id="list-manipulation" class="level1">
<h1>3. List manipulation</h1>
<hr>
<section id="unpacking" class="level2">
<h2 class="anchored" data-anchor-id="unpacking">3.1. Unpacking</h2>
<p>Chúng ta có thể “giải nén” một list như thế này:</p>
<div id="efdf8d40" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">elems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb14-2">a,b,c,d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> elems</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a,b,c,d)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 2 3 4</code></pre>
</div>
</div>
<p>Cũng có thể làm như thế này:</p>
<div id="78c1eded" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1">a, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_elems, d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> elems <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remember the char * for extended unpacking</span></span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a)</span>
<span id="cb16-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(new_elems)</span>
<span id="cb16-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1
[2, 3]
2</code></pre>
</div>
</div>
</section>
<section id="slicing" class="level2">
<h2 class="anchored" data-anchor-id="slicing">3.2. Slicing</h2>
<p>Chúng ta có thể reverse/đảo ngược một list với <code>[::-1]</code></p>
<div id="e21f7cd2" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1">elem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb18-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(elem)</span>
<span id="cb18-3"></span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(elem[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</code></pre>
</div>
</div>
<p>Cú pháp <code>[x:y:z]</code> có nghĩa là lấy <strong><em>mỗi</em></strong> phần tử thứ <code>z</code> từ index <code>x</code> tới index <code>y</code>. Khi <code>z</code> âm, tương đương với việc lấy theo thứ tự ngược lại. <code>x</code> để trống chỉ việc lấy từ phần tử đầu tiên, <code>y</code> để rỗng chỉ việc lấy tới phần tử cuối cùng.</p>
<div id="9468221c" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">evens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> elem[::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb20-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(evens)</span>
<span id="cb20-3"></span>
<span id="cb20-4">reversed_evens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> elem[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb20-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(reversed_evens)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 2, 4, 6, 8]
[2, 0]</code></pre>
</div>
</div>
<p>Cũng có thể dùng slicing để xóa các phần tử như thế này:</p>
<div id="4267e8c1" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> elems[::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(elems)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[2, 4]</code></pre>
</div>
</div>
</section>
<section id="insertion" class="level2">
<h2 class="anchored" data-anchor-id="insertion">3.3. Insertion</h2>
<p>Chúng ta có thể thay đổi giá trị một phần tử trong một list như sau:</p>
<div id="f1ce0405" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1">elems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb24-2"></span>
<span id="cb24-3">elems[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb24-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(elems)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 100, 2, 3, 4, 5, 6, 7, 8, 9]</code></pre>
</div>
</div>
<p>Cũng có thể thay thế một giá trị bằng nhiều giá trị:</p>
<div id="21c62118" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1">elems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb26-2">elems[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>]</span>
<span id="cb26-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(elems)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 20, 30, 40, 2, 3, 4, 5, 6, 7, 8, 9]</code></pre>
</div>
</div>
<p>Nếu chúng ta muốn thêm 3 giá trị <code>0.3, 0.4, 0.5</code> vào giữa phần tử thứ 0 và 1 của list này, thì:</p>
<div id="f3b4625b" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">elems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb28-2">elems[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>]</span>
<span id="cb28-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(elems)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 0.3, 0.4, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code></pre>
</div>
</div>
</section>
<section id="flattening" class="level2">
<h2 class="anchored" data-anchor-id="flattening">3.4. Flattening</h2>
<p>Chúng ta có thể flatten một list sử dung <code>sum(0)</code>:</p>
<div id="df700b8a" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1">list_of_lists <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]]</span>
<span id="cb30-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(list_of_lists, [])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>[1, 2, 3, 4, 5, 6]</code></pre>
</div>
</div>
<p>Cũng có thể sử dụng recursive lambda (another beauty of lambda)</p>
<div id="9e23f219" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1">nested_lists <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>], [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>]]]]]]</span>
<span id="cb32-2">flatten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: [y <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> flatten(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(x) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> [x]</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(flatten(nested_lists))</span>
<span id="cb32-5"></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This line of code is from</span></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://github.com/sahands/python-by-example/blob/master/python-by-example.rst#flattening-lists</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]</code></pre>
</div>
</div>
</section>
<section id="list-vs-generator" class="level2">
<h2 class="anchored" data-anchor-id="list-vs-generator">3.5. List vs Generator</h2>
<p>🚀Generator là cái gì vậy? Trích <a href="https://manhhomienbienthuy.github.io/2016/01/05/python-iterator-generator.html">bài viết</a>:</p>
<blockquote class="blockquote">
<p>Từ generator được sử dụng cho cả hàm (hàm generator là hàm đã nói ở trên) và kết quả mà hàm đó sinh ra (đối tượng được hàm generator sinh ra cũng được gọi là generator). Vì vậy đôi khi việc này gây khó hiểu một chút. Hãy xem ví dụ về việc tạo n-grams từ một danh sách tokens dưới đây để hiểu sự khác biệt giữa list và generator:</p>
</blockquote>
<div id="4cd2d860" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1">tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'i'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'want'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'go'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'school'</span>]</span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ngrams(tokens, n):</span>
<span id="cb34-4">    length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tokens)</span>
<span id="cb34-5">    grams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb34-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb34-7">        grams.append(tokens[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>n])</span>
<span id="cb34-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> grams</span>
<span id="cb34-9"></span>
<span id="cb34-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ngrams(tokens, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[['i', 'want', 'to'], ['want', 'to', 'go'], ['to', 'go', 'to'], ['go', 'to', 'school']]</code></pre>
</div>
</div>
<p>Trong ví dụ này, chúng ta phải lưu toàn bộ n-grams một lúc. Nếu có <code>m</code> tokens, memory requirement là <code>O(nm)</code> - sẽ là vấn đề nếu <code>m</code> lớn. Thay vào đó, chúng ta có thể sử dụng generator để tạo n-grams tiếp theo khi được yêu cầu. Đây gọi là lazy evaluation. Chúng ta có thể tạo một hàm <code>ngrams</code> trả về một generator sử dụng keyword <code>yield</code>, lúc này memory requirement là <code>O(n+m)</code>.</p>
<div id="deca1bee" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ngrams(tokens, n):</span>
<span id="cb36-2">    length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tokens)</span>
<span id="cb36-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb36-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> tokens[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>n]</span>
<span id="cb36-5"></span>
<span id="cb36-6">ngrams_generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ngrams(tokens, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb36-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ngrams_generator)</span>
<span id="cb36-8"></span>
<span id="cb36-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ngram <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ngrams_generator:</span>
<span id="cb36-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ngram)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;generator object ngrams at 0x000001FA3A270C70&gt;
['i', 'want', 'to']
['want', 'to', 'go']
['to', 'go', 'to']
['go', 'to', 'school']</code></pre>
</div>
</div>
<p>Một cách khác để tạo n-grams là slice để lấy các sub-list <code>[0, 1, 2, ...,-n]</code>, <code>[1, 2, 3, ...,-n+1]</code>, <code>[2, 3, 4, ...,-n+2]</code>,… <code>[n-1, n, ...,-1]</code>, sau đó <code>zip</code> chúng lại:</p>
<div id="502fa5c2" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ngrams(tokens, n):</span>
<span id="cb38-2">    length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tokens)</span>
<span id="cb38-3">    slices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (tokens[i:length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n))</span>
<span id="cb38-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>slices)</span>
<span id="cb38-5"></span>
<span id="cb38-6">ngrams_generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ngrams(tokens, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb38-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ngrams_generator)</span>
<span id="cb38-8"></span>
<span id="cb38-9"></span>
<span id="cb38-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ngram <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ngrams_generator:</span>
<span id="cb38-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ngram)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;zip object at 0x000001FA3A2BBC40&gt;
('i', 'want', 'to')
('want', 'to', 'go')
('to', 'go', 'to')
('go', 'to', 'school')</code></pre>
</div>
</div>
<p>Lưu ý chúng ta sử dụng <code>(tokens[...] for i in range(n))</code>, chứ không phải <code>[tokens[...] for i in range(n)]</code>. <code>[]</code> trả về một list, <code>()</code> trả về generator. # 4. Classes &amp; magic methods</p>
<hr>
<p>Trong Python, magic methods được prefixed và suffixed bởi double underscore <code>__</code> (aka dunder). Magic method được biết đến rộng rãi nhất là <code>__init__</code>.</p>
<div id="1485fbe8" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Node:</span>
<span id="cb40-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" A struct to denote the node of a binary tree.</span></span>
<span id="cb40-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    It contains a value and pointers to left and right children.</span></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb40-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value, left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb40-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span>
<span id="cb40-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> left</span>
<span id="cb40-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> right</span></code></pre></div>
</div>
<p>In ra object, tuy nhiên nhìn không tường minh lắm!</p>
<div id="18de2076" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1">root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb41-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(root) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;__main__.Node object at 0x1069c4518&gt;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;__main__.Node object at 0x000001FA3A2C4690&gt;</code></pre>
</div>
</div>
<p>Chúng ta mong muốn khi in ra một Node, giá trị của nó cũng như giá trị của các Node con (nếu có) cũng sẽ được in ra. Chúng ta dùng <code>__repr__</code>:</p>
<div id="09a226d8" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Node:</span>
<span id="cb43-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" A struct to denote the node of a binary tree.</span></span>
<span id="cb43-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    It contains a value and pointers to left and right children.</span></span>
<span id="cb43-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb43-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value, left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb43-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span>
<span id="cb43-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> left</span>
<span id="cb43-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> right</span>
<span id="cb43-9"></span>
<span id="cb43-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb43-11">        strings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>]</span>
<span id="cb43-12">        strings.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'left: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>left<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left: None'</span>)</span>
<span id="cb43-13">        strings.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'right: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>right<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.right <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right: None'</span>)</span>
<span id="cb43-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>.join(strings)</span>
<span id="cb43-15"></span>
<span id="cb43-16">left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb43-17">root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, left)</span>
<span id="cb43-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(root) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># value: 5, left: 4, right: None</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>value: 5, left: 4, right: None</code></pre>
</div>
</div>
<p>Chúng ta cũng muốn hai Node có thể được so sánh được với nhau, vì thế tạo ra các magic method để implement các operator: <code>==</code> với <code>__eq__</code>, <code>&gt;</code> với <code>__lt__</code>, ‘&gt;=’ với <code>__ge__</code>:</p>
<div id="8f2c4b23" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Node:</span>
<span id="cb45-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" A struct to denote the node of a binary tree.</span></span>
<span id="cb45-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    It contains a value and pointers to left and right children.</span></span>
<span id="cb45-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb45-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value, left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb45-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span>
<span id="cb45-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> left</span>
<span id="cb45-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> right</span>
<span id="cb45-9"></span>
<span id="cb45-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__eq__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb45-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> other.value</span>
<span id="cb45-12"></span>
<span id="cb45-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__lt__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb45-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> other.value</span>
<span id="cb45-15"></span>
<span id="cb45-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__ge__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb45-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> other.value</span>
<span id="cb45-18"></span>
<span id="cb45-19"></span>
<span id="cb45-20">left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb45-21">root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, left)</span>
<span id="cb45-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> root) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># False</span></span>
<span id="cb45-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> root) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True</span></span>
<span id="cb45-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> root) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># False</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>False
True
False</code></pre>
</div>
</div>
<p>Xem <a href="https://www.tutorialsteacher.com/python/magic-methods-in-python">ở đây</a>, hoặc <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names">ở đây</a> danh sách đầy đủ các magic method mà Python hỗ trợ.</p>
<p>Một số magic method khác cần chú ý <code>__len__</code>, <code>__str__</code>, <code>__iter__</code>, and <code>__slots__</code> (tham khảo <a href="https://stackoverflow.com/questions/472000/usage-of-slots/28059785#28059785">đây</a>)</p>
</section>
</section>
<section id="local-namespace-objects-attributes" class="level1">
<h1>5. Local namespace, object’s attributes</h1>
<hr>
<p>Hàm <code>locals()</code> trả về danh sách các biến nằm trong local namespace:</p>
<div id="68d48fb4" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Model1:</span>
<span id="cb47-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-4</span>):</span>
<span id="cb47-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">locals</span>())</span>
<span id="cb47-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hidden_size</span>
<span id="cb47-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_layers</span>
<span id="cb47-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learning_rate</span>
<span id="cb47-7"></span>
<span id="cb47-8">model1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model1()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'self': &lt;__main__.Model1 object at 0x000001FA3A2C6150&gt;, 'hidden_size': 100, 'num_layers': 3, 'learning_rate': 0.0003}</code></pre>
</div>
</div>
<p>Các attributes của 1 object cũng được lưu hết trong <code>__dict__</code>:</p>
<div id="61f3a5e8" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model1.__dict__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'hidden_size': 100, 'num_layers': 3, 'learning_rate': 0.0003}</code></pre>
</div>
</div>
<p>Khi có quá nhiều arguments, việc assign nó trong <code>__init__</code> trở nên phiền hà, chúng ta có thể làm như sau:</p>
<div id="75043cdd" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Model2:</span>
<span id="cb51-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-4</span>):</span>
<span id="cb51-3">        params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">locals</span>()</span>
<span id="cb51-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'self'</span>]</span>
<span id="cb51-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__dict__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb51-6"></span>
<span id="cb51-7">model2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model2()</span>
<span id="cb51-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model2.__dict__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'hidden_size': 100, 'num_layers': 3, 'learning_rate': 0.0003}</code></pre>
</div>
</div>
<p>Thậm chí rất tiện khi làm việc với <code>*kwargs</code>:</p>
<div id="9ce39ec7" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Model3:</span>
<span id="cb53-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb53-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__dict__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kwargs</span>
<span id="cb53-4"></span>
<span id="cb53-5">model3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model3(hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-4</span>)</span>
<span id="cb53-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model3.__dict__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'hidden_size': 100, 'num_layers': 3, 'learning_rate': 0.0003}</code></pre>
</div>
</div>
<p>Đọc thêm về <code>*args</code> và <code>*kwargs</code> ở <a href="https://manhhomienbienthuy.github.io/2019/09/20/python-args-kwargs.html">đây</a>.</p>
</section>
<section id="wild-import" class="level1">
<h1>6. Wild Import</h1>
<hr>
<p>Chúng ta thường <code>import</code> tất cả như thế này:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>file.py</strong></pre>
</div>
<div class="sourceCode" id="cb55" data-filename="file.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb55-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> parts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<p>Sẽ là vô trách nhiệm khi chúng ta import toàn bộ module, ví dụ nếu <code>parts.py</code> có cấu trúc như thế này:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>parts.py</strong></pre>
</div>
<div class="sourceCode" id="cb56" data-filename="parts.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb56-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy </span>
<span id="cb56-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow </span>
<span id="cb56-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Encoder: </span>
<span id="cb56-5">    ... </span>
<span id="cb56-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Decoder: </span>
<span id="cb56-7">    ... </span>
<span id="cb56-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Loss: </span>
<span id="cb56-9">    ... </span>
<span id="cb56-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> helper(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs): </span>
<span id="cb56-11">    ...</span>
<span id="cb56-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> utils(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs): </span>
<span id="cb56-13">    ... </span></code></pre></div>
</div>
<p>Vì <code>parts.py</code> không định nghĩa <code>__all__</code>, nên <code>file.py</code> sẽ import tất cả Encoder, Decoder, Loss, helper, untils cùng với numpy và tensorFlow. Nếu chỉ muốn import Encoder, Decoder, Loss, chúng ta nên làm như sau:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>parts.py</strong></pre>
</div>
<div class="sourceCode" id="cb57" data-filename="parts.py" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| eval: false</span></span>
<span id="cb57-2">__all__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Encoder'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Decoder'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>] </span>
<span id="cb57-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy </span>
<span id="cb57-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow </span>
<span id="cb57-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Encoder: </span>
<span id="cb57-6">    ... </span></code></pre></div>
</div>
<p>Chúng ta có thể dùng <code>__all__</code> để tìm hiểu thành phần một module.</p>
</section>
<section id="decorator-to-time-your-functions" class="level1">
<h1>7. Decorator to time your functions</h1>
<hr>
<p>Chúng ta thường muốn đo lường thời gian chạy của 1 function. Các tự nhiên thường dùng là đặt <code>time.time()</code> ở hai điểm đầu và cuối giữa các lệnh.</p>
<p>Ví dụ, với hàm tìm số Fibbonacci thứ n, với hai cách (1 cách sử dụng memoization).</p>
<div id="5d61710a" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fib_helper(n):</span>
<span id="cb58-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb58-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> n</span>
<span id="cb58-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> fib_helper(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fib_helper(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb58-5"></span>
<span id="cb58-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fib(n):</span>
<span id="cb58-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" fib is a wrapper function so that later we can change its behavior</span></span>
<span id="cb58-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    at the top level without affecting the behavior at every recursion step.</span></span>
<span id="cb58-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb58-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> fib_helper(n)</span>
<span id="cb58-11"></span>
<span id="cb58-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fib_m_helper(n, computed):</span>
<span id="cb58-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> computed:</span>
<span id="cb58-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> computed[n]</span>
<span id="cb58-15">    computed[n] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fib_m_helper(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, computed) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fib_m_helper(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, computed)</span>
<span id="cb58-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> computed[n]</span>
<span id="cb58-17"></span>
<span id="cb58-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fib_m(n):</span>
<span id="cb58-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> fib_m_helper(n, {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>})</span></code></pre></div>
</div>
<p>Hãy chắc chắn <code>fib</code> và <code>fib_m</code> tương đương nhau:</p>
<div id="27d4f072" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb59-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> fib(n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> fib_m(n)</span></code></pre></div>
</div>
<p>Đo lường thời gian chạy:</p>
<div id="3f91e92f" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb60-2"></span>
<span id="cb60-3">start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb60-4">fib(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb60-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Without memoization, it takes </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:7f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds.'</span>)</span>
<span id="cb60-6"></span>
<span id="cb60-7">start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb60-8">fib_m(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb60-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'With memoization, it takes </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.7f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Without memoization, it takes 0.160464 seconds.
With memoization, it takes 0.0000000 seconds.</code></pre>
</div>
</div>
<p>Using decorator, define <code>timeit</code>:</p>
<div id="298854f3" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> timeit(fn): </span>
<span id="cb62-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># *args and **kwargs are to support positional and named arguments of fn</span></span>
<span id="cb62-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_time(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs): </span>
<span id="cb62-4">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() </span>
<span id="cb62-5">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fn(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb62-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Time taken in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.7f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb62-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure that the decorator returns the output of fn</span></span>
<span id="cb62-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> get_time </span></code></pre></div>
</div>
<p>Sau đó thêm <code>@timeit</code> tới function:</p>
<div id="409cf0d5" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@timeit</span></span>
<span id="cb63-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fib(n):</span>
<span id="cb63-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> fib_helper(n)</span>
<span id="cb63-4"></span>
<span id="cb63-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@timeit</span></span>
<span id="cb63-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fib_m(n):</span>
<span id="cb63-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> fib_m_helper(n, {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>})</span>
<span id="cb63-8"></span>
<span id="cb63-9">fib(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb63-10">fib_m(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time taken in fib: 0.1869819
Time taken in fib_m: 0.0000000</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>832040</code></pre>
</div>
</div>
</section>
<section id="caching-with-functools.lru_cache" class="level1">
<h1>8. Caching with <code>@functools.lru_cache</code></h1>
<hr>
<p>🚀Nguyên văn chị Huyền:</p>
<blockquote class="blockquote">
<p>Memoization is a form of cache: we cache the previously calculated Fibonacci numbers so that we don’t have to calculate them again.</p>
</blockquote>
<div id="3f0078d5" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb66-2"></span>
<span id="cb66-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.lru_cache</span>()</span>
<span id="cb66-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fib_helper(n):</span>
<span id="cb66-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb66-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> n</span>
<span id="cb66-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> fib_helper(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fib_helper(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb66-8"></span>
<span id="cb66-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@timeit</span></span>
<span id="cb66-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fib(n):</span>
<span id="cb66-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" fib is a wrapper function so that later we can change its behavior</span></span>
<span id="cb66-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    at the top level without affecting the behavior at every recursion step.</span></span>
<span id="cb66-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb66-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> fib_helper(n)</span>
<span id="cb66-15"></span>
<span id="cb66-16">fib(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb66-17">fib_m(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time taken in fib: 0.0000000
Time taken in fib_m: 0.0000000</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>12586269025</code></pre>
</div>
</div>
<p><code>lru</code> stands for “least recently used”. For more information on cache, see <a href="https://docs.python.org/3/library/functools.html">here</a>.</p>
</section>
<section id="reference" class="level1">
<h1>Reference</h1>
<hr>
<p>Source: <a href="https://github.com/chiphuyen/python-is-cool/tree/master" class="uri">https://github.com/chiphuyen/python-is-cool/tree/master</a></p>


<!-- -->

</section>

 ]]></description>
  <category>Python</category>
  <category>Lambda</category>
  <guid>https://lktuan.github.io/blog/2024-05-21-python-is-cool/</guid>
  <pubDate>Mon, 20 May 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-05-21-python-is-cool/python.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Kinh tế lượng với Julia 1: Làm quen với Julia</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-04-19-qej-1/</link>
  <description><![CDATA[ 





<section id="bắt-đầu-với-julia" class="level1">
<h1>1. Bắt đầu với Julia</h1>
<p>Với giả định mình đã quen thuộc với các concepts của một ngôn ngữ lập trình như: Biến (Variables), Các kiểu dữ liệu (như Arrays và Vectors), Vòng lặp (Loops), Điều hướng (Conditionals - if/else), mình sẽ thử thực hành một vài ví dụ nhỏ với Julia với mục đích tìm hiểu các cú pháp và cấu trúc dữ liệu cơ bản.</p>
<p>Code không hẳn đã được tối ưu, nhưng sẽ dần được tối ưu theo các ví dụ về sau!</p>
<section id="các-ví-dụ-mở-đầu" class="level2">
<h2 class="anchored" data-anchor-id="các-ví-dụ-mở-đầu">1.1. Các ví dụ mở đầu</h2>
<section id="vẽ-một-quá-trình-sinh-nhiễu-trắng-white-noise-process" class="level3">
<h3 class="anchored" data-anchor-id="vẽ-một-quá-trình-sinh-nhiễu-trắng-white-noise-process">1.1.1. Vẽ một quá trình sinh nhiễu trắng (White Noise Process)</h3>
<p><strong>Quản lý Packages</strong>: Có hai cách để quản lý Packages và Versions (Phương pháp thứ 2 được recommend khi Julia cung cấp sẵn một phương pháp SOTA cho quản lý môi trường có khả năng tái tạo lại cao):</p>
<ol type="1">
<li><code>add</code> pakages một cách trực tiếp (ví dụ <code>Pkg.add("MyPackage")</code> hoặc <code>] add MyPackage</code>):</li>
</ol>
<ul>
<li><p>Phải cài đặt <code>IJulia</code> trên toàn cục để sử dụng trong mọi dự án;</p></li>
<li><p><code>]</code> là phím tắt để truy cập vào quản lý pakages.</p></li>
</ul>
<ol start="2" type="1">
<li>Dùng các file <code>Project.toml</code> và <code>Manifest.toml</code>:</li>
</ol>
<ul>
<li><p>Nếu dùng notebook, các file này sẽ được tự đông xác định, nhưng cài đặt sẽ không tự động, cần <code>] instantiate</code>;</p></li>
<li><p>Tệp Project có thể nằm ở folder mẹ của Notebook và Sourcecode.</p></li>
</ul>
<div id="d1e2fbb2" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">LinearAlgebra</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Statistics</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Plots</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">LaTeXStrings</span></span></code></pre></div>
</details>
</div>
<p><strong>Sử dụng các hàm</strong>: Có những function có sẵn trong Julia base, như <code>randn()</code></p>
<div id="853ebfd7" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">randn</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>0.09985220377206018</code></pre>
</div>
</div>
<p>Một số hàm cần gọi các thư viện ngoài Base, ví dụ <code>plot()</code> của thư viện <code>Plots</code>:</p>
<div id="bdd84f02" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb4-1">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb4-2">ep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">randn</span>(n)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n,ep)</span>
<span id="cb4-4"></span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># \ep</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<!--?xml version="1.0" encoding="utf-8"?-->
<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="672" height="480" viewbox="0 0 2688 1920">
<defs>
  <clippath id="clip930">
    <rect x="0" y="0" width="2688" height="1920"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip930)" d="M0 1920 L2688 1920 L2688 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip931">
    <rect x="537" y="0" width="1883" height="1883"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip930)" d="M150.358 1800.78 L2640.76 1800.78 L2640.76 47.2441 L150.358 47.2441  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip932">
    <rect x="150" y="47" width="2491" height="1755"></rect>
  </clippath>
</defs>
<polyline clip-path="url(#clip932)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="197.109,1800.78 197.109,47.2441 "></polyline>
<polyline clip-path="url(#clip932)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="790.4,1800.78 790.4,47.2441 "></polyline>
<polyline clip-path="url(#clip932)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1383.69,1800.78 1383.69,47.2441 "></polyline>
<polyline clip-path="url(#clip932)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1976.98,1800.78 1976.98,47.2441 "></polyline>
<polyline clip-path="url(#clip932)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2570.27,1800.78 2570.27,47.2441 "></polyline>
<polyline clip-path="url(#clip930)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="150.358,1800.78 2640.76,1800.78 "></polyline>
<polyline clip-path="url(#clip930)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="197.109,1800.78 197.109,1781.88 "></polyline>
<polyline clip-path="url(#clip930)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="790.4,1800.78 790.4,1781.88 "></polyline>
<polyline clip-path="url(#clip930)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1383.69,1800.78 1383.69,1781.88 "></polyline>
<polyline clip-path="url(#clip930)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1976.98,1800.78 1976.98,1781.88 "></polyline>
<polyline clip-path="url(#clip930)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2570.27,1800.78 2570.27,1781.88 "></polyline>
<path clip-path="url(#clip930)" d="M197.109 1834 Q193.498 1834 191.669 1837.57 Q189.864 1841.11 189.864 1848.24 Q189.864 1855.34 191.669 1858.91 Q193.498 1862.45 197.109 1862.45 Q200.743 1862.45 202.549 1858.91 Q204.378 1855.34 204.378 1848.24 Q204.378 1841.11 202.549 1837.57 Q200.743 1834 197.109 1834 M197.109 1830.3 Q202.919 1830.3 205.975 1834.9 Q209.054 1839.49 209.054 1848.24 Q209.054 1856.96 205.975 1861.57 Q202.919 1866.15 197.109 1866.15 Q191.299 1866.15 188.22 1861.57 Q185.165 1856.96 185.165 1848.24 Q185.165 1839.49 188.22 1834.9 Q191.299 1830.3 197.109 1830.3 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M769.671 1861.55 L785.99 1861.55 L785.99 1865.48 L764.046 1865.48 L764.046 1861.55 Q766.708 1858.79 771.291 1854.16 Q775.898 1849.51 777.078 1848.17 Q779.324 1845.65 780.203 1843.91 Q781.106 1842.15 781.106 1840.46 Q781.106 1837.71 779.162 1835.97 Q777.241 1834.23 774.139 1834.23 Q771.94 1834.23 769.486 1835 Q767.055 1835.76 764.278 1837.31 L764.278 1832.59 Q767.102 1831.46 769.555 1830.88 Q772.009 1830.3 774.046 1830.3 Q779.416 1830.3 782.611 1832.98 Q785.805 1835.67 785.805 1840.16 Q785.805 1842.29 784.995 1844.21 Q784.208 1846.11 782.102 1848.7 Q781.523 1849.37 778.421 1852.59 Q775.319 1855.78 769.671 1861.55 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M795.852 1830.92 L814.208 1830.92 L814.208 1834.86 L800.134 1834.86 L800.134 1843.33 Q801.152 1842.98 802.171 1842.82 Q803.189 1842.64 804.208 1842.64 Q809.995 1842.64 813.375 1845.81 Q816.754 1848.98 816.754 1854.4 Q816.754 1859.97 813.282 1863.08 Q809.81 1866.15 803.49 1866.15 Q801.314 1866.15 799.046 1865.78 Q796.801 1865.41 794.393 1864.67 L794.393 1859.97 Q796.477 1861.11 798.699 1861.66 Q800.921 1862.22 803.398 1862.22 Q807.402 1862.22 809.74 1860.11 Q812.078 1858.01 812.078 1854.4 Q812.078 1850.78 809.74 1848.68 Q807.402 1846.57 803.398 1846.57 Q801.523 1846.57 799.648 1846.99 Q797.796 1847.4 795.852 1848.28 L795.852 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M1358.39 1830.92 L1376.75 1830.92 L1376.75 1834.86 L1362.67 1834.86 L1362.67 1843.33 Q1363.69 1842.98 1364.71 1842.82 Q1365.73 1842.64 1366.75 1842.64 Q1372.53 1842.64 1375.91 1845.81 Q1379.29 1848.98 1379.29 1854.4 Q1379.29 1859.97 1375.82 1863.08 Q1372.35 1866.15 1366.03 1866.15 Q1363.85 1866.15 1361.58 1865.78 Q1359.34 1865.41 1356.93 1864.67 L1356.93 1859.97 Q1359.02 1861.11 1361.24 1861.66 Q1363.46 1862.22 1365.94 1862.22 Q1369.94 1862.22 1372.28 1860.11 Q1374.62 1858.01 1374.62 1854.4 Q1374.62 1850.78 1372.28 1848.68 Q1369.94 1846.57 1365.94 1846.57 Q1364.06 1846.57 1362.19 1846.99 Q1360.33 1847.4 1358.39 1848.28 L1358.39 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M1398.51 1834 Q1394.89 1834 1393.07 1837.57 Q1391.26 1841.11 1391.26 1848.24 Q1391.26 1855.34 1393.07 1858.91 Q1394.89 1862.45 1398.51 1862.45 Q1402.14 1862.45 1403.95 1858.91 Q1405.77 1855.34 1405.77 1848.24 Q1405.77 1841.11 1403.95 1837.57 Q1402.14 1834 1398.51 1834 M1398.51 1830.3 Q1404.32 1830.3 1407.37 1834.9 Q1410.45 1839.49 1410.45 1848.24 Q1410.45 1856.96 1407.37 1861.57 Q1404.32 1866.15 1398.51 1866.15 Q1392.7 1866.15 1389.62 1861.57 Q1386.56 1856.96 1386.56 1848.24 Q1386.56 1839.49 1389.62 1834.9 Q1392.7 1830.3 1398.51 1830.3 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M1950.84 1830.92 L1973.06 1830.92 L1973.06 1832.91 L1960.51 1865.48 L1955.63 1865.48 L1967.43 1834.86 L1950.84 1834.86 L1950.84 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M1982.23 1830.92 L2000.58 1830.92 L2000.58 1834.86 L1986.51 1834.86 L1986.51 1843.33 Q1987.53 1842.98 1988.54 1842.82 Q1989.56 1842.64 1990.58 1842.64 Q1996.37 1842.64 1999.75 1845.81 Q2003.13 1848.98 2003.13 1854.4 Q2003.13 1859.97 1999.66 1863.08 Q1996.18 1866.15 1989.86 1866.15 Q1987.69 1866.15 1985.42 1865.78 Q1983.17 1865.41 1980.77 1864.67 L1980.77 1859.97 Q1982.85 1861.11 1985.07 1861.66 Q1987.29 1862.22 1989.77 1862.22 Q1993.78 1862.22 1996.11 1860.11 Q1998.45 1858.01 1998.45 1854.4 Q1998.45 1850.78 1996.11 1848.68 Q1993.78 1846.57 1989.77 1846.57 Q1987.9 1846.57 1986.02 1846.99 Q1984.17 1847.4 1982.23 1848.28 L1982.23 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M2529.88 1861.55 L2537.52 1861.55 L2537.52 1835.18 L2529.21 1836.85 L2529.21 1832.59 L2537.47 1830.92 L2542.15 1830.92 L2542.15 1861.55 L2549.79 1861.55 L2549.79 1865.48 L2529.88 1865.48 L2529.88 1861.55 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M2569.23 1834 Q2565.62 1834 2563.79 1837.57 Q2561.99 1841.11 2561.99 1848.24 Q2561.99 1855.34 2563.79 1858.91 Q2565.62 1862.45 2569.23 1862.45 Q2572.87 1862.45 2574.67 1858.91 Q2576.5 1855.34 2576.5 1848.24 Q2576.5 1841.11 2574.67 1837.57 Q2572.87 1834 2569.23 1834 M2569.23 1830.3 Q2575.04 1830.3 2578.1 1834.9 Q2581.18 1839.49 2581.18 1848.24 Q2581.18 1856.96 2578.1 1861.57 Q2575.04 1866.15 2569.23 1866.15 Q2563.42 1866.15 2560.34 1861.57 Q2557.29 1856.96 2557.29 1848.24 Q2557.29 1839.49 2560.34 1834.9 Q2563.42 1830.3 2569.23 1830.3 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M2599.39 1834 Q2595.78 1834 2593.95 1837.57 Q2592.15 1841.11 2592.15 1848.24 Q2592.15 1855.34 2593.95 1858.91 Q2595.78 1862.45 2599.39 1862.45 Q2603.03 1862.45 2604.83 1858.91 Q2606.66 1855.34 2606.66 1848.24 Q2606.66 1841.11 2604.83 1837.57 Q2603.03 1834 2599.39 1834 M2599.39 1830.3 Q2605.2 1830.3 2608.26 1834.9 Q2611.34 1839.49 2611.34 1848.24 Q2611.34 1856.96 2608.26 1861.57 Q2605.2 1866.15 2599.39 1866.15 Q2593.58 1866.15 2590.5 1861.57 Q2587.45 1856.96 2587.45 1848.24 Q2587.45 1839.49 2590.5 1834.9 Q2593.58 1830.3 2599.39 1830.3 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip932)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="150.358,1494.86 2640.76,1494.86 "></polyline>
<polyline clip-path="url(#clip932)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="150.358,1177.61 2640.76,1177.61 "></polyline>
<polyline clip-path="url(#clip932)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="150.358,860.361 2640.76,860.361 "></polyline>
<polyline clip-path="url(#clip932)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="150.358,543.112 2640.76,543.112 "></polyline>
<polyline clip-path="url(#clip932)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="150.358,225.863 2640.76,225.863 "></polyline>
<polyline clip-path="url(#clip930)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="150.358,1800.78 150.358,47.2441 "></polyline>
<polyline clip-path="url(#clip930)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="150.358,1494.86 169.256,1494.86 "></polyline>
<polyline clip-path="url(#clip930)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="150.358,1177.61 169.256,1177.61 "></polyline>
<polyline clip-path="url(#clip930)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="150.358,860.361 169.256,860.361 "></polyline>
<polyline clip-path="url(#clip930)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="150.358,543.112 169.256,543.112 "></polyline>
<polyline clip-path="url(#clip930)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="150.358,225.863 169.256,225.863 "></polyline>
<path clip-path="url(#clip930)" d="M49.9225 1495.31 L79.5983 1495.31 L79.5983 1499.25 L49.9225 1499.25 L49.9225 1495.31 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M93.7186 1508.2 L110.038 1508.2 L110.038 1512.14 L88.0936 1512.14 L88.0936 1508.2 Q90.7556 1505.45 95.3389 1500.82 Q99.9454 1496.17 101.126 1494.82 Q103.371 1492.3 104.251 1490.56 Q105.154 1488.81 105.154 1487.12 Q105.154 1484.36 103.209 1482.63 Q101.288 1480.89 98.1861 1480.89 Q95.9871 1480.89 93.5334 1481.65 Q91.1028 1482.42 88.3251 1483.97 L88.3251 1479.25 Q91.1491 1478.11 93.6028 1477.53 Q96.0565 1476.95 98.0935 1476.95 Q103.464 1476.95 106.658 1479.64 Q109.853 1482.32 109.853 1486.81 Q109.853 1488.94 109.043 1490.87 Q108.256 1492.76 106.149 1495.36 Q105.57 1496.03 102.469 1499.25 Q99.3667 1502.44 93.7186 1508.2 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M49.5521 1178.06 L79.2279 1178.06 L79.2279 1182 L49.5521 1182 L49.5521 1178.06 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M90.1306 1190.95 L97.7695 1190.95 L97.7695 1164.59 L89.4593 1166.26 L89.4593 1162 L97.7232 1160.33 L102.399 1160.33 L102.399 1190.95 L110.038 1190.95 L110.038 1194.89 L90.1306 1194.89 L90.1306 1190.95 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M98.0935 846.16 Q94.4824 846.16 92.6537 849.725 Q90.8482 853.266 90.8482 860.396 Q90.8482 867.502 92.6537 871.067 Q94.4824 874.609 98.0935 874.609 Q101.728 874.609 103.533 871.067 Q105.362 867.502 105.362 860.396 Q105.362 853.266 103.533 849.725 Q101.728 846.16 98.0935 846.16 M98.0935 842.456 Q103.904 842.456 106.959 847.063 Q110.038 851.646 110.038 860.396 Q110.038 869.123 106.959 873.729 Q103.904 878.312 98.0935 878.312 Q92.2834 878.312 89.2047 873.729 Q86.1492 869.123 86.1492 860.396 Q86.1492 851.646 89.2047 847.063 Q92.2834 842.456 98.0935 842.456 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M90.1306 556.457 L97.7695 556.457 L97.7695 530.092 L89.4593 531.758 L89.4593 527.499 L97.7232 525.832 L102.399 525.832 L102.399 556.457 L110.038 556.457 L110.038 560.392 L90.1306 560.392 L90.1306 556.457 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M93.7186 239.208 L110.038 239.208 L110.038 243.143 L88.0936 243.143 L88.0936 239.208 Q90.7556 236.454 95.3389 231.824 Q99.9454 227.171 101.126 225.829 Q103.371 223.306 104.251 221.57 Q105.154 219.81 105.154 218.12 Q105.154 215.366 103.209 213.63 Q101.288 211.894 98.1861 211.894 Q95.9871 211.894 93.5334 212.658 Q91.1028 213.421 88.3251 214.972 L88.3251 210.25 Q91.1491 209.116 93.6028 208.537 Q96.0565 207.958 98.0935 207.958 Q103.464 207.958 106.658 210.644 Q109.853 213.329 109.853 217.82 Q109.853 219.949 109.043 221.87 Q108.256 223.769 106.149 226.361 Q105.57 227.032 102.469 230.25 Q99.3667 233.444 93.7186 239.208 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip932)" style="stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="220.841,588.319 244.573,858.668 268.304,596.062 292.036,646.767 315.767,627.112 339.499,1270.6 363.231,1037.22 386.962,768.021 410.694,140.661 434.426,1032.82 458.157,673.717 481.889,995.803 505.621,1085.18 529.352,785.008 553.084,720.909 576.815,1033.38 600.547,1103.72 624.279,1388.23 648.01,644.527 671.742,659.682 695.474,1199.12 719.205,676.205 742.937,464.464 766.669,1000.3 790.4,1154.11 814.132,622.921 837.863,967.058 861.595,1098.53 885.327,1134.19 909.058,643.688 932.79,780.262 956.522,852.486 980.253,382.538 1003.98,386.571 1027.72,513.692 1051.45,533.359 1075.18,451.545 1098.91,888.772 1122.64,823.516 1146.37,1093.31 1170.11,670.98 1193.84,1381.49 1217.57,1223.51 1241.3,1153.63 1265.03,916.248 1288.76,1375.72 1312.5,789.595 1336.23,824.184 1359.96,374.099 1383.69,1269.96 1407.42,545.101 1431.15,1751.15 1454.89,1122.18 1478.62,1155.61 1502.35,441.025 1526.08,1459.81 1549.81,382.649 1573.54,537.704 1597.28,686.83 1621.01,1229.3 1644.74,1135.12 1668.47,1243.77 1692.2,596.358 1715.93,755.876 1739.67,520.217 1763.4,726.494 1787.13,756.65 1810.86,957.501 1834.59,1504.51 1858.32,969.939 1882.06,1321.18 1905.79,879.038 1929.52,1044.52 1953.25,828.307 1976.98,643.972 2000.71,1230.09 2024.45,96.8724 2048.18,574.996 2071.91,1514.69 2095.64,846.474 2119.37,1274.97 2143.1,663.916 2166.84,883.641 2190.57,715.986 2214.3,923.377 2238.03,514.634 2261.76,999.309 2285.49,608.819 2309.22,754.41 2332.96,481.276 2356.69,1100.33 2380.42,1289.35 2404.15,340.749 2427.88,665.668 2451.61,891.597 2475.35,944 2499.08,431.189 2522.81,499.892 2546.54,1052.95 2570.27,1062.52 "></polyline>
<path clip-path="url(#clip930)" d="M233.371 1742.33 L534.841 1742.33 L534.841 1638.65 L233.371 1638.65  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip930)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="233.371,1742.33 534.841,1742.33 534.841,1638.65 233.371,1638.65 233.371,1742.33 "></polyline>
<polyline clip-path="url(#clip930)" style="stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="261.042,1690.49 427.069,1690.49 "></polyline>
<path clip-path="url(#clip930)" d="M468.582 1710.18 Q466.777 1714.81 465.064 1716.22 Q463.351 1717.63 460.481 1717.63 L457.078 1717.63 L457.078 1714.06 L459.578 1714.06 Q461.337 1714.06 462.309 1713.23 Q463.282 1712.4 464.462 1709.3 L465.226 1707.35 L454.74 1681.84 L459.254 1681.84 L467.356 1702.12 L475.457 1681.84 L479.971 1681.84 L468.582 1710.18 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip930)" d="M487.263 1703.83 L494.902 1703.83 L494.902 1677.47 L486.592 1679.13 L486.592 1674.87 L494.855 1673.21 L499.531 1673.21 L499.531 1703.83 L507.17 1703.83 L507.17 1707.77 L487.263 1707.77 L487.263 1703.83 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path></svg>
</div>
</div>
<p>Note: thay vì <code>ep</code> chúng ta có thể dùng các ký tự khoa học như epsilon bằng cách <code>\epsilon&lt;TAB&gt;</code> .</p>
<p><strong>Mảng</strong>: <code>ep</code> trong ví dụ trên chính là một mảng (array).</p>
<div id="19302555" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(ep)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="5">
<div class="ansi-escaped-output">
<pre>Vector{Float64}<span class="ansi-bright-black-fg"> (alias for </span><span class="ansi-bright-black-fg">Array{Float64, 1}</span><span class="ansi-bright-black-fg">)</span></pre>
</div>
</div>
</div>
<p>Trích xuất 5 thành tố đầu tiên của mảng</p>
<div id="8e4199eb" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb6-1">ep[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Julia là một ngôn ngữ 1-index (như MATLAB hay Fortran, chứ không phải 0 như Python hay C)</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>5-element Vector{Float64}:
 0.8575040389658757
 0.005335428164054084
 0.8330974941796573
 0.673270529185323
 0.7352249380457324</code></pre>
</div>
</div>
<p>Để tìm kiếm trợ giúp và ví dụ cho một hàm, dùng <code>?</code>:</p>
<div id="fb247e10" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># help?&gt; typeof</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># search: typeof typejoin TypeError</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   typeof(x)</span></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   Get the concrete type of x.</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   See also eltype.</span></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   Examples</span></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ≡≡≡≡≡≡≡≡≡≡</span></span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   julia&gt; a = 1//2;</span></span>
<span id="cb8-14">  </span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   julia&gt; typeof(a)</span></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   Rational{Int64}</span></span>
<span id="cb8-17">  </span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   julia&gt; M = [1 2; 3.5 4];</span></span>
<span id="cb8-19">  </span>
<span id="cb8-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   julia&gt; typeof(M)</span></span>
<span id="cb8-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   Matrix{Float64} (alias for Array{Float64, 2})</span></span></code></pre></div>
</details>
</div>
<p><strong>Vòng lặp</strong>: hãy thử viết lại quy trình tạo random trên bằng <code>for loops</code>.</p>
<div id="08e20d1a" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># poor style</span></span>
<span id="cb9-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> </span>
<span id="cb9-3">ep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zeros</span>(n) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create an array with 0.0 as initial value</span></span>
<span id="cb9-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the index is looped for all 1:n, but none vector of those indices is created.</span></span>
<span id="cb9-5">    ep[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">randn</span>()</span>
<span id="cb9-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># indicates the end of a loop</span></span></code></pre></div>
</details>
</div>
<p>The word&nbsp;<code>in</code>&nbsp;from the&nbsp;<code>for</code>&nbsp;loop can be replaced by either&nbsp;<code>∈</code>&nbsp;or&nbsp;<code>=</code>.</p>
<p>Code trên thành công tạo ra các giá trị cho mảng <code>ep</code>, tuy nhiên mối quan hệ giữa <code>i</code> và <code>ep</code> được thể hiện không tường minh. Để cải thiện, hãy dùng <code>eachindex</code>:</p>
<div id="80902ecd" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># better style</span></span>
<span id="cb10-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb10-3">ep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zeros</span>(n)</span>
<span id="cb10-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eachindex</span>(ep)</span>
<span id="cb10-5">    ep[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">randn</span>()</span>
<span id="cb10-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span></code></pre></div>
</details>
</div>
<p>Vòng lặp rất có hiệu quả về mặt bộ nhớ tuy nhiên lợi ích chính của nó là (1) thể hiện mã một cách rõ ràng hơn, ít mắc lỗi chính tả hơn, và (2) cho phép trình biên dịch linh hoạt tạo mã nhanh một cách sáng tạo.</p>
<p>Trong Julia, chúng ta cũng có thể loop một array trực tiệp, như ví dụ dưới đây:</p>
<div id="1e6c7656" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb11-1">ep_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># need to use 0.0 rather than 0</span></span>
<span id="cb11-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb11-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ep_eval <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ep[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>m]</span>
<span id="cb11-4">    ep_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ep_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ep_eval</span>
<span id="cb11-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb11-6">ep_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ep_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> m</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>-0.06355262620335231</code></pre>
</div>
</div>
<p>với <code>ep[1:m]</code> trả về các giá trị của vector <code>1</code> đến <code>m</code>.</p>
<p>Julia cũng có các operator/function có sẵn để kiểm tra các kết quả này.</p>
<div id="80b89060" class="cell" data-execution_count="10">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb13-1">ep_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">≈</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(ep[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>m])</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isapprox</span>(ep_mean, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(ep[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>m])) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># equivalent</span></span>
<span id="cb13-3">ep_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">≈</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(ep[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>m]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> m</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>true</code></pre>
</div>
</div>
<p>Gõ <code>\approx&lt;TAB&gt;</code> .</p>
<p><code>≈</code> và <code>isapprox</code> dùng để kiểm tra đẳng thức (equality), khác với giá trị (<code>==</code>), sử dụng cho số và các loại khác.</p>
<p><strong>Định nghĩa hàm</strong>: để thực hành, tiếp tục sử dụng <code>for</code> để viết một hàm biểu diễn lại quá trình trên, nhưng thú vị hơn thì thử bình phương thay vì các trị số random đơn thuần xem sao.</p>
<div id="bbd625b4" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># poor style</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generatedata</span>(n)</span>
<span id="cb15-3">    ep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zeros</span>(n)</span>
<span id="cb15-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eachindex</span>(ep)</span>
<span id="cb15-5">        ep[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">randn</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># squaring the result</span></span>
<span id="cb15-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb15-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ep</span>
<span id="cb15-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb15-9"></span>
<span id="cb15-10">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generatedata</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb15-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(data)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<!--?xml version="1.0" encoding="utf-8"?-->
<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="672" height="480" viewbox="0 0 2688 1920">
<defs>
  <clippath id="clip020">
    <rect x="0" y="0" width="2688" height="1920"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip020)" d="M0 1920 L2688 1920 L2688 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip021">
    <rect x="537" y="0" width="1883" height="1883"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip020)" d="M158.992 1800.78 L2640.76 1800.78 L2640.76 47.2441 L158.992 47.2441  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip022">
    <rect x="158" y="47" width="2483" height="1755"></rect>
  </clippath>
</defs>
<polyline clip-path="url(#clip022)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="489.374,1800.78 489.374,47.2441 "></polyline>
<polyline clip-path="url(#clip022)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1009.66,1800.78 1009.66,47.2441 "></polyline>
<polyline clip-path="url(#clip022)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1529.95,1800.78 1529.95,47.2441 "></polyline>
<polyline clip-path="url(#clip022)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2050.23,1800.78 2050.23,47.2441 "></polyline>
<polyline clip-path="url(#clip022)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2570.52,1800.78 2570.52,47.2441 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="158.992,1800.78 2640.76,1800.78 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="489.374,1800.78 489.374,1781.88 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1009.66,1800.78 1009.66,1781.88 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1529.95,1800.78 1529.95,1781.88 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2050.23,1800.78 2050.23,1781.88 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2570.52,1800.78 2570.52,1781.88 "></polyline>
<path clip-path="url(#clip020)" d="M484.026 1861.55 L500.346 1861.55 L500.346 1865.48 L478.402 1865.48 L478.402 1861.55 Q481.064 1858.79 485.647 1854.16 Q490.253 1849.51 491.434 1848.17 Q493.679 1845.65 494.559 1843.91 Q495.462 1842.15 495.462 1840.46 Q495.462 1837.71 493.517 1835.97 Q491.596 1834.23 488.494 1834.23 Q486.295 1834.23 483.841 1835 Q481.411 1835.76 478.633 1837.31 L478.633 1832.59 Q481.457 1831.46 483.911 1830.88 Q486.364 1830.3 488.401 1830.3 Q493.772 1830.3 496.966 1832.98 Q500.161 1835.67 500.161 1840.16 Q500.161 1842.29 499.35 1844.21 Q498.563 1846.11 496.457 1848.7 Q495.878 1849.37 492.776 1852.59 Q489.675 1855.78 484.026 1861.55 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M1012.67 1835 L1000.86 1853.45 L1012.67 1853.45 L1012.67 1835 M1011.44 1830.92 L1017.32 1830.92 L1017.32 1853.45 L1022.25 1853.45 L1022.25 1857.34 L1017.32 1857.34 L1017.32 1865.48 L1012.67 1865.48 L1012.67 1857.34 L997.067 1857.34 L997.067 1852.82 L1011.44 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M1530.35 1846.34 Q1527.2 1846.34 1525.35 1848.49 Q1523.52 1850.65 1523.52 1854.4 Q1523.52 1858.12 1525.35 1860.3 Q1527.2 1862.45 1530.35 1862.45 Q1533.5 1862.45 1535.33 1860.3 Q1537.18 1858.12 1537.18 1854.4 Q1537.18 1850.65 1535.33 1848.49 Q1533.5 1846.34 1530.35 1846.34 M1539.63 1831.69 L1539.63 1835.95 Q1537.87 1835.11 1536.07 1834.67 Q1534.29 1834.23 1532.53 1834.23 Q1527.9 1834.23 1525.44 1837.36 Q1523.01 1840.48 1522.67 1846.8 Q1524.03 1844.79 1526.09 1843.72 Q1528.15 1842.64 1530.63 1842.64 Q1535.84 1842.64 1538.85 1845.81 Q1541.88 1848.96 1541.88 1854.4 Q1541.88 1859.72 1538.73 1862.94 Q1535.58 1866.15 1530.35 1866.15 Q1524.36 1866.15 1521.18 1861.57 Q1518.01 1856.96 1518.01 1848.24 Q1518.01 1840.04 1521.9 1835.18 Q1525.79 1830.3 1532.34 1830.3 Q1534.1 1830.3 1535.88 1830.65 Q1537.69 1830.99 1539.63 1831.69 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M2050.23 1849.07 Q2046.9 1849.07 2044.98 1850.85 Q2043.08 1852.64 2043.08 1855.76 Q2043.08 1858.89 2044.98 1860.67 Q2046.9 1862.45 2050.23 1862.45 Q2053.56 1862.45 2055.49 1860.67 Q2057.41 1858.86 2057.41 1855.76 Q2057.41 1852.64 2055.49 1850.85 Q2053.59 1849.07 2050.23 1849.07 M2045.56 1847.08 Q2042.55 1846.34 2040.86 1844.28 Q2039.19 1842.22 2039.19 1839.26 Q2039.19 1835.11 2042.13 1832.71 Q2045.09 1830.3 2050.23 1830.3 Q2055.39 1830.3 2058.33 1832.71 Q2061.27 1835.11 2061.27 1839.26 Q2061.27 1842.22 2059.58 1844.28 Q2057.92 1846.34 2054.93 1847.08 Q2058.31 1847.87 2060.19 1850.16 Q2062.08 1852.45 2062.08 1855.76 Q2062.08 1860.78 2059 1863.47 Q2055.95 1866.15 2050.23 1866.15 Q2044.51 1866.15 2041.44 1863.47 Q2038.38 1860.78 2038.38 1855.76 Q2038.38 1852.45 2040.28 1850.16 Q2042.18 1847.87 2045.56 1847.08 M2043.84 1839.7 Q2043.84 1842.38 2045.51 1843.89 Q2047.2 1845.39 2050.23 1845.39 Q2053.24 1845.39 2054.93 1843.89 Q2056.64 1842.38 2056.64 1839.7 Q2056.64 1837.01 2054.93 1835.51 Q2053.24 1834 2050.23 1834 Q2047.2 1834 2045.51 1835.51 Q2043.84 1837.01 2043.84 1839.7 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M2545.2 1861.55 L2552.84 1861.55 L2552.84 1835.18 L2544.53 1836.85 L2544.53 1832.59 L2552.8 1830.92 L2557.47 1830.92 L2557.47 1861.55 L2565.11 1861.55 L2565.11 1865.48 L2545.2 1865.48 L2545.2 1861.55 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M2584.56 1834 Q2580.95 1834 2579.12 1837.57 Q2577.31 1841.11 2577.31 1848.24 Q2577.31 1855.34 2579.12 1858.91 Q2580.95 1862.45 2584.56 1862.45 Q2588.19 1862.45 2590 1858.91 Q2591.83 1855.34 2591.83 1848.24 Q2591.83 1841.11 2590 1837.57 Q2588.19 1834 2584.56 1834 M2584.56 1830.3 Q2590.37 1830.3 2593.42 1834.9 Q2596.5 1839.49 2596.5 1848.24 Q2596.5 1856.96 2593.42 1861.57 Q2590.37 1866.15 2584.56 1866.15 Q2578.75 1866.15 2575.67 1861.57 Q2572.61 1856.96 2572.61 1848.24 Q2572.61 1839.49 2575.67 1834.9 Q2578.75 1830.3 2584.56 1830.3 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip022)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="158.992,1755.17 2640.76,1755.17 "></polyline>
<polyline clip-path="url(#clip022)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="158.992,1414.79 2640.76,1414.79 "></polyline>
<polyline clip-path="url(#clip022)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="158.992,1074.41 2640.76,1074.41 "></polyline>
<polyline clip-path="url(#clip022)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="158.992,734.031 2640.76,734.031 "></polyline>
<polyline clip-path="url(#clip022)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="158.992,393.651 2640.76,393.651 "></polyline>
<polyline clip-path="url(#clip022)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="158.992,53.2715 2640.76,53.2715 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="158.992,1800.78 158.992,47.2441 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="158.992,1755.17 177.89,1755.17 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="158.992,1414.79 177.89,1414.79 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="158.992,1074.41 177.89,1074.41 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="158.992,734.031 177.89,734.031 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="158.992,393.651 177.89,393.651 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="158.992,53.2715 177.89,53.2715 "></polyline>
<path clip-path="url(#clip020)" d="M61.4965 1740.97 Q57.8854 1740.97 56.0567 1744.53 Q54.2512 1748.08 54.2512 1755.21 Q54.2512 1762.31 56.0567 1765.88 Q57.8854 1769.42 61.4965 1769.42 Q65.1307 1769.42 66.9363 1765.88 Q68.765 1762.31 68.765 1755.21 Q68.765 1748.08 66.9363 1744.53 Q65.1307 1740.97 61.4965 1740.97 M61.4965 1737.27 Q67.3067 1737.27 70.3622 1741.87 Q73.4409 1746.46 73.4409 1755.21 Q73.4409 1763.93 70.3622 1768.54 Q67.3067 1773.12 61.4965 1773.12 Q55.6864 1773.12 52.6077 1768.54 Q49.5521 1763.93 49.5521 1755.21 Q49.5521 1746.46 52.6077 1741.87 Q55.6864 1737.27 61.4965 1737.27 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M81.6584 1766.57 L86.5427 1766.57 L86.5427 1772.45 L81.6584 1772.45 L81.6584 1766.57 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M106.728 1740.97 Q103.117 1740.97 101.288 1744.53 Q99.4824 1748.08 99.4824 1755.21 Q99.4824 1762.31 101.288 1765.88 Q103.117 1769.42 106.728 1769.42 Q110.362 1769.42 112.168 1765.88 Q113.996 1762.31 113.996 1755.21 Q113.996 1748.08 112.168 1744.53 Q110.362 1740.97 106.728 1740.97 M106.728 1737.27 Q112.538 1737.27 115.593 1741.87 Q118.672 1746.46 118.672 1755.21 Q118.672 1763.93 115.593 1768.54 Q112.538 1773.12 106.728 1773.12 Q100.918 1773.12 97.8389 1768.54 Q94.7834 1763.93 94.7834 1755.21 Q94.7834 1746.46 97.8389 1741.87 Q100.918 1737.27 106.728 1737.27 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M62.4919 1400.59 Q58.8808 1400.59 57.0521 1404.15 Q55.2465 1407.7 55.2465 1414.83 Q55.2465 1421.93 57.0521 1425.5 Q58.8808 1429.04 62.4919 1429.04 Q66.1261 1429.04 67.9317 1425.5 Q69.7604 1421.93 69.7604 1414.83 Q69.7604 1407.7 67.9317 1404.15 Q66.1261 1400.59 62.4919 1400.59 M62.4919 1396.89 Q68.302 1396.89 71.3576 1401.49 Q74.4363 1406.08 74.4363 1414.83 Q74.4363 1423.55 71.3576 1428.16 Q68.302 1432.74 62.4919 1432.74 Q56.6817 1432.74 53.603 1428.16 Q50.5475 1423.55 50.5475 1414.83 Q50.5475 1406.08 53.603 1401.49 Q56.6817 1396.89 62.4919 1396.89 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M82.6538 1426.19 L87.538 1426.19 L87.538 1432.07 L82.6538 1432.07 L82.6538 1426.19 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M97.7695 1397.51 L116.126 1397.51 L116.126 1401.45 L102.052 1401.45 L102.052 1409.92 Q103.07 1409.57 104.089 1409.41 Q105.107 1409.22 106.126 1409.22 Q111.913 1409.22 115.293 1412.4 Q118.672 1415.57 118.672 1420.98 Q118.672 1426.56 115.2 1429.66 Q111.728 1432.74 105.408 1432.74 Q103.232 1432.74 100.964 1432.37 Q98.7185 1432 96.3111 1431.26 L96.3111 1426.56 Q98.3945 1427.7 100.617 1428.25 Q102.839 1428.81 105.316 1428.81 Q109.32 1428.81 111.658 1426.7 Q113.996 1424.59 113.996 1420.98 Q113.996 1417.37 111.658 1415.27 Q109.32 1413.16 105.316 1413.16 Q103.441 1413.16 101.566 1413.58 Q99.7139 1413.99 97.7695 1414.87 L97.7695 1397.51 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M52.3067 1087.76 L59.9456 1087.76 L59.9456 1061.39 L51.6354 1063.06 L51.6354 1058.8 L59.8993 1057.13 L64.5752 1057.13 L64.5752 1087.76 L72.214 1087.76 L72.214 1091.69 L52.3067 1091.69 L52.3067 1087.76 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M81.6584 1085.81 L86.5427 1085.81 L86.5427 1091.69 L81.6584 1091.69 L81.6584 1085.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M106.728 1060.21 Q103.117 1060.21 101.288 1063.77 Q99.4824 1067.32 99.4824 1074.45 Q99.4824 1081.55 101.288 1085.12 Q103.117 1088.66 106.728 1088.66 Q110.362 1088.66 112.168 1085.12 Q113.996 1081.55 113.996 1074.45 Q113.996 1067.32 112.168 1063.77 Q110.362 1060.21 106.728 1060.21 M106.728 1056.51 Q112.538 1056.51 115.593 1061.11 Q118.672 1065.7 118.672 1074.45 Q118.672 1083.17 115.593 1087.78 Q112.538 1092.36 106.728 1092.36 Q100.918 1092.36 97.8389 1087.78 Q94.7834 1083.17 94.7834 1074.45 Q94.7834 1065.7 97.8389 1061.11 Q100.918 1056.51 106.728 1056.51 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M53.3021 747.376 L60.941 747.376 L60.941 721.011 L52.6308 722.677 L52.6308 718.418 L60.8947 716.751 L65.5706 716.751 L65.5706 747.376 L73.2094 747.376 L73.2094 751.311 L53.3021 751.311 L53.3021 747.376 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M82.6538 745.432 L87.538 745.432 L87.538 751.311 L82.6538 751.311 L82.6538 745.432 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M97.7695 716.751 L116.126 716.751 L116.126 720.687 L102.052 720.687 L102.052 729.159 Q103.07 728.812 104.089 728.65 Q105.107 728.464 106.126 728.464 Q111.913 728.464 115.293 731.636 Q118.672 734.807 118.672 740.224 Q118.672 745.802 115.2 748.904 Q111.728 751.983 105.408 751.983 Q103.232 751.983 100.964 751.612 Q98.7185 751.242 96.3111 750.501 L96.3111 745.802 Q98.3945 746.936 100.617 747.492 Q102.839 748.048 105.316 748.048 Q109.32 748.048 111.658 745.941 Q113.996 743.835 113.996 740.224 Q113.996 736.612 111.658 734.506 Q109.32 732.399 105.316 732.399 Q103.441 732.399 101.566 732.816 Q99.7139 733.233 97.7695 734.112 L97.7695 716.751 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M55.5243 406.996 L71.8437 406.996 L71.8437 410.931 L49.8993 410.931 L49.8993 406.996 Q52.5614 404.242 57.1447 399.612 Q61.7511 394.959 62.9317 393.617 Q65.177 391.094 66.0567 389.358 Q66.9594 387.598 66.9594 385.908 Q66.9594 383.154 65.015 381.418 Q63.0937 379.682 59.9919 379.682 Q57.7928 379.682 55.3391 380.446 Q52.9086 381.209 50.1308 382.76 L50.1308 378.038 Q52.9549 376.904 55.4086 376.325 Q57.8623 375.746 59.8993 375.746 Q65.2696 375.746 68.4641 378.432 Q71.6585 381.117 71.6585 385.608 Q71.6585 387.737 70.8483 389.658 Q70.0613 391.557 67.9548 394.149 Q67.3761 394.82 64.2743 398.038 Q61.1724 401.232 55.5243 406.996 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M81.6584 405.052 L86.5427 405.052 L86.5427 410.931 L81.6584 410.931 L81.6584 405.052 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M106.728 379.45 Q103.117 379.45 101.288 383.015 Q99.4824 386.557 99.4824 393.686 Q99.4824 400.793 101.288 404.357 Q103.117 407.899 106.728 407.899 Q110.362 407.899 112.168 404.357 Q113.996 400.793 113.996 393.686 Q113.996 386.557 112.168 383.015 Q110.362 379.45 106.728 379.45 M106.728 375.746 Q112.538 375.746 115.593 380.353 Q118.672 384.936 118.672 393.686 Q118.672 402.413 115.593 407.019 Q112.538 411.603 106.728 411.603 Q100.918 411.603 97.8389 407.019 Q94.7834 402.413 94.7834 393.686 Q94.7834 384.936 97.8389 380.353 Q100.918 375.746 106.728 375.746 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M56.5197 66.6164 L72.839 66.6164 L72.839 70.5515 L50.8947 70.5515 L50.8947 66.6164 Q53.5567 63.8617 58.14 59.2321 Q62.7465 54.5794 63.927 53.2368 Q66.1724 50.7137 67.052 48.9776 Q67.9548 47.2183 67.9548 45.5285 Q67.9548 42.7739 66.0104 41.0378 Q64.0891 39.3017 60.9872 39.3017 Q58.7882 39.3017 56.3345 40.0656 Q53.904 40.8295 51.1262 42.3804 L51.1262 37.6582 Q53.9503 36.5239 56.4039 35.9452 Q58.8576 35.3665 60.8947 35.3665 Q66.265 35.3665 69.4594 38.0517 Q72.6539 40.7369 72.6539 45.2276 Q72.6539 47.3572 71.8437 49.2785 Q71.0566 51.1766 68.9502 53.7692 Q68.3715 54.4405 65.2696 57.6581 Q62.1678 60.8525 56.5197 66.6164 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M82.6538 64.6719 L87.538 64.6719 L87.538 70.5515 L82.6538 70.5515 L82.6538 64.6719 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M97.7695 35.9915 L116.126 35.9915 L116.126 39.9267 L102.052 39.9267 L102.052 48.3989 Q103.07 48.0516 104.089 47.8896 Q105.107 47.7044 106.126 47.7044 Q111.913 47.7044 115.293 50.8757 Q118.672 54.047 118.672 59.4636 Q118.672 65.0423 115.2 68.1441 Q111.728 71.2228 105.408 71.2228 Q103.232 71.2228 100.964 70.8524 Q98.7185 70.4821 96.3111 69.7413 L96.3111 65.0423 Q98.3945 66.1765 100.617 66.7321 Q102.839 67.2877 105.316 67.2877 Q109.32 67.2877 111.658 65.1812 Q113.996 63.0747 113.996 59.4636 Q113.996 55.8525 111.658 53.7461 Q109.32 51.6396 105.316 51.6396 Q103.441 51.6396 101.566 52.0563 Q99.7139 52.4729 97.7695 53.3525 L97.7695 35.9915 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip022)" style="stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="229.231,1741.39 489.374,1750.07 749.517,1740.89 1009.66,1751.15 1269.8,1738.98 1529.95,1011.34 1790.09,882.995 2050.23,1397.57 2310.37,492.259 2570.52,96.8724 "></polyline>
<path clip-path="url(#clip020)" d="M241.718 209.375 L542.324 209.375 L542.324 105.695 L241.718 105.695  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip020)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="241.718,209.375 542.324,209.375 542.324,105.695 241.718,105.695 241.718,209.375 "></polyline>
<polyline clip-path="url(#clip020)" style="stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="269.293,157.535 434.744,157.535 "></polyline>
<path clip-path="url(#clip020)" d="M476.161 177.223 Q474.356 181.852 472.643 183.264 Q470.93 184.676 468.06 184.676 L464.657 184.676 L464.657 181.112 L467.157 181.112 Q468.916 181.112 469.888 180.278 Q470.86 179.445 472.041 176.343 L472.805 174.399 L462.319 148.889 L466.833 148.889 L474.934 169.167 L483.036 148.889 L487.55 148.889 L476.161 177.223 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip020)" d="M494.842 170.88 L502.481 170.88 L502.481 144.515 L494.17 146.181 L494.17 141.922 L502.434 140.255 L507.11 140.255 L507.11 170.88 L514.749 170.88 L514.749 174.815 L494.842 174.815 L494.842 170.88 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path></svg>
</div>
</div>
<p>Hãy nhớ rằng <code>randn()</code> có thể trả về một vector, thử cải thiện xem.</p>
<div id="cec2e785" class="cell" data-execution_count="12">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># still poor style</span></span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generatedata</span>(n)</span>
<span id="cb16-3">    ep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">randn</span>(n) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use built in function</span></span>
<span id="cb16-4"></span>
<span id="cb16-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eachindex</span>(ep)</span>
<span id="cb16-6">        ep[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ep[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># squaring the result</span></span>
<span id="cb16-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb16-8"></span>
<span id="cb16-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ep</span>
<span id="cb16-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb16-11">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generatedata</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>5-element Vector{Float64}:
 0.4020013293531669
 3.2976715282134874
 0.2429343751757354
 0.5387018498871103
 1.2211267571308764</code></pre>
</div>
</div>
</section>
<section id="variations-on-fixed-points-chưa-biết-dịch-ntn" class="level3">
<h3 class="anchored" data-anchor-id="variations-on-fixed-points-chưa-biết-dịch-ntn">1.1.2. Variations on Fixed Points (chưa biết dịch ntn :&gt;)</h3>
</section>
</section>
<section id="julia-cơ-bản" class="level2">
<h2 class="anchored" data-anchor-id="julia-cơ-bản">1.2. Julia cơ bản</h2>
</section>
<section id="các-kiểu-dữ-liệu-cơ-bản" class="level2">
<h2 class="anchored" data-anchor-id="các-kiểu-dữ-liệu-cơ-bản">1.3. Các kiểu dữ liệu cơ bản</h2>
</section>
<section id="kiểu-dữ-liệu-và-lập-trình-tổng-quát" class="level2">
<h2 class="anchored" data-anchor-id="kiểu-dữ-liệu-và-lập-trình-tổng-quát">1.4. Kiểu dữ liệu và Lập trình tổng quát</h2>
</section>
</section>
<section id="các-thư-viện-phổ-biến-của-julia-package-ecosystem" class="level1">
<h1>2. Các thư viện phổ biến của Julia (Package Ecosystem)</h1>
<section id="generic-programming" class="level2">
<h2 class="anchored" data-anchor-id="generic-programming">2.1. Generic Programming</h2>
</section>
<section id="general-purpose-packages" class="level2">
<h2 class="anchored" data-anchor-id="general-purpose-packages">2.2. General Purpose Packages</h2>
</section>
<section id="data-and-statistics-packages" class="level2">
<h2 class="anchored" data-anchor-id="data-and-statistics-packages">2.3. Data and Statistics Packages</h2>
</section>
<section id="solvers-optimizers-and-automatic-differentiation" class="level2">
<h2 class="anchored" data-anchor-id="solvers-optimizers-and-automatic-differentiation">2.4. Solvers, Optimizers, and Automatic Differentiation</h2>


<!-- -->

</section>
</section>

 ]]></description>
  <category>QEJ</category>
  <category>Julia</category>
  <category>Quant Econ</category>
  <guid>https://lktuan.github.io/blog/2024-04-19-qej-1/</guid>
  <pubDate>Tue, 23 Apr 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-04-19-qej-1/julia_logo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>I am starting training Brazilian Jiu-jitsu</title>
  <dc:creator>Tuan Le Khac</dc:creator>
  <link>https://lktuan.github.io/blog/2024-02-28-bjj/</link>
  <description><![CDATA[ 





<p>It was 2018 when I first stumbled upon the term ‘BJJ’ when I joined a martial discussion group named <a href="https://www.facebook.com/groups/1384082055164738">“DOG Brothers Team Vietnam”</a>. There was an active club named <a href="https://www.facebook.com/RoninBjjHanoi/">“RONIN BJJ Hanoi”</a>, but I never tried to find out what BJJ was.</p>
<p>As an <a href="https://en.wikipedia.org/wiki/Somatotype_and_constitutional_psychology#The_three_types"><em>ectomorphic</em></a>, I’m 1.72 meters tall and weigh only 52kg. My strength lies in <strong>endurance</strong>, not <strong>conditioning</strong><sup>1</sup>. I can hike or walk for hours, even up to 20 kilometers. However, playing left-back in a 5-a-side football match for 15 minutes straight would be a challenge.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;<strong>Endurance</strong> is the ability to <strong><em>maintain</em></strong> a certain effort with minimal fatigue, while <strong>conditioning</strong> is the ability to <strong><em>repeat</em></strong> a certain effort with minimal fatigue. See this <a href="https://www.ypsi.de/blogs/english-articles/endurance-vs-conditioning-the-biggest-misconception-in-training-for-sports">article</a>.</p></div></div><p>So upgrade my <strong>body composition</strong> and <strong>physical strength</strong> is one task in my this year to-do-list. I contacted the Dog Brother club and inquired about <em>Kickboxing</em> class, as I’m not a fan of gyms and don’t want to bulk up. Fortunately, I spoke with Head Coach Vu Dinh Tien, a BJJ expert and one of the pioneers of BJJ in Vietnam. After learning about my goals, Coach Tien recommended BJJ. He explained that BJJ focuses on isometric strength (holding positions) and grappling-specific strength (leverage and technique), which builds lean muscle and core strength, making it a better fit for my desire to achieve a toned physique.</p>
<p>This is also the short comparision between Brazillian Jiu-jitsu &amp; Kickboxing that Gemini gave me:</p>
<table class="table-striped table-hover table">
<colgroup>
<col style="width: 21%">
<col style="width: 38%">
<col style="width: 40%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Feature</th>
<th style="text-align: left;">BJJ</th>
<th style="text-align: left;">Kickboxing</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Body Form Focus</td>
<td style="text-align: left;">Lean muscle, core strength</td>
<td style="text-align: left;">Muscle mass, sculpted physique</td>
</tr>
<tr class="even">
<td style="text-align: left;">Weight Impact</td>
<td style="text-align: left;">Can aid weight loss</td>
<td style="text-align: left;">Excellent for burning calories</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Strength Focus</td>
<td style="text-align: left;">Isometric, grappling-specific</td>
<td style="text-align: left;">Explosive power, speed</td>
</tr>
</tbody>
</table>
<p>He convinced me so that’s how I started training BJJ! 🔥🔥🔥</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lktuan.github.io/blog/2024-02-28-bjj/soi_bjj.jpg" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>My very first day training BJJ, me on the top-right corner ↗, photo credit to <a href="https://www.facebook.com/soibjj">Sói Jiu-jitsu</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>The club boasts a friendly atmosphere, with many seasoned athletes who’ve been training for years. They often take the time to help newbies like me during training sessions. Sometimes we also have head coach Tien in the class, his insights on how we and our opponents react in different situations are fascinating ~ we follow principles, not movements. We practice to develop muscle memory for various moves, but more importantly, we learn the principles that guide us in developing strategies for specific games or situations. Just like football, BJJ emphasizes positional control, but the key lies in understanding the underlying principles to adapt strategies in any situation.</p>
<p>As of June, I’ve been training in BJJ for almost 4 months. Although I did not gain significant weight because my nutrition did not meet the needs of exercise, my physical strength has improved significantly. In rolling, I was able to do basic control and escape control movements, but still didn’t know how to control my explosive energy during a match. I often use my muscles too much instead of <strong>leverage</strong> my body weight at the beginning of the match, leading to a rapid decline in fitness and losing position at the end. This definitely takes more time to improve.</p>
<p>This article is just my experience so far, so please don’t take the headline too seriously. Let’s just say, I’m not quite at the point where I size up a bigger guy and say (even think): <code>how interesting!</code> lol. (see this <a href="https://www.facebook.com/watch/?v=573772426504379">video</a> for how interesting a BJJ expert handles a bigger guy with nearly 30kg gap weight)</p>
<p>Happy training!</p>
<p>Tuan</p>


<!-- -->



 ]]></description>
  <category>life</category>
  <category>bjj</category>
  <guid>https://lktuan.github.io/blog/2024-02-28-bjj/</guid>
  <pubDate>Tue, 27 Feb 2024 17:00:00 GMT</pubDate>
  <media:content url="https://lktuan.github.io/blog/2024-02-28-bjj/how_cool_is_a_bigger_guy.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
